
GPS_IMU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc10  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000050c  0800cdf0  0800cdf0  0000ddf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d2fc  0800d2fc  0000f1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d2fc  0800d2fc  0000e2fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d304  0800d304  0000f1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d304  0800d304  0000e304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d308  0800d308  0000e308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800d30c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f28  200001d8  0800d4e4  0000f1d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002100  0800d4e4  00010100  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034b89  00000000  00000000  0000f208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000049db  00000000  00000000  00043d91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00004710  00000000  00000000  00048770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000362d  00000000  00000000  0004ce80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b51e  00000000  00000000  000504ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003295e  00000000  00000000  0007b9cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011a9ae  00000000  00000000  000ae329  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001c8cd7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0001527c  00000000  00000000  001c8d1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  001ddf98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800cdd8 	.word	0x0800cdd8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001dc 	.word	0x200001dc
 800021c:	0800cdd8 	.word	0x0800cdd8

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2uiz>:
 8000b8c:	004a      	lsls	r2, r1, #1
 8000b8e:	d211      	bcs.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b94:	d211      	bcs.n	8000bba <__aeabi_d2uiz+0x2e>
 8000b96:	d50d      	bpl.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b98:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d40e      	bmi.n	8000bc0 <__aeabi_d2uiz+0x34>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bbe:	d102      	bne.n	8000bc6 <__aeabi_d2uiz+0x3a>
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	4770      	bx	lr
 8000bc6:	f04f 0000 	mov.w	r0, #0
 8000bca:	4770      	bx	lr

08000bcc <__aeabi_uldivmod>:
 8000bcc:	b953      	cbnz	r3, 8000be4 <__aeabi_uldivmod+0x18>
 8000bce:	b94a      	cbnz	r2, 8000be4 <__aeabi_uldivmod+0x18>
 8000bd0:	2900      	cmp	r1, #0
 8000bd2:	bf08      	it	eq
 8000bd4:	2800      	cmpeq	r0, #0
 8000bd6:	bf1c      	itt	ne
 8000bd8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bdc:	f04f 30ff 	movne.w	r0, #4294967295
 8000be0:	f000 b9a0 	b.w	8000f24 <__aeabi_idiv0>
 8000be4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bec:	f000 f83c 	bl	8000c68 <__udivmoddi4>
 8000bf0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf8:	b004      	add	sp, #16
 8000bfa:	4770      	bx	lr

08000bfc <__aeabi_d2lz>:
 8000bfc:	b538      	push	{r3, r4, r5, lr}
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2300      	movs	r3, #0
 8000c02:	4604      	mov	r4, r0
 8000c04:	460d      	mov	r5, r1
 8000c06:	f7ff ff99 	bl	8000b3c <__aeabi_dcmplt>
 8000c0a:	b928      	cbnz	r0, 8000c18 <__aeabi_d2lz+0x1c>
 8000c0c:	4620      	mov	r0, r4
 8000c0e:	4629      	mov	r1, r5
 8000c10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c14:	f000 b80a 	b.w	8000c2c <__aeabi_d2ulz>
 8000c18:	4620      	mov	r0, r4
 8000c1a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c1e:	f000 f805 	bl	8000c2c <__aeabi_d2ulz>
 8000c22:	4240      	negs	r0, r0
 8000c24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c28:	bd38      	pop	{r3, r4, r5, pc}
 8000c2a:	bf00      	nop

08000c2c <__aeabi_d2ulz>:
 8000c2c:	b5d0      	push	{r4, r6, r7, lr}
 8000c2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c60 <__aeabi_d2ulz+0x34>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	4606      	mov	r6, r0
 8000c34:	460f      	mov	r7, r1
 8000c36:	f7ff fd0f 	bl	8000658 <__aeabi_dmul>
 8000c3a:	f7ff ffa7 	bl	8000b8c <__aeabi_d2uiz>
 8000c3e:	4604      	mov	r4, r0
 8000c40:	f7ff fc90 	bl	8000564 <__aeabi_ui2d>
 8000c44:	4b07      	ldr	r3, [pc, #28]	@ (8000c64 <__aeabi_d2ulz+0x38>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	f7ff fd06 	bl	8000658 <__aeabi_dmul>
 8000c4c:	4602      	mov	r2, r0
 8000c4e:	460b      	mov	r3, r1
 8000c50:	4630      	mov	r0, r6
 8000c52:	4639      	mov	r1, r7
 8000c54:	f7ff fb48 	bl	80002e8 <__aeabi_dsub>
 8000c58:	f7ff ff98 	bl	8000b8c <__aeabi_d2uiz>
 8000c5c:	4621      	mov	r1, r4
 8000c5e:	bdd0      	pop	{r4, r6, r7, pc}
 8000c60:	3df00000 	.word	0x3df00000
 8000c64:	41f00000 	.word	0x41f00000

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9d08      	ldr	r5, [sp, #32]
 8000c6e:	460c      	mov	r4, r1
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d14e      	bne.n	8000d12 <__udivmoddi4+0xaa>
 8000c74:	4694      	mov	ip, r2
 8000c76:	458c      	cmp	ip, r1
 8000c78:	4686      	mov	lr, r0
 8000c7a:	fab2 f282 	clz	r2, r2
 8000c7e:	d962      	bls.n	8000d46 <__udivmoddi4+0xde>
 8000c80:	b14a      	cbz	r2, 8000c96 <__udivmoddi4+0x2e>
 8000c82:	f1c2 0320 	rsb	r3, r2, #32
 8000c86:	4091      	lsls	r1, r2
 8000c88:	fa20 f303 	lsr.w	r3, r0, r3
 8000c8c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c90:	4319      	orrs	r1, r3
 8000c92:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c9a:	fa1f f68c 	uxth.w	r6, ip
 8000c9e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ca2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ca6:	fb07 1114 	mls	r1, r7, r4, r1
 8000caa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cae:	fb04 f106 	mul.w	r1, r4, r6
 8000cb2:	4299      	cmp	r1, r3
 8000cb4:	d90a      	bls.n	8000ccc <__udivmoddi4+0x64>
 8000cb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cba:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cbe:	f080 8112 	bcs.w	8000ee6 <__udivmoddi4+0x27e>
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	f240 810f 	bls.w	8000ee6 <__udivmoddi4+0x27e>
 8000cc8:	3c02      	subs	r4, #2
 8000cca:	4463      	add	r3, ip
 8000ccc:	1a59      	subs	r1, r3, r1
 8000cce:	fa1f f38e 	uxth.w	r3, lr
 8000cd2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cd6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cde:	fb00 f606 	mul.w	r6, r0, r6
 8000ce2:	429e      	cmp	r6, r3
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x94>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cee:	f080 80fc 	bcs.w	8000eea <__udivmoddi4+0x282>
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	f240 80f9 	bls.w	8000eea <__udivmoddi4+0x282>
 8000cf8:	4463      	add	r3, ip
 8000cfa:	3802      	subs	r0, #2
 8000cfc:	1b9b      	subs	r3, r3, r6
 8000cfe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d02:	2100      	movs	r1, #0
 8000d04:	b11d      	cbz	r5, 8000d0e <__udivmoddi4+0xa6>
 8000d06:	40d3      	lsrs	r3, r2
 8000d08:	2200      	movs	r2, #0
 8000d0a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d905      	bls.n	8000d22 <__udivmoddi4+0xba>
 8000d16:	b10d      	cbz	r5, 8000d1c <__udivmoddi4+0xb4>
 8000d18:	e9c5 0100 	strd	r0, r1, [r5]
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4608      	mov	r0, r1
 8000d20:	e7f5      	b.n	8000d0e <__udivmoddi4+0xa6>
 8000d22:	fab3 f183 	clz	r1, r3
 8000d26:	2900      	cmp	r1, #0
 8000d28:	d146      	bne.n	8000db8 <__udivmoddi4+0x150>
 8000d2a:	42a3      	cmp	r3, r4
 8000d2c:	d302      	bcc.n	8000d34 <__udivmoddi4+0xcc>
 8000d2e:	4290      	cmp	r0, r2
 8000d30:	f0c0 80f0 	bcc.w	8000f14 <__udivmoddi4+0x2ac>
 8000d34:	1a86      	subs	r6, r0, r2
 8000d36:	eb64 0303 	sbc.w	r3, r4, r3
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	2d00      	cmp	r5, #0
 8000d3e:	d0e6      	beq.n	8000d0e <__udivmoddi4+0xa6>
 8000d40:	e9c5 6300 	strd	r6, r3, [r5]
 8000d44:	e7e3      	b.n	8000d0e <__udivmoddi4+0xa6>
 8000d46:	2a00      	cmp	r2, #0
 8000d48:	f040 8090 	bne.w	8000e6c <__udivmoddi4+0x204>
 8000d4c:	eba1 040c 	sub.w	r4, r1, ip
 8000d50:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d54:	fa1f f78c 	uxth.w	r7, ip
 8000d58:	2101      	movs	r1, #1
 8000d5a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb08 4416 	mls	r4, r8, r6, r4
 8000d66:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d6a:	fb07 f006 	mul.w	r0, r7, r6
 8000d6e:	4298      	cmp	r0, r3
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0x11c>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x11a>
 8000d7c:	4298      	cmp	r0, r3
 8000d7e:	f200 80cd 	bhi.w	8000f1c <__udivmoddi4+0x2b4>
 8000d82:	4626      	mov	r6, r4
 8000d84:	1a1c      	subs	r4, r3, r0
 8000d86:	fa1f f38e 	uxth.w	r3, lr
 8000d8a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d8e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d96:	fb00 f707 	mul.w	r7, r0, r7
 8000d9a:	429f      	cmp	r7, r3
 8000d9c:	d908      	bls.n	8000db0 <__udivmoddi4+0x148>
 8000d9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000da2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000da6:	d202      	bcs.n	8000dae <__udivmoddi4+0x146>
 8000da8:	429f      	cmp	r7, r3
 8000daa:	f200 80b0 	bhi.w	8000f0e <__udivmoddi4+0x2a6>
 8000dae:	4620      	mov	r0, r4
 8000db0:	1bdb      	subs	r3, r3, r7
 8000db2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db6:	e7a5      	b.n	8000d04 <__udivmoddi4+0x9c>
 8000db8:	f1c1 0620 	rsb	r6, r1, #32
 8000dbc:	408b      	lsls	r3, r1
 8000dbe:	fa22 f706 	lsr.w	r7, r2, r6
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dc8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dcc:	ea43 030c 	orr.w	r3, r3, ip
 8000dd0:	40f4      	lsrs	r4, r6
 8000dd2:	fa00 f801 	lsl.w	r8, r0, r1
 8000dd6:	0c38      	lsrs	r0, r7, #16
 8000dd8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ddc:	fbb4 fef0 	udiv	lr, r4, r0
 8000de0:	fa1f fc87 	uxth.w	ip, r7
 8000de4:	fb00 441e 	mls	r4, r0, lr, r4
 8000de8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dec:	fb0e f90c 	mul.w	r9, lr, ip
 8000df0:	45a1      	cmp	r9, r4
 8000df2:	fa02 f201 	lsl.w	r2, r2, r1
 8000df6:	d90a      	bls.n	8000e0e <__udivmoddi4+0x1a6>
 8000df8:	193c      	adds	r4, r7, r4
 8000dfa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dfe:	f080 8084 	bcs.w	8000f0a <__udivmoddi4+0x2a2>
 8000e02:	45a1      	cmp	r9, r4
 8000e04:	f240 8081 	bls.w	8000f0a <__udivmoddi4+0x2a2>
 8000e08:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e0c:	443c      	add	r4, r7
 8000e0e:	eba4 0409 	sub.w	r4, r4, r9
 8000e12:	fa1f f983 	uxth.w	r9, r3
 8000e16:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e1a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e1e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e22:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e26:	45a4      	cmp	ip, r4
 8000e28:	d907      	bls.n	8000e3a <__udivmoddi4+0x1d2>
 8000e2a:	193c      	adds	r4, r7, r4
 8000e2c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e30:	d267      	bcs.n	8000f02 <__udivmoddi4+0x29a>
 8000e32:	45a4      	cmp	ip, r4
 8000e34:	d965      	bls.n	8000f02 <__udivmoddi4+0x29a>
 8000e36:	3b02      	subs	r3, #2
 8000e38:	443c      	add	r4, r7
 8000e3a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e3e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e42:	eba4 040c 	sub.w	r4, r4, ip
 8000e46:	429c      	cmp	r4, r3
 8000e48:	46ce      	mov	lr, r9
 8000e4a:	469c      	mov	ip, r3
 8000e4c:	d351      	bcc.n	8000ef2 <__udivmoddi4+0x28a>
 8000e4e:	d04e      	beq.n	8000eee <__udivmoddi4+0x286>
 8000e50:	b155      	cbz	r5, 8000e68 <__udivmoddi4+0x200>
 8000e52:	ebb8 030e 	subs.w	r3, r8, lr
 8000e56:	eb64 040c 	sbc.w	r4, r4, ip
 8000e5a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e5e:	40cb      	lsrs	r3, r1
 8000e60:	431e      	orrs	r6, r3
 8000e62:	40cc      	lsrs	r4, r1
 8000e64:	e9c5 6400 	strd	r6, r4, [r5]
 8000e68:	2100      	movs	r1, #0
 8000e6a:	e750      	b.n	8000d0e <__udivmoddi4+0xa6>
 8000e6c:	f1c2 0320 	rsb	r3, r2, #32
 8000e70:	fa20 f103 	lsr.w	r1, r0, r3
 8000e74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e78:	fa24 f303 	lsr.w	r3, r4, r3
 8000e7c:	4094      	lsls	r4, r2
 8000e7e:	430c      	orrs	r4, r1
 8000e80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e84:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e88:	fa1f f78c 	uxth.w	r7, ip
 8000e8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e90:	fb08 3110 	mls	r1, r8, r0, r3
 8000e94:	0c23      	lsrs	r3, r4, #16
 8000e96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e9a:	fb00 f107 	mul.w	r1, r0, r7
 8000e9e:	4299      	cmp	r1, r3
 8000ea0:	d908      	bls.n	8000eb4 <__udivmoddi4+0x24c>
 8000ea2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ea6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eaa:	d22c      	bcs.n	8000f06 <__udivmoddi4+0x29e>
 8000eac:	4299      	cmp	r1, r3
 8000eae:	d92a      	bls.n	8000f06 <__udivmoddi4+0x29e>
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	4463      	add	r3, ip
 8000eb4:	1a5b      	subs	r3, r3, r1
 8000eb6:	b2a4      	uxth	r4, r4
 8000eb8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ebc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ec0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ec4:	fb01 f307 	mul.w	r3, r1, r7
 8000ec8:	42a3      	cmp	r3, r4
 8000eca:	d908      	bls.n	8000ede <__udivmoddi4+0x276>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ed4:	d213      	bcs.n	8000efe <__udivmoddi4+0x296>
 8000ed6:	42a3      	cmp	r3, r4
 8000ed8:	d911      	bls.n	8000efe <__udivmoddi4+0x296>
 8000eda:	3902      	subs	r1, #2
 8000edc:	4464      	add	r4, ip
 8000ede:	1ae4      	subs	r4, r4, r3
 8000ee0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ee4:	e739      	b.n	8000d5a <__udivmoddi4+0xf2>
 8000ee6:	4604      	mov	r4, r0
 8000ee8:	e6f0      	b.n	8000ccc <__udivmoddi4+0x64>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e706      	b.n	8000cfc <__udivmoddi4+0x94>
 8000eee:	45c8      	cmp	r8, r9
 8000ef0:	d2ae      	bcs.n	8000e50 <__udivmoddi4+0x1e8>
 8000ef2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ef6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000efa:	3801      	subs	r0, #1
 8000efc:	e7a8      	b.n	8000e50 <__udivmoddi4+0x1e8>
 8000efe:	4631      	mov	r1, r6
 8000f00:	e7ed      	b.n	8000ede <__udivmoddi4+0x276>
 8000f02:	4603      	mov	r3, r0
 8000f04:	e799      	b.n	8000e3a <__udivmoddi4+0x1d2>
 8000f06:	4630      	mov	r0, r6
 8000f08:	e7d4      	b.n	8000eb4 <__udivmoddi4+0x24c>
 8000f0a:	46d6      	mov	lr, sl
 8000f0c:	e77f      	b.n	8000e0e <__udivmoddi4+0x1a6>
 8000f0e:	4463      	add	r3, ip
 8000f10:	3802      	subs	r0, #2
 8000f12:	e74d      	b.n	8000db0 <__udivmoddi4+0x148>
 8000f14:	4606      	mov	r6, r0
 8000f16:	4623      	mov	r3, r4
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e70f      	b.n	8000d3c <__udivmoddi4+0xd4>
 8000f1c:	3e02      	subs	r6, #2
 8000f1e:	4463      	add	r3, ip
 8000f20:	e730      	b.n	8000d84 <__udivmoddi4+0x11c>
 8000f22:	bf00      	nop

08000f24 <__aeabi_idiv0>:
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop

08000f28 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
    RTOS_Init();
 8000f2c:	f000 fc82 	bl	8001834 <RTOS_Init>
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000f30:	4a04      	ldr	r2, [pc, #16]	@ (8000f44 <MX_FREERTOS_Init+0x1c>)
 8000f32:	2100      	movs	r1, #0
 8000f34:	4804      	ldr	r0, [pc, #16]	@ (8000f48 <MX_FREERTOS_Init+0x20>)
 8000f36:	f005 fc95 	bl	8006864 <osThreadNew>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	4a03      	ldr	r2, [pc, #12]	@ (8000f4c <MX_FREERTOS_Init+0x24>)
 8000f3e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	0800ce40 	.word	0x0800ce40
 8000f48:	08000f51 	.word	0x08000f51
 8000f4c:	200001f4 	.word	0x200001f4

08000f50 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f58:	2001      	movs	r0, #1
 8000f5a:	f005 fd15 	bl	8006988 <osDelay>
 8000f5e:	e7fb      	b.n	8000f58 <StartDefaultTask+0x8>

08000f60 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000f64:	4b20      	ldr	r3, [pc, #128]	@ (8000fe8 <MX_FDCAN1_Init+0x88>)
 8000f66:	4a21      	ldr	r2, [pc, #132]	@ (8000fec <MX_FDCAN1_Init+0x8c>)
 8000f68:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000f6a:	4b1f      	ldr	r3, [pc, #124]	@ (8000fe8 <MX_FDCAN1_Init+0x88>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8000f70:	4b1d      	ldr	r3, [pc, #116]	@ (8000fe8 <MX_FDCAN1_Init+0x88>)
 8000f72:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000f76:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000f78:	4b1b      	ldr	r3, [pc, #108]	@ (8000fe8 <MX_FDCAN1_Init+0x88>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000f7e:	4b1a      	ldr	r3, [pc, #104]	@ (8000fe8 <MX_FDCAN1_Init+0x88>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000f84:	4b18      	ldr	r3, [pc, #96]	@ (8000fe8 <MX_FDCAN1_Init+0x88>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000f8a:	4b17      	ldr	r3, [pc, #92]	@ (8000fe8 <MX_FDCAN1_Init+0x88>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 8000f90:	4b15      	ldr	r3, [pc, #84]	@ (8000fe8 <MX_FDCAN1_Init+0x88>)
 8000f92:	2202      	movs	r2, #2
 8000f94:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 8000f96:	4b14      	ldr	r3, [pc, #80]	@ (8000fe8 <MX_FDCAN1_Init+0x88>)
 8000f98:	2202      	movs	r2, #2
 8000f9a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 31;
 8000f9c:	4b12      	ldr	r3, [pc, #72]	@ (8000fe8 <MX_FDCAN1_Init+0x88>)
 8000f9e:	221f      	movs	r2, #31
 8000fa0:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 8;
 8000fa2:	4b11      	ldr	r3, [pc, #68]	@ (8000fe8 <MX_FDCAN1_Init+0x88>)
 8000fa4:	2208      	movs	r2, #8
 8000fa6:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 2;
 8000fa8:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe8 <MX_FDCAN1_Init+0x88>)
 8000faa:	2202      	movs	r2, #2
 8000fac:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000fae:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe8 <MX_FDCAN1_Init+0x88>)
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe8 <MX_FDCAN1_Init+0x88>)
 8000fb6:	2205      	movs	r2, #5
 8000fb8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 8000fba:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe8 <MX_FDCAN1_Init+0x88>)
 8000fbc:	2202      	movs	r2, #2
 8000fbe:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 8000fc0:	4b09      	ldr	r3, [pc, #36]	@ (8000fe8 <MX_FDCAN1_Init+0x88>)
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000fc6:	4b08      	ldr	r3, [pc, #32]	@ (8000fe8 <MX_FDCAN1_Init+0x88>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000fcc:	4b06      	ldr	r3, [pc, #24]	@ (8000fe8 <MX_FDCAN1_Init+0x88>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000fd2:	4805      	ldr	r0, [pc, #20]	@ (8000fe8 <MX_FDCAN1_Init+0x88>)
 8000fd4:	f001 fb3c 	bl	8002650 <HAL_FDCAN_Init>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8000fde:	f000 f90f 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	200001f8 	.word	0x200001f8
 8000fec:	40006400 	.word	0x40006400

08000ff0 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b09e      	sub	sp, #120	@ 0x78
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]
 8001006:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001008:	f107 0310 	add.w	r3, r7, #16
 800100c:	2254      	movs	r2, #84	@ 0x54
 800100e:	2100      	movs	r1, #0
 8001010:	4618      	mov	r0, r3
 8001012:	f009 fdfa 	bl	800ac0a <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a20      	ldr	r2, [pc, #128]	@ (800109c <HAL_FDCAN_MspInit+0xac>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d139      	bne.n	8001094 <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001020:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001024:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001026:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800102a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800102c:	f107 0310 	add.w	r3, r7, #16
 8001030:	4618      	mov	r0, r3
 8001032:	f002 fd51 	bl	8003ad8 <HAL_RCCEx_PeriphCLKConfig>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 800103c:	f000 f8e0 	bl	8001200 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001040:	4b17      	ldr	r3, [pc, #92]	@ (80010a0 <HAL_FDCAN_MspInit+0xb0>)
 8001042:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001044:	4a16      	ldr	r2, [pc, #88]	@ (80010a0 <HAL_FDCAN_MspInit+0xb0>)
 8001046:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800104a:	6593      	str	r3, [r2, #88]	@ 0x58
 800104c:	4b14      	ldr	r3, [pc, #80]	@ (80010a0 <HAL_FDCAN_MspInit+0xb0>)
 800104e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001050:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001058:	4b11      	ldr	r3, [pc, #68]	@ (80010a0 <HAL_FDCAN_MspInit+0xb0>)
 800105a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800105c:	4a10      	ldr	r2, [pc, #64]	@ (80010a0 <HAL_FDCAN_MspInit+0xb0>)
 800105e:	f043 0301 	orr.w	r3, r3, #1
 8001062:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001064:	4b0e      	ldr	r3, [pc, #56]	@ (80010a0 <HAL_FDCAN_MspInit+0xb0>)
 8001066:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001068:	f003 0301 	and.w	r3, r3, #1
 800106c:	60bb      	str	r3, [r7, #8]
 800106e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001070:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001074:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001076:	2302      	movs	r3, #2
 8001078:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107e:	2300      	movs	r3, #0
 8001080:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001082:	2309      	movs	r3, #9
 8001084:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001086:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800108a:	4619      	mov	r1, r3
 800108c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001090:	f001 fd8c 	bl	8002bac <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8001094:	bf00      	nop
 8001096:	3778      	adds	r7, #120	@ 0x78
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40006400 	.word	0x40006400
 80010a0:	40021000 	.word	0x40021000

080010a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001118 <MX_GPIO_Init+0x74>)
 80010ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ae:	4a1a      	ldr	r2, [pc, #104]	@ (8001118 <MX_GPIO_Init+0x74>)
 80010b0:	f043 0320 	orr.w	r3, r3, #32
 80010b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010b6:	4b18      	ldr	r3, [pc, #96]	@ (8001118 <MX_GPIO_Init+0x74>)
 80010b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ba:	f003 0320 	and.w	r3, r3, #32
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c2:	4b15      	ldr	r3, [pc, #84]	@ (8001118 <MX_GPIO_Init+0x74>)
 80010c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c6:	4a14      	ldr	r2, [pc, #80]	@ (8001118 <MX_GPIO_Init+0x74>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ce:	4b12      	ldr	r3, [pc, #72]	@ (8001118 <MX_GPIO_Init+0x74>)
 80010d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	60bb      	str	r3, [r7, #8]
 80010d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010da:	4b0f      	ldr	r3, [pc, #60]	@ (8001118 <MX_GPIO_Init+0x74>)
 80010dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010de:	4a0e      	ldr	r2, [pc, #56]	@ (8001118 <MX_GPIO_Init+0x74>)
 80010e0:	f043 0304 	orr.w	r3, r3, #4
 80010e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001118 <MX_GPIO_Init+0x74>)
 80010e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ea:	f003 0304 	and.w	r3, r3, #4
 80010ee:	607b      	str	r3, [r7, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f2:	4b09      	ldr	r3, [pc, #36]	@ (8001118 <MX_GPIO_Init+0x74>)
 80010f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f6:	4a08      	ldr	r2, [pc, #32]	@ (8001118 <MX_GPIO_Init+0x74>)
 80010f8:	f043 0302 	orr.w	r3, r3, #2
 80010fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010fe:	4b06      	ldr	r3, [pc, #24]	@ (8001118 <MX_GPIO_Init+0x74>)
 8001100:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001102:	f003 0302 	and.w	r3, r3, #2
 8001106:	603b      	str	r3, [r7, #0]
 8001108:	683b      	ldr	r3, [r7, #0]

}
 800110a:	bf00      	nop
 800110c:	3714      	adds	r7, #20
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	40021000 	.word	0x40021000

0800111c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001120:	f001 f8c0 	bl	80022a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001124:	f000 f810 	bl	8001148 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001128:	f7ff ffbc 	bl	80010a4 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 800112c:	f7ff ff18 	bl	8000f60 <MX_FDCAN1_Init>
  MX_USART1_UART_Init();
 8001130:	f000 fa16 	bl	8001560 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001134:	f000 fa60 	bl	80015f8 <MX_USART2_UART_Init>
  // LOG_BESTPOS command

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001138:	f005 fb4a 	bl	80067d0 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800113c:	f7ff fef4 	bl	8000f28 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001140:	f005 fb6a 	bl	8006818 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001144:	bf00      	nop
 8001146:	e7fd      	b.n	8001144 <main+0x28>

08001148 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b094      	sub	sp, #80	@ 0x50
 800114c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800114e:	f107 0318 	add.w	r3, r7, #24
 8001152:	2238      	movs	r2, #56	@ 0x38
 8001154:	2100      	movs	r1, #0
 8001156:	4618      	mov	r0, r3
 8001158:	f009 fd57 	bl	800ac0a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800115c:	1d3b      	adds	r3, r7, #4
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]
 8001166:	60da      	str	r2, [r3, #12]
 8001168:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800116a:	2000      	movs	r0, #0
 800116c:	f001 fea0 	bl	8002eb0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001170:	2301      	movs	r3, #1
 8001172:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001174:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001178:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800117a:	2302      	movs	r3, #2
 800117c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800117e:	2303      	movs	r3, #3
 8001180:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV3;
 8001182:	2303      	movs	r3, #3
 8001184:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001186:	2328      	movs	r3, #40	@ 0x28
 8001188:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800118a:	2302      	movs	r3, #2
 800118c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800118e:	2302      	movs	r3, #2
 8001190:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001192:	2302      	movs	r3, #2
 8001194:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001196:	f107 0318 	add.w	r3, r7, #24
 800119a:	4618      	mov	r0, r3
 800119c:	f001 ff3c 	bl	8003018 <HAL_RCC_OscConfig>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <SystemClock_Config+0x62>
  {
    Error_Handler();
 80011a6:	f000 f82b 	bl	8001200 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011aa:	230f      	movs	r3, #15
 80011ac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ae:	2303      	movs	r3, #3
 80011b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011b2:	2300      	movs	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011c0:	1d3b      	adds	r3, r7, #4
 80011c2:	2104      	movs	r1, #4
 80011c4:	4618      	mov	r0, r3
 80011c6:	f002 fa39 	bl	800363c <HAL_RCC_ClockConfig>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80011d0:	f000 f816 	bl	8001200 <Error_Handler>
  }
}
 80011d4:	bf00      	nop
 80011d6:	3750      	adds	r7, #80	@ 0x50
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a04      	ldr	r2, [pc, #16]	@ (80011fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d101      	bne.n	80011f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80011ee:	f001 f871 	bl	80022d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40001000 	.word	0x40001000

08001200 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001204:	b672      	cpsid	i
}
 8001206:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001208:	bf00      	nop
 800120a:	e7fd      	b.n	8001208 <Error_Handler+0x8>

0800120c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001212:	4b12      	ldr	r3, [pc, #72]	@ (800125c <HAL_MspInit+0x50>)
 8001214:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001216:	4a11      	ldr	r2, [pc, #68]	@ (800125c <HAL_MspInit+0x50>)
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	6613      	str	r3, [r2, #96]	@ 0x60
 800121e:	4b0f      	ldr	r3, [pc, #60]	@ (800125c <HAL_MspInit+0x50>)
 8001220:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	607b      	str	r3, [r7, #4]
 8001228:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800122a:	4b0c      	ldr	r3, [pc, #48]	@ (800125c <HAL_MspInit+0x50>)
 800122c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800122e:	4a0b      	ldr	r2, [pc, #44]	@ (800125c <HAL_MspInit+0x50>)
 8001230:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001234:	6593      	str	r3, [r2, #88]	@ 0x58
 8001236:	4b09      	ldr	r3, [pc, #36]	@ (800125c <HAL_MspInit+0x50>)
 8001238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800123a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800123e:	603b      	str	r3, [r7, #0]
 8001240:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001242:	2200      	movs	r2, #0
 8001244:	210f      	movs	r1, #15
 8001246:	f06f 0001 	mvn.w	r0, #1
 800124a:	f001 f919 	bl	8002480 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800124e:	f001 fed3 	bl	8002ff8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40021000 	.word	0x40021000

08001260 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b08c      	sub	sp, #48	@ 0x30
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001268:	2300      	movs	r3, #0
 800126a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 800126c:	2300      	movs	r3, #0
 800126e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001270:	4b2d      	ldr	r3, [pc, #180]	@ (8001328 <HAL_InitTick+0xc8>)
 8001272:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001274:	4a2c      	ldr	r2, [pc, #176]	@ (8001328 <HAL_InitTick+0xc8>)
 8001276:	f043 0310 	orr.w	r3, r3, #16
 800127a:	6593      	str	r3, [r2, #88]	@ 0x58
 800127c:	4b2a      	ldr	r3, [pc, #168]	@ (8001328 <HAL_InitTick+0xc8>)
 800127e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001280:	f003 0310 	and.w	r3, r3, #16
 8001284:	60bb      	str	r3, [r7, #8]
 8001286:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001288:	f107 020c 	add.w	r2, r7, #12
 800128c:	f107 0310 	add.w	r3, r7, #16
 8001290:	4611      	mov	r1, r2
 8001292:	4618      	mov	r0, r3
 8001294:	f002 fba8 	bl	80039e8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001298:	f002 fb7a 	bl	8003990 <HAL_RCC_GetPCLK1Freq>
 800129c:	4603      	mov	r3, r0
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012a4:	4a21      	ldr	r2, [pc, #132]	@ (800132c <HAL_InitTick+0xcc>)
 80012a6:	fba2 2303 	umull	r2, r3, r2, r3
 80012aa:	0c9b      	lsrs	r3, r3, #18
 80012ac:	3b01      	subs	r3, #1
 80012ae:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80012b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001330 <HAL_InitTick+0xd0>)
 80012b2:	4a20      	ldr	r2, [pc, #128]	@ (8001334 <HAL_InitTick+0xd4>)
 80012b4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80012b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001330 <HAL_InitTick+0xd0>)
 80012b8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80012bc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80012be:	4a1c      	ldr	r2, [pc, #112]	@ (8001330 <HAL_InitTick+0xd0>)
 80012c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012c2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80012c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001330 <HAL_InitTick+0xd0>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ca:	4b19      	ldr	r3, [pc, #100]	@ (8001330 <HAL_InitTick+0xd0>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80012d0:	4817      	ldr	r0, [pc, #92]	@ (8001330 <HAL_InitTick+0xd0>)
 80012d2:	f002 fe4f 	bl	8003f74 <HAL_TIM_Base_Init>
 80012d6:	4603      	mov	r3, r0
 80012d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80012dc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d11b      	bne.n	800131c <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80012e4:	4812      	ldr	r0, [pc, #72]	@ (8001330 <HAL_InitTick+0xd0>)
 80012e6:	f002 fea7 	bl	8004038 <HAL_TIM_Base_Start_IT>
 80012ea:	4603      	mov	r3, r0
 80012ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80012f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d111      	bne.n	800131c <HAL_InitTick+0xbc>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80012f8:	2036      	movs	r0, #54	@ 0x36
 80012fa:	f001 f8db 	bl	80024b4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2b0f      	cmp	r3, #15
 8001302:	d808      	bhi.n	8001316 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001304:	2200      	movs	r2, #0
 8001306:	6879      	ldr	r1, [r7, #4]
 8001308:	2036      	movs	r0, #54	@ 0x36
 800130a:	f001 f8b9 	bl	8002480 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800130e:	4a0a      	ldr	r2, [pc, #40]	@ (8001338 <HAL_InitTick+0xd8>)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6013      	str	r3, [r2, #0]
 8001314:	e002      	b.n	800131c <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800131c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001320:	4618      	mov	r0, r3
 8001322:	3730      	adds	r7, #48	@ 0x30
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	40021000 	.word	0x40021000
 800132c:	431bde83 	.word	0x431bde83
 8001330:	2000025c 	.word	0x2000025c
 8001334:	40001000 	.word	0x40001000
 8001338:	20000004 	.word	0x20000004

0800133c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001340:	bf00      	nop
 8001342:	e7fd      	b.n	8001340 <NMI_Handler+0x4>

08001344 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001348:	bf00      	nop
 800134a:	e7fd      	b.n	8001348 <HardFault_Handler+0x4>

0800134c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001350:	bf00      	nop
 8001352:	e7fd      	b.n	8001350 <MemManage_Handler+0x4>

08001354 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001358:	bf00      	nop
 800135a:	e7fd      	b.n	8001358 <BusFault_Handler+0x4>

0800135c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001360:	bf00      	nop
 8001362:	e7fd      	b.n	8001360 <UsageFault_Handler+0x4>

08001364 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
	...

08001374 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001378:	4802      	ldr	r0, [pc, #8]	@ (8001384 <USART1_IRQHandler+0x10>)
 800137a:	f003 f9e3 	bl	8004744 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	200002ac 	.word	0x200002ac

08001388 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800138c:	4802      	ldr	r0, [pc, #8]	@ (8001398 <USART2_IRQHandler+0x10>)
 800138e:	f003 f9d9 	bl	8004744 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	20000340 	.word	0x20000340

0800139c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80013a0:	4802      	ldr	r0, [pc, #8]	@ (80013ac <TIM6_DAC_IRQHandler+0x10>)
 80013a2:	f002 fec1 	bl	8004128 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	2000025c 	.word	0x2000025c

080013b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  return 1;
 80013b4:	2301      	movs	r3, #1
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <_kill>:

int _kill(int pid, int sig)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80013ca:	f009 fcdb 	bl	800ad84 <__errno>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2216      	movs	r2, #22
 80013d2:	601a      	str	r2, [r3, #0]
  return -1;
 80013d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <_exit>:

void _exit (int status)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80013e8:	f04f 31ff 	mov.w	r1, #4294967295
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f7ff ffe7 	bl	80013c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80013f2:	bf00      	nop
 80013f4:	e7fd      	b.n	80013f2 <_exit+0x12>

080013f6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b086      	sub	sp, #24
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	60f8      	str	r0, [r7, #12]
 80013fe:	60b9      	str	r1, [r7, #8]
 8001400:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001402:	2300      	movs	r3, #0
 8001404:	617b      	str	r3, [r7, #20]
 8001406:	e00a      	b.n	800141e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001408:	f3af 8000 	nop.w
 800140c:	4601      	mov	r1, r0
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	1c5a      	adds	r2, r3, #1
 8001412:	60ba      	str	r2, [r7, #8]
 8001414:	b2ca      	uxtb	r2, r1
 8001416:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	3301      	adds	r3, #1
 800141c:	617b      	str	r3, [r7, #20]
 800141e:	697a      	ldr	r2, [r7, #20]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	429a      	cmp	r2, r3
 8001424:	dbf0      	blt.n	8001408 <_read+0x12>
  }

  return len;
 8001426:	687b      	ldr	r3, [r7, #4]
}
 8001428:	4618      	mov	r0, r3
 800142a:	3718      	adds	r7, #24
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}

08001430 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800143c:	2300      	movs	r3, #0
 800143e:	617b      	str	r3, [r7, #20]
 8001440:	e009      	b.n	8001456 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	1c5a      	adds	r2, r3, #1
 8001446:	60ba      	str	r2, [r7, #8]
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	4618      	mov	r0, r3
 800144c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	3301      	adds	r3, #1
 8001454:	617b      	str	r3, [r7, #20]
 8001456:	697a      	ldr	r2, [r7, #20]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	429a      	cmp	r2, r3
 800145c:	dbf1      	blt.n	8001442 <_write+0x12>
  }
  return len;
 800145e:	687b      	ldr	r3, [r7, #4]
}
 8001460:	4618      	mov	r0, r3
 8001462:	3718      	adds	r7, #24
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}

08001468 <_close>:

int _close(int file)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001470:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001474:	4618      	mov	r0, r3
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001490:	605a      	str	r2, [r3, #4]
  return 0;
 8001492:	2300      	movs	r3, #0
}
 8001494:	4618      	mov	r0, r3
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <_isatty>:

int _isatty(int file)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014a8:	2301      	movs	r3, #1
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr

080014b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014b6:	b480      	push	{r7}
 80014b8:	b085      	sub	sp, #20
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	60f8      	str	r0, [r7, #12]
 80014be:	60b9      	str	r1, [r7, #8]
 80014c0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014c2:	2300      	movs	r3, #0
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3714      	adds	r7, #20
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014d8:	4a14      	ldr	r2, [pc, #80]	@ (800152c <_sbrk+0x5c>)
 80014da:	4b15      	ldr	r3, [pc, #84]	@ (8001530 <_sbrk+0x60>)
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014e4:	4b13      	ldr	r3, [pc, #76]	@ (8001534 <_sbrk+0x64>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d102      	bne.n	80014f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014ec:	4b11      	ldr	r3, [pc, #68]	@ (8001534 <_sbrk+0x64>)
 80014ee:	4a12      	ldr	r2, [pc, #72]	@ (8001538 <_sbrk+0x68>)
 80014f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014f2:	4b10      	ldr	r3, [pc, #64]	@ (8001534 <_sbrk+0x64>)
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4413      	add	r3, r2
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d207      	bcs.n	8001510 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001500:	f009 fc40 	bl	800ad84 <__errno>
 8001504:	4603      	mov	r3, r0
 8001506:	220c      	movs	r2, #12
 8001508:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800150a:	f04f 33ff 	mov.w	r3, #4294967295
 800150e:	e009      	b.n	8001524 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001510:	4b08      	ldr	r3, [pc, #32]	@ (8001534 <_sbrk+0x64>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001516:	4b07      	ldr	r3, [pc, #28]	@ (8001534 <_sbrk+0x64>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4413      	add	r3, r2
 800151e:	4a05      	ldr	r2, [pc, #20]	@ (8001534 <_sbrk+0x64>)
 8001520:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001522:	68fb      	ldr	r3, [r7, #12]
}
 8001524:	4618      	mov	r0, r3
 8001526:	3718      	adds	r7, #24
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	20020000 	.word	0x20020000
 8001530:	00000400 	.word	0x00000400
 8001534:	200002a8 	.word	0x200002a8
 8001538:	20002100 	.word	0x20002100

0800153c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001540:	4b06      	ldr	r3, [pc, #24]	@ (800155c <SystemInit+0x20>)
 8001542:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001546:	4a05      	ldr	r2, [pc, #20]	@ (800155c <SystemInit+0x20>)
 8001548:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800154c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	e000ed00 	.word	0xe000ed00

08001560 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001564:	4b22      	ldr	r3, [pc, #136]	@ (80015f0 <MX_USART1_UART_Init+0x90>)
 8001566:	4a23      	ldr	r2, [pc, #140]	@ (80015f4 <MX_USART1_UART_Init+0x94>)
 8001568:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 800156a:	4b21      	ldr	r3, [pc, #132]	@ (80015f0 <MX_USART1_UART_Init+0x90>)
 800156c:	f44f 22e1 	mov.w	r2, #460800	@ 0x70800
 8001570:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001572:	4b1f      	ldr	r3, [pc, #124]	@ (80015f0 <MX_USART1_UART_Init+0x90>)
 8001574:	2200      	movs	r2, #0
 8001576:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001578:	4b1d      	ldr	r3, [pc, #116]	@ (80015f0 <MX_USART1_UART_Init+0x90>)
 800157a:	2200      	movs	r2, #0
 800157c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800157e:	4b1c      	ldr	r3, [pc, #112]	@ (80015f0 <MX_USART1_UART_Init+0x90>)
 8001580:	2200      	movs	r2, #0
 8001582:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001584:	4b1a      	ldr	r3, [pc, #104]	@ (80015f0 <MX_USART1_UART_Init+0x90>)
 8001586:	220c      	movs	r2, #12
 8001588:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800158a:	4b19      	ldr	r3, [pc, #100]	@ (80015f0 <MX_USART1_UART_Init+0x90>)
 800158c:	2200      	movs	r2, #0
 800158e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001590:	4b17      	ldr	r3, [pc, #92]	@ (80015f0 <MX_USART1_UART_Init+0x90>)
 8001592:	2200      	movs	r2, #0
 8001594:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001596:	4b16      	ldr	r3, [pc, #88]	@ (80015f0 <MX_USART1_UART_Init+0x90>)
 8001598:	2200      	movs	r2, #0
 800159a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800159c:	4b14      	ldr	r3, [pc, #80]	@ (80015f0 <MX_USART1_UART_Init+0x90>)
 800159e:	2200      	movs	r2, #0
 80015a0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015a2:	4b13      	ldr	r3, [pc, #76]	@ (80015f0 <MX_USART1_UART_Init+0x90>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015a8:	4811      	ldr	r0, [pc, #68]	@ (80015f0 <MX_USART1_UART_Init+0x90>)
 80015aa:	f003 f82f 	bl	800460c <HAL_UART_Init>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80015b4:	f7ff fe24 	bl	8001200 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015b8:	2100      	movs	r1, #0
 80015ba:	480d      	ldr	r0, [pc, #52]	@ (80015f0 <MX_USART1_UART_Init+0x90>)
 80015bc:	f004 fff9 	bl	80065b2 <HAL_UARTEx_SetTxFifoThreshold>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80015c6:	f7ff fe1b 	bl	8001200 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015ca:	2100      	movs	r1, #0
 80015cc:	4808      	ldr	r0, [pc, #32]	@ (80015f0 <MX_USART1_UART_Init+0x90>)
 80015ce:	f005 f82e 	bl	800662e <HAL_UARTEx_SetRxFifoThreshold>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80015d8:	f7ff fe12 	bl	8001200 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80015dc:	4804      	ldr	r0, [pc, #16]	@ (80015f0 <MX_USART1_UART_Init+0x90>)
 80015de:	f004 ffaf 	bl	8006540 <HAL_UARTEx_DisableFifoMode>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80015e8:	f7ff fe0a 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015ec:	bf00      	nop
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	200002ac 	.word	0x200002ac
 80015f4:	40013800 	.word	0x40013800

080015f8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015fc:	4b22      	ldr	r3, [pc, #136]	@ (8001688 <MX_USART2_UART_Init+0x90>)
 80015fe:	4a23      	ldr	r2, [pc, #140]	@ (800168c <MX_USART2_UART_Init+0x94>)
 8001600:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 460800;
 8001602:	4b21      	ldr	r3, [pc, #132]	@ (8001688 <MX_USART2_UART_Init+0x90>)
 8001604:	f44f 22e1 	mov.w	r2, #460800	@ 0x70800
 8001608:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800160a:	4b1f      	ldr	r3, [pc, #124]	@ (8001688 <MX_USART2_UART_Init+0x90>)
 800160c:	2200      	movs	r2, #0
 800160e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001610:	4b1d      	ldr	r3, [pc, #116]	@ (8001688 <MX_USART2_UART_Init+0x90>)
 8001612:	2200      	movs	r2, #0
 8001614:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001616:	4b1c      	ldr	r3, [pc, #112]	@ (8001688 <MX_USART2_UART_Init+0x90>)
 8001618:	2200      	movs	r2, #0
 800161a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800161c:	4b1a      	ldr	r3, [pc, #104]	@ (8001688 <MX_USART2_UART_Init+0x90>)
 800161e:	220c      	movs	r2, #12
 8001620:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001622:	4b19      	ldr	r3, [pc, #100]	@ (8001688 <MX_USART2_UART_Init+0x90>)
 8001624:	2200      	movs	r2, #0
 8001626:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001628:	4b17      	ldr	r3, [pc, #92]	@ (8001688 <MX_USART2_UART_Init+0x90>)
 800162a:	2200      	movs	r2, #0
 800162c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800162e:	4b16      	ldr	r3, [pc, #88]	@ (8001688 <MX_USART2_UART_Init+0x90>)
 8001630:	2200      	movs	r2, #0
 8001632:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001634:	4b14      	ldr	r3, [pc, #80]	@ (8001688 <MX_USART2_UART_Init+0x90>)
 8001636:	2200      	movs	r2, #0
 8001638:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800163a:	4b13      	ldr	r3, [pc, #76]	@ (8001688 <MX_USART2_UART_Init+0x90>)
 800163c:	2200      	movs	r2, #0
 800163e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001640:	4811      	ldr	r0, [pc, #68]	@ (8001688 <MX_USART2_UART_Init+0x90>)
 8001642:	f002 ffe3 	bl	800460c <HAL_UART_Init>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800164c:	f7ff fdd8 	bl	8001200 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001650:	2100      	movs	r1, #0
 8001652:	480d      	ldr	r0, [pc, #52]	@ (8001688 <MX_USART2_UART_Init+0x90>)
 8001654:	f004 ffad 	bl	80065b2 <HAL_UARTEx_SetTxFifoThreshold>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800165e:	f7ff fdcf 	bl	8001200 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001662:	2100      	movs	r1, #0
 8001664:	4808      	ldr	r0, [pc, #32]	@ (8001688 <MX_USART2_UART_Init+0x90>)
 8001666:	f004 ffe2 	bl	800662e <HAL_UARTEx_SetRxFifoThreshold>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001670:	f7ff fdc6 	bl	8001200 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001674:	4804      	ldr	r0, [pc, #16]	@ (8001688 <MX_USART2_UART_Init+0x90>)
 8001676:	f004 ff63 	bl	8006540 <HAL_UARTEx_DisableFifoMode>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001680:	f7ff fdbe 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001684:	bf00      	nop
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20000340 	.word	0x20000340
 800168c:	40004400 	.word	0x40004400

08001690 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b0a0      	sub	sp, #128	@ 0x80
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001698:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	60da      	str	r2, [r3, #12]
 80016a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016a8:	f107 0318 	add.w	r3, r7, #24
 80016ac:	2254      	movs	r2, #84	@ 0x54
 80016ae:	2100      	movs	r1, #0
 80016b0:	4618      	mov	r0, r3
 80016b2:	f009 faaa 	bl	800ac0a <memset>
  if(uartHandle->Instance==USART1)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a45      	ldr	r2, [pc, #276]	@ (80017d0 <HAL_UART_MspInit+0x140>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d13e      	bne.n	800173e <HAL_UART_MspInit+0xae>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80016c0:	2301      	movs	r3, #1
 80016c2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80016c4:	2300      	movs	r3, #0
 80016c6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016c8:	f107 0318 	add.w	r3, r7, #24
 80016cc:	4618      	mov	r0, r3
 80016ce:	f002 fa03 	bl	8003ad8 <HAL_RCCEx_PeriphCLKConfig>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80016d8:	f7ff fd92 	bl	8001200 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016dc:	4b3d      	ldr	r3, [pc, #244]	@ (80017d4 <HAL_UART_MspInit+0x144>)
 80016de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016e0:	4a3c      	ldr	r2, [pc, #240]	@ (80017d4 <HAL_UART_MspInit+0x144>)
 80016e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016e6:	6613      	str	r3, [r2, #96]	@ 0x60
 80016e8:	4b3a      	ldr	r3, [pc, #232]	@ (80017d4 <HAL_UART_MspInit+0x144>)
 80016ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016f0:	617b      	str	r3, [r7, #20]
 80016f2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016f4:	4b37      	ldr	r3, [pc, #220]	@ (80017d4 <HAL_UART_MspInit+0x144>)
 80016f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016f8:	4a36      	ldr	r2, [pc, #216]	@ (80017d4 <HAL_UART_MspInit+0x144>)
 80016fa:	f043 0304 	orr.w	r3, r3, #4
 80016fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001700:	4b34      	ldr	r3, [pc, #208]	@ (80017d4 <HAL_UART_MspInit+0x144>)
 8001702:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001704:	f003 0304 	and.w	r3, r3, #4
 8001708:	613b      	str	r3, [r7, #16]
 800170a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800170c:	2330      	movs	r3, #48	@ 0x30
 800170e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001710:	2302      	movs	r3, #2
 8001712:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001714:	2300      	movs	r3, #0
 8001716:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001718:	2300      	movs	r3, #0
 800171a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800171c:	2307      	movs	r3, #7
 800171e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001720:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001724:	4619      	mov	r1, r3
 8001726:	482c      	ldr	r0, [pc, #176]	@ (80017d8 <HAL_UART_MspInit+0x148>)
 8001728:	f001 fa40 	bl	8002bac <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800172c:	2200      	movs	r2, #0
 800172e:	2105      	movs	r1, #5
 8001730:	2025      	movs	r0, #37	@ 0x25
 8001732:	f000 fea5 	bl	8002480 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001736:	2025      	movs	r0, #37	@ 0x25
 8001738:	f000 febc 	bl	80024b4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800173c:	e043      	b.n	80017c6 <HAL_UART_MspInit+0x136>
  else if(uartHandle->Instance==USART2)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a26      	ldr	r2, [pc, #152]	@ (80017dc <HAL_UART_MspInit+0x14c>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d13e      	bne.n	80017c6 <HAL_UART_MspInit+0x136>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001748:	2302      	movs	r3, #2
 800174a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800174c:	2300      	movs	r3, #0
 800174e:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001750:	f107 0318 	add.w	r3, r7, #24
 8001754:	4618      	mov	r0, r3
 8001756:	f002 f9bf 	bl	8003ad8 <HAL_RCCEx_PeriphCLKConfig>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8001760:	f7ff fd4e 	bl	8001200 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001764:	4b1b      	ldr	r3, [pc, #108]	@ (80017d4 <HAL_UART_MspInit+0x144>)
 8001766:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001768:	4a1a      	ldr	r2, [pc, #104]	@ (80017d4 <HAL_UART_MspInit+0x144>)
 800176a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800176e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001770:	4b18      	ldr	r3, [pc, #96]	@ (80017d4 <HAL_UART_MspInit+0x144>)
 8001772:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001774:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001778:	60fb      	str	r3, [r7, #12]
 800177a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800177c:	4b15      	ldr	r3, [pc, #84]	@ (80017d4 <HAL_UART_MspInit+0x144>)
 800177e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001780:	4a14      	ldr	r2, [pc, #80]	@ (80017d4 <HAL_UART_MspInit+0x144>)
 8001782:	f043 0301 	orr.w	r3, r3, #1
 8001786:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001788:	4b12      	ldr	r3, [pc, #72]	@ (80017d4 <HAL_UART_MspInit+0x144>)
 800178a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800178c:	f003 0301 	and.w	r3, r3, #1
 8001790:	60bb      	str	r3, [r7, #8]
 8001792:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001794:	230c      	movs	r3, #12
 8001796:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001798:	2302      	movs	r3, #2
 800179a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179c:	2300      	movs	r3, #0
 800179e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a0:	2300      	movs	r3, #0
 80017a2:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017a4:	2307      	movs	r3, #7
 80017a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80017ac:	4619      	mov	r1, r3
 80017ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017b2:	f001 f9fb 	bl	8002bac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80017b6:	2200      	movs	r2, #0
 80017b8:	2105      	movs	r1, #5
 80017ba:	2026      	movs	r0, #38	@ 0x26
 80017bc:	f000 fe60 	bl	8002480 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017c0:	2026      	movs	r0, #38	@ 0x26
 80017c2:	f000 fe77 	bl	80024b4 <HAL_NVIC_EnableIRQ>
}
 80017c6:	bf00      	nop
 80017c8:	3780      	adds	r7, #128	@ 0x80
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40013800 	.word	0x40013800
 80017d4:	40021000 	.word	0x40021000
 80017d8:	48000800 	.word	0x48000800
 80017dc:	40004400 	.word	0x40004400

080017e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80017e0:	480d      	ldr	r0, [pc, #52]	@ (8001818 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80017e2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017e4:	f7ff feaa 	bl	800153c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017e8:	480c      	ldr	r0, [pc, #48]	@ (800181c <LoopForever+0x6>)
  ldr r1, =_edata
 80017ea:	490d      	ldr	r1, [pc, #52]	@ (8001820 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001824 <LoopForever+0xe>)
  movs r3, #0
 80017ee:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80017f0:	e002      	b.n	80017f8 <LoopCopyDataInit>

080017f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017f6:	3304      	adds	r3, #4

080017f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017fc:	d3f9      	bcc.n	80017f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001828 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001800:	4c0a      	ldr	r4, [pc, #40]	@ (800182c <LoopForever+0x16>)
  movs r3, #0
 8001802:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001804:	e001      	b.n	800180a <LoopFillZerobss>

08001806 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001806:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001808:	3204      	adds	r2, #4

0800180a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800180a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800180c:	d3fb      	bcc.n	8001806 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800180e:	f009 fabf 	bl	800ad90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001812:	f7ff fc83 	bl	800111c <main>

08001816 <LoopForever>:

LoopForever:
    b LoopForever
 8001816:	e7fe      	b.n	8001816 <LoopForever>
  ldr   r0, =_estack
 8001818:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800181c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001820:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001824:	0800d30c 	.word	0x0800d30c
  ldr r2, =_sbss
 8001828:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 800182c:	20002100 	.word	0x20002100

08001830 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001830:	e7fe      	b.n	8001830 <ADC1_2_IRQHandler>
	...

08001834 <RTOS_Init>:
uint8_t canTxData[UCR_01_GPS_BEST_POS_LENGTH];
struct ucr_01_gps_best_pos_t gpsData;
extern uint8_t temp[2];
extern char FinalData[];

void RTOS_Init(void){
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
    gpsTaskHandle = osThreadNew(StartGPS, NULL, &gpsTask_attributes);
 8001838:	4a08      	ldr	r2, [pc, #32]	@ (800185c <RTOS_Init+0x28>)
 800183a:	2100      	movs	r1, #0
 800183c:	4808      	ldr	r0, [pc, #32]	@ (8001860 <RTOS_Init+0x2c>)
 800183e:	f005 f811 	bl	8006864 <osThreadNew>
 8001842:	4603      	mov	r3, r0
 8001844:	4a07      	ldr	r2, [pc, #28]	@ (8001864 <RTOS_Init+0x30>)
 8001846:	6013      	str	r3, [r2, #0]
    gpsSemaphoreHandle = osSemaphoreNew(1, 0, &gpsSemaphore_attributes);
 8001848:	4a07      	ldr	r2, [pc, #28]	@ (8001868 <RTOS_Init+0x34>)
 800184a:	2100      	movs	r1, #0
 800184c:	2001      	movs	r0, #1
 800184e:	f005 f8b6 	bl	80069be <osSemaphoreNew>
 8001852:	4603      	mov	r3, r0
 8001854:	4a05      	ldr	r2, [pc, #20]	@ (800186c <RTOS_Init+0x38>)
 8001856:	6013      	str	r3, [r2, #0]
}
 8001858:	bf00      	nop
 800185a:	bd80      	pop	{r7, pc}
 800185c:	0800ce7c 	.word	0x0800ce7c
 8001860:	08001871 	.word	0x08001871
 8001864:	200003d4 	.word	0x200003d4
 8001868:	0800cea0 	.word	0x0800cea0
 800186c:	200003d8 	.word	0x200003d8

08001870 <StartGPS>:

void StartGPS(void *argument){
 8001870:	b580      	push	{r7, lr}
 8001872:	b0de      	sub	sp, #376	@ 0x178
 8001874:	af00      	add	r7, sp, #0
 8001876:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800187a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800187e:	6018      	str	r0, [r3, #0]
    char statusMessage[] = "PPP";
 8001880:	4b7c      	ldr	r3, [pc, #496]	@ (8001a74 <StartGPS+0x204>)
 8001882:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    HAL_FDCAN_Start(&hfdcan1);
 8001886:	487c      	ldr	r0, [pc, #496]	@ (8001a78 <StartGPS+0x208>)
 8001888:	f001 f83c 	bl	8002904 <HAL_FDCAN_Start>
    HAL_UART_Receive_IT(&huart1, temp, 1);
 800188c:	2201      	movs	r2, #1
 800188e:	497b      	ldr	r1, [pc, #492]	@ (8001a7c <StartGPS+0x20c>)
 8001890:	487b      	ldr	r0, [pc, #492]	@ (8001a80 <StartGPS+0x210>)
 8001892:	f002 ff0b 	bl	80046ac <HAL_UART_Receive_IT>
    FDCAN_TxHeaderTypeDef TxHeader;
    TxHeader.Identifier = UCR_01_GPS_BEST_POS_FRAME_ID;
 8001896:	2350      	movs	r3, #80	@ 0x50
 8001898:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
    TxHeader.IdType = FDCAN_STANDARD_ID;
 800189c:	2300      	movs	r3, #0
 800189e:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80018a2:	2300      	movs	r3, #0
 80018a4:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
    TxHeader.DataLength = FDCAN_DLC_BYTES_64;
 80018a8:	230f      	movs	r3, #15
 80018aa:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    TxHeader.ErrorStateIndicator = FDCAN_ESI_PASSIVE;
 80018ae:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80018b2:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 80018b6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80018ba:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
    TxHeader.FDFormat = FDCAN_FD_CAN;
 80018be:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80018c2:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80018c6:	2300      	movs	r3, #0
 80018c8:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    TxHeader.MessageMarker = 0;
 80018cc:	2300      	movs	r3, #0
 80018ce:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
    uint8_t canTestData[UCR_01_GPS_BEST_POS_LENGTH];
    HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, canTestData);
 80018d2:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 80018d6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80018da:	4619      	mov	r1, r3
 80018dc:	4866      	ldr	r0, [pc, #408]	@ (8001a78 <StartGPS+0x208>)
 80018de:	f001 f839 	bl	8002954 <HAL_FDCAN_AddMessageToTxFifoQ>

    while(1){
        osSemaphoreAcquire(gpsSemaphoreHandle, osWaitForever);
 80018e2:	4b68      	ldr	r3, [pc, #416]	@ (8001a84 <StartGPS+0x214>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f04f 31ff 	mov.w	r1, #4294967295
 80018ea:	4618      	mov	r0, r3
 80018ec:	f005 f8f0 	bl	8006ad0 <osSemaphoreAcquire>
        char tempMsg[UARTBUFFERLENGTH];
        sprintf(tempMsg, strtok(FinalData, "#"));
 80018f0:	4965      	ldr	r1, [pc, #404]	@ (8001a88 <StartGPS+0x218>)
 80018f2:	4866      	ldr	r0, [pc, #408]	@ (8001a8c <StartGPS+0x21c>)
 80018f4:	f009 f9a4 	bl	800ac40 <strtok>
 80018f8:	4602      	mov	r2, r0
 80018fa:	f107 0308 	add.w	r3, r7, #8
 80018fe:	4611      	mov	r1, r2
 8001900:	4618      	mov	r0, r3
 8001902:	f009 f90f 	bl	800ab24 <siprintf>
        if(memcmp("BESTPOSA", tempMsg, 8) == 0){
 8001906:	f107 0308 	add.w	r3, r7, #8
 800190a:	2208      	movs	r2, #8
 800190c:	4619      	mov	r1, r3
 800190e:	4860      	ldr	r0, [pc, #384]	@ (8001a90 <StartGPS+0x220>)
 8001910:	f009 f96b 	bl	800abea <memcmp>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d1e3      	bne.n	80018e2 <StartGPS+0x72>
    //      sprintf(gpsData, tempMsg);
            char *token = strtok(tempMsg, ",");
 800191a:	f107 0308 	add.w	r3, r7, #8
 800191e:	495d      	ldr	r1, [pc, #372]	@ (8001a94 <StartGPS+0x224>)
 8001920:	4618      	mov	r0, r3
 8001922:	f009 f98d 	bl	800ac40 <strtok>
 8001926:	f8c7 0174 	str.w	r0, [r7, #372]	@ 0x174
            int index = 0;
 800192a:	2300      	movs	r3, #0
 800192c:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
            while(token != NULL){
 8001930:	e08c      	b.n	8001a4c <StartGPS+0x1dc>
                token = strtok(NULL, ",");
 8001932:	4958      	ldr	r1, [pc, #352]	@ (8001a94 <StartGPS+0x224>)
 8001934:	2000      	movs	r0, #0
 8001936:	f009 f983 	bl	800ac40 <strtok>
 800193a:	f8c7 0174 	str.w	r0, [r7, #372]	@ 0x174
                switch(index){
 800193e:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001942:	3b03      	subs	r3, #3
 8001944:	2b0f      	cmp	r3, #15
 8001946:	d878      	bhi.n	8001a3a <StartGPS+0x1ca>
 8001948:	a201      	add	r2, pc, #4	@ (adr r2, 8001950 <StartGPS+0xe0>)
 800194a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800194e:	bf00      	nop
 8001950:	08001a3b 	.word	0x08001a3b
 8001954:	08001a3b 	.word	0x08001a3b
 8001958:	08001a3b 	.word	0x08001a3b
 800195c:	08001a3b 	.word	0x08001a3b
 8001960:	08001a3b 	.word	0x08001a3b
 8001964:	08001a3b 	.word	0x08001a3b
 8001968:	08001991 	.word	0x08001991
 800196c:	080019ab 	.word	0x080019ab
 8001970:	080019c3 	.word	0x080019c3
 8001974:	080019db 	.word	0x080019db
 8001978:	08001a3b 	.word	0x08001a3b
 800197c:	08001a3b 	.word	0x08001a3b
 8001980:	080019f3 	.word	0x080019f3
 8001984:	08001a0b 	.word	0x08001a0b
 8001988:	08001a23 	.word	0x08001a23
 800198c:	08001a3b 	.word	0x08001a3b
                        break;
                    case 8:
                        //separate by ; and get sol stat
                        break;
                    case 9:
                        gpsData.gps_status = strcmp(token, statusMessage);
 8001990:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8001994:	4619      	mov	r1, r3
 8001996:	f8d7 0174 	ldr.w	r0, [r7, #372]	@ 0x174
 800199a:	f7fe fc41 	bl	8000220 <strcmp>
 800199e:	4603      	mov	r3, r0
 80019a0:	b2da      	uxtb	r2, r3
 80019a2:	4b3d      	ldr	r3, [pc, #244]	@ (8001a98 <StartGPS+0x228>)
 80019a4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
                        break;
 80019a8:	e047      	b.n	8001a3a <StartGPS+0x1ca>
                    case 10:
                        gpsData.latitude = atof(token);
 80019aa:	f8d7 0174 	ldr.w	r0, [r7, #372]	@ 0x174
 80019ae:	f008 f9e3 	bl	8009d78 <atof>
 80019b2:	eeb0 7a40 	vmov.f32	s14, s0
 80019b6:	eef0 7a60 	vmov.f32	s15, s1
 80019ba:	4b37      	ldr	r3, [pc, #220]	@ (8001a98 <StartGPS+0x228>)
 80019bc:	ed83 7b00 	vstr	d7, [r3]
//                        gpsData.latitude = atof(token);
                        break;
 80019c0:	e03b      	b.n	8001a3a <StartGPS+0x1ca>
                    case 11:
                        gpsData.longitude = atof(token);
 80019c2:	f8d7 0174 	ldr.w	r0, [r7, #372]	@ 0x174
 80019c6:	f008 f9d7 	bl	8009d78 <atof>
 80019ca:	eeb0 7a40 	vmov.f32	s14, s0
 80019ce:	eef0 7a60 	vmov.f32	s15, s1
 80019d2:	4b31      	ldr	r3, [pc, #196]	@ (8001a98 <StartGPS+0x228>)
 80019d4:	ed83 7b02 	vstr	d7, [r3, #8]
                        break;
 80019d8:	e02f      	b.n	8001a3a <StartGPS+0x1ca>
                    case 12:
                        gpsData.altitude = atof(token);
 80019da:	f8d7 0174 	ldr.w	r0, [r7, #372]	@ 0x174
 80019de:	f008 f9cb 	bl	8009d78 <atof>
 80019e2:	eeb0 7a40 	vmov.f32	s14, s0
 80019e6:	eef0 7a60 	vmov.f32	s15, s1
 80019ea:	4b2b      	ldr	r3, [pc, #172]	@ (8001a98 <StartGPS+0x228>)
 80019ec:	ed83 7b04 	vstr	d7, [r3, #16]
                        break;
 80019f0:	e023      	b.n	8001a3a <StartGPS+0x1ca>
                    case 15:
                        gpsData.std_latitude = atof(token);
 80019f2:	f8d7 0174 	ldr.w	r0, [r7, #372]	@ 0x174
 80019f6:	f008 f9bf 	bl	8009d78 <atof>
 80019fa:	eeb0 7a40 	vmov.f32	s14, s0
 80019fe:	eef0 7a60 	vmov.f32	s15, s1
 8001a02:	4b25      	ldr	r3, [pc, #148]	@ (8001a98 <StartGPS+0x228>)
 8001a04:	ed83 7b06 	vstr	d7, [r3, #24]
                        break;
 8001a08:	e017      	b.n	8001a3a <StartGPS+0x1ca>
                    case 16:
                        gpsData.std_longitude = atof(token);
 8001a0a:	f8d7 0174 	ldr.w	r0, [r7, #372]	@ 0x174
 8001a0e:	f008 f9b3 	bl	8009d78 <atof>
 8001a12:	eeb0 7a40 	vmov.f32	s14, s0
 8001a16:	eef0 7a60 	vmov.f32	s15, s1
 8001a1a:	4b1f      	ldr	r3, [pc, #124]	@ (8001a98 <StartGPS+0x228>)
 8001a1c:	ed83 7b08 	vstr	d7, [r3, #32]
                        break;
 8001a20:	e00b      	b.n	8001a3a <StartGPS+0x1ca>
                    case 17:
                        gpsData.std_altitude = atof(token);
 8001a22:	f8d7 0174 	ldr.w	r0, [r7, #372]	@ 0x174
 8001a26:	f008 f9a7 	bl	8009d78 <atof>
 8001a2a:	eeb0 7a40 	vmov.f32	s14, s0
 8001a2e:	eef0 7a60 	vmov.f32	s15, s1
 8001a32:	4b19      	ldr	r3, [pc, #100]	@ (8001a98 <StartGPS+0x228>)
 8001a34:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
                        break;
 8001a38:	bf00      	nop
                    case 18:
                        // base station id
                        break;
                }
                index ++;
 8001a3a:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001a3e:	3301      	adds	r3, #1
 8001a40:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
                if(index == 18){
 8001a44:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001a48:	2b12      	cmp	r3, #18
 8001a4a:	d005      	beq.n	8001a58 <StartGPS+0x1e8>
            while(token != NULL){
 8001a4c:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	f47f af6e 	bne.w	8001932 <StartGPS+0xc2>
 8001a56:	e000      	b.n	8001a5a <StartGPS+0x1ea>
                    break;
 8001a58:	bf00      	nop
                }

            }
            ucr_01_gps_best_pos_pack(canTxData, &gpsData, UCR_01_GPS_BEST_POS_LENGTH);
 8001a5a:	2240      	movs	r2, #64	@ 0x40
 8001a5c:	490e      	ldr	r1, [pc, #56]	@ (8001a98 <StartGPS+0x228>)
 8001a5e:	480f      	ldr	r0, [pc, #60]	@ (8001a9c <StartGPS+0x22c>)
 8001a60:	f000 f8bf 	bl	8001be2 <ucr_01_gps_best_pos_pack>
            if(HAL_OK != HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, canTxData)){
 8001a64:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001a68:	4a0c      	ldr	r2, [pc, #48]	@ (8001a9c <StartGPS+0x22c>)
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4802      	ldr	r0, [pc, #8]	@ (8001a78 <StartGPS+0x208>)
 8001a6e:	f000 ff71 	bl	8002954 <HAL_FDCAN_AddMessageToTxFifoQ>
    while(1){
 8001a72:	e736      	b.n	80018e2 <StartGPS+0x72>
 8001a74:	00505050 	.word	0x00505050
 8001a78:	200001f8 	.word	0x200001f8
 8001a7c:	2000045c 	.word	0x2000045c
 8001a80:	200002ac 	.word	0x200002ac
 8001a84:	200003d8 	.word	0x200003d8
 8001a88:	0800ce14 	.word	0x0800ce14
 8001a8c:	20000560 	.word	0x20000560
 8001a90:	0800ce18 	.word	0x0800ce18
 8001a94:	0800ce24 	.word	0x0800ce24
 8001a98:	20000420 	.word	0x20000420
 8001a9c:	200003dc 	.word	0x200003dc

08001aa0 <HAL_UART_RxCpltCallback>:
//    gpsData[Size] = '\0';
//    gpsData[0] = '\0';
//    HAL_UARTEx_ReceiveToIdle_IT(&huart1, gpsData, UARTBUFFERLENGTH);
//}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
    if(temp[0] == '\n'){
 8001aa8:	4b18      	ldr	r3, [pc, #96]	@ (8001b0c <HAL_UART_RxCpltCallback+0x6c>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	2b0a      	cmp	r3, #10
 8001aae:	d10f      	bne.n	8001ad0 <HAL_UART_RxCpltCallback+0x30>
        memcpy(&FinalData, RxData, pos);
 8001ab0:	4b17      	ldr	r3, [pc, #92]	@ (8001b10 <HAL_UART_RxCpltCallback+0x70>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	4917      	ldr	r1, [pc, #92]	@ (8001b14 <HAL_UART_RxCpltCallback+0x74>)
 8001ab8:	4817      	ldr	r0, [pc, #92]	@ (8001b18 <HAL_UART_RxCpltCallback+0x78>)
 8001aba:	f009 f990 	bl	800adde <memcpy>
        pos = 0;
 8001abe:	4b14      	ldr	r3, [pc, #80]	@ (8001b10 <HAL_UART_RxCpltCallback+0x70>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	701a      	strb	r2, [r3, #0]
        osSemaphoreRelease(gpsSemaphoreHandle);
 8001ac4:	4b15      	ldr	r3, [pc, #84]	@ (8001b1c <HAL_UART_RxCpltCallback+0x7c>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f005 f853 	bl	8006b74 <osSemaphoreRelease>
 8001ace:	e00d      	b.n	8001aec <HAL_UART_RxCpltCallback+0x4c>
    }else{
        memcpy(RxData + pos, temp, 1);
 8001ad0:	4b0f      	ldr	r3, [pc, #60]	@ (8001b10 <HAL_UART_RxCpltCallback+0x70>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	4b0f      	ldr	r3, [pc, #60]	@ (8001b14 <HAL_UART_RxCpltCallback+0x74>)
 8001ad8:	4413      	add	r3, r2
 8001ada:	4a0c      	ldr	r2, [pc, #48]	@ (8001b0c <HAL_UART_RxCpltCallback+0x6c>)
 8001adc:	7812      	ldrb	r2, [r2, #0]
 8001ade:	701a      	strb	r2, [r3, #0]
        pos++;
 8001ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8001b10 <HAL_UART_RxCpltCallback+0x70>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	b2da      	uxtb	r2, r3
 8001ae8:	4b09      	ldr	r3, [pc, #36]	@ (8001b10 <HAL_UART_RxCpltCallback+0x70>)
 8001aea:	701a      	strb	r2, [r3, #0]
    }
    if(pos >= UARTBUFFERLENGTH){
 8001aec:	4b08      	ldr	r3, [pc, #32]	@ (8001b10 <HAL_UART_RxCpltCallback+0x70>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	2bff      	cmp	r3, #255	@ 0xff
 8001af2:	d102      	bne.n	8001afa <HAL_UART_RxCpltCallback+0x5a>
        pos = 0;
 8001af4:	4b06      	ldr	r3, [pc, #24]	@ (8001b10 <HAL_UART_RxCpltCallback+0x70>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	701a      	strb	r2, [r3, #0]
    }
    HAL_UART_Receive_IT(huart, temp, 1);
 8001afa:	2201      	movs	r2, #1
 8001afc:	4903      	ldr	r1, [pc, #12]	@ (8001b0c <HAL_UART_RxCpltCallback+0x6c>)
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f002 fdd4 	bl	80046ac <HAL_UART_Receive_IT>
}
 8001b04:	bf00      	nop
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	2000045c 	.word	0x2000045c
 8001b10:	20000458 	.word	0x20000458
 8001b14:	20000460 	.word	0x20000460
 8001b18:	20000560 	.word	0x20000560
 8001b1c:	200003d8 	.word	0x200003d8

08001b20 <pack_left_shift_u8>:

static inline uint8_t pack_left_shift_u8(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	4603      	mov	r3, r0
 8001b28:	71fb      	strb	r3, [r7, #7]
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	71bb      	strb	r3, [r7, #6]
 8001b2e:	4613      	mov	r3, r2
 8001b30:	717b      	strb	r3, [r7, #5]
    return (uint8_t)((uint8_t)(value << shift) & mask);
 8001b32:	79fa      	ldrb	r2, [r7, #7]
 8001b34:	79bb      	ldrb	r3, [r7, #6]
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	b2da      	uxtb	r2, r3
 8001b3c:	797b      	ldrb	r3, [r7, #5]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	b2db      	uxtb	r3, r3
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr

08001b4e <pack_left_shift_u64>:

static inline uint8_t pack_left_shift_u64(
    uint64_t value,
    uint8_t shift,
    uint8_t mask)
{
 8001b4e:	b4f0      	push	{r4, r5, r6, r7}
 8001b50:	b084      	sub	sp, #16
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001b58:	4611      	mov	r1, r2
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	71fb      	strb	r3, [r7, #7]
 8001b60:	4613      	mov	r3, r2
 8001b62:	71bb      	strb	r3, [r7, #6]
    return (uint8_t)((uint8_t)(value << shift) & mask);
 8001b64:	79f9      	ldrb	r1, [r7, #7]
 8001b66:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b6a:	f1a1 0620 	sub.w	r6, r1, #32
 8001b6e:	f1c1 0020 	rsb	r0, r1, #32
 8001b72:	fa03 f501 	lsl.w	r5, r3, r1
 8001b76:	fa02 f606 	lsl.w	r6, r2, r6
 8001b7a:	4335      	orrs	r5, r6
 8001b7c:	fa22 f000 	lsr.w	r0, r2, r0
 8001b80:	4305      	orrs	r5, r0
 8001b82:	fa02 f401 	lsl.w	r4, r2, r1
 8001b86:	b2e2      	uxtb	r2, r4
 8001b88:	79bb      	ldrb	r3, [r7, #6]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	b2db      	uxtb	r3, r3
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3710      	adds	r7, #16
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bcf0      	pop	{r4, r5, r6, r7}
 8001b96:	4770      	bx	lr

08001b98 <pack_right_shift_u64>:

static inline uint8_t pack_right_shift_u64(
    uint64_t value,
    uint8_t shift,
    uint8_t mask)
{
 8001b98:	b4f0      	push	{r4, r5, r6, r7}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001ba2:	4611      	mov	r1, r2
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	71fb      	strb	r3, [r7, #7]
 8001baa:	4613      	mov	r3, r2
 8001bac:	71bb      	strb	r3, [r7, #6]
    return (uint8_t)((uint8_t)(value >> shift) & mask);
 8001bae:	79f9      	ldrb	r1, [r7, #7]
 8001bb0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001bb4:	f1c1 0620 	rsb	r6, r1, #32
 8001bb8:	f1a1 0020 	sub.w	r0, r1, #32
 8001bbc:	fa22 f401 	lsr.w	r4, r2, r1
 8001bc0:	fa03 f606 	lsl.w	r6, r3, r6
 8001bc4:	4334      	orrs	r4, r6
 8001bc6:	fa23 f000 	lsr.w	r0, r3, r0
 8001bca:	4304      	orrs	r4, r0
 8001bcc:	fa23 f501 	lsr.w	r5, r3, r1
 8001bd0:	b2e2      	uxtb	r2, r4
 8001bd2:	79bb      	ldrb	r3, [r7, #6]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	b2db      	uxtb	r3, r3
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3710      	adds	r7, #16
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bcf0      	pop	{r4, r5, r6, r7}
 8001be0:	4770      	bx	lr

08001be2 <ucr_01_gps_best_pos_pack>:

int ucr_01_gps_best_pos_pack(
    uint8_t *dst_p,
    const struct ucr_01_gps_best_pos_t *src_p,
    size_t size)
{
 8001be2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001be6:	b096      	sub	sp, #88	@ 0x58
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6278      	str	r0, [r7, #36]	@ 0x24
 8001bec:	6239      	str	r1, [r7, #32]
 8001bee:	61fa      	str	r2, [r7, #28]
    uint64_t longitude;
    uint64_t std_altitude;
    uint64_t std_latitude;
    uint64_t std_longitude;

    if (size < 64u) {
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	2b3f      	cmp	r3, #63	@ 0x3f
 8001bf4:	d802      	bhi.n	8001bfc <ucr_01_gps_best_pos_pack+0x1a>
        return (-EINVAL);
 8001bf6:	f06f 0315 	mvn.w	r3, #21
 8001bfa:	e34e      	b.n	800229a <ucr_01_gps_best_pos_pack+0x6b8>
    }

    memset(&dst_p[0], 0, 64);
 8001bfc:	2240      	movs	r2, #64	@ 0x40
 8001bfe:	2100      	movs	r1, #0
 8001c00:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001c02:	f009 f802 	bl	800ac0a <memset>

    memcpy(&latitude, &src_p->latitude, sizeof(latitude));
 8001c06:	6a3b      	ldr	r3, [r7, #32]
 8001c08:	681c      	ldr	r4, [r3, #0]
 8001c0a:	685d      	ldr	r5, [r3, #4]
 8001c0c:	4622      	mov	r2, r4
 8001c0e:	462b      	mov	r3, r5
 8001c10:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    dst_p[0] |= pack_left_shift_u64(latitude, 0u, 0xffu);
 8001c14:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001c18:	23ff      	movs	r3, #255	@ 0xff
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f7ff ff97 	bl	8001b4e <pack_left_shift_u64>
 8001c20:	4603      	mov	r3, r0
 8001c22:	461a      	mov	r2, r3
 8001c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	b2da      	uxtb	r2, r3
 8001c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c2e:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_right_shift_u64(latitude, 8u, 0xffu);
 8001c30:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001c34:	23ff      	movs	r3, #255	@ 0xff
 8001c36:	2208      	movs	r2, #8
 8001c38:	f7ff ffae 	bl	8001b98 <pack_right_shift_u64>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	4619      	mov	r1, r3
 8001c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c42:	3301      	adds	r3, #1
 8001c44:	781a      	ldrb	r2, [r3, #0]
 8001c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c48:	3301      	adds	r3, #1
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	b2d2      	uxtb	r2, r2
 8001c4e:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_right_shift_u64(latitude, 16u, 0xffu);
 8001c50:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001c54:	23ff      	movs	r3, #255	@ 0xff
 8001c56:	2210      	movs	r2, #16
 8001c58:	f7ff ff9e 	bl	8001b98 <pack_right_shift_u64>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	4619      	mov	r1, r3
 8001c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c62:	3302      	adds	r3, #2
 8001c64:	781a      	ldrb	r2, [r3, #0]
 8001c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c68:	3302      	adds	r3, #2
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	b2d2      	uxtb	r2, r2
 8001c6e:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_right_shift_u64(latitude, 24u, 0xffu);
 8001c70:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001c74:	23ff      	movs	r3, #255	@ 0xff
 8001c76:	2218      	movs	r2, #24
 8001c78:	f7ff ff8e 	bl	8001b98 <pack_right_shift_u64>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	4619      	mov	r1, r3
 8001c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c82:	3303      	adds	r3, #3
 8001c84:	781a      	ldrb	r2, [r3, #0]
 8001c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c88:	3303      	adds	r3, #3
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	b2d2      	uxtb	r2, r2
 8001c8e:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_right_shift_u64(latitude, 32u, 0xffu);
 8001c90:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001c94:	23ff      	movs	r3, #255	@ 0xff
 8001c96:	2220      	movs	r2, #32
 8001c98:	f7ff ff7e 	bl	8001b98 <pack_right_shift_u64>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca2:	3304      	adds	r3, #4
 8001ca4:	781a      	ldrb	r2, [r3, #0]
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca8:	3304      	adds	r3, #4
 8001caa:	430a      	orrs	r2, r1
 8001cac:	b2d2      	uxtb	r2, r2
 8001cae:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_right_shift_u64(latitude, 40u, 0xffu);
 8001cb0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001cb4:	23ff      	movs	r3, #255	@ 0xff
 8001cb6:	2228      	movs	r2, #40	@ 0x28
 8001cb8:	f7ff ff6e 	bl	8001b98 <pack_right_shift_u64>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc2:	3305      	adds	r3, #5
 8001cc4:	781a      	ldrb	r2, [r3, #0]
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc8:	3305      	adds	r3, #5
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	b2d2      	uxtb	r2, r2
 8001cce:	701a      	strb	r2, [r3, #0]
    dst_p[6] |= pack_right_shift_u64(latitude, 48u, 0xffu);
 8001cd0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001cd4:	23ff      	movs	r3, #255	@ 0xff
 8001cd6:	2230      	movs	r2, #48	@ 0x30
 8001cd8:	f7ff ff5e 	bl	8001b98 <pack_right_shift_u64>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	4619      	mov	r1, r3
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce2:	3306      	adds	r3, #6
 8001ce4:	781a      	ldrb	r2, [r3, #0]
 8001ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce8:	3306      	adds	r3, #6
 8001cea:	430a      	orrs	r2, r1
 8001cec:	b2d2      	uxtb	r2, r2
 8001cee:	701a      	strb	r2, [r3, #0]
    dst_p[7] |= pack_right_shift_u64(latitude, 56u, 0xffu);
 8001cf0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001cf4:	23ff      	movs	r3, #255	@ 0xff
 8001cf6:	2238      	movs	r2, #56	@ 0x38
 8001cf8:	f7ff ff4e 	bl	8001b98 <pack_right_shift_u64>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	4619      	mov	r1, r3
 8001d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d02:	3307      	adds	r3, #7
 8001d04:	781a      	ldrb	r2, [r3, #0]
 8001d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d08:	3307      	adds	r3, #7
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	b2d2      	uxtb	r2, r2
 8001d0e:	701a      	strb	r2, [r3, #0]
    memcpy(&longitude, &src_p->longitude, sizeof(longitude));
 8001d10:	6a3b      	ldr	r3, [r7, #32]
 8001d12:	3308      	adds	r3, #8
 8001d14:	f8d3 8000 	ldr.w	r8, [r3]
 8001d18:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8001d1c:	4642      	mov	r2, r8
 8001d1e:	464b      	mov	r3, r9
 8001d20:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    dst_p[8] |= pack_left_shift_u64(longitude, 0u, 0xffu);
 8001d24:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001d28:	23ff      	movs	r3, #255	@ 0xff
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f7ff ff0f 	bl	8001b4e <pack_left_shift_u64>
 8001d30:	4603      	mov	r3, r0
 8001d32:	4619      	mov	r1, r3
 8001d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d36:	3308      	adds	r3, #8
 8001d38:	781a      	ldrb	r2, [r3, #0]
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d3c:	3308      	adds	r3, #8
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	b2d2      	uxtb	r2, r2
 8001d42:	701a      	strb	r2, [r3, #0]
    dst_p[9] |= pack_right_shift_u64(longitude, 8u, 0xffu);
 8001d44:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001d48:	23ff      	movs	r3, #255	@ 0xff
 8001d4a:	2208      	movs	r2, #8
 8001d4c:	f7ff ff24 	bl	8001b98 <pack_right_shift_u64>
 8001d50:	4603      	mov	r3, r0
 8001d52:	4619      	mov	r1, r3
 8001d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d56:	3309      	adds	r3, #9
 8001d58:	781a      	ldrb	r2, [r3, #0]
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5c:	3309      	adds	r3, #9
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	b2d2      	uxtb	r2, r2
 8001d62:	701a      	strb	r2, [r3, #0]
    dst_p[10] |= pack_right_shift_u64(longitude, 16u, 0xffu);
 8001d64:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001d68:	23ff      	movs	r3, #255	@ 0xff
 8001d6a:	2210      	movs	r2, #16
 8001d6c:	f7ff ff14 	bl	8001b98 <pack_right_shift_u64>
 8001d70:	4603      	mov	r3, r0
 8001d72:	4619      	mov	r1, r3
 8001d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d76:	330a      	adds	r3, #10
 8001d78:	781a      	ldrb	r2, [r3, #0]
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d7c:	330a      	adds	r3, #10
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	b2d2      	uxtb	r2, r2
 8001d82:	701a      	strb	r2, [r3, #0]
    dst_p[11] |= pack_right_shift_u64(longitude, 24u, 0xffu);
 8001d84:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001d88:	23ff      	movs	r3, #255	@ 0xff
 8001d8a:	2218      	movs	r2, #24
 8001d8c:	f7ff ff04 	bl	8001b98 <pack_right_shift_u64>
 8001d90:	4603      	mov	r3, r0
 8001d92:	4619      	mov	r1, r3
 8001d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d96:	330b      	adds	r3, #11
 8001d98:	781a      	ldrb	r2, [r3, #0]
 8001d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d9c:	330b      	adds	r3, #11
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	b2d2      	uxtb	r2, r2
 8001da2:	701a      	strb	r2, [r3, #0]
    dst_p[12] |= pack_right_shift_u64(longitude, 32u, 0xffu);
 8001da4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001da8:	23ff      	movs	r3, #255	@ 0xff
 8001daa:	2220      	movs	r2, #32
 8001dac:	f7ff fef4 	bl	8001b98 <pack_right_shift_u64>
 8001db0:	4603      	mov	r3, r0
 8001db2:	4619      	mov	r1, r3
 8001db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db6:	330c      	adds	r3, #12
 8001db8:	781a      	ldrb	r2, [r3, #0]
 8001dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dbc:	330c      	adds	r3, #12
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	b2d2      	uxtb	r2, r2
 8001dc2:	701a      	strb	r2, [r3, #0]
    dst_p[13] |= pack_right_shift_u64(longitude, 40u, 0xffu);
 8001dc4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001dc8:	23ff      	movs	r3, #255	@ 0xff
 8001dca:	2228      	movs	r2, #40	@ 0x28
 8001dcc:	f7ff fee4 	bl	8001b98 <pack_right_shift_u64>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd6:	330d      	adds	r3, #13
 8001dd8:	781a      	ldrb	r2, [r3, #0]
 8001dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ddc:	330d      	adds	r3, #13
 8001dde:	430a      	orrs	r2, r1
 8001de0:	b2d2      	uxtb	r2, r2
 8001de2:	701a      	strb	r2, [r3, #0]
    dst_p[14] |= pack_right_shift_u64(longitude, 48u, 0xffu);
 8001de4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001de8:	23ff      	movs	r3, #255	@ 0xff
 8001dea:	2230      	movs	r2, #48	@ 0x30
 8001dec:	f7ff fed4 	bl	8001b98 <pack_right_shift_u64>
 8001df0:	4603      	mov	r3, r0
 8001df2:	4619      	mov	r1, r3
 8001df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df6:	330e      	adds	r3, #14
 8001df8:	781a      	ldrb	r2, [r3, #0]
 8001dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dfc:	330e      	adds	r3, #14
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	b2d2      	uxtb	r2, r2
 8001e02:	701a      	strb	r2, [r3, #0]
    dst_p[15] |= pack_right_shift_u64(longitude, 56u, 0xffu);
 8001e04:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001e08:	23ff      	movs	r3, #255	@ 0xff
 8001e0a:	2238      	movs	r2, #56	@ 0x38
 8001e0c:	f7ff fec4 	bl	8001b98 <pack_right_shift_u64>
 8001e10:	4603      	mov	r3, r0
 8001e12:	4619      	mov	r1, r3
 8001e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e16:	330f      	adds	r3, #15
 8001e18:	781a      	ldrb	r2, [r3, #0]
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e1c:	330f      	adds	r3, #15
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	b2d2      	uxtb	r2, r2
 8001e22:	701a      	strb	r2, [r3, #0]
    memcpy(&altitude, &src_p->altitude, sizeof(altitude));
 8001e24:	6a3b      	ldr	r3, [r7, #32]
 8001e26:	3310      	adds	r3, #16
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	613a      	str	r2, [r7, #16]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	617b      	str	r3, [r7, #20]
 8001e30:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001e34:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    dst_p[16] |= pack_left_shift_u64(altitude, 0u, 0xffu);
 8001e38:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001e3c:	23ff      	movs	r3, #255	@ 0xff
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f7ff fe85 	bl	8001b4e <pack_left_shift_u64>
 8001e44:	4603      	mov	r3, r0
 8001e46:	4619      	mov	r1, r3
 8001e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e4a:	3310      	adds	r3, #16
 8001e4c:	781a      	ldrb	r2, [r3, #0]
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e50:	3310      	adds	r3, #16
 8001e52:	430a      	orrs	r2, r1
 8001e54:	b2d2      	uxtb	r2, r2
 8001e56:	701a      	strb	r2, [r3, #0]
    dst_p[17] |= pack_right_shift_u64(altitude, 8u, 0xffu);
 8001e58:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001e5c:	23ff      	movs	r3, #255	@ 0xff
 8001e5e:	2208      	movs	r2, #8
 8001e60:	f7ff fe9a 	bl	8001b98 <pack_right_shift_u64>
 8001e64:	4603      	mov	r3, r0
 8001e66:	4619      	mov	r1, r3
 8001e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e6a:	3311      	adds	r3, #17
 8001e6c:	781a      	ldrb	r2, [r3, #0]
 8001e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e70:	3311      	adds	r3, #17
 8001e72:	430a      	orrs	r2, r1
 8001e74:	b2d2      	uxtb	r2, r2
 8001e76:	701a      	strb	r2, [r3, #0]
    dst_p[18] |= pack_right_shift_u64(altitude, 16u, 0xffu);
 8001e78:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001e7c:	23ff      	movs	r3, #255	@ 0xff
 8001e7e:	2210      	movs	r2, #16
 8001e80:	f7ff fe8a 	bl	8001b98 <pack_right_shift_u64>
 8001e84:	4603      	mov	r3, r0
 8001e86:	4619      	mov	r1, r3
 8001e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e8a:	3312      	adds	r3, #18
 8001e8c:	781a      	ldrb	r2, [r3, #0]
 8001e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e90:	3312      	adds	r3, #18
 8001e92:	430a      	orrs	r2, r1
 8001e94:	b2d2      	uxtb	r2, r2
 8001e96:	701a      	strb	r2, [r3, #0]
    dst_p[19] |= pack_right_shift_u64(altitude, 24u, 0xffu);
 8001e98:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001e9c:	23ff      	movs	r3, #255	@ 0xff
 8001e9e:	2218      	movs	r2, #24
 8001ea0:	f7ff fe7a 	bl	8001b98 <pack_right_shift_u64>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eaa:	3313      	adds	r3, #19
 8001eac:	781a      	ldrb	r2, [r3, #0]
 8001eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb0:	3313      	adds	r3, #19
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	b2d2      	uxtb	r2, r2
 8001eb6:	701a      	strb	r2, [r3, #0]
    dst_p[20] |= pack_right_shift_u64(altitude, 32u, 0xffu);
 8001eb8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001ebc:	23ff      	movs	r3, #255	@ 0xff
 8001ebe:	2220      	movs	r2, #32
 8001ec0:	f7ff fe6a 	bl	8001b98 <pack_right_shift_u64>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eca:	3314      	adds	r3, #20
 8001ecc:	781a      	ldrb	r2, [r3, #0]
 8001ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed0:	3314      	adds	r3, #20
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	b2d2      	uxtb	r2, r2
 8001ed6:	701a      	strb	r2, [r3, #0]
    dst_p[21] |= pack_right_shift_u64(altitude, 40u, 0xffu);
 8001ed8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001edc:	23ff      	movs	r3, #255	@ 0xff
 8001ede:	2228      	movs	r2, #40	@ 0x28
 8001ee0:	f7ff fe5a 	bl	8001b98 <pack_right_shift_u64>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eea:	3315      	adds	r3, #21
 8001eec:	781a      	ldrb	r2, [r3, #0]
 8001eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef0:	3315      	adds	r3, #21
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	b2d2      	uxtb	r2, r2
 8001ef6:	701a      	strb	r2, [r3, #0]
    dst_p[22] |= pack_right_shift_u64(altitude, 48u, 0xffu);
 8001ef8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001efc:	23ff      	movs	r3, #255	@ 0xff
 8001efe:	2230      	movs	r2, #48	@ 0x30
 8001f00:	f7ff fe4a 	bl	8001b98 <pack_right_shift_u64>
 8001f04:	4603      	mov	r3, r0
 8001f06:	4619      	mov	r1, r3
 8001f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f0a:	3316      	adds	r3, #22
 8001f0c:	781a      	ldrb	r2, [r3, #0]
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f10:	3316      	adds	r3, #22
 8001f12:	430a      	orrs	r2, r1
 8001f14:	b2d2      	uxtb	r2, r2
 8001f16:	701a      	strb	r2, [r3, #0]
    dst_p[23] |= pack_right_shift_u64(altitude, 56u, 0xffu);
 8001f18:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001f1c:	23ff      	movs	r3, #255	@ 0xff
 8001f1e:	2238      	movs	r2, #56	@ 0x38
 8001f20:	f7ff fe3a 	bl	8001b98 <pack_right_shift_u64>
 8001f24:	4603      	mov	r3, r0
 8001f26:	4619      	mov	r1, r3
 8001f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f2a:	3317      	adds	r3, #23
 8001f2c:	781a      	ldrb	r2, [r3, #0]
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f30:	3317      	adds	r3, #23
 8001f32:	430a      	orrs	r2, r1
 8001f34:	b2d2      	uxtb	r2, r2
 8001f36:	701a      	strb	r2, [r3, #0]
    memcpy(&std_latitude, &src_p->std_latitude, sizeof(std_latitude));
 8001f38:	6a3b      	ldr	r3, [r7, #32]
 8001f3a:	3318      	adds	r3, #24
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	60ba      	str	r2, [r7, #8]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	60fb      	str	r3, [r7, #12]
 8001f44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f48:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    dst_p[24] |= pack_left_shift_u64(std_latitude, 0u, 0xffu);
 8001f4c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001f50:	23ff      	movs	r3, #255	@ 0xff
 8001f52:	2200      	movs	r2, #0
 8001f54:	f7ff fdfb 	bl	8001b4e <pack_left_shift_u64>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f5e:	3318      	adds	r3, #24
 8001f60:	781a      	ldrb	r2, [r3, #0]
 8001f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f64:	3318      	adds	r3, #24
 8001f66:	430a      	orrs	r2, r1
 8001f68:	b2d2      	uxtb	r2, r2
 8001f6a:	701a      	strb	r2, [r3, #0]
    dst_p[25] |= pack_right_shift_u64(std_latitude, 8u, 0xffu);
 8001f6c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001f70:	23ff      	movs	r3, #255	@ 0xff
 8001f72:	2208      	movs	r2, #8
 8001f74:	f7ff fe10 	bl	8001b98 <pack_right_shift_u64>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f7e:	3319      	adds	r3, #25
 8001f80:	781a      	ldrb	r2, [r3, #0]
 8001f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f84:	3319      	adds	r3, #25
 8001f86:	430a      	orrs	r2, r1
 8001f88:	b2d2      	uxtb	r2, r2
 8001f8a:	701a      	strb	r2, [r3, #0]
    dst_p[26] |= pack_right_shift_u64(std_latitude, 16u, 0xffu);
 8001f8c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001f90:	23ff      	movs	r3, #255	@ 0xff
 8001f92:	2210      	movs	r2, #16
 8001f94:	f7ff fe00 	bl	8001b98 <pack_right_shift_u64>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f9e:	331a      	adds	r3, #26
 8001fa0:	781a      	ldrb	r2, [r3, #0]
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa4:	331a      	adds	r3, #26
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	b2d2      	uxtb	r2, r2
 8001faa:	701a      	strb	r2, [r3, #0]
    dst_p[27] |= pack_right_shift_u64(std_latitude, 24u, 0xffu);
 8001fac:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001fb0:	23ff      	movs	r3, #255	@ 0xff
 8001fb2:	2218      	movs	r2, #24
 8001fb4:	f7ff fdf0 	bl	8001b98 <pack_right_shift_u64>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	4619      	mov	r1, r3
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fbe:	331b      	adds	r3, #27
 8001fc0:	781a      	ldrb	r2, [r3, #0]
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc4:	331b      	adds	r3, #27
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	b2d2      	uxtb	r2, r2
 8001fca:	701a      	strb	r2, [r3, #0]
    dst_p[28] |= pack_right_shift_u64(std_latitude, 32u, 0xffu);
 8001fcc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001fd0:	23ff      	movs	r3, #255	@ 0xff
 8001fd2:	2220      	movs	r2, #32
 8001fd4:	f7ff fde0 	bl	8001b98 <pack_right_shift_u64>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	4619      	mov	r1, r3
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fde:	331c      	adds	r3, #28
 8001fe0:	781a      	ldrb	r2, [r3, #0]
 8001fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe4:	331c      	adds	r3, #28
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	b2d2      	uxtb	r2, r2
 8001fea:	701a      	strb	r2, [r3, #0]
    dst_p[29] |= pack_right_shift_u64(std_latitude, 40u, 0xffu);
 8001fec:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001ff0:	23ff      	movs	r3, #255	@ 0xff
 8001ff2:	2228      	movs	r2, #40	@ 0x28
 8001ff4:	f7ff fdd0 	bl	8001b98 <pack_right_shift_u64>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ffe:	331d      	adds	r3, #29
 8002000:	781a      	ldrb	r2, [r3, #0]
 8002002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002004:	331d      	adds	r3, #29
 8002006:	430a      	orrs	r2, r1
 8002008:	b2d2      	uxtb	r2, r2
 800200a:	701a      	strb	r2, [r3, #0]
    dst_p[30] |= pack_right_shift_u64(std_latitude, 48u, 0xffu);
 800200c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002010:	23ff      	movs	r3, #255	@ 0xff
 8002012:	2230      	movs	r2, #48	@ 0x30
 8002014:	f7ff fdc0 	bl	8001b98 <pack_right_shift_u64>
 8002018:	4603      	mov	r3, r0
 800201a:	4619      	mov	r1, r3
 800201c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800201e:	331e      	adds	r3, #30
 8002020:	781a      	ldrb	r2, [r3, #0]
 8002022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002024:	331e      	adds	r3, #30
 8002026:	430a      	orrs	r2, r1
 8002028:	b2d2      	uxtb	r2, r2
 800202a:	701a      	strb	r2, [r3, #0]
    dst_p[31] |= pack_right_shift_u64(std_latitude, 56u, 0xffu);
 800202c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002030:	23ff      	movs	r3, #255	@ 0xff
 8002032:	2238      	movs	r2, #56	@ 0x38
 8002034:	f7ff fdb0 	bl	8001b98 <pack_right_shift_u64>
 8002038:	4603      	mov	r3, r0
 800203a:	4619      	mov	r1, r3
 800203c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800203e:	331f      	adds	r3, #31
 8002040:	781a      	ldrb	r2, [r3, #0]
 8002042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002044:	331f      	adds	r3, #31
 8002046:	430a      	orrs	r2, r1
 8002048:	b2d2      	uxtb	r2, r2
 800204a:	701a      	strb	r2, [r3, #0]
    memcpy(&std_longitude, &src_p->std_longitude, sizeof(std_longitude));
 800204c:	6a3b      	ldr	r3, [r7, #32]
 800204e:	3320      	adds	r3, #32
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	603a      	str	r2, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	607b      	str	r3, [r7, #4]
 8002058:	e9d7 2300 	ldrd	r2, r3, [r7]
 800205c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    dst_p[32] |= pack_left_shift_u64(std_longitude, 0u, 0xffu);
 8002060:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002064:	23ff      	movs	r3, #255	@ 0xff
 8002066:	2200      	movs	r2, #0
 8002068:	f7ff fd71 	bl	8001b4e <pack_left_shift_u64>
 800206c:	4603      	mov	r3, r0
 800206e:	4619      	mov	r1, r3
 8002070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002072:	3320      	adds	r3, #32
 8002074:	781a      	ldrb	r2, [r3, #0]
 8002076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002078:	3320      	adds	r3, #32
 800207a:	430a      	orrs	r2, r1
 800207c:	b2d2      	uxtb	r2, r2
 800207e:	701a      	strb	r2, [r3, #0]
    dst_p[33] |= pack_right_shift_u64(std_longitude, 8u, 0xffu);
 8002080:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002084:	23ff      	movs	r3, #255	@ 0xff
 8002086:	2208      	movs	r2, #8
 8002088:	f7ff fd86 	bl	8001b98 <pack_right_shift_u64>
 800208c:	4603      	mov	r3, r0
 800208e:	4619      	mov	r1, r3
 8002090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002092:	3321      	adds	r3, #33	@ 0x21
 8002094:	781a      	ldrb	r2, [r3, #0]
 8002096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002098:	3321      	adds	r3, #33	@ 0x21
 800209a:	430a      	orrs	r2, r1
 800209c:	b2d2      	uxtb	r2, r2
 800209e:	701a      	strb	r2, [r3, #0]
    dst_p[34] |= pack_right_shift_u64(std_longitude, 16u, 0xffu);
 80020a0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80020a4:	23ff      	movs	r3, #255	@ 0xff
 80020a6:	2210      	movs	r2, #16
 80020a8:	f7ff fd76 	bl	8001b98 <pack_right_shift_u64>
 80020ac:	4603      	mov	r3, r0
 80020ae:	4619      	mov	r1, r3
 80020b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b2:	3322      	adds	r3, #34	@ 0x22
 80020b4:	781a      	ldrb	r2, [r3, #0]
 80020b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b8:	3322      	adds	r3, #34	@ 0x22
 80020ba:	430a      	orrs	r2, r1
 80020bc:	b2d2      	uxtb	r2, r2
 80020be:	701a      	strb	r2, [r3, #0]
    dst_p[35] |= pack_right_shift_u64(std_longitude, 24u, 0xffu);
 80020c0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80020c4:	23ff      	movs	r3, #255	@ 0xff
 80020c6:	2218      	movs	r2, #24
 80020c8:	f7ff fd66 	bl	8001b98 <pack_right_shift_u64>
 80020cc:	4603      	mov	r3, r0
 80020ce:	4619      	mov	r1, r3
 80020d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d2:	3323      	adds	r3, #35	@ 0x23
 80020d4:	781a      	ldrb	r2, [r3, #0]
 80020d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d8:	3323      	adds	r3, #35	@ 0x23
 80020da:	430a      	orrs	r2, r1
 80020dc:	b2d2      	uxtb	r2, r2
 80020de:	701a      	strb	r2, [r3, #0]
    dst_p[36] |= pack_right_shift_u64(std_longitude, 32u, 0xffu);
 80020e0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80020e4:	23ff      	movs	r3, #255	@ 0xff
 80020e6:	2220      	movs	r2, #32
 80020e8:	f7ff fd56 	bl	8001b98 <pack_right_shift_u64>
 80020ec:	4603      	mov	r3, r0
 80020ee:	4619      	mov	r1, r3
 80020f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f2:	3324      	adds	r3, #36	@ 0x24
 80020f4:	781a      	ldrb	r2, [r3, #0]
 80020f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f8:	3324      	adds	r3, #36	@ 0x24
 80020fa:	430a      	orrs	r2, r1
 80020fc:	b2d2      	uxtb	r2, r2
 80020fe:	701a      	strb	r2, [r3, #0]
    dst_p[37] |= pack_right_shift_u64(std_longitude, 40u, 0xffu);
 8002100:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002104:	23ff      	movs	r3, #255	@ 0xff
 8002106:	2228      	movs	r2, #40	@ 0x28
 8002108:	f7ff fd46 	bl	8001b98 <pack_right_shift_u64>
 800210c:	4603      	mov	r3, r0
 800210e:	4619      	mov	r1, r3
 8002110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002112:	3325      	adds	r3, #37	@ 0x25
 8002114:	781a      	ldrb	r2, [r3, #0]
 8002116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002118:	3325      	adds	r3, #37	@ 0x25
 800211a:	430a      	orrs	r2, r1
 800211c:	b2d2      	uxtb	r2, r2
 800211e:	701a      	strb	r2, [r3, #0]
    dst_p[38] |= pack_right_shift_u64(std_longitude, 48u, 0xffu);
 8002120:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002124:	23ff      	movs	r3, #255	@ 0xff
 8002126:	2230      	movs	r2, #48	@ 0x30
 8002128:	f7ff fd36 	bl	8001b98 <pack_right_shift_u64>
 800212c:	4603      	mov	r3, r0
 800212e:	4619      	mov	r1, r3
 8002130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002132:	3326      	adds	r3, #38	@ 0x26
 8002134:	781a      	ldrb	r2, [r3, #0]
 8002136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002138:	3326      	adds	r3, #38	@ 0x26
 800213a:	430a      	orrs	r2, r1
 800213c:	b2d2      	uxtb	r2, r2
 800213e:	701a      	strb	r2, [r3, #0]
    dst_p[39] |= pack_right_shift_u64(std_longitude, 56u, 0xffu);
 8002140:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002144:	23ff      	movs	r3, #255	@ 0xff
 8002146:	2238      	movs	r2, #56	@ 0x38
 8002148:	f7ff fd26 	bl	8001b98 <pack_right_shift_u64>
 800214c:	4603      	mov	r3, r0
 800214e:	4619      	mov	r1, r3
 8002150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002152:	3327      	adds	r3, #39	@ 0x27
 8002154:	781a      	ldrb	r2, [r3, #0]
 8002156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002158:	3327      	adds	r3, #39	@ 0x27
 800215a:	430a      	orrs	r2, r1
 800215c:	b2d2      	uxtb	r2, r2
 800215e:	701a      	strb	r2, [r3, #0]
    memcpy(&std_altitude, &src_p->std_altitude, sizeof(std_altitude));
 8002160:	6a3b      	ldr	r3, [r7, #32]
 8002162:	3328      	adds	r3, #40	@ 0x28
 8002164:	f8d3 a000 	ldr.w	sl, [r3]
 8002168:	f8d3 b004 	ldr.w	fp, [r3, #4]
 800216c:	4652      	mov	r2, sl
 800216e:	465b      	mov	r3, fp
 8002170:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    dst_p[40] |= pack_left_shift_u64(std_altitude, 0u, 0xffu);
 8002174:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002178:	23ff      	movs	r3, #255	@ 0xff
 800217a:	2200      	movs	r2, #0
 800217c:	f7ff fce7 	bl	8001b4e <pack_left_shift_u64>
 8002180:	4603      	mov	r3, r0
 8002182:	4619      	mov	r1, r3
 8002184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002186:	3328      	adds	r3, #40	@ 0x28
 8002188:	781a      	ldrb	r2, [r3, #0]
 800218a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800218c:	3328      	adds	r3, #40	@ 0x28
 800218e:	430a      	orrs	r2, r1
 8002190:	b2d2      	uxtb	r2, r2
 8002192:	701a      	strb	r2, [r3, #0]
    dst_p[41] |= pack_right_shift_u64(std_altitude, 8u, 0xffu);
 8002194:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002198:	23ff      	movs	r3, #255	@ 0xff
 800219a:	2208      	movs	r2, #8
 800219c:	f7ff fcfc 	bl	8001b98 <pack_right_shift_u64>
 80021a0:	4603      	mov	r3, r0
 80021a2:	4619      	mov	r1, r3
 80021a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a6:	3329      	adds	r3, #41	@ 0x29
 80021a8:	781a      	ldrb	r2, [r3, #0]
 80021aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ac:	3329      	adds	r3, #41	@ 0x29
 80021ae:	430a      	orrs	r2, r1
 80021b0:	b2d2      	uxtb	r2, r2
 80021b2:	701a      	strb	r2, [r3, #0]
    dst_p[42] |= pack_right_shift_u64(std_altitude, 16u, 0xffu);
 80021b4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80021b8:	23ff      	movs	r3, #255	@ 0xff
 80021ba:	2210      	movs	r2, #16
 80021bc:	f7ff fcec 	bl	8001b98 <pack_right_shift_u64>
 80021c0:	4603      	mov	r3, r0
 80021c2:	4619      	mov	r1, r3
 80021c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c6:	332a      	adds	r3, #42	@ 0x2a
 80021c8:	781a      	ldrb	r2, [r3, #0]
 80021ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021cc:	332a      	adds	r3, #42	@ 0x2a
 80021ce:	430a      	orrs	r2, r1
 80021d0:	b2d2      	uxtb	r2, r2
 80021d2:	701a      	strb	r2, [r3, #0]
    dst_p[43] |= pack_right_shift_u64(std_altitude, 24u, 0xffu);
 80021d4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80021d8:	23ff      	movs	r3, #255	@ 0xff
 80021da:	2218      	movs	r2, #24
 80021dc:	f7ff fcdc 	bl	8001b98 <pack_right_shift_u64>
 80021e0:	4603      	mov	r3, r0
 80021e2:	4619      	mov	r1, r3
 80021e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e6:	332b      	adds	r3, #43	@ 0x2b
 80021e8:	781a      	ldrb	r2, [r3, #0]
 80021ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ec:	332b      	adds	r3, #43	@ 0x2b
 80021ee:	430a      	orrs	r2, r1
 80021f0:	b2d2      	uxtb	r2, r2
 80021f2:	701a      	strb	r2, [r3, #0]
    dst_p[44] |= pack_right_shift_u64(std_altitude, 32u, 0xffu);
 80021f4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80021f8:	23ff      	movs	r3, #255	@ 0xff
 80021fa:	2220      	movs	r2, #32
 80021fc:	f7ff fccc 	bl	8001b98 <pack_right_shift_u64>
 8002200:	4603      	mov	r3, r0
 8002202:	4619      	mov	r1, r3
 8002204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002206:	332c      	adds	r3, #44	@ 0x2c
 8002208:	781a      	ldrb	r2, [r3, #0]
 800220a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800220c:	332c      	adds	r3, #44	@ 0x2c
 800220e:	430a      	orrs	r2, r1
 8002210:	b2d2      	uxtb	r2, r2
 8002212:	701a      	strb	r2, [r3, #0]
    dst_p[45] |= pack_right_shift_u64(std_altitude, 40u, 0xffu);
 8002214:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002218:	23ff      	movs	r3, #255	@ 0xff
 800221a:	2228      	movs	r2, #40	@ 0x28
 800221c:	f7ff fcbc 	bl	8001b98 <pack_right_shift_u64>
 8002220:	4603      	mov	r3, r0
 8002222:	4619      	mov	r1, r3
 8002224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002226:	332d      	adds	r3, #45	@ 0x2d
 8002228:	781a      	ldrb	r2, [r3, #0]
 800222a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800222c:	332d      	adds	r3, #45	@ 0x2d
 800222e:	430a      	orrs	r2, r1
 8002230:	b2d2      	uxtb	r2, r2
 8002232:	701a      	strb	r2, [r3, #0]
    dst_p[46] |= pack_right_shift_u64(std_altitude, 48u, 0xffu);
 8002234:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002238:	23ff      	movs	r3, #255	@ 0xff
 800223a:	2230      	movs	r2, #48	@ 0x30
 800223c:	f7ff fcac 	bl	8001b98 <pack_right_shift_u64>
 8002240:	4603      	mov	r3, r0
 8002242:	4619      	mov	r1, r3
 8002244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002246:	332e      	adds	r3, #46	@ 0x2e
 8002248:	781a      	ldrb	r2, [r3, #0]
 800224a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800224c:	332e      	adds	r3, #46	@ 0x2e
 800224e:	430a      	orrs	r2, r1
 8002250:	b2d2      	uxtb	r2, r2
 8002252:	701a      	strb	r2, [r3, #0]
    dst_p[47] |= pack_right_shift_u64(std_altitude, 56u, 0xffu);
 8002254:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002258:	23ff      	movs	r3, #255	@ 0xff
 800225a:	2238      	movs	r2, #56	@ 0x38
 800225c:	f7ff fc9c 	bl	8001b98 <pack_right_shift_u64>
 8002260:	4603      	mov	r3, r0
 8002262:	4619      	mov	r1, r3
 8002264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002266:	332f      	adds	r3, #47	@ 0x2f
 8002268:	781a      	ldrb	r2, [r3, #0]
 800226a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800226c:	332f      	adds	r3, #47	@ 0x2f
 800226e:	430a      	orrs	r2, r1
 8002270:	b2d2      	uxtb	r2, r2
 8002272:	701a      	strb	r2, [r3, #0]
    dst_p[48] |= pack_left_shift_u8(src_p->gps_status, 0u, 0xffu);
 8002274:	6a3b      	ldr	r3, [r7, #32]
 8002276:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800227a:	22ff      	movs	r2, #255	@ 0xff
 800227c:	2100      	movs	r1, #0
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff fc4e 	bl	8001b20 <pack_left_shift_u8>
 8002284:	4603      	mov	r3, r0
 8002286:	4619      	mov	r1, r3
 8002288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800228a:	3330      	adds	r3, #48	@ 0x30
 800228c:	781a      	ldrb	r2, [r3, #0]
 800228e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002290:	3330      	adds	r3, #48	@ 0x30
 8002292:	430a      	orrs	r2, r1
 8002294:	b2d2      	uxtb	r2, r2
 8002296:	701a      	strb	r2, [r3, #0]

    return (64);
 8002298:	2340      	movs	r3, #64	@ 0x40
}
 800229a:	4618      	mov	r0, r3
 800229c:	3758      	adds	r7, #88	@ 0x58
 800229e:	46bd      	mov	sp, r7
 80022a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080022a4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80022aa:	2300      	movs	r3, #0
 80022ac:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022ae:	2003      	movs	r0, #3
 80022b0:	f000 f8db 	bl	800246a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022b4:	200f      	movs	r0, #15
 80022b6:	f7fe ffd3 	bl	8001260 <HAL_InitTick>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d002      	beq.n	80022c6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	71fb      	strb	r3, [r7, #7]
 80022c4:	e001      	b.n	80022ca <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80022c6:	f7fe ffa1 	bl	800120c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80022ca:	79fb      	ldrb	r3, [r7, #7]

}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3708      	adds	r7, #8
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022d8:	4b05      	ldr	r3, [pc, #20]	@ (80022f0 <HAL_IncTick+0x1c>)
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	4b05      	ldr	r3, [pc, #20]	@ (80022f4 <HAL_IncTick+0x20>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4413      	add	r3, r2
 80022e2:	4a03      	ldr	r2, [pc, #12]	@ (80022f0 <HAL_IncTick+0x1c>)
 80022e4:	6013      	str	r3, [r2, #0]
}
 80022e6:	bf00      	nop
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr
 80022f0:	20000660 	.word	0x20000660
 80022f4:	20000008 	.word	0x20000008

080022f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  return uwTick;
 80022fc:	4b03      	ldr	r3, [pc, #12]	@ (800230c <HAL_GetTick+0x14>)
 80022fe:	681b      	ldr	r3, [r3, #0]
}
 8002300:	4618      	mov	r0, r3
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	20000660 	.word	0x20000660

08002310 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f003 0307 	and.w	r3, r3, #7
 800231e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002320:	4b0c      	ldr	r3, [pc, #48]	@ (8002354 <__NVIC_SetPriorityGrouping+0x44>)
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002326:	68ba      	ldr	r2, [r7, #8]
 8002328:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800232c:	4013      	ands	r3, r2
 800232e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002338:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800233c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002340:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002342:	4a04      	ldr	r2, [pc, #16]	@ (8002354 <__NVIC_SetPriorityGrouping+0x44>)
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	60d3      	str	r3, [r2, #12]
}
 8002348:	bf00      	nop
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	e000ed00 	.word	0xe000ed00

08002358 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800235c:	4b04      	ldr	r3, [pc, #16]	@ (8002370 <__NVIC_GetPriorityGrouping+0x18>)
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	0a1b      	lsrs	r3, r3, #8
 8002362:	f003 0307 	and.w	r3, r3, #7
}
 8002366:	4618      	mov	r0, r3
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr
 8002370:	e000ed00 	.word	0xe000ed00

08002374 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	4603      	mov	r3, r0
 800237c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800237e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002382:	2b00      	cmp	r3, #0
 8002384:	db0b      	blt.n	800239e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002386:	79fb      	ldrb	r3, [r7, #7]
 8002388:	f003 021f 	and.w	r2, r3, #31
 800238c:	4907      	ldr	r1, [pc, #28]	@ (80023ac <__NVIC_EnableIRQ+0x38>)
 800238e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002392:	095b      	lsrs	r3, r3, #5
 8002394:	2001      	movs	r0, #1
 8002396:	fa00 f202 	lsl.w	r2, r0, r2
 800239a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800239e:	bf00      	nop
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	e000e100 	.word	0xe000e100

080023b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	4603      	mov	r3, r0
 80023b8:	6039      	str	r1, [r7, #0]
 80023ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	db0a      	blt.n	80023da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	b2da      	uxtb	r2, r3
 80023c8:	490c      	ldr	r1, [pc, #48]	@ (80023fc <__NVIC_SetPriority+0x4c>)
 80023ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ce:	0112      	lsls	r2, r2, #4
 80023d0:	b2d2      	uxtb	r2, r2
 80023d2:	440b      	add	r3, r1
 80023d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023d8:	e00a      	b.n	80023f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	b2da      	uxtb	r2, r3
 80023de:	4908      	ldr	r1, [pc, #32]	@ (8002400 <__NVIC_SetPriority+0x50>)
 80023e0:	79fb      	ldrb	r3, [r7, #7]
 80023e2:	f003 030f 	and.w	r3, r3, #15
 80023e6:	3b04      	subs	r3, #4
 80023e8:	0112      	lsls	r2, r2, #4
 80023ea:	b2d2      	uxtb	r2, r2
 80023ec:	440b      	add	r3, r1
 80023ee:	761a      	strb	r2, [r3, #24]
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	e000e100 	.word	0xe000e100
 8002400:	e000ed00 	.word	0xe000ed00

08002404 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002404:	b480      	push	{r7}
 8002406:	b089      	sub	sp, #36	@ 0x24
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f003 0307 	and.w	r3, r3, #7
 8002416:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	f1c3 0307 	rsb	r3, r3, #7
 800241e:	2b04      	cmp	r3, #4
 8002420:	bf28      	it	cs
 8002422:	2304      	movcs	r3, #4
 8002424:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	3304      	adds	r3, #4
 800242a:	2b06      	cmp	r3, #6
 800242c:	d902      	bls.n	8002434 <NVIC_EncodePriority+0x30>
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	3b03      	subs	r3, #3
 8002432:	e000      	b.n	8002436 <NVIC_EncodePriority+0x32>
 8002434:	2300      	movs	r3, #0
 8002436:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002438:	f04f 32ff 	mov.w	r2, #4294967295
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	43da      	mvns	r2, r3
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	401a      	ands	r2, r3
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800244c:	f04f 31ff 	mov.w	r1, #4294967295
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	fa01 f303 	lsl.w	r3, r1, r3
 8002456:	43d9      	mvns	r1, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800245c:	4313      	orrs	r3, r2
         );
}
 800245e:	4618      	mov	r0, r3
 8002460:	3724      	adds	r7, #36	@ 0x24
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr

0800246a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b082      	sub	sp, #8
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7ff ff4c 	bl	8002310 <__NVIC_SetPriorityGrouping>
}
 8002478:	bf00      	nop
 800247a:	3708      	adds	r7, #8
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b086      	sub	sp, #24
 8002484:	af00      	add	r7, sp, #0
 8002486:	4603      	mov	r3, r0
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
 800248c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800248e:	f7ff ff63 	bl	8002358 <__NVIC_GetPriorityGrouping>
 8002492:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	68b9      	ldr	r1, [r7, #8]
 8002498:	6978      	ldr	r0, [r7, #20]
 800249a:	f7ff ffb3 	bl	8002404 <NVIC_EncodePriority>
 800249e:	4602      	mov	r2, r0
 80024a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024a4:	4611      	mov	r1, r2
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7ff ff82 	bl	80023b0 <__NVIC_SetPriority>
}
 80024ac:	bf00      	nop
 80024ae:	3718      	adds	r7, #24
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	4603      	mov	r3, r0
 80024bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7ff ff56 	bl	8002374 <__NVIC_EnableIRQ>
}
 80024c8:	bf00      	nop
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024d8:	2300      	movs	r3, #0
 80024da:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d005      	beq.n	80024f4 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2204      	movs	r2, #4
 80024ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	73fb      	strb	r3, [r7, #15]
 80024f2:	e037      	b.n	8002564 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f022 020e 	bic.w	r2, r2, #14
 8002502:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800250e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002512:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f022 0201 	bic.w	r2, r2, #1
 8002522:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002528:	f003 021f 	and.w	r2, r3, #31
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002530:	2101      	movs	r1, #1
 8002532:	fa01 f202 	lsl.w	r2, r1, r2
 8002536:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002540:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002546:	2b00      	cmp	r3, #0
 8002548:	d00c      	beq.n	8002564 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002554:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002558:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002562:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8002574:	7bfb      	ldrb	r3, [r7, #15]
}
 8002576:	4618      	mov	r0, r3
 8002578:	3714      	adds	r7, #20
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr

08002582 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b084      	sub	sp, #16
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800258a:	2300      	movs	r3, #0
 800258c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b02      	cmp	r3, #2
 8002598:	d00d      	beq.n	80025b6 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2204      	movs	r2, #4
 800259e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	73fb      	strb	r3, [r7, #15]
 80025b4:	e047      	b.n	8002646 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f022 020e 	bic.w	r2, r2, #14
 80025c4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f022 0201 	bic.w	r2, r2, #1
 80025d4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80025e4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ea:	f003 021f 	and.w	r2, r3, #31
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f2:	2101      	movs	r1, #1
 80025f4:	fa01 f202 	lsl.w	r2, r1, r2
 80025f8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002602:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002608:	2b00      	cmp	r3, #0
 800260a:	d00c      	beq.n	8002626 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002616:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800261a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002624:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2201      	movs	r2, #1
 800262a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800263a:	2b00      	cmp	r3, #0
 800263c:	d003      	beq.n	8002646 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	4798      	blx	r3
    }
  }
  return status;
 8002646:	7bfb      	ldrb	r3, [r7, #15]
}
 8002648:	4618      	mov	r0, r3
 800264a:	3710      	adds	r7, #16
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e147      	b.n	80028f2 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b00      	cmp	r3, #0
 800266c:	d106      	bne.n	800267c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f7fe fcba 	bl	8000ff0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	699a      	ldr	r2, [r3, #24]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f022 0210 	bic.w	r2, r2, #16
 800268a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800268c:	f7ff fe34 	bl	80022f8 <HAL_GetTick>
 8002690:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002692:	e012      	b.n	80026ba <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002694:	f7ff fe30 	bl	80022f8 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b0a      	cmp	r3, #10
 80026a0:	d90b      	bls.n	80026ba <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026a6:	f043 0201 	orr.w	r2, r3, #1
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2203      	movs	r2, #3
 80026b2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e11b      	b.n	80028f2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	f003 0308 	and.w	r3, r3, #8
 80026c4:	2b08      	cmp	r3, #8
 80026c6:	d0e5      	beq.n	8002694 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	699a      	ldr	r2, [r3, #24]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f042 0201 	orr.w	r2, r2, #1
 80026d6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026d8:	f7ff fe0e 	bl	80022f8 <HAL_GetTick>
 80026dc:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80026de:	e012      	b.n	8002706 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80026e0:	f7ff fe0a 	bl	80022f8 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b0a      	cmp	r3, #10
 80026ec:	d90b      	bls.n	8002706 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026f2:	f043 0201 	orr.w	r2, r3, #1
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2203      	movs	r2, #3
 80026fe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e0f5      	b.n	80028f2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	699b      	ldr	r3, [r3, #24]
 800270c:	f003 0301 	and.w	r3, r3, #1
 8002710:	2b00      	cmp	r3, #0
 8002712:	d0e5      	beq.n	80026e0 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	699a      	ldr	r2, [r3, #24]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f042 0202 	orr.w	r2, r2, #2
 8002722:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a74      	ldr	r2, [pc, #464]	@ (80028fc <HAL_FDCAN_Init+0x2ac>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d103      	bne.n	8002736 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800272e:	4a74      	ldr	r2, [pc, #464]	@ (8002900 <HAL_FDCAN_Init+0x2b0>)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	7c1b      	ldrb	r3, [r3, #16]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d108      	bne.n	8002750 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	699a      	ldr	r2, [r3, #24]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800274c:	619a      	str	r2, [r3, #24]
 800274e:	e007      	b.n	8002760 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	699a      	ldr	r2, [r3, #24]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800275e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	7c5b      	ldrb	r3, [r3, #17]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d108      	bne.n	800277a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	699a      	ldr	r2, [r3, #24]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002776:	619a      	str	r2, [r3, #24]
 8002778:	e007      	b.n	800278a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	699a      	ldr	r2, [r3, #24]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002788:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	7c9b      	ldrb	r3, [r3, #18]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d108      	bne.n	80027a4 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	699a      	ldr	r2, [r3, #24]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80027a0:	619a      	str	r2, [r3, #24]
 80027a2:	e007      	b.n	80027b4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	699a      	ldr	r2, [r3, #24]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80027b2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	689a      	ldr	r2, [r3, #8]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	430a      	orrs	r2, r1
 80027c8:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	699a      	ldr	r2, [r3, #24]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80027d8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	691a      	ldr	r2, [r3, #16]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f022 0210 	bic.w	r2, r2, #16
 80027e8:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d108      	bne.n	8002804 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	699a      	ldr	r2, [r3, #24]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f042 0204 	orr.w	r2, r2, #4
 8002800:	619a      	str	r2, [r3, #24]
 8002802:	e02c      	b.n	800285e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d028      	beq.n	800285e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	2b02      	cmp	r3, #2
 8002812:	d01c      	beq.n	800284e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	699a      	ldr	r2, [r3, #24]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002822:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	691a      	ldr	r2, [r3, #16]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f042 0210 	orr.w	r2, r2, #16
 8002832:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	2b03      	cmp	r3, #3
 800283a:	d110      	bne.n	800285e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	699a      	ldr	r2, [r3, #24]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f042 0220 	orr.w	r2, r2, #32
 800284a:	619a      	str	r2, [r3, #24]
 800284c:	e007      	b.n	800285e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	699a      	ldr	r2, [r3, #24]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f042 0220 	orr.w	r2, r2, #32
 800285c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	3b01      	subs	r3, #1
 8002864:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	69db      	ldr	r3, [r3, #28]
 800286a:	3b01      	subs	r3, #1
 800286c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800286e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a1b      	ldr	r3, [r3, #32]
 8002874:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002876:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	3b01      	subs	r3, #1
 8002880:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002886:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002888:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002892:	d115      	bne.n	80028c0 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002898:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800289e:	3b01      	subs	r3, #1
 80028a0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80028a2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a8:	3b01      	subs	r3, #1
 80028aa:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80028ac:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b4:	3b01      	subs	r3, #1
 80028b6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80028bc:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80028be:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	430a      	orrs	r2, r1
 80028d2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 f880 	bl	80029dc <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	40006400 	.word	0x40006400
 8002900:	40006500 	.word	0x40006500

08002904 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002912:	b2db      	uxtb	r3, r3
 8002914:	2b01      	cmp	r3, #1
 8002916:	d110      	bne.n	800293a <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2202      	movs	r2, #2
 800291c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	699a      	ldr	r2, [r3, #24]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f022 0201 	bic.w	r2, r2, #1
 800292e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8002936:	2300      	movs	r3, #0
 8002938:	e006      	b.n	8002948 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800293e:	f043 0204 	orr.w	r2, r3, #4
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
  }
}
 8002948:	4618      	mov	r0, r3
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b086      	sub	sp, #24
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002966:	b2db      	uxtb	r3, r3
 8002968:	2b02      	cmp	r3, #2
 800296a:	d12c      	bne.n	80029c6 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002974:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d007      	beq.n	800298c <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002980:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e023      	b.n	80029d4 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002994:	0c1b      	lsrs	r3, r3, #16
 8002996:	f003 0303 	and.w	r3, r3, #3
 800299a:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	68b9      	ldr	r1, [r7, #8]
 80029a2:	68f8      	ldr	r0, [r7, #12]
 80029a4:	f000 f886 	bl	8002ab4 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2101      	movs	r1, #1
 80029ae:	697a      	ldr	r2, [r7, #20]
 80029b0:	fa01 f202 	lsl.w	r2, r1, r2
 80029b4:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80029b8:	2201      	movs	r2, #1
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	409a      	lsls	r2, r3
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 80029c2:	2300      	movs	r3, #0
 80029c4:	e006      	b.n	80029d4 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029ca:	f043 0208 	orr.w	r2, r3, #8
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
  }
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3718      	adds	r7, #24
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80029e4:	4b30      	ldr	r3, [pc, #192]	@ (8002aa8 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 80029e6:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a2f      	ldr	r2, [pc, #188]	@ (8002aac <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d103      	bne.n	80029fa <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80029f8:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a2c      	ldr	r2, [pc, #176]	@ (8002ab0 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d103      	bne.n	8002a0c <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 8002a0a:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	68ba      	ldr	r2, [r7, #8]
 8002a10:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a1a:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a22:	041a      	lsls	r2, r3, #16
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a40:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a48:	061a      	lsls	r2, r3, #24
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	60fb      	str	r3, [r7, #12]
 8002a80:	e005      	b.n	8002a8e <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	3304      	adds	r3, #4
 8002a8c:	60fb      	str	r3, [r7, #12]
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d3f3      	bcc.n	8002a82 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8002a9a:	bf00      	nop
 8002a9c:	bf00      	nop
 8002a9e:	3714      	adds	r7, #20
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr
 8002aa8:	4000a400 	.word	0x4000a400
 8002aac:	40006800 	.word	0x40006800
 8002ab0:	40006c00 	.word	0x40006c00

08002ab4 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b089      	sub	sp, #36	@ 0x24
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
 8002ac0:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d10a      	bne.n	8002ae0 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8002ad2:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002ada:	4313      	orrs	r3, r2
 8002adc:	61fb      	str	r3, [r7, #28]
 8002ade:	e00a      	b.n	8002af6 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8002ae8:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8002aee:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002af0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002af4:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	6a1b      	ldr	r3, [r3, #32]
 8002afa:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002b00:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8002b06:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8002b0c:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002b14:	4313      	orrs	r3, r2
 8002b16:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	4613      	mov	r3, r2
 8002b20:	00db      	lsls	r3, r3, #3
 8002b22:	4413      	add	r3, r2
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	440b      	add	r3, r1
 8002b28:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	69fa      	ldr	r2, [r7, #28]
 8002b2e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	3304      	adds	r3, #4
 8002b34:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	693a      	ldr	r2, [r7, #16]
 8002b3a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	3304      	adds	r3, #4
 8002b40:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8002b42:	2300      	movs	r3, #0
 8002b44:	617b      	str	r3, [r7, #20]
 8002b46:	e020      	b.n	8002b8a <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	3303      	adds	r3, #3
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	4413      	add	r3, r2
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	3302      	adds	r3, #2
 8002b58:	6879      	ldr	r1, [r7, #4]
 8002b5a:	440b      	add	r3, r1
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002b60:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	3301      	adds	r3, #1
 8002b66:	6879      	ldr	r1, [r7, #4]
 8002b68:	440b      	add	r3, r1
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002b6e:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8002b70:	6879      	ldr	r1, [r7, #4]
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	440a      	add	r2, r1
 8002b76:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002b78:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	3304      	adds	r3, #4
 8002b82:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	3304      	adds	r3, #4
 8002b88:	617b      	str	r3, [r7, #20]
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	4a06      	ldr	r2, [pc, #24]	@ (8002ba8 <FDCAN_CopyMessageToRAM+0xf4>)
 8002b90:	5cd3      	ldrb	r3, [r2, r3]
 8002b92:	461a      	mov	r2, r3
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d3d6      	bcc.n	8002b48 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8002b9a:	bf00      	nop
 8002b9c:	bf00      	nop
 8002b9e:	3724      	adds	r7, #36	@ 0x24
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr
 8002ba8:	0800ceb0 	.word	0x0800ceb0

08002bac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b087      	sub	sp, #28
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002bba:	e15a      	b.n	8002e72 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	2101      	movs	r1, #1
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc8:	4013      	ands	r3, r2
 8002bca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f000 814c 	beq.w	8002e6c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f003 0303 	and.w	r3, r3, #3
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d005      	beq.n	8002bec <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d130      	bne.n	8002c4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	2203      	movs	r2, #3
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	43db      	mvns	r3, r3
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	4013      	ands	r3, r2
 8002c02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	68da      	ldr	r2, [r3, #12]
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c22:	2201      	movs	r2, #1
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2a:	43db      	mvns	r3, r3
 8002c2c:	693a      	ldr	r2, [r7, #16]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	091b      	lsrs	r3, r3, #4
 8002c38:	f003 0201 	and.w	r2, r3, #1
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f003 0303 	and.w	r3, r3, #3
 8002c56:	2b03      	cmp	r3, #3
 8002c58:	d017      	beq.n	8002c8a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	005b      	lsls	r3, r3, #1
 8002c64:	2203      	movs	r2, #3
 8002c66:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6a:	43db      	mvns	r3, r3
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	4013      	ands	r3, r2
 8002c70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	689a      	ldr	r2, [r3, #8]
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f003 0303 	and.w	r3, r3, #3
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d123      	bne.n	8002cde <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	08da      	lsrs	r2, r3, #3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	3208      	adds	r2, #8
 8002c9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	f003 0307 	and.w	r3, r3, #7
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	220f      	movs	r2, #15
 8002cae:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb2:	43db      	mvns	r3, r3
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	691a      	ldr	r2, [r3, #16]
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	f003 0307 	and.w	r3, r3, #7
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	08da      	lsrs	r2, r3, #3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	3208      	adds	r2, #8
 8002cd8:	6939      	ldr	r1, [r7, #16]
 8002cda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	2203      	movs	r2, #3
 8002cea:	fa02 f303 	lsl.w	r3, r2, r3
 8002cee:	43db      	mvns	r3, r3
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f003 0203 	and.w	r2, r3, #3
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	fa02 f303 	lsl.w	r3, r2, r3
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f000 80a6 	beq.w	8002e6c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d20:	4b5b      	ldr	r3, [pc, #364]	@ (8002e90 <HAL_GPIO_Init+0x2e4>)
 8002d22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d24:	4a5a      	ldr	r2, [pc, #360]	@ (8002e90 <HAL_GPIO_Init+0x2e4>)
 8002d26:	f043 0301 	orr.w	r3, r3, #1
 8002d2a:	6613      	str	r3, [r2, #96]	@ 0x60
 8002d2c:	4b58      	ldr	r3, [pc, #352]	@ (8002e90 <HAL_GPIO_Init+0x2e4>)
 8002d2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d30:	f003 0301 	and.w	r3, r3, #1
 8002d34:	60bb      	str	r3, [r7, #8]
 8002d36:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d38:	4a56      	ldr	r2, [pc, #344]	@ (8002e94 <HAL_GPIO_Init+0x2e8>)
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	089b      	lsrs	r3, r3, #2
 8002d3e:	3302      	adds	r3, #2
 8002d40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	f003 0303 	and.w	r3, r3, #3
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	220f      	movs	r2, #15
 8002d50:	fa02 f303 	lsl.w	r3, r2, r3
 8002d54:	43db      	mvns	r3, r3
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002d62:	d01f      	beq.n	8002da4 <HAL_GPIO_Init+0x1f8>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4a4c      	ldr	r2, [pc, #304]	@ (8002e98 <HAL_GPIO_Init+0x2ec>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d019      	beq.n	8002da0 <HAL_GPIO_Init+0x1f4>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a4b      	ldr	r2, [pc, #300]	@ (8002e9c <HAL_GPIO_Init+0x2f0>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d013      	beq.n	8002d9c <HAL_GPIO_Init+0x1f0>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4a4a      	ldr	r2, [pc, #296]	@ (8002ea0 <HAL_GPIO_Init+0x2f4>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d00d      	beq.n	8002d98 <HAL_GPIO_Init+0x1ec>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a49      	ldr	r2, [pc, #292]	@ (8002ea4 <HAL_GPIO_Init+0x2f8>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d007      	beq.n	8002d94 <HAL_GPIO_Init+0x1e8>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4a48      	ldr	r2, [pc, #288]	@ (8002ea8 <HAL_GPIO_Init+0x2fc>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d101      	bne.n	8002d90 <HAL_GPIO_Init+0x1e4>
 8002d8c:	2305      	movs	r3, #5
 8002d8e:	e00a      	b.n	8002da6 <HAL_GPIO_Init+0x1fa>
 8002d90:	2306      	movs	r3, #6
 8002d92:	e008      	b.n	8002da6 <HAL_GPIO_Init+0x1fa>
 8002d94:	2304      	movs	r3, #4
 8002d96:	e006      	b.n	8002da6 <HAL_GPIO_Init+0x1fa>
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e004      	b.n	8002da6 <HAL_GPIO_Init+0x1fa>
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	e002      	b.n	8002da6 <HAL_GPIO_Init+0x1fa>
 8002da0:	2301      	movs	r3, #1
 8002da2:	e000      	b.n	8002da6 <HAL_GPIO_Init+0x1fa>
 8002da4:	2300      	movs	r3, #0
 8002da6:	697a      	ldr	r2, [r7, #20]
 8002da8:	f002 0203 	and.w	r2, r2, #3
 8002dac:	0092      	lsls	r2, r2, #2
 8002dae:	4093      	lsls	r3, r2
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002db6:	4937      	ldr	r1, [pc, #220]	@ (8002e94 <HAL_GPIO_Init+0x2e8>)
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	089b      	lsrs	r3, r3, #2
 8002dbc:	3302      	adds	r3, #2
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002dc4:	4b39      	ldr	r3, [pc, #228]	@ (8002eac <HAL_GPIO_Init+0x300>)
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	43db      	mvns	r3, r3
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d003      	beq.n	8002de8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002de0:	693a      	ldr	r2, [r7, #16]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002de8:	4a30      	ldr	r2, [pc, #192]	@ (8002eac <HAL_GPIO_Init+0x300>)
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002dee:	4b2f      	ldr	r3, [pc, #188]	@ (8002eac <HAL_GPIO_Init+0x300>)
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	43db      	mvns	r3, r3
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d003      	beq.n	8002e12 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e12:	4a26      	ldr	r2, [pc, #152]	@ (8002eac <HAL_GPIO_Init+0x300>)
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002e18:	4b24      	ldr	r3, [pc, #144]	@ (8002eac <HAL_GPIO_Init+0x300>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	43db      	mvns	r3, r3
 8002e22:	693a      	ldr	r2, [r7, #16]
 8002e24:	4013      	ands	r3, r2
 8002e26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d003      	beq.n	8002e3c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002e3c:	4a1b      	ldr	r2, [pc, #108]	@ (8002eac <HAL_GPIO_Init+0x300>)
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002e42:	4b1a      	ldr	r3, [pc, #104]	@ (8002eac <HAL_GPIO_Init+0x300>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	43db      	mvns	r3, r3
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	4013      	ands	r3, r2
 8002e50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d003      	beq.n	8002e66 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002e66:	4a11      	ldr	r2, [pc, #68]	@ (8002eac <HAL_GPIO_Init+0x300>)
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	3301      	adds	r3, #1
 8002e70:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	fa22 f303 	lsr.w	r3, r2, r3
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f47f ae9d 	bne.w	8002bbc <HAL_GPIO_Init+0x10>
  }
}
 8002e82:	bf00      	nop
 8002e84:	bf00      	nop
 8002e86:	371c      	adds	r7, #28
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr
 8002e90:	40021000 	.word	0x40021000
 8002e94:	40010000 	.word	0x40010000
 8002e98:	48000400 	.word	0x48000400
 8002e9c:	48000800 	.word	0x48000800
 8002ea0:	48000c00 	.word	0x48000c00
 8002ea4:	48001000 	.word	0x48001000
 8002ea8:	48001400 	.word	0x48001400
 8002eac:	40010400 	.word	0x40010400

08002eb0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b085      	sub	sp, #20
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d141      	bne.n	8002f42 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ebe:	4b4b      	ldr	r3, [pc, #300]	@ (8002fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002ec6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002eca:	d131      	bne.n	8002f30 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ecc:	4b47      	ldr	r3, [pc, #284]	@ (8002fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ece:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ed2:	4a46      	ldr	r2, [pc, #280]	@ (8002fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ed4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ed8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002edc:	4b43      	ldr	r3, [pc, #268]	@ (8002fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ee4:	4a41      	ldr	r2, [pc, #260]	@ (8002fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ee6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002eea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002eec:	4b40      	ldr	r3, [pc, #256]	@ (8002ff0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2232      	movs	r2, #50	@ 0x32
 8002ef2:	fb02 f303 	mul.w	r3, r2, r3
 8002ef6:	4a3f      	ldr	r2, [pc, #252]	@ (8002ff4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8002efc:	0c9b      	lsrs	r3, r3, #18
 8002efe:	3301      	adds	r3, #1
 8002f00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f02:	e002      	b.n	8002f0a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	3b01      	subs	r3, #1
 8002f08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f0a:	4b38      	ldr	r3, [pc, #224]	@ (8002fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f16:	d102      	bne.n	8002f1e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1f2      	bne.n	8002f04 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f1e:	4b33      	ldr	r3, [pc, #204]	@ (8002fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f2a:	d158      	bne.n	8002fde <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e057      	b.n	8002fe0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f30:	4b2e      	ldr	r3, [pc, #184]	@ (8002fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f36:	4a2d      	ldr	r2, [pc, #180]	@ (8002fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f3c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002f40:	e04d      	b.n	8002fde <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f48:	d141      	bne.n	8002fce <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f4a:	4b28      	ldr	r3, [pc, #160]	@ (8002fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f56:	d131      	bne.n	8002fbc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f58:	4b24      	ldr	r3, [pc, #144]	@ (8002fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f5e:	4a23      	ldr	r2, [pc, #140]	@ (8002fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f64:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f68:	4b20      	ldr	r3, [pc, #128]	@ (8002fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f70:	4a1e      	ldr	r2, [pc, #120]	@ (8002fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f76:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f78:	4b1d      	ldr	r3, [pc, #116]	@ (8002ff0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2232      	movs	r2, #50	@ 0x32
 8002f7e:	fb02 f303 	mul.w	r3, r2, r3
 8002f82:	4a1c      	ldr	r2, [pc, #112]	@ (8002ff4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002f84:	fba2 2303 	umull	r2, r3, r2, r3
 8002f88:	0c9b      	lsrs	r3, r3, #18
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f8e:	e002      	b.n	8002f96 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	3b01      	subs	r3, #1
 8002f94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f96:	4b15      	ldr	r3, [pc, #84]	@ (8002fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fa2:	d102      	bne.n	8002faa <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1f2      	bne.n	8002f90 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002faa:	4b10      	ldr	r3, [pc, #64]	@ (8002fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fb6:	d112      	bne.n	8002fde <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e011      	b.n	8002fe0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8002fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002fc2:	4a0a      	ldr	r2, [pc, #40]	@ (8002fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fc8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002fcc:	e007      	b.n	8002fde <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002fce:	4b07      	ldr	r3, [pc, #28]	@ (8002fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002fd6:	4a05      	ldr	r2, [pc, #20]	@ (8002fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fd8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002fdc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3714      	adds	r7, #20
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr
 8002fec:	40007000 	.word	0x40007000
 8002ff0:	20000000 	.word	0x20000000
 8002ff4:	431bde83 	.word	0x431bde83

08002ff8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002ffc:	4b05      	ldr	r3, [pc, #20]	@ (8003014 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	4a04      	ldr	r2, [pc, #16]	@ (8003014 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003002:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003006:	6093      	str	r3, [r2, #8]
}
 8003008:	bf00      	nop
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	40007000 	.word	0x40007000

08003018 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b088      	sub	sp, #32
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e2fe      	b.n	8003628 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	2b00      	cmp	r3, #0
 8003034:	d075      	beq.n	8003122 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003036:	4b97      	ldr	r3, [pc, #604]	@ (8003294 <HAL_RCC_OscConfig+0x27c>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 030c 	and.w	r3, r3, #12
 800303e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003040:	4b94      	ldr	r3, [pc, #592]	@ (8003294 <HAL_RCC_OscConfig+0x27c>)
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	f003 0303 	and.w	r3, r3, #3
 8003048:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	2b0c      	cmp	r3, #12
 800304e:	d102      	bne.n	8003056 <HAL_RCC_OscConfig+0x3e>
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	2b03      	cmp	r3, #3
 8003054:	d002      	beq.n	800305c <HAL_RCC_OscConfig+0x44>
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	2b08      	cmp	r3, #8
 800305a:	d10b      	bne.n	8003074 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800305c:	4b8d      	ldr	r3, [pc, #564]	@ (8003294 <HAL_RCC_OscConfig+0x27c>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d05b      	beq.n	8003120 <HAL_RCC_OscConfig+0x108>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d157      	bne.n	8003120 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e2d9      	b.n	8003628 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800307c:	d106      	bne.n	800308c <HAL_RCC_OscConfig+0x74>
 800307e:	4b85      	ldr	r3, [pc, #532]	@ (8003294 <HAL_RCC_OscConfig+0x27c>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a84      	ldr	r2, [pc, #528]	@ (8003294 <HAL_RCC_OscConfig+0x27c>)
 8003084:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003088:	6013      	str	r3, [r2, #0]
 800308a:	e01d      	b.n	80030c8 <HAL_RCC_OscConfig+0xb0>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003094:	d10c      	bne.n	80030b0 <HAL_RCC_OscConfig+0x98>
 8003096:	4b7f      	ldr	r3, [pc, #508]	@ (8003294 <HAL_RCC_OscConfig+0x27c>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a7e      	ldr	r2, [pc, #504]	@ (8003294 <HAL_RCC_OscConfig+0x27c>)
 800309c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030a0:	6013      	str	r3, [r2, #0]
 80030a2:	4b7c      	ldr	r3, [pc, #496]	@ (8003294 <HAL_RCC_OscConfig+0x27c>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a7b      	ldr	r2, [pc, #492]	@ (8003294 <HAL_RCC_OscConfig+0x27c>)
 80030a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030ac:	6013      	str	r3, [r2, #0]
 80030ae:	e00b      	b.n	80030c8 <HAL_RCC_OscConfig+0xb0>
 80030b0:	4b78      	ldr	r3, [pc, #480]	@ (8003294 <HAL_RCC_OscConfig+0x27c>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a77      	ldr	r2, [pc, #476]	@ (8003294 <HAL_RCC_OscConfig+0x27c>)
 80030b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030ba:	6013      	str	r3, [r2, #0]
 80030bc:	4b75      	ldr	r3, [pc, #468]	@ (8003294 <HAL_RCC_OscConfig+0x27c>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a74      	ldr	r2, [pc, #464]	@ (8003294 <HAL_RCC_OscConfig+0x27c>)
 80030c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d013      	beq.n	80030f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d0:	f7ff f912 	bl	80022f8 <HAL_GetTick>
 80030d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030d6:	e008      	b.n	80030ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030d8:	f7ff f90e 	bl	80022f8 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b64      	cmp	r3, #100	@ 0x64
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e29e      	b.n	8003628 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030ea:	4b6a      	ldr	r3, [pc, #424]	@ (8003294 <HAL_RCC_OscConfig+0x27c>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d0f0      	beq.n	80030d8 <HAL_RCC_OscConfig+0xc0>
 80030f6:	e014      	b.n	8003122 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f8:	f7ff f8fe 	bl	80022f8 <HAL_GetTick>
 80030fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030fe:	e008      	b.n	8003112 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003100:	f7ff f8fa 	bl	80022f8 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b64      	cmp	r3, #100	@ 0x64
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e28a      	b.n	8003628 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003112:	4b60      	ldr	r3, [pc, #384]	@ (8003294 <HAL_RCC_OscConfig+0x27c>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1f0      	bne.n	8003100 <HAL_RCC_OscConfig+0xe8>
 800311e:	e000      	b.n	8003122 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003120:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d075      	beq.n	800321a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800312e:	4b59      	ldr	r3, [pc, #356]	@ (8003294 <HAL_RCC_OscConfig+0x27c>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f003 030c 	and.w	r3, r3, #12
 8003136:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003138:	4b56      	ldr	r3, [pc, #344]	@ (8003294 <HAL_RCC_OscConfig+0x27c>)
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	f003 0303 	and.w	r3, r3, #3
 8003140:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	2b0c      	cmp	r3, #12
 8003146:	d102      	bne.n	800314e <HAL_RCC_OscConfig+0x136>
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	2b02      	cmp	r3, #2
 800314c:	d002      	beq.n	8003154 <HAL_RCC_OscConfig+0x13c>
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	2b04      	cmp	r3, #4
 8003152:	d11f      	bne.n	8003194 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003154:	4b4f      	ldr	r3, [pc, #316]	@ (8003294 <HAL_RCC_OscConfig+0x27c>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800315c:	2b00      	cmp	r3, #0
 800315e:	d005      	beq.n	800316c <HAL_RCC_OscConfig+0x154>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d101      	bne.n	800316c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e25d      	b.n	8003628 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800316c:	4b49      	ldr	r3, [pc, #292]	@ (8003294 <HAL_RCC_OscConfig+0x27c>)
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	061b      	lsls	r3, r3, #24
 800317a:	4946      	ldr	r1, [pc, #280]	@ (8003294 <HAL_RCC_OscConfig+0x27c>)
 800317c:	4313      	orrs	r3, r2
 800317e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003180:	4b45      	ldr	r3, [pc, #276]	@ (8003298 <HAL_RCC_OscConfig+0x280>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4618      	mov	r0, r3
 8003186:	f7fe f86b 	bl	8001260 <HAL_InitTick>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d043      	beq.n	8003218 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e249      	b.n	8003628 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d023      	beq.n	80031e4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800319c:	4b3d      	ldr	r3, [pc, #244]	@ (8003294 <HAL_RCC_OscConfig+0x27c>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a3c      	ldr	r2, [pc, #240]	@ (8003294 <HAL_RCC_OscConfig+0x27c>)
 80031a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a8:	f7ff f8a6 	bl	80022f8 <HAL_GetTick>
 80031ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031ae:	e008      	b.n	80031c2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031b0:	f7ff f8a2 	bl	80022f8 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e232      	b.n	8003628 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031c2:	4b34      	ldr	r3, [pc, #208]	@ (8003294 <HAL_RCC_OscConfig+0x27c>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d0f0      	beq.n	80031b0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ce:	4b31      	ldr	r3, [pc, #196]	@ (8003294 <HAL_RCC_OscConfig+0x27c>)
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	061b      	lsls	r3, r3, #24
 80031dc:	492d      	ldr	r1, [pc, #180]	@ (8003294 <HAL_RCC_OscConfig+0x27c>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	604b      	str	r3, [r1, #4]
 80031e2:	e01a      	b.n	800321a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031e4:	4b2b      	ldr	r3, [pc, #172]	@ (8003294 <HAL_RCC_OscConfig+0x27c>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a2a      	ldr	r2, [pc, #168]	@ (8003294 <HAL_RCC_OscConfig+0x27c>)
 80031ea:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80031ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f0:	f7ff f882 	bl	80022f8 <HAL_GetTick>
 80031f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031f6:	e008      	b.n	800320a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031f8:	f7ff f87e 	bl	80022f8 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b02      	cmp	r3, #2
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e20e      	b.n	8003628 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800320a:	4b22      	ldr	r3, [pc, #136]	@ (8003294 <HAL_RCC_OscConfig+0x27c>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1f0      	bne.n	80031f8 <HAL_RCC_OscConfig+0x1e0>
 8003216:	e000      	b.n	800321a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003218:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0308 	and.w	r3, r3, #8
 8003222:	2b00      	cmp	r3, #0
 8003224:	d041      	beq.n	80032aa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d01c      	beq.n	8003268 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800322e:	4b19      	ldr	r3, [pc, #100]	@ (8003294 <HAL_RCC_OscConfig+0x27c>)
 8003230:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003234:	4a17      	ldr	r2, [pc, #92]	@ (8003294 <HAL_RCC_OscConfig+0x27c>)
 8003236:	f043 0301 	orr.w	r3, r3, #1
 800323a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800323e:	f7ff f85b 	bl	80022f8 <HAL_GetTick>
 8003242:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003244:	e008      	b.n	8003258 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003246:	f7ff f857 	bl	80022f8 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b02      	cmp	r3, #2
 8003252:	d901      	bls.n	8003258 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e1e7      	b.n	8003628 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003258:	4b0e      	ldr	r3, [pc, #56]	@ (8003294 <HAL_RCC_OscConfig+0x27c>)
 800325a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d0ef      	beq.n	8003246 <HAL_RCC_OscConfig+0x22e>
 8003266:	e020      	b.n	80032aa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003268:	4b0a      	ldr	r3, [pc, #40]	@ (8003294 <HAL_RCC_OscConfig+0x27c>)
 800326a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800326e:	4a09      	ldr	r2, [pc, #36]	@ (8003294 <HAL_RCC_OscConfig+0x27c>)
 8003270:	f023 0301 	bic.w	r3, r3, #1
 8003274:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003278:	f7ff f83e 	bl	80022f8 <HAL_GetTick>
 800327c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800327e:	e00d      	b.n	800329c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003280:	f7ff f83a 	bl	80022f8 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b02      	cmp	r3, #2
 800328c:	d906      	bls.n	800329c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e1ca      	b.n	8003628 <HAL_RCC_OscConfig+0x610>
 8003292:	bf00      	nop
 8003294:	40021000 	.word	0x40021000
 8003298:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800329c:	4b8c      	ldr	r3, [pc, #560]	@ (80034d0 <HAL_RCC_OscConfig+0x4b8>)
 800329e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1ea      	bne.n	8003280 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0304 	and.w	r3, r3, #4
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	f000 80a6 	beq.w	8003404 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032b8:	2300      	movs	r3, #0
 80032ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80032bc:	4b84      	ldr	r3, [pc, #528]	@ (80034d0 <HAL_RCC_OscConfig+0x4b8>)
 80032be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d101      	bne.n	80032cc <HAL_RCC_OscConfig+0x2b4>
 80032c8:	2301      	movs	r3, #1
 80032ca:	e000      	b.n	80032ce <HAL_RCC_OscConfig+0x2b6>
 80032cc:	2300      	movs	r3, #0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00d      	beq.n	80032ee <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032d2:	4b7f      	ldr	r3, [pc, #508]	@ (80034d0 <HAL_RCC_OscConfig+0x4b8>)
 80032d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032d6:	4a7e      	ldr	r2, [pc, #504]	@ (80034d0 <HAL_RCC_OscConfig+0x4b8>)
 80032d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80032de:	4b7c      	ldr	r3, [pc, #496]	@ (80034d0 <HAL_RCC_OscConfig+0x4b8>)
 80032e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032e6:	60fb      	str	r3, [r7, #12]
 80032e8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80032ea:	2301      	movs	r3, #1
 80032ec:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032ee:	4b79      	ldr	r3, [pc, #484]	@ (80034d4 <HAL_RCC_OscConfig+0x4bc>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d118      	bne.n	800332c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032fa:	4b76      	ldr	r3, [pc, #472]	@ (80034d4 <HAL_RCC_OscConfig+0x4bc>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a75      	ldr	r2, [pc, #468]	@ (80034d4 <HAL_RCC_OscConfig+0x4bc>)
 8003300:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003304:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003306:	f7fe fff7 	bl	80022f8 <HAL_GetTick>
 800330a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800330c:	e008      	b.n	8003320 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800330e:	f7fe fff3 	bl	80022f8 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	2b02      	cmp	r3, #2
 800331a:	d901      	bls.n	8003320 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e183      	b.n	8003628 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003320:	4b6c      	ldr	r3, [pc, #432]	@ (80034d4 <HAL_RCC_OscConfig+0x4bc>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003328:	2b00      	cmp	r3, #0
 800332a:	d0f0      	beq.n	800330e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d108      	bne.n	8003346 <HAL_RCC_OscConfig+0x32e>
 8003334:	4b66      	ldr	r3, [pc, #408]	@ (80034d0 <HAL_RCC_OscConfig+0x4b8>)
 8003336:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800333a:	4a65      	ldr	r2, [pc, #404]	@ (80034d0 <HAL_RCC_OscConfig+0x4b8>)
 800333c:	f043 0301 	orr.w	r3, r3, #1
 8003340:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003344:	e024      	b.n	8003390 <HAL_RCC_OscConfig+0x378>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	2b05      	cmp	r3, #5
 800334c:	d110      	bne.n	8003370 <HAL_RCC_OscConfig+0x358>
 800334e:	4b60      	ldr	r3, [pc, #384]	@ (80034d0 <HAL_RCC_OscConfig+0x4b8>)
 8003350:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003354:	4a5e      	ldr	r2, [pc, #376]	@ (80034d0 <HAL_RCC_OscConfig+0x4b8>)
 8003356:	f043 0304 	orr.w	r3, r3, #4
 800335a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800335e:	4b5c      	ldr	r3, [pc, #368]	@ (80034d0 <HAL_RCC_OscConfig+0x4b8>)
 8003360:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003364:	4a5a      	ldr	r2, [pc, #360]	@ (80034d0 <HAL_RCC_OscConfig+0x4b8>)
 8003366:	f043 0301 	orr.w	r3, r3, #1
 800336a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800336e:	e00f      	b.n	8003390 <HAL_RCC_OscConfig+0x378>
 8003370:	4b57      	ldr	r3, [pc, #348]	@ (80034d0 <HAL_RCC_OscConfig+0x4b8>)
 8003372:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003376:	4a56      	ldr	r2, [pc, #344]	@ (80034d0 <HAL_RCC_OscConfig+0x4b8>)
 8003378:	f023 0301 	bic.w	r3, r3, #1
 800337c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003380:	4b53      	ldr	r3, [pc, #332]	@ (80034d0 <HAL_RCC_OscConfig+0x4b8>)
 8003382:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003386:	4a52      	ldr	r2, [pc, #328]	@ (80034d0 <HAL_RCC_OscConfig+0x4b8>)
 8003388:	f023 0304 	bic.w	r3, r3, #4
 800338c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d016      	beq.n	80033c6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003398:	f7fe ffae 	bl	80022f8 <HAL_GetTick>
 800339c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800339e:	e00a      	b.n	80033b6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033a0:	f7fe ffaa 	bl	80022f8 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e138      	b.n	8003628 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033b6:	4b46      	ldr	r3, [pc, #280]	@ (80034d0 <HAL_RCC_OscConfig+0x4b8>)
 80033b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d0ed      	beq.n	80033a0 <HAL_RCC_OscConfig+0x388>
 80033c4:	e015      	b.n	80033f2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c6:	f7fe ff97 	bl	80022f8 <HAL_GetTick>
 80033ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033cc:	e00a      	b.n	80033e4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033ce:	f7fe ff93 	bl	80022f8 <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033dc:	4293      	cmp	r3, r2
 80033de:	d901      	bls.n	80033e4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e121      	b.n	8003628 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033e4:	4b3a      	ldr	r3, [pc, #232]	@ (80034d0 <HAL_RCC_OscConfig+0x4b8>)
 80033e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d1ed      	bne.n	80033ce <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80033f2:	7ffb      	ldrb	r3, [r7, #31]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d105      	bne.n	8003404 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033f8:	4b35      	ldr	r3, [pc, #212]	@ (80034d0 <HAL_RCC_OscConfig+0x4b8>)
 80033fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033fc:	4a34      	ldr	r2, [pc, #208]	@ (80034d0 <HAL_RCC_OscConfig+0x4b8>)
 80033fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003402:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0320 	and.w	r3, r3, #32
 800340c:	2b00      	cmp	r3, #0
 800340e:	d03c      	beq.n	800348a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d01c      	beq.n	8003452 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003418:	4b2d      	ldr	r3, [pc, #180]	@ (80034d0 <HAL_RCC_OscConfig+0x4b8>)
 800341a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800341e:	4a2c      	ldr	r2, [pc, #176]	@ (80034d0 <HAL_RCC_OscConfig+0x4b8>)
 8003420:	f043 0301 	orr.w	r3, r3, #1
 8003424:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003428:	f7fe ff66 	bl	80022f8 <HAL_GetTick>
 800342c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800342e:	e008      	b.n	8003442 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003430:	f7fe ff62 	bl	80022f8 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b02      	cmp	r3, #2
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e0f2      	b.n	8003628 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003442:	4b23      	ldr	r3, [pc, #140]	@ (80034d0 <HAL_RCC_OscConfig+0x4b8>)
 8003444:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	2b00      	cmp	r3, #0
 800344e:	d0ef      	beq.n	8003430 <HAL_RCC_OscConfig+0x418>
 8003450:	e01b      	b.n	800348a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003452:	4b1f      	ldr	r3, [pc, #124]	@ (80034d0 <HAL_RCC_OscConfig+0x4b8>)
 8003454:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003458:	4a1d      	ldr	r2, [pc, #116]	@ (80034d0 <HAL_RCC_OscConfig+0x4b8>)
 800345a:	f023 0301 	bic.w	r3, r3, #1
 800345e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003462:	f7fe ff49 	bl	80022f8 <HAL_GetTick>
 8003466:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003468:	e008      	b.n	800347c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800346a:	f7fe ff45 	bl	80022f8 <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	2b02      	cmp	r3, #2
 8003476:	d901      	bls.n	800347c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e0d5      	b.n	8003628 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800347c:	4b14      	ldr	r3, [pc, #80]	@ (80034d0 <HAL_RCC_OscConfig+0x4b8>)
 800347e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d1ef      	bne.n	800346a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	69db      	ldr	r3, [r3, #28]
 800348e:	2b00      	cmp	r3, #0
 8003490:	f000 80c9 	beq.w	8003626 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003494:	4b0e      	ldr	r3, [pc, #56]	@ (80034d0 <HAL_RCC_OscConfig+0x4b8>)
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f003 030c 	and.w	r3, r3, #12
 800349c:	2b0c      	cmp	r3, #12
 800349e:	f000 8083 	beq.w	80035a8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	69db      	ldr	r3, [r3, #28]
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d15e      	bne.n	8003568 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034aa:	4b09      	ldr	r3, [pc, #36]	@ (80034d0 <HAL_RCC_OscConfig+0x4b8>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a08      	ldr	r2, [pc, #32]	@ (80034d0 <HAL_RCC_OscConfig+0x4b8>)
 80034b0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80034b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b6:	f7fe ff1f 	bl	80022f8 <HAL_GetTick>
 80034ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034bc:	e00c      	b.n	80034d8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034be:	f7fe ff1b 	bl	80022f8 <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d905      	bls.n	80034d8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e0ab      	b.n	8003628 <HAL_RCC_OscConfig+0x610>
 80034d0:	40021000 	.word	0x40021000
 80034d4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034d8:	4b55      	ldr	r3, [pc, #340]	@ (8003630 <HAL_RCC_OscConfig+0x618>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d1ec      	bne.n	80034be <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034e4:	4b52      	ldr	r3, [pc, #328]	@ (8003630 <HAL_RCC_OscConfig+0x618>)
 80034e6:	68da      	ldr	r2, [r3, #12]
 80034e8:	4b52      	ldr	r3, [pc, #328]	@ (8003634 <HAL_RCC_OscConfig+0x61c>)
 80034ea:	4013      	ands	r3, r2
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	6a11      	ldr	r1, [r2, #32]
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80034f4:	3a01      	subs	r2, #1
 80034f6:	0112      	lsls	r2, r2, #4
 80034f8:	4311      	orrs	r1, r2
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80034fe:	0212      	lsls	r2, r2, #8
 8003500:	4311      	orrs	r1, r2
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003506:	0852      	lsrs	r2, r2, #1
 8003508:	3a01      	subs	r2, #1
 800350a:	0552      	lsls	r2, r2, #21
 800350c:	4311      	orrs	r1, r2
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003512:	0852      	lsrs	r2, r2, #1
 8003514:	3a01      	subs	r2, #1
 8003516:	0652      	lsls	r2, r2, #25
 8003518:	4311      	orrs	r1, r2
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800351e:	06d2      	lsls	r2, r2, #27
 8003520:	430a      	orrs	r2, r1
 8003522:	4943      	ldr	r1, [pc, #268]	@ (8003630 <HAL_RCC_OscConfig+0x618>)
 8003524:	4313      	orrs	r3, r2
 8003526:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003528:	4b41      	ldr	r3, [pc, #260]	@ (8003630 <HAL_RCC_OscConfig+0x618>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a40      	ldr	r2, [pc, #256]	@ (8003630 <HAL_RCC_OscConfig+0x618>)
 800352e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003532:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003534:	4b3e      	ldr	r3, [pc, #248]	@ (8003630 <HAL_RCC_OscConfig+0x618>)
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	4a3d      	ldr	r2, [pc, #244]	@ (8003630 <HAL_RCC_OscConfig+0x618>)
 800353a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800353e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003540:	f7fe feda 	bl	80022f8 <HAL_GetTick>
 8003544:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003546:	e008      	b.n	800355a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003548:	f7fe fed6 	bl	80022f8 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b02      	cmp	r3, #2
 8003554:	d901      	bls.n	800355a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e066      	b.n	8003628 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800355a:	4b35      	ldr	r3, [pc, #212]	@ (8003630 <HAL_RCC_OscConfig+0x618>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d0f0      	beq.n	8003548 <HAL_RCC_OscConfig+0x530>
 8003566:	e05e      	b.n	8003626 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003568:	4b31      	ldr	r3, [pc, #196]	@ (8003630 <HAL_RCC_OscConfig+0x618>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a30      	ldr	r2, [pc, #192]	@ (8003630 <HAL_RCC_OscConfig+0x618>)
 800356e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003572:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003574:	f7fe fec0 	bl	80022f8 <HAL_GetTick>
 8003578:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800357a:	e008      	b.n	800358e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800357c:	f7fe febc 	bl	80022f8 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b02      	cmp	r3, #2
 8003588:	d901      	bls.n	800358e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e04c      	b.n	8003628 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800358e:	4b28      	ldr	r3, [pc, #160]	@ (8003630 <HAL_RCC_OscConfig+0x618>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1f0      	bne.n	800357c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800359a:	4b25      	ldr	r3, [pc, #148]	@ (8003630 <HAL_RCC_OscConfig+0x618>)
 800359c:	68da      	ldr	r2, [r3, #12]
 800359e:	4924      	ldr	r1, [pc, #144]	@ (8003630 <HAL_RCC_OscConfig+0x618>)
 80035a0:	4b25      	ldr	r3, [pc, #148]	@ (8003638 <HAL_RCC_OscConfig+0x620>)
 80035a2:	4013      	ands	r3, r2
 80035a4:	60cb      	str	r3, [r1, #12]
 80035a6:	e03e      	b.n	8003626 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	69db      	ldr	r3, [r3, #28]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d101      	bne.n	80035b4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e039      	b.n	8003628 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80035b4:	4b1e      	ldr	r3, [pc, #120]	@ (8003630 <HAL_RCC_OscConfig+0x618>)
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	f003 0203 	and.w	r2, r3, #3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a1b      	ldr	r3, [r3, #32]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d12c      	bne.n	8003622 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d2:	3b01      	subs	r3, #1
 80035d4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d123      	bne.n	8003622 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035e4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d11b      	bne.n	8003622 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d113      	bne.n	8003622 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003604:	085b      	lsrs	r3, r3, #1
 8003606:	3b01      	subs	r3, #1
 8003608:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800360a:	429a      	cmp	r2, r3
 800360c:	d109      	bne.n	8003622 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003618:	085b      	lsrs	r3, r3, #1
 800361a:	3b01      	subs	r3, #1
 800361c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800361e:	429a      	cmp	r2, r3
 8003620:	d001      	beq.n	8003626 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e000      	b.n	8003628 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	3720      	adds	r7, #32
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	40021000 	.word	0x40021000
 8003634:	019f800c 	.word	0x019f800c
 8003638:	feeefffc 	.word	0xfeeefffc

0800363c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b086      	sub	sp, #24
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003646:	2300      	movs	r3, #0
 8003648:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d101      	bne.n	8003654 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e11e      	b.n	8003892 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003654:	4b91      	ldr	r3, [pc, #580]	@ (800389c <HAL_RCC_ClockConfig+0x260>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 030f 	and.w	r3, r3, #15
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	429a      	cmp	r2, r3
 8003660:	d910      	bls.n	8003684 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003662:	4b8e      	ldr	r3, [pc, #568]	@ (800389c <HAL_RCC_ClockConfig+0x260>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f023 020f 	bic.w	r2, r3, #15
 800366a:	498c      	ldr	r1, [pc, #560]	@ (800389c <HAL_RCC_ClockConfig+0x260>)
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	4313      	orrs	r3, r2
 8003670:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003672:	4b8a      	ldr	r3, [pc, #552]	@ (800389c <HAL_RCC_ClockConfig+0x260>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 030f 	and.w	r3, r3, #15
 800367a:	683a      	ldr	r2, [r7, #0]
 800367c:	429a      	cmp	r2, r3
 800367e:	d001      	beq.n	8003684 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e106      	b.n	8003892 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0301 	and.w	r3, r3, #1
 800368c:	2b00      	cmp	r3, #0
 800368e:	d073      	beq.n	8003778 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	2b03      	cmp	r3, #3
 8003696:	d129      	bne.n	80036ec <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003698:	4b81      	ldr	r3, [pc, #516]	@ (80038a0 <HAL_RCC_ClockConfig+0x264>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d101      	bne.n	80036a8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e0f4      	b.n	8003892 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80036a8:	f000 f9d0 	bl	8003a4c <RCC_GetSysClockFreqFromPLLSource>
 80036ac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	4a7c      	ldr	r2, [pc, #496]	@ (80038a4 <HAL_RCC_ClockConfig+0x268>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d93f      	bls.n	8003736 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80036b6:	4b7a      	ldr	r3, [pc, #488]	@ (80038a0 <HAL_RCC_ClockConfig+0x264>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d009      	beq.n	80036d6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d033      	beq.n	8003736 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d12f      	bne.n	8003736 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80036d6:	4b72      	ldr	r3, [pc, #456]	@ (80038a0 <HAL_RCC_ClockConfig+0x264>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80036de:	4a70      	ldr	r2, [pc, #448]	@ (80038a0 <HAL_RCC_ClockConfig+0x264>)
 80036e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036e4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80036e6:	2380      	movs	r3, #128	@ 0x80
 80036e8:	617b      	str	r3, [r7, #20]
 80036ea:	e024      	b.n	8003736 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d107      	bne.n	8003704 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036f4:	4b6a      	ldr	r3, [pc, #424]	@ (80038a0 <HAL_RCC_ClockConfig+0x264>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d109      	bne.n	8003714 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e0c6      	b.n	8003892 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003704:	4b66      	ldr	r3, [pc, #408]	@ (80038a0 <HAL_RCC_ClockConfig+0x264>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800370c:	2b00      	cmp	r3, #0
 800370e:	d101      	bne.n	8003714 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e0be      	b.n	8003892 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003714:	f000 f8ce 	bl	80038b4 <HAL_RCC_GetSysClockFreq>
 8003718:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	4a61      	ldr	r2, [pc, #388]	@ (80038a4 <HAL_RCC_ClockConfig+0x268>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d909      	bls.n	8003736 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003722:	4b5f      	ldr	r3, [pc, #380]	@ (80038a0 <HAL_RCC_ClockConfig+0x264>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800372a:	4a5d      	ldr	r2, [pc, #372]	@ (80038a0 <HAL_RCC_ClockConfig+0x264>)
 800372c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003730:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003732:	2380      	movs	r3, #128	@ 0x80
 8003734:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003736:	4b5a      	ldr	r3, [pc, #360]	@ (80038a0 <HAL_RCC_ClockConfig+0x264>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f023 0203 	bic.w	r2, r3, #3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	4957      	ldr	r1, [pc, #348]	@ (80038a0 <HAL_RCC_ClockConfig+0x264>)
 8003744:	4313      	orrs	r3, r2
 8003746:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003748:	f7fe fdd6 	bl	80022f8 <HAL_GetTick>
 800374c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800374e:	e00a      	b.n	8003766 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003750:	f7fe fdd2 	bl	80022f8 <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800375e:	4293      	cmp	r3, r2
 8003760:	d901      	bls.n	8003766 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e095      	b.n	8003892 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003766:	4b4e      	ldr	r3, [pc, #312]	@ (80038a0 <HAL_RCC_ClockConfig+0x264>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f003 020c 	and.w	r2, r3, #12
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	429a      	cmp	r2, r3
 8003776:	d1eb      	bne.n	8003750 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	2b00      	cmp	r3, #0
 8003782:	d023      	beq.n	80037cc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0304 	and.w	r3, r3, #4
 800378c:	2b00      	cmp	r3, #0
 800378e:	d005      	beq.n	800379c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003790:	4b43      	ldr	r3, [pc, #268]	@ (80038a0 <HAL_RCC_ClockConfig+0x264>)
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	4a42      	ldr	r2, [pc, #264]	@ (80038a0 <HAL_RCC_ClockConfig+0x264>)
 8003796:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800379a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0308 	and.w	r3, r3, #8
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d007      	beq.n	80037b8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80037a8:	4b3d      	ldr	r3, [pc, #244]	@ (80038a0 <HAL_RCC_ClockConfig+0x264>)
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80037b0:	4a3b      	ldr	r2, [pc, #236]	@ (80038a0 <HAL_RCC_ClockConfig+0x264>)
 80037b2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80037b6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037b8:	4b39      	ldr	r3, [pc, #228]	@ (80038a0 <HAL_RCC_ClockConfig+0x264>)
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	4936      	ldr	r1, [pc, #216]	@ (80038a0 <HAL_RCC_ClockConfig+0x264>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	608b      	str	r3, [r1, #8]
 80037ca:	e008      	b.n	80037de <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	2b80      	cmp	r3, #128	@ 0x80
 80037d0:	d105      	bne.n	80037de <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80037d2:	4b33      	ldr	r3, [pc, #204]	@ (80038a0 <HAL_RCC_ClockConfig+0x264>)
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	4a32      	ldr	r2, [pc, #200]	@ (80038a0 <HAL_RCC_ClockConfig+0x264>)
 80037d8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80037dc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037de:	4b2f      	ldr	r3, [pc, #188]	@ (800389c <HAL_RCC_ClockConfig+0x260>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 030f 	and.w	r3, r3, #15
 80037e6:	683a      	ldr	r2, [r7, #0]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d21d      	bcs.n	8003828 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ec:	4b2b      	ldr	r3, [pc, #172]	@ (800389c <HAL_RCC_ClockConfig+0x260>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f023 020f 	bic.w	r2, r3, #15
 80037f4:	4929      	ldr	r1, [pc, #164]	@ (800389c <HAL_RCC_ClockConfig+0x260>)
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80037fc:	f7fe fd7c 	bl	80022f8 <HAL_GetTick>
 8003800:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003802:	e00a      	b.n	800381a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003804:	f7fe fd78 	bl	80022f8 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003812:	4293      	cmp	r3, r2
 8003814:	d901      	bls.n	800381a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e03b      	b.n	8003892 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800381a:	4b20      	ldr	r3, [pc, #128]	@ (800389c <HAL_RCC_ClockConfig+0x260>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 030f 	and.w	r3, r3, #15
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	429a      	cmp	r2, r3
 8003826:	d1ed      	bne.n	8003804 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0304 	and.w	r3, r3, #4
 8003830:	2b00      	cmp	r3, #0
 8003832:	d008      	beq.n	8003846 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003834:	4b1a      	ldr	r3, [pc, #104]	@ (80038a0 <HAL_RCC_ClockConfig+0x264>)
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	4917      	ldr	r1, [pc, #92]	@ (80038a0 <HAL_RCC_ClockConfig+0x264>)
 8003842:	4313      	orrs	r3, r2
 8003844:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0308 	and.w	r3, r3, #8
 800384e:	2b00      	cmp	r3, #0
 8003850:	d009      	beq.n	8003866 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003852:	4b13      	ldr	r3, [pc, #76]	@ (80038a0 <HAL_RCC_ClockConfig+0x264>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	00db      	lsls	r3, r3, #3
 8003860:	490f      	ldr	r1, [pc, #60]	@ (80038a0 <HAL_RCC_ClockConfig+0x264>)
 8003862:	4313      	orrs	r3, r2
 8003864:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003866:	f000 f825 	bl	80038b4 <HAL_RCC_GetSysClockFreq>
 800386a:	4602      	mov	r2, r0
 800386c:	4b0c      	ldr	r3, [pc, #48]	@ (80038a0 <HAL_RCC_ClockConfig+0x264>)
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	091b      	lsrs	r3, r3, #4
 8003872:	f003 030f 	and.w	r3, r3, #15
 8003876:	490c      	ldr	r1, [pc, #48]	@ (80038a8 <HAL_RCC_ClockConfig+0x26c>)
 8003878:	5ccb      	ldrb	r3, [r1, r3]
 800387a:	f003 031f 	and.w	r3, r3, #31
 800387e:	fa22 f303 	lsr.w	r3, r2, r3
 8003882:	4a0a      	ldr	r2, [pc, #40]	@ (80038ac <HAL_RCC_ClockConfig+0x270>)
 8003884:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003886:	4b0a      	ldr	r3, [pc, #40]	@ (80038b0 <HAL_RCC_ClockConfig+0x274>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4618      	mov	r0, r3
 800388c:	f7fd fce8 	bl	8001260 <HAL_InitTick>
 8003890:	4603      	mov	r3, r0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3718      	adds	r7, #24
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	40022000 	.word	0x40022000
 80038a0:	40021000 	.word	0x40021000
 80038a4:	04c4b400 	.word	0x04c4b400
 80038a8:	0800ce64 	.word	0x0800ce64
 80038ac:	20000000 	.word	0x20000000
 80038b0:	20000004 	.word	0x20000004

080038b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b087      	sub	sp, #28
 80038b8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80038ba:	4b2c      	ldr	r3, [pc, #176]	@ (800396c <HAL_RCC_GetSysClockFreq+0xb8>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f003 030c 	and.w	r3, r3, #12
 80038c2:	2b04      	cmp	r3, #4
 80038c4:	d102      	bne.n	80038cc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80038c6:	4b2a      	ldr	r3, [pc, #168]	@ (8003970 <HAL_RCC_GetSysClockFreq+0xbc>)
 80038c8:	613b      	str	r3, [r7, #16]
 80038ca:	e047      	b.n	800395c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80038cc:	4b27      	ldr	r3, [pc, #156]	@ (800396c <HAL_RCC_GetSysClockFreq+0xb8>)
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f003 030c 	and.w	r3, r3, #12
 80038d4:	2b08      	cmp	r3, #8
 80038d6:	d102      	bne.n	80038de <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80038d8:	4b26      	ldr	r3, [pc, #152]	@ (8003974 <HAL_RCC_GetSysClockFreq+0xc0>)
 80038da:	613b      	str	r3, [r7, #16]
 80038dc:	e03e      	b.n	800395c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80038de:	4b23      	ldr	r3, [pc, #140]	@ (800396c <HAL_RCC_GetSysClockFreq+0xb8>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f003 030c 	and.w	r3, r3, #12
 80038e6:	2b0c      	cmp	r3, #12
 80038e8:	d136      	bne.n	8003958 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80038ea:	4b20      	ldr	r3, [pc, #128]	@ (800396c <HAL_RCC_GetSysClockFreq+0xb8>)
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	f003 0303 	and.w	r3, r3, #3
 80038f2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80038f4:	4b1d      	ldr	r3, [pc, #116]	@ (800396c <HAL_RCC_GetSysClockFreq+0xb8>)
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	091b      	lsrs	r3, r3, #4
 80038fa:	f003 030f 	and.w	r3, r3, #15
 80038fe:	3301      	adds	r3, #1
 8003900:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2b03      	cmp	r3, #3
 8003906:	d10c      	bne.n	8003922 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003908:	4a1a      	ldr	r2, [pc, #104]	@ (8003974 <HAL_RCC_GetSysClockFreq+0xc0>)
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003910:	4a16      	ldr	r2, [pc, #88]	@ (800396c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003912:	68d2      	ldr	r2, [r2, #12]
 8003914:	0a12      	lsrs	r2, r2, #8
 8003916:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800391a:	fb02 f303 	mul.w	r3, r2, r3
 800391e:	617b      	str	r3, [r7, #20]
      break;
 8003920:	e00c      	b.n	800393c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003922:	4a13      	ldr	r2, [pc, #76]	@ (8003970 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	fbb2 f3f3 	udiv	r3, r2, r3
 800392a:	4a10      	ldr	r2, [pc, #64]	@ (800396c <HAL_RCC_GetSysClockFreq+0xb8>)
 800392c:	68d2      	ldr	r2, [r2, #12]
 800392e:	0a12      	lsrs	r2, r2, #8
 8003930:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003934:	fb02 f303 	mul.w	r3, r2, r3
 8003938:	617b      	str	r3, [r7, #20]
      break;
 800393a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800393c:	4b0b      	ldr	r3, [pc, #44]	@ (800396c <HAL_RCC_GetSysClockFreq+0xb8>)
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	0e5b      	lsrs	r3, r3, #25
 8003942:	f003 0303 	and.w	r3, r3, #3
 8003946:	3301      	adds	r3, #1
 8003948:	005b      	lsls	r3, r3, #1
 800394a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800394c:	697a      	ldr	r2, [r7, #20]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	fbb2 f3f3 	udiv	r3, r2, r3
 8003954:	613b      	str	r3, [r7, #16]
 8003956:	e001      	b.n	800395c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003958:	2300      	movs	r3, #0
 800395a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800395c:	693b      	ldr	r3, [r7, #16]
}
 800395e:	4618      	mov	r0, r3
 8003960:	371c      	adds	r7, #28
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	40021000 	.word	0x40021000
 8003970:	00f42400 	.word	0x00f42400
 8003974:	016e3600 	.word	0x016e3600

08003978 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003978:	b480      	push	{r7}
 800397a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800397c:	4b03      	ldr	r3, [pc, #12]	@ (800398c <HAL_RCC_GetHCLKFreq+0x14>)
 800397e:	681b      	ldr	r3, [r3, #0]
}
 8003980:	4618      	mov	r0, r3
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	20000000 	.word	0x20000000

08003990 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003994:	f7ff fff0 	bl	8003978 <HAL_RCC_GetHCLKFreq>
 8003998:	4602      	mov	r2, r0
 800399a:	4b06      	ldr	r3, [pc, #24]	@ (80039b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	0a1b      	lsrs	r3, r3, #8
 80039a0:	f003 0307 	and.w	r3, r3, #7
 80039a4:	4904      	ldr	r1, [pc, #16]	@ (80039b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80039a6:	5ccb      	ldrb	r3, [r1, r3]
 80039a8:	f003 031f 	and.w	r3, r3, #31
 80039ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	40021000 	.word	0x40021000
 80039b8:	0800ce74 	.word	0x0800ce74

080039bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80039c0:	f7ff ffda 	bl	8003978 <HAL_RCC_GetHCLKFreq>
 80039c4:	4602      	mov	r2, r0
 80039c6:	4b06      	ldr	r3, [pc, #24]	@ (80039e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	0adb      	lsrs	r3, r3, #11
 80039cc:	f003 0307 	and.w	r3, r3, #7
 80039d0:	4904      	ldr	r1, [pc, #16]	@ (80039e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80039d2:	5ccb      	ldrb	r3, [r1, r3]
 80039d4:	f003 031f 	and.w	r3, r3, #31
 80039d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039dc:	4618      	mov	r0, r3
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	40021000 	.word	0x40021000
 80039e4:	0800ce74 	.word	0x0800ce74

080039e8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	220f      	movs	r2, #15
 80039f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80039f8:	4b12      	ldr	r3, [pc, #72]	@ (8003a44 <HAL_RCC_GetClockConfig+0x5c>)
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f003 0203 	and.w	r2, r3, #3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003a04:	4b0f      	ldr	r3, [pc, #60]	@ (8003a44 <HAL_RCC_GetClockConfig+0x5c>)
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003a10:	4b0c      	ldr	r3, [pc, #48]	@ (8003a44 <HAL_RCC_GetClockConfig+0x5c>)
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003a1c:	4b09      	ldr	r3, [pc, #36]	@ (8003a44 <HAL_RCC_GetClockConfig+0x5c>)
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	08db      	lsrs	r3, r3, #3
 8003a22:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003a2a:	4b07      	ldr	r3, [pc, #28]	@ (8003a48 <HAL_RCC_GetClockConfig+0x60>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 020f 	and.w	r2, r3, #15
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	601a      	str	r2, [r3, #0]
}
 8003a36:	bf00      	nop
 8003a38:	370c      	adds	r7, #12
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop
 8003a44:	40021000 	.word	0x40021000
 8003a48:	40022000 	.word	0x40022000

08003a4c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b087      	sub	sp, #28
 8003a50:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a52:	4b1e      	ldr	r3, [pc, #120]	@ (8003acc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	f003 0303 	and.w	r3, r3, #3
 8003a5a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a5c:	4b1b      	ldr	r3, [pc, #108]	@ (8003acc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	091b      	lsrs	r3, r3, #4
 8003a62:	f003 030f 	and.w	r3, r3, #15
 8003a66:	3301      	adds	r3, #1
 8003a68:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	2b03      	cmp	r3, #3
 8003a6e:	d10c      	bne.n	8003a8a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a70:	4a17      	ldr	r2, [pc, #92]	@ (8003ad0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a78:	4a14      	ldr	r2, [pc, #80]	@ (8003acc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a7a:	68d2      	ldr	r2, [r2, #12]
 8003a7c:	0a12      	lsrs	r2, r2, #8
 8003a7e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003a82:	fb02 f303 	mul.w	r3, r2, r3
 8003a86:	617b      	str	r3, [r7, #20]
    break;
 8003a88:	e00c      	b.n	8003aa4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a8a:	4a12      	ldr	r2, [pc, #72]	@ (8003ad4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a92:	4a0e      	ldr	r2, [pc, #56]	@ (8003acc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a94:	68d2      	ldr	r2, [r2, #12]
 8003a96:	0a12      	lsrs	r2, r2, #8
 8003a98:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003a9c:	fb02 f303 	mul.w	r3, r2, r3
 8003aa0:	617b      	str	r3, [r7, #20]
    break;
 8003aa2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003aa4:	4b09      	ldr	r3, [pc, #36]	@ (8003acc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	0e5b      	lsrs	r3, r3, #25
 8003aaa:	f003 0303 	and.w	r3, r3, #3
 8003aae:	3301      	adds	r3, #1
 8003ab0:	005b      	lsls	r3, r3, #1
 8003ab2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003ab4:	697a      	ldr	r2, [r7, #20]
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003abc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003abe:	687b      	ldr	r3, [r7, #4]
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	371c      	adds	r7, #28
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr
 8003acc:	40021000 	.word	0x40021000
 8003ad0:	016e3600 	.word	0x016e3600
 8003ad4:	00f42400 	.word	0x00f42400

08003ad8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b086      	sub	sp, #24
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	f000 8098 	beq.w	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003af6:	2300      	movs	r3, #0
 8003af8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003afa:	4b43      	ldr	r3, [pc, #268]	@ (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003afc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003afe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d10d      	bne.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b06:	4b40      	ldr	r3, [pc, #256]	@ (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b0a:	4a3f      	ldr	r2, [pc, #252]	@ (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b10:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b12:	4b3d      	ldr	r3, [pc, #244]	@ (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b1a:	60bb      	str	r3, [r7, #8]
 8003b1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b22:	4b3a      	ldr	r3, [pc, #232]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a39      	ldr	r2, [pc, #228]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b2c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b2e:	f7fe fbe3 	bl	80022f8 <HAL_GetTick>
 8003b32:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b34:	e009      	b.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b36:	f7fe fbdf 	bl	80022f8 <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d902      	bls.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	74fb      	strb	r3, [r7, #19]
        break;
 8003b48:	e005      	b.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b4a:	4b30      	ldr	r3, [pc, #192]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d0ef      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003b56:	7cfb      	ldrb	r3, [r7, #19]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d159      	bne.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b5c:	4b2a      	ldr	r3, [pc, #168]	@ (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b66:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d01e      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d019      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b78:	4b23      	ldr	r3, [pc, #140]	@ (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b82:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b84:	4b20      	ldr	r3, [pc, #128]	@ (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b8a:	4a1f      	ldr	r2, [pc, #124]	@ (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b94:	4b1c      	ldr	r3, [pc, #112]	@ (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b9a:	4a1b      	ldr	r2, [pc, #108]	@ (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ba0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ba4:	4a18      	ldr	r2, [pc, #96]	@ (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d016      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb6:	f7fe fb9f 	bl	80022f8 <HAL_GetTick>
 8003bba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bbc:	e00b      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bbe:	f7fe fb9b 	bl	80022f8 <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d902      	bls.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	74fb      	strb	r3, [r7, #19]
            break;
 8003bd4:	e006      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bd6:	4b0c      	ldr	r3, [pc, #48]	@ (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bdc:	f003 0302 	and.w	r3, r3, #2
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d0ec      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003be4:	7cfb      	ldrb	r3, [r7, #19]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10b      	bne.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bea:	4b07      	ldr	r3, [pc, #28]	@ (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bf0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bf8:	4903      	ldr	r1, [pc, #12]	@ (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003c00:	e008      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c02:	7cfb      	ldrb	r3, [r7, #19]
 8003c04:	74bb      	strb	r3, [r7, #18]
 8003c06:	e005      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003c08:	40021000 	.word	0x40021000
 8003c0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c10:	7cfb      	ldrb	r3, [r7, #19]
 8003c12:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c14:	7c7b      	ldrb	r3, [r7, #17]
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d105      	bne.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c1a:	4ba7      	ldr	r3, [pc, #668]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c1e:	4aa6      	ldr	r2, [pc, #664]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c20:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c24:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0301 	and.w	r3, r3, #1
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00a      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c32:	4ba1      	ldr	r3, [pc, #644]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c38:	f023 0203 	bic.w	r2, r3, #3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	499d      	ldr	r1, [pc, #628]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0302 	and.w	r3, r3, #2
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00a      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c54:	4b98      	ldr	r3, [pc, #608]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c5a:	f023 020c 	bic.w	r2, r3, #12
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	4995      	ldr	r1, [pc, #596]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0304 	and.w	r3, r3, #4
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00a      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c76:	4b90      	ldr	r3, [pc, #576]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c7c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	498c      	ldr	r1, [pc, #560]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0308 	and.w	r3, r3, #8
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d00a      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c98:	4b87      	ldr	r3, [pc, #540]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c9e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	4984      	ldr	r1, [pc, #528]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0310 	and.w	r3, r3, #16
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00a      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003cba:	4b7f      	ldr	r3, [pc, #508]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cc0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	695b      	ldr	r3, [r3, #20]
 8003cc8:	497b      	ldr	r1, [pc, #492]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0320 	and.w	r3, r3, #32
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00a      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003cdc:	4b76      	ldr	r3, [pc, #472]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ce2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	4973      	ldr	r1, [pc, #460]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00a      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cfe:	4b6e      	ldr	r3, [pc, #440]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d04:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	69db      	ldr	r3, [r3, #28]
 8003d0c:	496a      	ldr	r1, [pc, #424]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00a      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d20:	4b65      	ldr	r3, [pc, #404]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d26:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a1b      	ldr	r3, [r3, #32]
 8003d2e:	4962      	ldr	r1, [pc, #392]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00a      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d42:	4b5d      	ldr	r3, [pc, #372]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d48:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d50:	4959      	ldr	r1, [pc, #356]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00a      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d64:	4b54      	ldr	r3, [pc, #336]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d66:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003d6a:	f023 0203 	bic.w	r2, r3, #3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d72:	4951      	ldr	r1, [pc, #324]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00a      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d86:	4b4c      	ldr	r3, [pc, #304]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d8c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d94:	4948      	ldr	r1, [pc, #288]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d015      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003da8:	4b43      	ldr	r3, [pc, #268]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003db6:	4940      	ldr	r1, [pc, #256]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003dc6:	d105      	bne.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dc8:	4b3b      	ldr	r3, [pc, #236]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	4a3a      	ldr	r2, [pc, #232]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003dd2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d015      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003de0:	4b35      	ldr	r3, [pc, #212]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003de6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dee:	4932      	ldr	r1, [pc, #200]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dfa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003dfe:	d105      	bne.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e00:	4b2d      	ldr	r3, [pc, #180]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	4a2c      	ldr	r2, [pc, #176]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e0a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d015      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003e18:	4b27      	ldr	r3, [pc, #156]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e1e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e26:	4924      	ldr	r1, [pc, #144]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e32:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e36:	d105      	bne.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e38:	4b1f      	ldr	r3, [pc, #124]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	4a1e      	ldr	r2, [pc, #120]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e42:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d015      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e50:	4b19      	ldr	r3, [pc, #100]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e56:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e5e:	4916      	ldr	r1, [pc, #88]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e6e:	d105      	bne.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e70:	4b11      	ldr	r3, [pc, #68]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	4a10      	ldr	r2, [pc, #64]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e7a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d019      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e88:	4b0b      	ldr	r3, [pc, #44]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e8e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e96:	4908      	ldr	r1, [pc, #32]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ea6:	d109      	bne.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ea8:	4b03      	ldr	r3, [pc, #12]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	4a02      	ldr	r2, [pc, #8]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003eb2:	60d3      	str	r3, [r2, #12]
 8003eb4:	e002      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003eb6:	bf00      	nop
 8003eb8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d015      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003ec8:	4b29      	ldr	r3, [pc, #164]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ece:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ed6:	4926      	ldr	r1, [pc, #152]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ee2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ee6:	d105      	bne.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003ee8:	4b21      	ldr	r3, [pc, #132]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	4a20      	ldr	r2, [pc, #128]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003eee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ef2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d015      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003f00:	4b1b      	ldr	r3, [pc, #108]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f06:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f0e:	4918      	ldr	r1, [pc, #96]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f1e:	d105      	bne.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003f20:	4b13      	ldr	r3, [pc, #76]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	4a12      	ldr	r2, [pc, #72]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f2a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d015      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003f38:	4b0d      	ldr	r3, [pc, #52]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f3e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f46:	490a      	ldr	r1, [pc, #40]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f52:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003f56:	d105      	bne.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f58:	4b05      	ldr	r3, [pc, #20]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	4a04      	ldr	r2, [pc, #16]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f62:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003f64:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3718      	adds	r7, #24
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	40021000 	.word	0x40021000

08003f74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e049      	b.n	800401a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d106      	bne.n	8003fa0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 f841 	bl	8004022 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2202      	movs	r2, #2
 8003fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	3304      	adds	r3, #4
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	4610      	mov	r0, r2
 8003fb4:	f000 fa30 	bl	8004418 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3708      	adds	r7, #8
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}

08004022 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004022:	b480      	push	{r7}
 8004024:	b083      	sub	sp, #12
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800402a:	bf00      	nop
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
	...

08004038 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004038:	b480      	push	{r7}
 800403a:	b085      	sub	sp, #20
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004046:	b2db      	uxtb	r3, r3
 8004048:	2b01      	cmp	r3, #1
 800404a:	d001      	beq.n	8004050 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e054      	b.n	80040fa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2202      	movs	r2, #2
 8004054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68da      	ldr	r2, [r3, #12]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f042 0201 	orr.w	r2, r2, #1
 8004066:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a26      	ldr	r2, [pc, #152]	@ (8004108 <HAL_TIM_Base_Start_IT+0xd0>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d022      	beq.n	80040b8 <HAL_TIM_Base_Start_IT+0x80>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800407a:	d01d      	beq.n	80040b8 <HAL_TIM_Base_Start_IT+0x80>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a22      	ldr	r2, [pc, #136]	@ (800410c <HAL_TIM_Base_Start_IT+0xd4>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d018      	beq.n	80040b8 <HAL_TIM_Base_Start_IT+0x80>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a21      	ldr	r2, [pc, #132]	@ (8004110 <HAL_TIM_Base_Start_IT+0xd8>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d013      	beq.n	80040b8 <HAL_TIM_Base_Start_IT+0x80>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a1f      	ldr	r2, [pc, #124]	@ (8004114 <HAL_TIM_Base_Start_IT+0xdc>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d00e      	beq.n	80040b8 <HAL_TIM_Base_Start_IT+0x80>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a1e      	ldr	r2, [pc, #120]	@ (8004118 <HAL_TIM_Base_Start_IT+0xe0>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d009      	beq.n	80040b8 <HAL_TIM_Base_Start_IT+0x80>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a1c      	ldr	r2, [pc, #112]	@ (800411c <HAL_TIM_Base_Start_IT+0xe4>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d004      	beq.n	80040b8 <HAL_TIM_Base_Start_IT+0x80>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a1b      	ldr	r2, [pc, #108]	@ (8004120 <HAL_TIM_Base_Start_IT+0xe8>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d115      	bne.n	80040e4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	689a      	ldr	r2, [r3, #8]
 80040be:	4b19      	ldr	r3, [pc, #100]	@ (8004124 <HAL_TIM_Base_Start_IT+0xec>)
 80040c0:	4013      	ands	r3, r2
 80040c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2b06      	cmp	r3, #6
 80040c8:	d015      	beq.n	80040f6 <HAL_TIM_Base_Start_IT+0xbe>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040d0:	d011      	beq.n	80040f6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f042 0201 	orr.w	r2, r2, #1
 80040e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040e2:	e008      	b.n	80040f6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f042 0201 	orr.w	r2, r2, #1
 80040f2:	601a      	str	r2, [r3, #0]
 80040f4:	e000      	b.n	80040f8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3714      	adds	r7, #20
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	40012c00 	.word	0x40012c00
 800410c:	40000400 	.word	0x40000400
 8004110:	40000800 	.word	0x40000800
 8004114:	40000c00 	.word	0x40000c00
 8004118:	40013400 	.word	0x40013400
 800411c:	40014000 	.word	0x40014000
 8004120:	40015000 	.word	0x40015000
 8004124:	00010007 	.word	0x00010007

08004128 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	f003 0302 	and.w	r3, r3, #2
 8004146:	2b00      	cmp	r3, #0
 8004148:	d020      	beq.n	800418c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f003 0302 	and.w	r3, r3, #2
 8004150:	2b00      	cmp	r3, #0
 8004152:	d01b      	beq.n	800418c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f06f 0202 	mvn.w	r2, #2
 800415c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2201      	movs	r2, #1
 8004162:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	f003 0303 	and.w	r3, r3, #3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d003      	beq.n	800417a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 f931 	bl	80043da <HAL_TIM_IC_CaptureCallback>
 8004178:	e005      	b.n	8004186 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 f923 	bl	80043c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f000 f934 	bl	80043ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	f003 0304 	and.w	r3, r3, #4
 8004192:	2b00      	cmp	r3, #0
 8004194:	d020      	beq.n	80041d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f003 0304 	and.w	r3, r3, #4
 800419c:	2b00      	cmp	r3, #0
 800419e:	d01b      	beq.n	80041d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f06f 0204 	mvn.w	r2, #4
 80041a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2202      	movs	r2, #2
 80041ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d003      	beq.n	80041c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 f90b 	bl	80043da <HAL_TIM_IC_CaptureCallback>
 80041c4:	e005      	b.n	80041d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 f8fd 	bl	80043c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f000 f90e 	bl	80043ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	f003 0308 	and.w	r3, r3, #8
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d020      	beq.n	8004224 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f003 0308 	and.w	r3, r3, #8
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d01b      	beq.n	8004224 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f06f 0208 	mvn.w	r2, #8
 80041f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2204      	movs	r2, #4
 80041fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	69db      	ldr	r3, [r3, #28]
 8004202:	f003 0303 	and.w	r3, r3, #3
 8004206:	2b00      	cmp	r3, #0
 8004208:	d003      	beq.n	8004212 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 f8e5 	bl	80043da <HAL_TIM_IC_CaptureCallback>
 8004210:	e005      	b.n	800421e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 f8d7 	bl	80043c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 f8e8 	bl	80043ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	f003 0310 	and.w	r3, r3, #16
 800422a:	2b00      	cmp	r3, #0
 800422c:	d020      	beq.n	8004270 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f003 0310 	and.w	r3, r3, #16
 8004234:	2b00      	cmp	r3, #0
 8004236:	d01b      	beq.n	8004270 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f06f 0210 	mvn.w	r2, #16
 8004240:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2208      	movs	r2, #8
 8004246:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	69db      	ldr	r3, [r3, #28]
 800424e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004252:	2b00      	cmp	r3, #0
 8004254:	d003      	beq.n	800425e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 f8bf 	bl	80043da <HAL_TIM_IC_CaptureCallback>
 800425c:	e005      	b.n	800426a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 f8b1 	bl	80043c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 f8c2 	bl	80043ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	f003 0301 	and.w	r3, r3, #1
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00c      	beq.n	8004294 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f003 0301 	and.w	r3, r3, #1
 8004280:	2b00      	cmp	r3, #0
 8004282:	d007      	beq.n	8004294 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f06f 0201 	mvn.w	r2, #1
 800428c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f7fc ffa4 	bl	80011dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800429a:	2b00      	cmp	r3, #0
 800429c:	d104      	bne.n	80042a8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d00c      	beq.n	80042c2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d007      	beq.n	80042c2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80042ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 f969 	bl	8004594 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00c      	beq.n	80042e6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d007      	beq.n	80042e6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80042de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f000 f961 	bl	80045a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d00c      	beq.n	800430a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d007      	beq.n	800430a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004302:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f000 f87c 	bl	8004402 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	f003 0320 	and.w	r3, r3, #32
 8004310:	2b00      	cmp	r3, #0
 8004312:	d00c      	beq.n	800432e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f003 0320 	and.w	r3, r3, #32
 800431a:	2b00      	cmp	r3, #0
 800431c:	d007      	beq.n	800432e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f06f 0220 	mvn.w	r2, #32
 8004326:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f000 f929 	bl	8004580 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d00c      	beq.n	8004352 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d007      	beq.n	8004352 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800434a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f000 f935 	bl	80045bc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d00c      	beq.n	8004376 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d007      	beq.n	8004376 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800436e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f000 f92d 	bl	80045d0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d00c      	beq.n	800439a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d007      	beq.n	800439a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8004392:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 f925 	bl	80045e4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d00c      	beq.n	80043be <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d007      	beq.n	80043be <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80043b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f000 f91d 	bl	80045f8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043be:	bf00      	nop
 80043c0:	3710      	adds	r7, #16
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043c6:	b480      	push	{r7}
 80043c8:	b083      	sub	sp, #12
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043ce:	bf00      	nop
 80043d0:	370c      	adds	r7, #12
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr

080043da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043da:	b480      	push	{r7}
 80043dc:	b083      	sub	sp, #12
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043e2:	bf00      	nop
 80043e4:	370c      	adds	r7, #12
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr

080043ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043ee:	b480      	push	{r7}
 80043f0:	b083      	sub	sp, #12
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043f6:	bf00      	nop
 80043f8:	370c      	adds	r7, #12
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr

08004402 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004402:	b480      	push	{r7}
 8004404:	b083      	sub	sp, #12
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800440a:	bf00      	nop
 800440c:	370c      	adds	r7, #12
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
	...

08004418 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4a4c      	ldr	r2, [pc, #304]	@ (800455c <TIM_Base_SetConfig+0x144>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d017      	beq.n	8004460 <TIM_Base_SetConfig+0x48>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004436:	d013      	beq.n	8004460 <TIM_Base_SetConfig+0x48>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a49      	ldr	r2, [pc, #292]	@ (8004560 <TIM_Base_SetConfig+0x148>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d00f      	beq.n	8004460 <TIM_Base_SetConfig+0x48>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4a48      	ldr	r2, [pc, #288]	@ (8004564 <TIM_Base_SetConfig+0x14c>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d00b      	beq.n	8004460 <TIM_Base_SetConfig+0x48>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4a47      	ldr	r2, [pc, #284]	@ (8004568 <TIM_Base_SetConfig+0x150>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d007      	beq.n	8004460 <TIM_Base_SetConfig+0x48>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4a46      	ldr	r2, [pc, #280]	@ (800456c <TIM_Base_SetConfig+0x154>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d003      	beq.n	8004460 <TIM_Base_SetConfig+0x48>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a45      	ldr	r2, [pc, #276]	@ (8004570 <TIM_Base_SetConfig+0x158>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d108      	bne.n	8004472 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004466:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	4313      	orrs	r3, r2
 8004470:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a39      	ldr	r2, [pc, #228]	@ (800455c <TIM_Base_SetConfig+0x144>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d023      	beq.n	80044c2 <TIM_Base_SetConfig+0xaa>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004480:	d01f      	beq.n	80044c2 <TIM_Base_SetConfig+0xaa>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a36      	ldr	r2, [pc, #216]	@ (8004560 <TIM_Base_SetConfig+0x148>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d01b      	beq.n	80044c2 <TIM_Base_SetConfig+0xaa>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a35      	ldr	r2, [pc, #212]	@ (8004564 <TIM_Base_SetConfig+0x14c>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d017      	beq.n	80044c2 <TIM_Base_SetConfig+0xaa>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a34      	ldr	r2, [pc, #208]	@ (8004568 <TIM_Base_SetConfig+0x150>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d013      	beq.n	80044c2 <TIM_Base_SetConfig+0xaa>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a33      	ldr	r2, [pc, #204]	@ (800456c <TIM_Base_SetConfig+0x154>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d00f      	beq.n	80044c2 <TIM_Base_SetConfig+0xaa>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a33      	ldr	r2, [pc, #204]	@ (8004574 <TIM_Base_SetConfig+0x15c>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d00b      	beq.n	80044c2 <TIM_Base_SetConfig+0xaa>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a32      	ldr	r2, [pc, #200]	@ (8004578 <TIM_Base_SetConfig+0x160>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d007      	beq.n	80044c2 <TIM_Base_SetConfig+0xaa>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a31      	ldr	r2, [pc, #196]	@ (800457c <TIM_Base_SetConfig+0x164>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d003      	beq.n	80044c2 <TIM_Base_SetConfig+0xaa>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a2c      	ldr	r2, [pc, #176]	@ (8004570 <TIM_Base_SetConfig+0x158>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d108      	bne.n	80044d4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	4313      	orrs	r3, r2
 80044e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	689a      	ldr	r2, [r3, #8]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	4a18      	ldr	r2, [pc, #96]	@ (800455c <TIM_Base_SetConfig+0x144>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d013      	beq.n	8004528 <TIM_Base_SetConfig+0x110>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4a1a      	ldr	r2, [pc, #104]	@ (800456c <TIM_Base_SetConfig+0x154>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d00f      	beq.n	8004528 <TIM_Base_SetConfig+0x110>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a1a      	ldr	r2, [pc, #104]	@ (8004574 <TIM_Base_SetConfig+0x15c>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d00b      	beq.n	8004528 <TIM_Base_SetConfig+0x110>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4a19      	ldr	r2, [pc, #100]	@ (8004578 <TIM_Base_SetConfig+0x160>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d007      	beq.n	8004528 <TIM_Base_SetConfig+0x110>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4a18      	ldr	r2, [pc, #96]	@ (800457c <TIM_Base_SetConfig+0x164>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d003      	beq.n	8004528 <TIM_Base_SetConfig+0x110>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a13      	ldr	r2, [pc, #76]	@ (8004570 <TIM_Base_SetConfig+0x158>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d103      	bne.n	8004530 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	691a      	ldr	r2, [r3, #16]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	2b01      	cmp	r3, #1
 8004540:	d105      	bne.n	800454e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	f023 0201 	bic.w	r2, r3, #1
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	611a      	str	r2, [r3, #16]
  }
}
 800454e:	bf00      	nop
 8004550:	3714      	adds	r7, #20
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	40012c00 	.word	0x40012c00
 8004560:	40000400 	.word	0x40000400
 8004564:	40000800 	.word	0x40000800
 8004568:	40000c00 	.word	0x40000c00
 800456c:	40013400 	.word	0x40013400
 8004570:	40015000 	.word	0x40015000
 8004574:	40014000 	.word	0x40014000
 8004578:	40014400 	.word	0x40014400
 800457c:	40014800 	.word	0x40014800

08004580 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004588:	bf00      	nop
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800459c:	bf00      	nop
 800459e:	370c      	adds	r7, #12
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80045b0:	bf00      	nop
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80045c4:	bf00      	nop
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80045d8:	bf00      	nop
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80045ec:	bf00      	nop
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004600:	bf00      	nop
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b082      	sub	sp, #8
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d101      	bne.n	800461e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e042      	b.n	80046a4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004624:	2b00      	cmp	r3, #0
 8004626:	d106      	bne.n	8004636 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f7fd f82d 	bl	8001690 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2224      	movs	r2, #36	@ 0x24
 800463a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f022 0201 	bic.w	r2, r2, #1
 800464c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004652:	2b00      	cmp	r3, #0
 8004654:	d002      	beq.n	800465c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 feb4 	bl	80053c4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f000 fbb5 	bl	8004dcc <UART_SetConfig>
 8004662:	4603      	mov	r3, r0
 8004664:	2b01      	cmp	r3, #1
 8004666:	d101      	bne.n	800466c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e01b      	b.n	80046a4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	685a      	ldr	r2, [r3, #4]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800467a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	689a      	ldr	r2, [r3, #8]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800468a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f042 0201 	orr.w	r2, r2, #1
 800469a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f000 ff33 	bl	8005508 <UART_CheckIdleState>
 80046a2:	4603      	mov	r3, r0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3708      	adds	r7, #8
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b08a      	sub	sp, #40	@ 0x28
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	4613      	mov	r3, r2
 80046b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80046c0:	2b20      	cmp	r3, #32
 80046c2:	d137      	bne.n	8004734 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d002      	beq.n	80046d0 <HAL_UART_Receive_IT+0x24>
 80046ca:	88fb      	ldrh	r3, [r7, #6]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d101      	bne.n	80046d4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e030      	b.n	8004736 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2200      	movs	r2, #0
 80046d8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a18      	ldr	r2, [pc, #96]	@ (8004740 <HAL_UART_Receive_IT+0x94>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d01f      	beq.n	8004724 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d018      	beq.n	8004724 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	e853 3f00 	ldrex	r3, [r3]
 80046fe:	613b      	str	r3, [r7, #16]
   return(result);
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004706:	627b      	str	r3, [r7, #36]	@ 0x24
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	461a      	mov	r2, r3
 800470e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004710:	623b      	str	r3, [r7, #32]
 8004712:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004714:	69f9      	ldr	r1, [r7, #28]
 8004716:	6a3a      	ldr	r2, [r7, #32]
 8004718:	e841 2300 	strex	r3, r2, [r1]
 800471c:	61bb      	str	r3, [r7, #24]
   return(result);
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d1e6      	bne.n	80046f2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004724:	88fb      	ldrh	r3, [r7, #6]
 8004726:	461a      	mov	r2, r3
 8004728:	68b9      	ldr	r1, [r7, #8]
 800472a:	68f8      	ldr	r0, [r7, #12]
 800472c:	f001 f804 	bl	8005738 <UART_Start_Receive_IT>
 8004730:	4603      	mov	r3, r0
 8004732:	e000      	b.n	8004736 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004734:	2302      	movs	r3, #2
  }
}
 8004736:	4618      	mov	r0, r3
 8004738:	3728      	adds	r7, #40	@ 0x28
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	40008000 	.word	0x40008000

08004744 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b0ba      	sub	sp, #232	@ 0xe8
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	69db      	ldr	r3, [r3, #28]
 8004752:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800476a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800476e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004772:	4013      	ands	r3, r2
 8004774:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004778:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800477c:	2b00      	cmp	r3, #0
 800477e:	d11b      	bne.n	80047b8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004780:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004784:	f003 0320 	and.w	r3, r3, #32
 8004788:	2b00      	cmp	r3, #0
 800478a:	d015      	beq.n	80047b8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800478c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004790:	f003 0320 	and.w	r3, r3, #32
 8004794:	2b00      	cmp	r3, #0
 8004796:	d105      	bne.n	80047a4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004798:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800479c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d009      	beq.n	80047b8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	f000 82e3 	beq.w	8004d74 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	4798      	blx	r3
      }
      return;
 80047b6:	e2dd      	b.n	8004d74 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80047b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80047bc:	2b00      	cmp	r3, #0
 80047be:	f000 8123 	beq.w	8004a08 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80047c2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80047c6:	4b8d      	ldr	r3, [pc, #564]	@ (80049fc <HAL_UART_IRQHandler+0x2b8>)
 80047c8:	4013      	ands	r3, r2
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d106      	bne.n	80047dc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80047ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80047d2:	4b8b      	ldr	r3, [pc, #556]	@ (8004a00 <HAL_UART_IRQHandler+0x2bc>)
 80047d4:	4013      	ands	r3, r2
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	f000 8116 	beq.w	8004a08 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80047dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047e0:	f003 0301 	and.w	r3, r3, #1
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d011      	beq.n	800480c <HAL_UART_IRQHandler+0xc8>
 80047e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d00b      	beq.n	800480c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2201      	movs	r2, #1
 80047fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004802:	f043 0201 	orr.w	r2, r3, #1
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800480c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004810:	f003 0302 	and.w	r3, r3, #2
 8004814:	2b00      	cmp	r3, #0
 8004816:	d011      	beq.n	800483c <HAL_UART_IRQHandler+0xf8>
 8004818:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800481c:	f003 0301 	and.w	r3, r3, #1
 8004820:	2b00      	cmp	r3, #0
 8004822:	d00b      	beq.n	800483c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2202      	movs	r2, #2
 800482a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004832:	f043 0204 	orr.w	r2, r3, #4
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800483c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004840:	f003 0304 	and.w	r3, r3, #4
 8004844:	2b00      	cmp	r3, #0
 8004846:	d011      	beq.n	800486c <HAL_UART_IRQHandler+0x128>
 8004848:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800484c:	f003 0301 	and.w	r3, r3, #1
 8004850:	2b00      	cmp	r3, #0
 8004852:	d00b      	beq.n	800486c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2204      	movs	r2, #4
 800485a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004862:	f043 0202 	orr.w	r2, r3, #2
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800486c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004870:	f003 0308 	and.w	r3, r3, #8
 8004874:	2b00      	cmp	r3, #0
 8004876:	d017      	beq.n	80048a8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004878:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800487c:	f003 0320 	and.w	r3, r3, #32
 8004880:	2b00      	cmp	r3, #0
 8004882:	d105      	bne.n	8004890 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004884:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004888:	4b5c      	ldr	r3, [pc, #368]	@ (80049fc <HAL_UART_IRQHandler+0x2b8>)
 800488a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00b      	beq.n	80048a8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2208      	movs	r2, #8
 8004896:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800489e:	f043 0208 	orr.w	r2, r3, #8
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80048a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d012      	beq.n	80048da <HAL_UART_IRQHandler+0x196>
 80048b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048b8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d00c      	beq.n	80048da <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80048c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048d0:	f043 0220 	orr.w	r2, r3, #32
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	f000 8249 	beq.w	8004d78 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80048e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048ea:	f003 0320 	and.w	r3, r3, #32
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d013      	beq.n	800491a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80048f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048f6:	f003 0320 	and.w	r3, r3, #32
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d105      	bne.n	800490a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80048fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004902:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d007      	beq.n	800491a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800490e:	2b00      	cmp	r3, #0
 8004910:	d003      	beq.n	800491a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004920:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800492e:	2b40      	cmp	r3, #64	@ 0x40
 8004930:	d005      	beq.n	800493e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004932:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004936:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800493a:	2b00      	cmp	r3, #0
 800493c:	d054      	beq.n	80049e8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f001 f81c 	bl	800597c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800494e:	2b40      	cmp	r3, #64	@ 0x40
 8004950:	d146      	bne.n	80049e0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	3308      	adds	r3, #8
 8004958:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800495c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004960:	e853 3f00 	ldrex	r3, [r3]
 8004964:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004968:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800496c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004970:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	3308      	adds	r3, #8
 800497a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800497e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004982:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004986:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800498a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800498e:	e841 2300 	strex	r3, r2, [r1]
 8004992:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004996:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1d9      	bne.n	8004952 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d017      	beq.n	80049d8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049ae:	4a15      	ldr	r2, [pc, #84]	@ (8004a04 <HAL_UART_IRQHandler+0x2c0>)
 80049b0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049b8:	4618      	mov	r0, r3
 80049ba:	f7fd fde2 	bl	8002582 <HAL_DMA_Abort_IT>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d019      	beq.n	80049f8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80049d2:	4610      	mov	r0, r2
 80049d4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049d6:	e00f      	b.n	80049f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 f9e1 	bl	8004da0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049de:	e00b      	b.n	80049f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f000 f9dd 	bl	8004da0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049e6:	e007      	b.n	80049f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f000 f9d9 	bl	8004da0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80049f6:	e1bf      	b.n	8004d78 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049f8:	bf00      	nop
    return;
 80049fa:	e1bd      	b.n	8004d78 <HAL_UART_IRQHandler+0x634>
 80049fc:	10000001 	.word	0x10000001
 8004a00:	04000120 	.word	0x04000120
 8004a04:	08005a49 	.word	0x08005a49

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	f040 8153 	bne.w	8004cb8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a16:	f003 0310 	and.w	r3, r3, #16
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f000 814c 	beq.w	8004cb8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a24:	f003 0310 	and.w	r3, r3, #16
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	f000 8145 	beq.w	8004cb8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	2210      	movs	r2, #16
 8004a34:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a40:	2b40      	cmp	r3, #64	@ 0x40
 8004a42:	f040 80bb 	bne.w	8004bbc <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004a54:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	f000 818f 	beq.w	8004d7c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004a64:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	f080 8187 	bcs.w	8004d7c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004a74:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0320 	and.w	r3, r3, #32
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	f040 8087 	bne.w	8004b9a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a94:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004a98:	e853 3f00 	ldrex	r3, [r3]
 8004a9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004aa0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004aa4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004aa8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004ab6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004aba:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004abe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004ac2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004ac6:	e841 2300 	strex	r3, r2, [r1]
 8004aca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004ace:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d1da      	bne.n	8004a8c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	3308      	adds	r3, #8
 8004adc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ade:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ae0:	e853 3f00 	ldrex	r3, [r3]
 8004ae4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004ae6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004ae8:	f023 0301 	bic.w	r3, r3, #1
 8004aec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	3308      	adds	r3, #8
 8004af6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004afa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004afe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b00:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004b02:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004b06:	e841 2300 	strex	r3, r2, [r1]
 8004b0a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004b0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d1e1      	bne.n	8004ad6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	3308      	adds	r3, #8
 8004b18:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b1c:	e853 3f00 	ldrex	r3, [r3]
 8004b20:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004b22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	3308      	adds	r3, #8
 8004b32:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004b36:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004b38:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004b3c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004b3e:	e841 2300 	strex	r3, r2, [r1]
 8004b42:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004b44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1e3      	bne.n	8004b12 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2220      	movs	r2, #32
 8004b4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b60:	e853 3f00 	ldrex	r3, [r3]
 8004b64:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004b66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b68:	f023 0310 	bic.w	r3, r3, #16
 8004b6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	461a      	mov	r2, r3
 8004b76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004b7a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004b7c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b7e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004b80:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004b82:	e841 2300 	strex	r3, r2, [r1]
 8004b86:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004b88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1e4      	bne.n	8004b58 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b94:	4618      	mov	r0, r3
 8004b96:	f7fd fc9b 	bl	80024d0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2202      	movs	r2, #2
 8004b9e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 f8fd 	bl	8004db4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004bba:	e0df      	b.n	8004d7c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f000 80d1 	beq.w	8004d80 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8004bde:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	f000 80cc 	beq.w	8004d80 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bf0:	e853 3f00 	ldrex	r3, [r3]
 8004bf4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004bf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bf8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004bfc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	461a      	mov	r2, r3
 8004c06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004c0a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c0c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c0e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004c10:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c12:	e841 2300 	strex	r3, r2, [r1]
 8004c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d1e4      	bne.n	8004be8 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	3308      	adds	r3, #8
 8004c24:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c28:	e853 3f00 	ldrex	r3, [r3]
 8004c2c:	623b      	str	r3, [r7, #32]
   return(result);
 8004c2e:	6a3b      	ldr	r3, [r7, #32]
 8004c30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c34:	f023 0301 	bic.w	r3, r3, #1
 8004c38:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	3308      	adds	r3, #8
 8004c42:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004c46:	633a      	str	r2, [r7, #48]	@ 0x30
 8004c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c4e:	e841 2300 	strex	r3, r2, [r1]
 8004c52:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d1e1      	bne.n	8004c1e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2220      	movs	r2, #32
 8004c5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	e853 3f00 	ldrex	r3, [r3]
 8004c7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f023 0310 	bic.w	r3, r3, #16
 8004c82:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004c90:	61fb      	str	r3, [r7, #28]
 8004c92:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c94:	69b9      	ldr	r1, [r7, #24]
 8004c96:	69fa      	ldr	r2, [r7, #28]
 8004c98:	e841 2300 	strex	r3, r2, [r1]
 8004c9c:	617b      	str	r3, [r7, #20]
   return(result);
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1e4      	bne.n	8004c6e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2202      	movs	r2, #2
 8004ca8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004caa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004cae:	4619      	mov	r1, r3
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f000 f87f 	bl	8004db4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004cb6:	e063      	b.n	8004d80 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004cb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cbc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d00e      	beq.n	8004ce2 <HAL_UART_IRQHandler+0x59e>
 8004cc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004cc8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d008      	beq.n	8004ce2 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004cd8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f001 fc12 	bl	8006504 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004ce0:	e051      	b.n	8004d86 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ce6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d014      	beq.n	8004d18 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004cee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d105      	bne.n	8004d06 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004cfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004cfe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d008      	beq.n	8004d18 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d03a      	beq.n	8004d84 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	4798      	blx	r3
    }
    return;
 8004d16:	e035      	b.n	8004d84 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004d18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d009      	beq.n	8004d38 <HAL_UART_IRQHandler+0x5f4>
 8004d24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d003      	beq.n	8004d38 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f000 fe9f 	bl	8005a74 <UART_EndTransmit_IT>
    return;
 8004d36:	e026      	b.n	8004d86 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004d38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d3c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d009      	beq.n	8004d58 <HAL_UART_IRQHandler+0x614>
 8004d44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d48:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d003      	beq.n	8004d58 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f001 fbeb 	bl	800652c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004d56:	e016      	b.n	8004d86 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004d58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d5c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d010      	beq.n	8004d86 <HAL_UART_IRQHandler+0x642>
 8004d64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	da0c      	bge.n	8004d86 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f001 fbd3 	bl	8006518 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004d72:	e008      	b.n	8004d86 <HAL_UART_IRQHandler+0x642>
      return;
 8004d74:	bf00      	nop
 8004d76:	e006      	b.n	8004d86 <HAL_UART_IRQHandler+0x642>
    return;
 8004d78:	bf00      	nop
 8004d7a:	e004      	b.n	8004d86 <HAL_UART_IRQHandler+0x642>
      return;
 8004d7c:	bf00      	nop
 8004d7e:	e002      	b.n	8004d86 <HAL_UART_IRQHandler+0x642>
      return;
 8004d80:	bf00      	nop
 8004d82:	e000      	b.n	8004d86 <HAL_UART_IRQHandler+0x642>
    return;
 8004d84:	bf00      	nop
  }
}
 8004d86:	37e8      	adds	r7, #232	@ 0xe8
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004d94:	bf00      	nop
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004da8:	bf00      	nop
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004dc0:	bf00      	nop
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dd0:	b08c      	sub	sp, #48	@ 0x30
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	689a      	ldr	r2, [r3, #8]
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	431a      	orrs	r2, r3
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	431a      	orrs	r2, r3
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	69db      	ldr	r3, [r3, #28]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	4baa      	ldr	r3, [pc, #680]	@ (80050a4 <UART_SetConfig+0x2d8>)
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	697a      	ldr	r2, [r7, #20]
 8004e00:	6812      	ldr	r2, [r2, #0]
 8004e02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e04:	430b      	orrs	r3, r1
 8004e06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	68da      	ldr	r2, [r3, #12]
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	699b      	ldr	r3, [r3, #24]
 8004e22:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a9f      	ldr	r2, [pc, #636]	@ (80050a8 <UART_SetConfig+0x2dc>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d004      	beq.n	8004e38 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	6a1b      	ldr	r3, [r3, #32]
 8004e32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e34:	4313      	orrs	r3, r2
 8004e36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004e42:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004e46:	697a      	ldr	r2, [r7, #20]
 8004e48:	6812      	ldr	r2, [r2, #0]
 8004e4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e4c:	430b      	orrs	r3, r1
 8004e4e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e56:	f023 010f 	bic.w	r1, r3, #15
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	430a      	orrs	r2, r1
 8004e64:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a90      	ldr	r2, [pc, #576]	@ (80050ac <UART_SetConfig+0x2e0>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d125      	bne.n	8004ebc <UART_SetConfig+0xf0>
 8004e70:	4b8f      	ldr	r3, [pc, #572]	@ (80050b0 <UART_SetConfig+0x2e4>)
 8004e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e76:	f003 0303 	and.w	r3, r3, #3
 8004e7a:	2b03      	cmp	r3, #3
 8004e7c:	d81a      	bhi.n	8004eb4 <UART_SetConfig+0xe8>
 8004e7e:	a201      	add	r2, pc, #4	@ (adr r2, 8004e84 <UART_SetConfig+0xb8>)
 8004e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e84:	08004e95 	.word	0x08004e95
 8004e88:	08004ea5 	.word	0x08004ea5
 8004e8c:	08004e9d 	.word	0x08004e9d
 8004e90:	08004ead 	.word	0x08004ead
 8004e94:	2301      	movs	r3, #1
 8004e96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e9a:	e116      	b.n	80050ca <UART_SetConfig+0x2fe>
 8004e9c:	2302      	movs	r3, #2
 8004e9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ea2:	e112      	b.n	80050ca <UART_SetConfig+0x2fe>
 8004ea4:	2304      	movs	r3, #4
 8004ea6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004eaa:	e10e      	b.n	80050ca <UART_SetConfig+0x2fe>
 8004eac:	2308      	movs	r3, #8
 8004eae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004eb2:	e10a      	b.n	80050ca <UART_SetConfig+0x2fe>
 8004eb4:	2310      	movs	r3, #16
 8004eb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004eba:	e106      	b.n	80050ca <UART_SetConfig+0x2fe>
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a7c      	ldr	r2, [pc, #496]	@ (80050b4 <UART_SetConfig+0x2e8>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d138      	bne.n	8004f38 <UART_SetConfig+0x16c>
 8004ec6:	4b7a      	ldr	r3, [pc, #488]	@ (80050b0 <UART_SetConfig+0x2e4>)
 8004ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ecc:	f003 030c 	and.w	r3, r3, #12
 8004ed0:	2b0c      	cmp	r3, #12
 8004ed2:	d82d      	bhi.n	8004f30 <UART_SetConfig+0x164>
 8004ed4:	a201      	add	r2, pc, #4	@ (adr r2, 8004edc <UART_SetConfig+0x110>)
 8004ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eda:	bf00      	nop
 8004edc:	08004f11 	.word	0x08004f11
 8004ee0:	08004f31 	.word	0x08004f31
 8004ee4:	08004f31 	.word	0x08004f31
 8004ee8:	08004f31 	.word	0x08004f31
 8004eec:	08004f21 	.word	0x08004f21
 8004ef0:	08004f31 	.word	0x08004f31
 8004ef4:	08004f31 	.word	0x08004f31
 8004ef8:	08004f31 	.word	0x08004f31
 8004efc:	08004f19 	.word	0x08004f19
 8004f00:	08004f31 	.word	0x08004f31
 8004f04:	08004f31 	.word	0x08004f31
 8004f08:	08004f31 	.word	0x08004f31
 8004f0c:	08004f29 	.word	0x08004f29
 8004f10:	2300      	movs	r3, #0
 8004f12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f16:	e0d8      	b.n	80050ca <UART_SetConfig+0x2fe>
 8004f18:	2302      	movs	r3, #2
 8004f1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f1e:	e0d4      	b.n	80050ca <UART_SetConfig+0x2fe>
 8004f20:	2304      	movs	r3, #4
 8004f22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f26:	e0d0      	b.n	80050ca <UART_SetConfig+0x2fe>
 8004f28:	2308      	movs	r3, #8
 8004f2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f2e:	e0cc      	b.n	80050ca <UART_SetConfig+0x2fe>
 8004f30:	2310      	movs	r3, #16
 8004f32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f36:	e0c8      	b.n	80050ca <UART_SetConfig+0x2fe>
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a5e      	ldr	r2, [pc, #376]	@ (80050b8 <UART_SetConfig+0x2ec>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d125      	bne.n	8004f8e <UART_SetConfig+0x1c2>
 8004f42:	4b5b      	ldr	r3, [pc, #364]	@ (80050b0 <UART_SetConfig+0x2e4>)
 8004f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f48:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004f4c:	2b30      	cmp	r3, #48	@ 0x30
 8004f4e:	d016      	beq.n	8004f7e <UART_SetConfig+0x1b2>
 8004f50:	2b30      	cmp	r3, #48	@ 0x30
 8004f52:	d818      	bhi.n	8004f86 <UART_SetConfig+0x1ba>
 8004f54:	2b20      	cmp	r3, #32
 8004f56:	d00a      	beq.n	8004f6e <UART_SetConfig+0x1a2>
 8004f58:	2b20      	cmp	r3, #32
 8004f5a:	d814      	bhi.n	8004f86 <UART_SetConfig+0x1ba>
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d002      	beq.n	8004f66 <UART_SetConfig+0x19a>
 8004f60:	2b10      	cmp	r3, #16
 8004f62:	d008      	beq.n	8004f76 <UART_SetConfig+0x1aa>
 8004f64:	e00f      	b.n	8004f86 <UART_SetConfig+0x1ba>
 8004f66:	2300      	movs	r3, #0
 8004f68:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f6c:	e0ad      	b.n	80050ca <UART_SetConfig+0x2fe>
 8004f6e:	2302      	movs	r3, #2
 8004f70:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f74:	e0a9      	b.n	80050ca <UART_SetConfig+0x2fe>
 8004f76:	2304      	movs	r3, #4
 8004f78:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f7c:	e0a5      	b.n	80050ca <UART_SetConfig+0x2fe>
 8004f7e:	2308      	movs	r3, #8
 8004f80:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f84:	e0a1      	b.n	80050ca <UART_SetConfig+0x2fe>
 8004f86:	2310      	movs	r3, #16
 8004f88:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f8c:	e09d      	b.n	80050ca <UART_SetConfig+0x2fe>
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a4a      	ldr	r2, [pc, #296]	@ (80050bc <UART_SetConfig+0x2f0>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d125      	bne.n	8004fe4 <UART_SetConfig+0x218>
 8004f98:	4b45      	ldr	r3, [pc, #276]	@ (80050b0 <UART_SetConfig+0x2e4>)
 8004f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f9e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004fa2:	2bc0      	cmp	r3, #192	@ 0xc0
 8004fa4:	d016      	beq.n	8004fd4 <UART_SetConfig+0x208>
 8004fa6:	2bc0      	cmp	r3, #192	@ 0xc0
 8004fa8:	d818      	bhi.n	8004fdc <UART_SetConfig+0x210>
 8004faa:	2b80      	cmp	r3, #128	@ 0x80
 8004fac:	d00a      	beq.n	8004fc4 <UART_SetConfig+0x1f8>
 8004fae:	2b80      	cmp	r3, #128	@ 0x80
 8004fb0:	d814      	bhi.n	8004fdc <UART_SetConfig+0x210>
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d002      	beq.n	8004fbc <UART_SetConfig+0x1f0>
 8004fb6:	2b40      	cmp	r3, #64	@ 0x40
 8004fb8:	d008      	beq.n	8004fcc <UART_SetConfig+0x200>
 8004fba:	e00f      	b.n	8004fdc <UART_SetConfig+0x210>
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fc2:	e082      	b.n	80050ca <UART_SetConfig+0x2fe>
 8004fc4:	2302      	movs	r3, #2
 8004fc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fca:	e07e      	b.n	80050ca <UART_SetConfig+0x2fe>
 8004fcc:	2304      	movs	r3, #4
 8004fce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fd2:	e07a      	b.n	80050ca <UART_SetConfig+0x2fe>
 8004fd4:	2308      	movs	r3, #8
 8004fd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fda:	e076      	b.n	80050ca <UART_SetConfig+0x2fe>
 8004fdc:	2310      	movs	r3, #16
 8004fde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fe2:	e072      	b.n	80050ca <UART_SetConfig+0x2fe>
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a35      	ldr	r2, [pc, #212]	@ (80050c0 <UART_SetConfig+0x2f4>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d12a      	bne.n	8005044 <UART_SetConfig+0x278>
 8004fee:	4b30      	ldr	r3, [pc, #192]	@ (80050b0 <UART_SetConfig+0x2e4>)
 8004ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ff4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ff8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ffc:	d01a      	beq.n	8005034 <UART_SetConfig+0x268>
 8004ffe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005002:	d81b      	bhi.n	800503c <UART_SetConfig+0x270>
 8005004:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005008:	d00c      	beq.n	8005024 <UART_SetConfig+0x258>
 800500a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800500e:	d815      	bhi.n	800503c <UART_SetConfig+0x270>
 8005010:	2b00      	cmp	r3, #0
 8005012:	d003      	beq.n	800501c <UART_SetConfig+0x250>
 8005014:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005018:	d008      	beq.n	800502c <UART_SetConfig+0x260>
 800501a:	e00f      	b.n	800503c <UART_SetConfig+0x270>
 800501c:	2300      	movs	r3, #0
 800501e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005022:	e052      	b.n	80050ca <UART_SetConfig+0x2fe>
 8005024:	2302      	movs	r3, #2
 8005026:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800502a:	e04e      	b.n	80050ca <UART_SetConfig+0x2fe>
 800502c:	2304      	movs	r3, #4
 800502e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005032:	e04a      	b.n	80050ca <UART_SetConfig+0x2fe>
 8005034:	2308      	movs	r3, #8
 8005036:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800503a:	e046      	b.n	80050ca <UART_SetConfig+0x2fe>
 800503c:	2310      	movs	r3, #16
 800503e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005042:	e042      	b.n	80050ca <UART_SetConfig+0x2fe>
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a17      	ldr	r2, [pc, #92]	@ (80050a8 <UART_SetConfig+0x2dc>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d13a      	bne.n	80050c4 <UART_SetConfig+0x2f8>
 800504e:	4b18      	ldr	r3, [pc, #96]	@ (80050b0 <UART_SetConfig+0x2e4>)
 8005050:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005054:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005058:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800505c:	d01a      	beq.n	8005094 <UART_SetConfig+0x2c8>
 800505e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005062:	d81b      	bhi.n	800509c <UART_SetConfig+0x2d0>
 8005064:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005068:	d00c      	beq.n	8005084 <UART_SetConfig+0x2b8>
 800506a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800506e:	d815      	bhi.n	800509c <UART_SetConfig+0x2d0>
 8005070:	2b00      	cmp	r3, #0
 8005072:	d003      	beq.n	800507c <UART_SetConfig+0x2b0>
 8005074:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005078:	d008      	beq.n	800508c <UART_SetConfig+0x2c0>
 800507a:	e00f      	b.n	800509c <UART_SetConfig+0x2d0>
 800507c:	2300      	movs	r3, #0
 800507e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005082:	e022      	b.n	80050ca <UART_SetConfig+0x2fe>
 8005084:	2302      	movs	r3, #2
 8005086:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800508a:	e01e      	b.n	80050ca <UART_SetConfig+0x2fe>
 800508c:	2304      	movs	r3, #4
 800508e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005092:	e01a      	b.n	80050ca <UART_SetConfig+0x2fe>
 8005094:	2308      	movs	r3, #8
 8005096:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800509a:	e016      	b.n	80050ca <UART_SetConfig+0x2fe>
 800509c:	2310      	movs	r3, #16
 800509e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050a2:	e012      	b.n	80050ca <UART_SetConfig+0x2fe>
 80050a4:	cfff69f3 	.word	0xcfff69f3
 80050a8:	40008000 	.word	0x40008000
 80050ac:	40013800 	.word	0x40013800
 80050b0:	40021000 	.word	0x40021000
 80050b4:	40004400 	.word	0x40004400
 80050b8:	40004800 	.word	0x40004800
 80050bc:	40004c00 	.word	0x40004c00
 80050c0:	40005000 	.word	0x40005000
 80050c4:	2310      	movs	r3, #16
 80050c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4aae      	ldr	r2, [pc, #696]	@ (8005388 <UART_SetConfig+0x5bc>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	f040 8097 	bne.w	8005204 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80050d6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80050da:	2b08      	cmp	r3, #8
 80050dc:	d823      	bhi.n	8005126 <UART_SetConfig+0x35a>
 80050de:	a201      	add	r2, pc, #4	@ (adr r2, 80050e4 <UART_SetConfig+0x318>)
 80050e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e4:	08005109 	.word	0x08005109
 80050e8:	08005127 	.word	0x08005127
 80050ec:	08005111 	.word	0x08005111
 80050f0:	08005127 	.word	0x08005127
 80050f4:	08005117 	.word	0x08005117
 80050f8:	08005127 	.word	0x08005127
 80050fc:	08005127 	.word	0x08005127
 8005100:	08005127 	.word	0x08005127
 8005104:	0800511f 	.word	0x0800511f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005108:	f7fe fc42 	bl	8003990 <HAL_RCC_GetPCLK1Freq>
 800510c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800510e:	e010      	b.n	8005132 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005110:	4b9e      	ldr	r3, [pc, #632]	@ (800538c <UART_SetConfig+0x5c0>)
 8005112:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005114:	e00d      	b.n	8005132 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005116:	f7fe fbcd 	bl	80038b4 <HAL_RCC_GetSysClockFreq>
 800511a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800511c:	e009      	b.n	8005132 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800511e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005122:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005124:	e005      	b.n	8005132 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005126:	2300      	movs	r3, #0
 8005128:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005130:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005134:	2b00      	cmp	r3, #0
 8005136:	f000 8130 	beq.w	800539a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800513e:	4a94      	ldr	r2, [pc, #592]	@ (8005390 <UART_SetConfig+0x5c4>)
 8005140:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005144:	461a      	mov	r2, r3
 8005146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005148:	fbb3 f3f2 	udiv	r3, r3, r2
 800514c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	685a      	ldr	r2, [r3, #4]
 8005152:	4613      	mov	r3, r2
 8005154:	005b      	lsls	r3, r3, #1
 8005156:	4413      	add	r3, r2
 8005158:	69ba      	ldr	r2, [r7, #24]
 800515a:	429a      	cmp	r2, r3
 800515c:	d305      	bcc.n	800516a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005164:	69ba      	ldr	r2, [r7, #24]
 8005166:	429a      	cmp	r2, r3
 8005168:	d903      	bls.n	8005172 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005170:	e113      	b.n	800539a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005174:	2200      	movs	r2, #0
 8005176:	60bb      	str	r3, [r7, #8]
 8005178:	60fa      	str	r2, [r7, #12]
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800517e:	4a84      	ldr	r2, [pc, #528]	@ (8005390 <UART_SetConfig+0x5c4>)
 8005180:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005184:	b29b      	uxth	r3, r3
 8005186:	2200      	movs	r2, #0
 8005188:	603b      	str	r3, [r7, #0]
 800518a:	607a      	str	r2, [r7, #4]
 800518c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005190:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005194:	f7fb fd1a 	bl	8000bcc <__aeabi_uldivmod>
 8005198:	4602      	mov	r2, r0
 800519a:	460b      	mov	r3, r1
 800519c:	4610      	mov	r0, r2
 800519e:	4619      	mov	r1, r3
 80051a0:	f04f 0200 	mov.w	r2, #0
 80051a4:	f04f 0300 	mov.w	r3, #0
 80051a8:	020b      	lsls	r3, r1, #8
 80051aa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80051ae:	0202      	lsls	r2, r0, #8
 80051b0:	6979      	ldr	r1, [r7, #20]
 80051b2:	6849      	ldr	r1, [r1, #4]
 80051b4:	0849      	lsrs	r1, r1, #1
 80051b6:	2000      	movs	r0, #0
 80051b8:	460c      	mov	r4, r1
 80051ba:	4605      	mov	r5, r0
 80051bc:	eb12 0804 	adds.w	r8, r2, r4
 80051c0:	eb43 0905 	adc.w	r9, r3, r5
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	469a      	mov	sl, r3
 80051cc:	4693      	mov	fp, r2
 80051ce:	4652      	mov	r2, sl
 80051d0:	465b      	mov	r3, fp
 80051d2:	4640      	mov	r0, r8
 80051d4:	4649      	mov	r1, r9
 80051d6:	f7fb fcf9 	bl	8000bcc <__aeabi_uldivmod>
 80051da:	4602      	mov	r2, r0
 80051dc:	460b      	mov	r3, r1
 80051de:	4613      	mov	r3, r2
 80051e0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80051e2:	6a3b      	ldr	r3, [r7, #32]
 80051e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80051e8:	d308      	bcc.n	80051fc <UART_SetConfig+0x430>
 80051ea:	6a3b      	ldr	r3, [r7, #32]
 80051ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80051f0:	d204      	bcs.n	80051fc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	6a3a      	ldr	r2, [r7, #32]
 80051f8:	60da      	str	r2, [r3, #12]
 80051fa:	e0ce      	b.n	800539a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005202:	e0ca      	b.n	800539a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	69db      	ldr	r3, [r3, #28]
 8005208:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800520c:	d166      	bne.n	80052dc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800520e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005212:	2b08      	cmp	r3, #8
 8005214:	d827      	bhi.n	8005266 <UART_SetConfig+0x49a>
 8005216:	a201      	add	r2, pc, #4	@ (adr r2, 800521c <UART_SetConfig+0x450>)
 8005218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800521c:	08005241 	.word	0x08005241
 8005220:	08005249 	.word	0x08005249
 8005224:	08005251 	.word	0x08005251
 8005228:	08005267 	.word	0x08005267
 800522c:	08005257 	.word	0x08005257
 8005230:	08005267 	.word	0x08005267
 8005234:	08005267 	.word	0x08005267
 8005238:	08005267 	.word	0x08005267
 800523c:	0800525f 	.word	0x0800525f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005240:	f7fe fba6 	bl	8003990 <HAL_RCC_GetPCLK1Freq>
 8005244:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005246:	e014      	b.n	8005272 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005248:	f7fe fbb8 	bl	80039bc <HAL_RCC_GetPCLK2Freq>
 800524c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800524e:	e010      	b.n	8005272 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005250:	4b4e      	ldr	r3, [pc, #312]	@ (800538c <UART_SetConfig+0x5c0>)
 8005252:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005254:	e00d      	b.n	8005272 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005256:	f7fe fb2d 	bl	80038b4 <HAL_RCC_GetSysClockFreq>
 800525a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800525c:	e009      	b.n	8005272 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800525e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005262:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005264:	e005      	b.n	8005272 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005266:	2300      	movs	r3, #0
 8005268:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005270:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005274:	2b00      	cmp	r3, #0
 8005276:	f000 8090 	beq.w	800539a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800527e:	4a44      	ldr	r2, [pc, #272]	@ (8005390 <UART_SetConfig+0x5c4>)
 8005280:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005284:	461a      	mov	r2, r3
 8005286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005288:	fbb3 f3f2 	udiv	r3, r3, r2
 800528c:	005a      	lsls	r2, r3, #1
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	085b      	lsrs	r3, r3, #1
 8005294:	441a      	add	r2, r3
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	fbb2 f3f3 	udiv	r3, r2, r3
 800529e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052a0:	6a3b      	ldr	r3, [r7, #32]
 80052a2:	2b0f      	cmp	r3, #15
 80052a4:	d916      	bls.n	80052d4 <UART_SetConfig+0x508>
 80052a6:	6a3b      	ldr	r3, [r7, #32]
 80052a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052ac:	d212      	bcs.n	80052d4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80052ae:	6a3b      	ldr	r3, [r7, #32]
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	f023 030f 	bic.w	r3, r3, #15
 80052b6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80052b8:	6a3b      	ldr	r3, [r7, #32]
 80052ba:	085b      	lsrs	r3, r3, #1
 80052bc:	b29b      	uxth	r3, r3
 80052be:	f003 0307 	and.w	r3, r3, #7
 80052c2:	b29a      	uxth	r2, r3
 80052c4:	8bfb      	ldrh	r3, [r7, #30]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	8bfa      	ldrh	r2, [r7, #30]
 80052d0:	60da      	str	r2, [r3, #12]
 80052d2:	e062      	b.n	800539a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80052da:	e05e      	b.n	800539a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80052dc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80052e0:	2b08      	cmp	r3, #8
 80052e2:	d828      	bhi.n	8005336 <UART_SetConfig+0x56a>
 80052e4:	a201      	add	r2, pc, #4	@ (adr r2, 80052ec <UART_SetConfig+0x520>)
 80052e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ea:	bf00      	nop
 80052ec:	08005311 	.word	0x08005311
 80052f0:	08005319 	.word	0x08005319
 80052f4:	08005321 	.word	0x08005321
 80052f8:	08005337 	.word	0x08005337
 80052fc:	08005327 	.word	0x08005327
 8005300:	08005337 	.word	0x08005337
 8005304:	08005337 	.word	0x08005337
 8005308:	08005337 	.word	0x08005337
 800530c:	0800532f 	.word	0x0800532f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005310:	f7fe fb3e 	bl	8003990 <HAL_RCC_GetPCLK1Freq>
 8005314:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005316:	e014      	b.n	8005342 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005318:	f7fe fb50 	bl	80039bc <HAL_RCC_GetPCLK2Freq>
 800531c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800531e:	e010      	b.n	8005342 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005320:	4b1a      	ldr	r3, [pc, #104]	@ (800538c <UART_SetConfig+0x5c0>)
 8005322:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005324:	e00d      	b.n	8005342 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005326:	f7fe fac5 	bl	80038b4 <HAL_RCC_GetSysClockFreq>
 800532a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800532c:	e009      	b.n	8005342 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800532e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005332:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005334:	e005      	b.n	8005342 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005336:	2300      	movs	r3, #0
 8005338:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005340:	bf00      	nop
    }

    if (pclk != 0U)
 8005342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005344:	2b00      	cmp	r3, #0
 8005346:	d028      	beq.n	800539a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800534c:	4a10      	ldr	r2, [pc, #64]	@ (8005390 <UART_SetConfig+0x5c4>)
 800534e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005352:	461a      	mov	r2, r3
 8005354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005356:	fbb3 f2f2 	udiv	r2, r3, r2
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	085b      	lsrs	r3, r3, #1
 8005360:	441a      	add	r2, r3
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	fbb2 f3f3 	udiv	r3, r2, r3
 800536a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800536c:	6a3b      	ldr	r3, [r7, #32]
 800536e:	2b0f      	cmp	r3, #15
 8005370:	d910      	bls.n	8005394 <UART_SetConfig+0x5c8>
 8005372:	6a3b      	ldr	r3, [r7, #32]
 8005374:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005378:	d20c      	bcs.n	8005394 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800537a:	6a3b      	ldr	r3, [r7, #32]
 800537c:	b29a      	uxth	r2, r3
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	60da      	str	r2, [r3, #12]
 8005384:	e009      	b.n	800539a <UART_SetConfig+0x5ce>
 8005386:	bf00      	nop
 8005388:	40008000 	.word	0x40008000
 800538c:	00f42400 	.word	0x00f42400
 8005390:	0800cec0 	.word	0x0800cec0
      }
      else
      {
        ret = HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	2201      	movs	r2, #1
 800539e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	2201      	movs	r2, #1
 80053a6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	2200      	movs	r2, #0
 80053ae:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	2200      	movs	r2, #0
 80053b4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80053b6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3730      	adds	r7, #48	@ 0x30
 80053be:	46bd      	mov	sp, r7
 80053c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080053c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b083      	sub	sp, #12
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053d0:	f003 0308 	and.w	r3, r3, #8
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00a      	beq.n	80053ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	430a      	orrs	r2, r1
 80053ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053f2:	f003 0301 	and.w	r3, r3, #1
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00a      	beq.n	8005410 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	430a      	orrs	r2, r1
 800540e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005414:	f003 0302 	and.w	r3, r3, #2
 8005418:	2b00      	cmp	r3, #0
 800541a:	d00a      	beq.n	8005432 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	430a      	orrs	r2, r1
 8005430:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005436:	f003 0304 	and.w	r3, r3, #4
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00a      	beq.n	8005454 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	430a      	orrs	r2, r1
 8005452:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005458:	f003 0310 	and.w	r3, r3, #16
 800545c:	2b00      	cmp	r3, #0
 800545e:	d00a      	beq.n	8005476 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	430a      	orrs	r2, r1
 8005474:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800547a:	f003 0320 	and.w	r3, r3, #32
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00a      	beq.n	8005498 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	430a      	orrs	r2, r1
 8005496:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800549c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d01a      	beq.n	80054da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	430a      	orrs	r2, r1
 80054b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80054c2:	d10a      	bne.n	80054da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	430a      	orrs	r2, r1
 80054d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00a      	beq.n	80054fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	430a      	orrs	r2, r1
 80054fa:	605a      	str	r2, [r3, #4]
  }
}
 80054fc:	bf00      	nop
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b098      	sub	sp, #96	@ 0x60
 800550c:	af02      	add	r7, sp, #8
 800550e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005518:	f7fc feee 	bl	80022f8 <HAL_GetTick>
 800551c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 0308 	and.w	r3, r3, #8
 8005528:	2b08      	cmp	r3, #8
 800552a:	d12f      	bne.n	800558c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800552c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005530:	9300      	str	r3, [sp, #0]
 8005532:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005534:	2200      	movs	r2, #0
 8005536:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 f88e 	bl	800565c <UART_WaitOnFlagUntilTimeout>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d022      	beq.n	800558c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800554c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800554e:	e853 3f00 	ldrex	r3, [r3]
 8005552:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005554:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005556:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800555a:	653b      	str	r3, [r7, #80]	@ 0x50
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	461a      	mov	r2, r3
 8005562:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005564:	647b      	str	r3, [r7, #68]	@ 0x44
 8005566:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005568:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800556a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800556c:	e841 2300 	strex	r3, r2, [r1]
 8005570:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005572:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005574:	2b00      	cmp	r3, #0
 8005576:	d1e6      	bne.n	8005546 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2220      	movs	r2, #32
 800557c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005588:	2303      	movs	r3, #3
 800558a:	e063      	b.n	8005654 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 0304 	and.w	r3, r3, #4
 8005596:	2b04      	cmp	r3, #4
 8005598:	d149      	bne.n	800562e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800559a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800559e:	9300      	str	r3, [sp, #0]
 80055a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055a2:	2200      	movs	r2, #0
 80055a4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f000 f857 	bl	800565c <UART_WaitOnFlagUntilTimeout>
 80055ae:	4603      	mov	r3, r0
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d03c      	beq.n	800562e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055bc:	e853 3f00 	ldrex	r3, [r3]
 80055c0:	623b      	str	r3, [r7, #32]
   return(result);
 80055c2:	6a3b      	ldr	r3, [r7, #32]
 80055c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	461a      	mov	r2, r3
 80055d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80055d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055da:	e841 2300 	strex	r3, r2, [r1]
 80055de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80055e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d1e6      	bne.n	80055b4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	3308      	adds	r3, #8
 80055ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	e853 3f00 	ldrex	r3, [r3]
 80055f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f023 0301 	bic.w	r3, r3, #1
 80055fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	3308      	adds	r3, #8
 8005604:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005606:	61fa      	str	r2, [r7, #28]
 8005608:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800560a:	69b9      	ldr	r1, [r7, #24]
 800560c:	69fa      	ldr	r2, [r7, #28]
 800560e:	e841 2300 	strex	r3, r2, [r1]
 8005612:	617b      	str	r3, [r7, #20]
   return(result);
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d1e5      	bne.n	80055e6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2220      	movs	r2, #32
 800561e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e012      	b.n	8005654 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2220      	movs	r2, #32
 8005632:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2220      	movs	r2, #32
 800563a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005652:	2300      	movs	r3, #0
}
 8005654:	4618      	mov	r0, r3
 8005656:	3758      	adds	r7, #88	@ 0x58
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	603b      	str	r3, [r7, #0]
 8005668:	4613      	mov	r3, r2
 800566a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800566c:	e04f      	b.n	800570e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005674:	d04b      	beq.n	800570e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005676:	f7fc fe3f 	bl	80022f8 <HAL_GetTick>
 800567a:	4602      	mov	r2, r0
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	1ad3      	subs	r3, r2, r3
 8005680:	69ba      	ldr	r2, [r7, #24]
 8005682:	429a      	cmp	r2, r3
 8005684:	d302      	bcc.n	800568c <UART_WaitOnFlagUntilTimeout+0x30>
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d101      	bne.n	8005690 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800568c:	2303      	movs	r3, #3
 800568e:	e04e      	b.n	800572e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 0304 	and.w	r3, r3, #4
 800569a:	2b00      	cmp	r3, #0
 800569c:	d037      	beq.n	800570e <UART_WaitOnFlagUntilTimeout+0xb2>
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	2b80      	cmp	r3, #128	@ 0x80
 80056a2:	d034      	beq.n	800570e <UART_WaitOnFlagUntilTimeout+0xb2>
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	2b40      	cmp	r3, #64	@ 0x40
 80056a8:	d031      	beq.n	800570e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	69db      	ldr	r3, [r3, #28]
 80056b0:	f003 0308 	and.w	r3, r3, #8
 80056b4:	2b08      	cmp	r3, #8
 80056b6:	d110      	bne.n	80056da <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2208      	movs	r2, #8
 80056be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056c0:	68f8      	ldr	r0, [r7, #12]
 80056c2:	f000 f95b 	bl	800597c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2208      	movs	r2, #8
 80056ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e029      	b.n	800572e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	69db      	ldr	r3, [r3, #28]
 80056e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056e8:	d111      	bne.n	800570e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80056f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056f4:	68f8      	ldr	r0, [r7, #12]
 80056f6:	f000 f941 	bl	800597c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2220      	movs	r2, #32
 80056fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2200      	movs	r2, #0
 8005706:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e00f      	b.n	800572e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	69da      	ldr	r2, [r3, #28]
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	4013      	ands	r3, r2
 8005718:	68ba      	ldr	r2, [r7, #8]
 800571a:	429a      	cmp	r2, r3
 800571c:	bf0c      	ite	eq
 800571e:	2301      	moveq	r3, #1
 8005720:	2300      	movne	r3, #0
 8005722:	b2db      	uxtb	r3, r3
 8005724:	461a      	mov	r2, r3
 8005726:	79fb      	ldrb	r3, [r7, #7]
 8005728:	429a      	cmp	r2, r3
 800572a:	d0a0      	beq.n	800566e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800572c:	2300      	movs	r3, #0
}
 800572e:	4618      	mov	r0, r3
 8005730:	3710      	adds	r7, #16
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
	...

08005738 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005738:	b480      	push	{r7}
 800573a:	b0a3      	sub	sp, #140	@ 0x8c
 800573c:	af00      	add	r7, sp, #0
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	4613      	mov	r3, r2
 8005744:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	68ba      	ldr	r2, [r7, #8]
 800574a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	88fa      	ldrh	r2, [r7, #6]
 8005750:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	88fa      	ldrh	r2, [r7, #6]
 8005758:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2200      	movs	r2, #0
 8005760:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800576a:	d10e      	bne.n	800578a <UART_Start_Receive_IT+0x52>
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	691b      	ldr	r3, [r3, #16]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d105      	bne.n	8005780 <UART_Start_Receive_IT+0x48>
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800577a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800577e:	e02d      	b.n	80057dc <UART_Start_Receive_IT+0xa4>
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	22ff      	movs	r2, #255	@ 0xff
 8005784:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005788:	e028      	b.n	80057dc <UART_Start_Receive_IT+0xa4>
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d10d      	bne.n	80057ae <UART_Start_Receive_IT+0x76>
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d104      	bne.n	80057a4 <UART_Start_Receive_IT+0x6c>
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	22ff      	movs	r2, #255	@ 0xff
 800579e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80057a2:	e01b      	b.n	80057dc <UART_Start_Receive_IT+0xa4>
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	227f      	movs	r2, #127	@ 0x7f
 80057a8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80057ac:	e016      	b.n	80057dc <UART_Start_Receive_IT+0xa4>
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80057b6:	d10d      	bne.n	80057d4 <UART_Start_Receive_IT+0x9c>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	691b      	ldr	r3, [r3, #16]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d104      	bne.n	80057ca <UART_Start_Receive_IT+0x92>
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	227f      	movs	r2, #127	@ 0x7f
 80057c4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80057c8:	e008      	b.n	80057dc <UART_Start_Receive_IT+0xa4>
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	223f      	movs	r2, #63	@ 0x3f
 80057ce:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80057d2:	e003      	b.n	80057dc <UART_Start_Receive_IT+0xa4>
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2200      	movs	r2, #0
 80057e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2222      	movs	r2, #34	@ 0x22
 80057e8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	3308      	adds	r3, #8
 80057f2:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80057f6:	e853 3f00 	ldrex	r3, [r3]
 80057fa:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80057fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80057fe:	f043 0301 	orr.w	r3, r3, #1
 8005802:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	3308      	adds	r3, #8
 800580c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8005810:	673a      	str	r2, [r7, #112]	@ 0x70
 8005812:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005814:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8005816:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8005818:	e841 2300 	strex	r3, r2, [r1]
 800581c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800581e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005820:	2b00      	cmp	r3, #0
 8005822:	d1e3      	bne.n	80057ec <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005828:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800582c:	d14f      	bne.n	80058ce <UART_Start_Receive_IT+0x196>
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005834:	88fa      	ldrh	r2, [r7, #6]
 8005836:	429a      	cmp	r2, r3
 8005838:	d349      	bcc.n	80058ce <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005842:	d107      	bne.n	8005854 <UART_Start_Receive_IT+0x11c>
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	691b      	ldr	r3, [r3, #16]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d103      	bne.n	8005854 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	4a47      	ldr	r2, [pc, #284]	@ (800596c <UART_Start_Receive_IT+0x234>)
 8005850:	675a      	str	r2, [r3, #116]	@ 0x74
 8005852:	e002      	b.n	800585a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	4a46      	ldr	r2, [pc, #280]	@ (8005970 <UART_Start_Receive_IT+0x238>)
 8005858:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d01a      	beq.n	8005898 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005868:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800586a:	e853 3f00 	ldrex	r3, [r3]
 800586e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005870:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005872:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005876:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	461a      	mov	r2, r3
 8005880:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005884:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005886:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005888:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800588a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800588c:	e841 2300 	strex	r3, r2, [r1]
 8005890:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8005892:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005894:	2b00      	cmp	r3, #0
 8005896:	d1e4      	bne.n	8005862 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	3308      	adds	r3, #8
 800589e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058a2:	e853 3f00 	ldrex	r3, [r3]
 80058a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80058a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	3308      	adds	r3, #8
 80058b6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80058b8:	64ba      	str	r2, [r7, #72]	@ 0x48
 80058ba:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058bc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80058be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058c0:	e841 2300 	strex	r3, r2, [r1]
 80058c4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80058c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d1e5      	bne.n	8005898 <UART_Start_Receive_IT+0x160>
 80058cc:	e046      	b.n	800595c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058d6:	d107      	bne.n	80058e8 <UART_Start_Receive_IT+0x1b0>
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	691b      	ldr	r3, [r3, #16]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d103      	bne.n	80058e8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	4a24      	ldr	r2, [pc, #144]	@ (8005974 <UART_Start_Receive_IT+0x23c>)
 80058e4:	675a      	str	r2, [r3, #116]	@ 0x74
 80058e6:	e002      	b.n	80058ee <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	4a23      	ldr	r2, [pc, #140]	@ (8005978 <UART_Start_Receive_IT+0x240>)
 80058ec:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d019      	beq.n	800592a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058fe:	e853 3f00 	ldrex	r3, [r3]
 8005902:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005906:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800590a:	677b      	str	r3, [r7, #116]	@ 0x74
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	461a      	mov	r2, r3
 8005912:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005914:	637b      	str	r3, [r7, #52]	@ 0x34
 8005916:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005918:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800591a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800591c:	e841 2300 	strex	r3, r2, [r1]
 8005920:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005924:	2b00      	cmp	r3, #0
 8005926:	d1e6      	bne.n	80058f6 <UART_Start_Receive_IT+0x1be>
 8005928:	e018      	b.n	800595c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	e853 3f00 	ldrex	r3, [r3]
 8005936:	613b      	str	r3, [r7, #16]
   return(result);
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	f043 0320 	orr.w	r3, r3, #32
 800593e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	461a      	mov	r2, r3
 8005946:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005948:	623b      	str	r3, [r7, #32]
 800594a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800594c:	69f9      	ldr	r1, [r7, #28]
 800594e:	6a3a      	ldr	r2, [r7, #32]
 8005950:	e841 2300 	strex	r3, r2, [r1]
 8005954:	61bb      	str	r3, [r7, #24]
   return(result);
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d1e6      	bne.n	800592a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800595c:	2300      	movs	r3, #0
}
 800595e:	4618      	mov	r0, r3
 8005960:	378c      	adds	r7, #140	@ 0x8c
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	0800619d 	.word	0x0800619d
 8005970:	08005e3d 	.word	0x08005e3d
 8005974:	08005c85 	.word	0x08005c85
 8005978:	08005acd 	.word	0x08005acd

0800597c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800597c:	b480      	push	{r7}
 800597e:	b095      	sub	sp, #84	@ 0x54
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800598a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800598c:	e853 3f00 	ldrex	r3, [r3]
 8005990:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005994:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005998:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	461a      	mov	r2, r3
 80059a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059a2:	643b      	str	r3, [r7, #64]	@ 0x40
 80059a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80059a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80059aa:	e841 2300 	strex	r3, r2, [r1]
 80059ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80059b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d1e6      	bne.n	8005984 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	3308      	adds	r3, #8
 80059bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059be:	6a3b      	ldr	r3, [r7, #32]
 80059c0:	e853 3f00 	ldrex	r3, [r3]
 80059c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80059cc:	f023 0301 	bic.w	r3, r3, #1
 80059d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	3308      	adds	r3, #8
 80059d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80059da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80059dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80059e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059e2:	e841 2300 	strex	r3, r2, [r1]
 80059e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80059e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d1e3      	bne.n	80059b6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d118      	bne.n	8005a28 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	e853 3f00 	ldrex	r3, [r3]
 8005a02:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	f023 0310 	bic.w	r3, r3, #16
 8005a0a:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	461a      	mov	r2, r3
 8005a12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a14:	61bb      	str	r3, [r7, #24]
 8005a16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a18:	6979      	ldr	r1, [r7, #20]
 8005a1a:	69ba      	ldr	r2, [r7, #24]
 8005a1c:	e841 2300 	strex	r3, r2, [r1]
 8005a20:	613b      	str	r3, [r7, #16]
   return(result);
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d1e6      	bne.n	80059f6 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2220      	movs	r2, #32
 8005a2c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005a3c:	bf00      	nop
 8005a3e:	3754      	adds	r7, #84	@ 0x54
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b084      	sub	sp, #16
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a54:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2200      	movs	r2, #0
 8005a62:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a66:	68f8      	ldr	r0, [r7, #12]
 8005a68:	f7ff f99a 	bl	8004da0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a6c:	bf00      	nop
 8005a6e:	3710      	adds	r7, #16
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b088      	sub	sp, #32
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	e853 3f00 	ldrex	r3, [r3]
 8005a88:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a90:	61fb      	str	r3, [r7, #28]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	461a      	mov	r2, r3
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	61bb      	str	r3, [r7, #24]
 8005a9c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a9e:	6979      	ldr	r1, [r7, #20]
 8005aa0:	69ba      	ldr	r2, [r7, #24]
 8005aa2:	e841 2300 	strex	r3, r2, [r1]
 8005aa6:	613b      	str	r3, [r7, #16]
   return(result);
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d1e6      	bne.n	8005a7c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2220      	movs	r2, #32
 8005ab2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f7ff f965 	bl	8004d8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ac2:	bf00      	nop
 8005ac4:	3720      	adds	r7, #32
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
	...

08005acc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b09c      	sub	sp, #112	@ 0x70
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005ada:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005ae4:	2b22      	cmp	r3, #34	@ 0x22
 8005ae6:	f040 80be 	bne.w	8005c66 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005af0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005af4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005af8:	b2d9      	uxtb	r1, r3
 8005afa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005afe:	b2da      	uxtb	r2, r3
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b04:	400a      	ands	r2, r1
 8005b06:	b2d2      	uxtb	r2, r2
 8005b08:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b0e:	1c5a      	adds	r2, r3, #1
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	3b01      	subs	r3, #1
 8005b1e:	b29a      	uxth	r2, r3
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	f040 80a1 	bne.w	8005c76 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b3c:	e853 3f00 	ldrex	r3, [r3]
 8005b40:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005b42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b48:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	461a      	mov	r2, r3
 8005b50:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005b52:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005b54:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b56:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005b58:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005b5a:	e841 2300 	strex	r3, r2, [r1]
 8005b5e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005b60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d1e6      	bne.n	8005b34 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	3308      	adds	r3, #8
 8005b6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b70:	e853 3f00 	ldrex	r3, [r3]
 8005b74:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b78:	f023 0301 	bic.w	r3, r3, #1
 8005b7c:	667b      	str	r3, [r7, #100]	@ 0x64
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	3308      	adds	r3, #8
 8005b84:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005b86:	647a      	str	r2, [r7, #68]	@ 0x44
 8005b88:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b8a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b8c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b8e:	e841 2300 	strex	r3, r2, [r1]
 8005b92:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d1e5      	bne.n	8005b66 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2220      	movs	r2, #32
 8005b9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a33      	ldr	r2, [pc, #204]	@ (8005c80 <UART_RxISR_8BIT+0x1b4>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d01f      	beq.n	8005bf8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d018      	beq.n	8005bf8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bce:	e853 3f00 	ldrex	r3, [r3]
 8005bd2:	623b      	str	r3, [r7, #32]
   return(result);
 8005bd4:	6a3b      	ldr	r3, [r7, #32]
 8005bd6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005bda:	663b      	str	r3, [r7, #96]	@ 0x60
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	461a      	mov	r2, r3
 8005be2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005be4:	633b      	str	r3, [r7, #48]	@ 0x30
 8005be6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005bea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bec:	e841 2300 	strex	r3, r2, [r1]
 8005bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d1e6      	bne.n	8005bc6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d12e      	bne.n	8005c5e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	e853 3f00 	ldrex	r3, [r3]
 8005c12:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f023 0310 	bic.w	r3, r3, #16
 8005c1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	461a      	mov	r2, r3
 8005c22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c24:	61fb      	str	r3, [r7, #28]
 8005c26:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c28:	69b9      	ldr	r1, [r7, #24]
 8005c2a:	69fa      	ldr	r2, [r7, #28]
 8005c2c:	e841 2300 	strex	r3, r2, [r1]
 8005c30:	617b      	str	r3, [r7, #20]
   return(result);
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d1e6      	bne.n	8005c06 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	69db      	ldr	r3, [r3, #28]
 8005c3e:	f003 0310 	and.w	r3, r3, #16
 8005c42:	2b10      	cmp	r3, #16
 8005c44:	d103      	bne.n	8005c4e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2210      	movs	r2, #16
 8005c4c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005c54:	4619      	mov	r1, r3
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f7ff f8ac 	bl	8004db4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005c5c:	e00b      	b.n	8005c76 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f7fb ff1e 	bl	8001aa0 <HAL_UART_RxCpltCallback>
}
 8005c64:	e007      	b.n	8005c76 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	699a      	ldr	r2, [r3, #24]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f042 0208 	orr.w	r2, r2, #8
 8005c74:	619a      	str	r2, [r3, #24]
}
 8005c76:	bf00      	nop
 8005c78:	3770      	adds	r7, #112	@ 0x70
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	40008000 	.word	0x40008000

08005c84 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b09c      	sub	sp, #112	@ 0x70
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005c92:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005c9c:	2b22      	cmp	r3, #34	@ 0x22
 8005c9e:	f040 80be 	bne.w	8005e1e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ca8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cb0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005cb2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8005cb6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005cba:	4013      	ands	r3, r2
 8005cbc:	b29a      	uxth	r2, r3
 8005cbe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005cc0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cc6:	1c9a      	adds	r2, r3, #2
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	3b01      	subs	r3, #1
 8005cd6:	b29a      	uxth	r2, r3
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	f040 80a1 	bne.w	8005e2e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005cf4:	e853 3f00 	ldrex	r3, [r3]
 8005cf8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005cfa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cfc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d00:	667b      	str	r3, [r7, #100]	@ 0x64
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	461a      	mov	r2, r3
 8005d08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d0a:	657b      	str	r3, [r7, #84]	@ 0x54
 8005d0c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005d10:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005d12:	e841 2300 	strex	r3, r2, [r1]
 8005d16:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005d18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d1e6      	bne.n	8005cec <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	3308      	adds	r3, #8
 8005d24:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d28:	e853 3f00 	ldrex	r3, [r3]
 8005d2c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d30:	f023 0301 	bic.w	r3, r3, #1
 8005d34:	663b      	str	r3, [r7, #96]	@ 0x60
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	3308      	adds	r3, #8
 8005d3c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005d3e:	643a      	str	r2, [r7, #64]	@ 0x40
 8005d40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d42:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005d44:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d46:	e841 2300 	strex	r3, r2, [r1]
 8005d4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d1e5      	bne.n	8005d1e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2220      	movs	r2, #32
 8005d56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a33      	ldr	r2, [pc, #204]	@ (8005e38 <UART_RxISR_16BIT+0x1b4>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d01f      	beq.n	8005db0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d018      	beq.n	8005db0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d84:	6a3b      	ldr	r3, [r7, #32]
 8005d86:	e853 3f00 	ldrex	r3, [r3]
 8005d8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005d92:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	461a      	mov	r2, r3
 8005d9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005d9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d9e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005da2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005da4:	e841 2300 	strex	r3, r2, [r1]
 8005da8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d1e6      	bne.n	8005d7e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d12e      	bne.n	8005e16 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	e853 3f00 	ldrex	r3, [r3]
 8005dca:	60bb      	str	r3, [r7, #8]
   return(result);
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	f023 0310 	bic.w	r3, r3, #16
 8005dd2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	461a      	mov	r2, r3
 8005dda:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005ddc:	61bb      	str	r3, [r7, #24]
 8005dde:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de0:	6979      	ldr	r1, [r7, #20]
 8005de2:	69ba      	ldr	r2, [r7, #24]
 8005de4:	e841 2300 	strex	r3, r2, [r1]
 8005de8:	613b      	str	r3, [r7, #16]
   return(result);
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d1e6      	bne.n	8005dbe <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	69db      	ldr	r3, [r3, #28]
 8005df6:	f003 0310 	and.w	r3, r3, #16
 8005dfa:	2b10      	cmp	r3, #16
 8005dfc:	d103      	bne.n	8005e06 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	2210      	movs	r2, #16
 8005e04:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005e0c:	4619      	mov	r1, r3
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f7fe ffd0 	bl	8004db4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005e14:	e00b      	b.n	8005e2e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f7fb fe42 	bl	8001aa0 <HAL_UART_RxCpltCallback>
}
 8005e1c:	e007      	b.n	8005e2e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	699a      	ldr	r2, [r3, #24]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f042 0208 	orr.w	r2, r2, #8
 8005e2c:	619a      	str	r2, [r3, #24]
}
 8005e2e:	bf00      	nop
 8005e30:	3770      	adds	r7, #112	@ 0x70
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	40008000 	.word	0x40008000

08005e3c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b0ac      	sub	sp, #176	@ 0xb0
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005e4a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	69db      	ldr	r3, [r3, #28]
 8005e54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005e72:	2b22      	cmp	r3, #34	@ 0x22
 8005e74:	f040 8182 	bne.w	800617c <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005e7e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005e82:	e125      	b.n	80060d0 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e8a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005e8e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8005e92:	b2d9      	uxtb	r1, r3
 8005e94:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8005e98:	b2da      	uxtb	r2, r3
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e9e:	400a      	ands	r2, r1
 8005ea0:	b2d2      	uxtb	r2, r2
 8005ea2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ea8:	1c5a      	adds	r2, r3, #1
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	3b01      	subs	r3, #1
 8005eb8:	b29a      	uxth	r2, r3
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	69db      	ldr	r3, [r3, #28]
 8005ec6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005eca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005ece:	f003 0307 	and.w	r3, r3, #7
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d053      	beq.n	8005f7e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005ed6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005eda:	f003 0301 	and.w	r3, r3, #1
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d011      	beq.n	8005f06 <UART_RxISR_8BIT_FIFOEN+0xca>
 8005ee2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005ee6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d00b      	beq.n	8005f06 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005efc:	f043 0201 	orr.w	r2, r3, #1
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005f0a:	f003 0302 	and.w	r3, r3, #2
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d011      	beq.n	8005f36 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8005f12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005f16:	f003 0301 	and.w	r3, r3, #1
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d00b      	beq.n	8005f36 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	2202      	movs	r2, #2
 8005f24:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f2c:	f043 0204 	orr.w	r2, r3, #4
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005f3a:	f003 0304 	and.w	r3, r3, #4
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d011      	beq.n	8005f66 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8005f42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005f46:	f003 0301 	and.w	r3, r3, #1
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d00b      	beq.n	8005f66 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	2204      	movs	r2, #4
 8005f54:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f5c:	f043 0202 	orr.w	r2, r3, #2
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d006      	beq.n	8005f7e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f7fe ff15 	bl	8004da0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	f040 80a2 	bne.w	80060d0 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f92:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005f94:	e853 3f00 	ldrex	r3, [r3]
 8005f98:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8005f9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005fa0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	461a      	mov	r2, r3
 8005faa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005fae:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005fb0:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb2:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8005fb4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005fb6:	e841 2300 	strex	r3, r2, [r1]
 8005fba:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8005fbc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d1e4      	bne.n	8005f8c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	3308      	adds	r3, #8
 8005fc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005fcc:	e853 3f00 	ldrex	r3, [r3]
 8005fd0:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8005fd2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005fd4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005fd8:	f023 0301 	bic.w	r3, r3, #1
 8005fdc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	3308      	adds	r3, #8
 8005fe6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005fea:	66ba      	str	r2, [r7, #104]	@ 0x68
 8005fec:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fee:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8005ff0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005ff2:	e841 2300 	strex	r3, r2, [r1]
 8005ff6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8005ff8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d1e1      	bne.n	8005fc2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2220      	movs	r2, #32
 8006002:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a5f      	ldr	r2, [pc, #380]	@ (8006194 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d021      	beq.n	8006060 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006026:	2b00      	cmp	r3, #0
 8006028:	d01a      	beq.n	8006060 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006030:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006032:	e853 3f00 	ldrex	r3, [r3]
 8006036:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006038:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800603a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800603e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	461a      	mov	r2, r3
 8006048:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800604c:	657b      	str	r3, [r7, #84]	@ 0x54
 800604e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006050:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006052:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006054:	e841 2300 	strex	r3, r2, [r1]
 8006058:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800605a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800605c:	2b00      	cmp	r3, #0
 800605e:	d1e4      	bne.n	800602a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006064:	2b01      	cmp	r3, #1
 8006066:	d130      	bne.n	80060ca <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006074:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006076:	e853 3f00 	ldrex	r3, [r3]
 800607a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800607c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800607e:	f023 0310 	bic.w	r3, r3, #16
 8006082:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	461a      	mov	r2, r3
 800608c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006090:	643b      	str	r3, [r7, #64]	@ 0x40
 8006092:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006094:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006096:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006098:	e841 2300 	strex	r3, r2, [r1]
 800609c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800609e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d1e4      	bne.n	800606e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	69db      	ldr	r3, [r3, #28]
 80060aa:	f003 0310 	and.w	r3, r3, #16
 80060ae:	2b10      	cmp	r3, #16
 80060b0:	d103      	bne.n	80060ba <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	2210      	movs	r2, #16
 80060b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80060c0:	4619      	mov	r1, r3
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f7fe fe76 	bl	8004db4 <HAL_UARTEx_RxEventCallback>
 80060c8:	e002      	b.n	80060d0 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f7fb fce8 	bl	8001aa0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80060d0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d006      	beq.n	80060e6 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 80060d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80060dc:	f003 0320 	and.w	r3, r3, #32
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	f47f aecf 	bne.w	8005e84 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80060ec:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80060f0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d049      	beq.n	800618c <UART_RxISR_8BIT_FIFOEN+0x350>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80060fe:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8006102:	429a      	cmp	r2, r3
 8006104:	d242      	bcs.n	800618c <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	3308      	adds	r3, #8
 800610c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800610e:	6a3b      	ldr	r3, [r7, #32]
 8006110:	e853 3f00 	ldrex	r3, [r3]
 8006114:	61fb      	str	r3, [r7, #28]
   return(result);
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800611c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	3308      	adds	r3, #8
 8006126:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800612a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800612c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800612e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006130:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006132:	e841 2300 	strex	r3, r2, [r1]
 8006136:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800613a:	2b00      	cmp	r3, #0
 800613c:	d1e3      	bne.n	8006106 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4a15      	ldr	r2, [pc, #84]	@ (8006198 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8006142:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	e853 3f00 	ldrex	r3, [r3]
 8006150:	60bb      	str	r3, [r7, #8]
   return(result);
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	f043 0320 	orr.w	r3, r3, #32
 8006158:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	461a      	mov	r2, r3
 8006162:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006166:	61bb      	str	r3, [r7, #24]
 8006168:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800616a:	6979      	ldr	r1, [r7, #20]
 800616c:	69ba      	ldr	r2, [r7, #24]
 800616e:	e841 2300 	strex	r3, r2, [r1]
 8006172:	613b      	str	r3, [r7, #16]
   return(result);
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d1e4      	bne.n	8006144 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800617a:	e007      	b.n	800618c <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	699a      	ldr	r2, [r3, #24]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f042 0208 	orr.w	r2, r2, #8
 800618a:	619a      	str	r2, [r3, #24]
}
 800618c:	bf00      	nop
 800618e:	37b0      	adds	r7, #176	@ 0xb0
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}
 8006194:	40008000 	.word	0x40008000
 8006198:	08005acd 	.word	0x08005acd

0800619c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b0ae      	sub	sp, #184	@ 0xb8
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80061aa:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	69db      	ldr	r3, [r3, #28]
 80061b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80061d2:	2b22      	cmp	r3, #34	@ 0x22
 80061d4:	f040 8186 	bne.w	80064e4 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80061de:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80061e2:	e129      	b.n	8006438 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ea:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80061f6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 80061fa:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80061fe:	4013      	ands	r3, r2
 8006200:	b29a      	uxth	r2, r3
 8006202:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006206:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800620c:	1c9a      	adds	r2, r3, #2
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006218:	b29b      	uxth	r3, r3
 800621a:	3b01      	subs	r3, #1
 800621c:	b29a      	uxth	r2, r3
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	69db      	ldr	r3, [r3, #28]
 800622a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800622e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006232:	f003 0307 	and.w	r3, r3, #7
 8006236:	2b00      	cmp	r3, #0
 8006238:	d053      	beq.n	80062e2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800623a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800623e:	f003 0301 	and.w	r3, r3, #1
 8006242:	2b00      	cmp	r3, #0
 8006244:	d011      	beq.n	800626a <UART_RxISR_16BIT_FIFOEN+0xce>
 8006246:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800624a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800624e:	2b00      	cmp	r3, #0
 8006250:	d00b      	beq.n	800626a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	2201      	movs	r2, #1
 8006258:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006260:	f043 0201 	orr.w	r2, r3, #1
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800626a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800626e:	f003 0302 	and.w	r3, r3, #2
 8006272:	2b00      	cmp	r3, #0
 8006274:	d011      	beq.n	800629a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8006276:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800627a:	f003 0301 	and.w	r3, r3, #1
 800627e:	2b00      	cmp	r3, #0
 8006280:	d00b      	beq.n	800629a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	2202      	movs	r2, #2
 8006288:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006290:	f043 0204 	orr.w	r2, r3, #4
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800629a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800629e:	f003 0304 	and.w	r3, r3, #4
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d011      	beq.n	80062ca <UART_RxISR_16BIT_FIFOEN+0x12e>
 80062a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80062aa:	f003 0301 	and.w	r3, r3, #1
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d00b      	beq.n	80062ca <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	2204      	movs	r2, #4
 80062b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062c0:	f043 0202 	orr.w	r2, r3, #2
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d006      	beq.n	80062e2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f7fe fd63 	bl	8004da0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	f040 80a4 	bne.w	8006438 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80062f8:	e853 3f00 	ldrex	r3, [r3]
 80062fc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80062fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006300:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006304:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	461a      	mov	r2, r3
 800630e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006312:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006316:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006318:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800631a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800631e:	e841 2300 	strex	r3, r2, [r1]
 8006322:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006324:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006326:	2b00      	cmp	r3, #0
 8006328:	d1e2      	bne.n	80062f0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	3308      	adds	r3, #8
 8006330:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006332:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006334:	e853 3f00 	ldrex	r3, [r3]
 8006338:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800633a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800633c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006340:	f023 0301 	bic.w	r3, r3, #1
 8006344:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	3308      	adds	r3, #8
 800634e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8006352:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006354:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006356:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006358:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800635a:	e841 2300 	strex	r3, r2, [r1]
 800635e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006360:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006362:	2b00      	cmp	r3, #0
 8006364:	d1e1      	bne.n	800632a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2220      	movs	r2, #32
 800636a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2200      	movs	r2, #0
 8006372:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2200      	movs	r2, #0
 8006378:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a5f      	ldr	r2, [pc, #380]	@ (80064fc <UART_RxISR_16BIT_FIFOEN+0x360>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d021      	beq.n	80063c8 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800638e:	2b00      	cmp	r3, #0
 8006390:	d01a      	beq.n	80063c8 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006398:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800639a:	e853 3f00 	ldrex	r3, [r3]
 800639e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80063a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80063a2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80063a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	461a      	mov	r2, r3
 80063b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80063b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80063b6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80063ba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80063bc:	e841 2300 	strex	r3, r2, [r1]
 80063c0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80063c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d1e4      	bne.n	8006392 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d130      	bne.n	8006432 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063de:	e853 3f00 	ldrex	r3, [r3]
 80063e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80063e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063e6:	f023 0310 	bic.w	r3, r3, #16
 80063ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	461a      	mov	r2, r3
 80063f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80063f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80063fa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80063fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006400:	e841 2300 	strex	r3, r2, [r1]
 8006404:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006406:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006408:	2b00      	cmp	r3, #0
 800640a:	d1e4      	bne.n	80063d6 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	69db      	ldr	r3, [r3, #28]
 8006412:	f003 0310 	and.w	r3, r3, #16
 8006416:	2b10      	cmp	r3, #16
 8006418:	d103      	bne.n	8006422 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	2210      	movs	r2, #16
 8006420:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006428:	4619      	mov	r1, r3
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f7fe fcc2 	bl	8004db4 <HAL_UARTEx_RxEventCallback>
 8006430:	e002      	b.n	8006438 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f7fb fb34 	bl	8001aa0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006438:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800643c:	2b00      	cmp	r3, #0
 800643e:	d006      	beq.n	800644e <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8006440:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006444:	f003 0320 	and.w	r3, r3, #32
 8006448:	2b00      	cmp	r3, #0
 800644a:	f47f aecb 	bne.w	80061e4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006454:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006458:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800645c:	2b00      	cmp	r3, #0
 800645e:	d049      	beq.n	80064f4 <UART_RxISR_16BIT_FIFOEN+0x358>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006466:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800646a:	429a      	cmp	r2, r3
 800646c:	d242      	bcs.n	80064f4 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	3308      	adds	r3, #8
 8006474:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006478:	e853 3f00 	ldrex	r3, [r3]
 800647c:	623b      	str	r3, [r7, #32]
   return(result);
 800647e:	6a3b      	ldr	r3, [r7, #32]
 8006480:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006484:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	3308      	adds	r3, #8
 800648e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8006492:	633a      	str	r2, [r7, #48]	@ 0x30
 8006494:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006496:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006498:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800649a:	e841 2300 	strex	r3, r2, [r1]
 800649e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80064a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d1e3      	bne.n	800646e <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4a15      	ldr	r2, [pc, #84]	@ (8006500 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80064aa:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	e853 3f00 	ldrex	r3, [r3]
 80064b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f043 0320 	orr.w	r3, r3, #32
 80064c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	461a      	mov	r2, r3
 80064ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80064ce:	61fb      	str	r3, [r7, #28]
 80064d0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d2:	69b9      	ldr	r1, [r7, #24]
 80064d4:	69fa      	ldr	r2, [r7, #28]
 80064d6:	e841 2300 	strex	r3, r2, [r1]
 80064da:	617b      	str	r3, [r7, #20]
   return(result);
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d1e4      	bne.n	80064ac <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80064e2:	e007      	b.n	80064f4 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	699a      	ldr	r2, [r3, #24]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f042 0208 	orr.w	r2, r2, #8
 80064f2:	619a      	str	r2, [r3, #24]
}
 80064f4:	bf00      	nop
 80064f6:	37b8      	adds	r7, #184	@ 0xb8
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	40008000 	.word	0x40008000
 8006500:	08005c85 	.word	0x08005c85

08006504 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006504:	b480      	push	{r7}
 8006506:	b083      	sub	sp, #12
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800650c:	bf00      	nop
 800650e:	370c      	adds	r7, #12
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr

08006518 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006518:	b480      	push	{r7}
 800651a:	b083      	sub	sp, #12
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006520:	bf00      	nop
 8006522:	370c      	adds	r7, #12
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800652c:	b480      	push	{r7}
 800652e:	b083      	sub	sp, #12
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006534:	bf00      	nop
 8006536:	370c      	adds	r7, #12
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006540:	b480      	push	{r7}
 8006542:	b085      	sub	sp, #20
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800654e:	2b01      	cmp	r3, #1
 8006550:	d101      	bne.n	8006556 <HAL_UARTEx_DisableFifoMode+0x16>
 8006552:	2302      	movs	r3, #2
 8006554:	e027      	b.n	80065a6 <HAL_UARTEx_DisableFifoMode+0x66>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2201      	movs	r2, #1
 800655a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2224      	movs	r2, #36	@ 0x24
 8006562:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f022 0201 	bic.w	r2, r2, #1
 800657c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006584:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	68fa      	ldr	r2, [r7, #12]
 8006592:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2220      	movs	r2, #32
 8006598:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2200      	movs	r2, #0
 80065a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80065a4:	2300      	movs	r3, #0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3714      	adds	r7, #20
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr

080065b2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80065b2:	b580      	push	{r7, lr}
 80065b4:	b084      	sub	sp, #16
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]
 80065ba:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d101      	bne.n	80065ca <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80065c6:	2302      	movs	r3, #2
 80065c8:	e02d      	b.n	8006626 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2201      	movs	r2, #1
 80065ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2224      	movs	r2, #36	@ 0x24
 80065d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	681a      	ldr	r2, [r3, #0]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f022 0201 	bic.w	r2, r2, #1
 80065f0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	683a      	ldr	r2, [r7, #0]
 8006602:	430a      	orrs	r2, r1
 8006604:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 f850 	bl	80066ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2220      	movs	r2, #32
 8006618:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006624:	2300      	movs	r3, #0
}
 8006626:	4618      	mov	r0, r3
 8006628:	3710      	adds	r7, #16
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}

0800662e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800662e:	b580      	push	{r7, lr}
 8006630:	b084      	sub	sp, #16
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
 8006636:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800663e:	2b01      	cmp	r3, #1
 8006640:	d101      	bne.n	8006646 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006642:	2302      	movs	r3, #2
 8006644:	e02d      	b.n	80066a2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2201      	movs	r2, #1
 800664a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2224      	movs	r2, #36	@ 0x24
 8006652:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f022 0201 	bic.w	r2, r2, #1
 800666c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	683a      	ldr	r2, [r7, #0]
 800667e:	430a      	orrs	r2, r1
 8006680:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 f812 	bl	80066ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	68fa      	ldr	r2, [r7, #12]
 800668e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2220      	movs	r2, #32
 8006694:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3710      	adds	r7, #16
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
	...

080066ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b085      	sub	sp, #20
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d108      	bne.n	80066ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2201      	movs	r2, #1
 80066c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2201      	movs	r2, #1
 80066c8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80066cc:	e031      	b.n	8006732 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80066ce:	2308      	movs	r3, #8
 80066d0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80066d2:	2308      	movs	r3, #8
 80066d4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	0e5b      	lsrs	r3, r3, #25
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	f003 0307 	and.w	r3, r3, #7
 80066e4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	0f5b      	lsrs	r3, r3, #29
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	f003 0307 	and.w	r3, r3, #7
 80066f4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80066f6:	7bbb      	ldrb	r3, [r7, #14]
 80066f8:	7b3a      	ldrb	r2, [r7, #12]
 80066fa:	4911      	ldr	r1, [pc, #68]	@ (8006740 <UARTEx_SetNbDataToProcess+0x94>)
 80066fc:	5c8a      	ldrb	r2, [r1, r2]
 80066fe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006702:	7b3a      	ldrb	r2, [r7, #12]
 8006704:	490f      	ldr	r1, [pc, #60]	@ (8006744 <UARTEx_SetNbDataToProcess+0x98>)
 8006706:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006708:	fb93 f3f2 	sdiv	r3, r3, r2
 800670c:	b29a      	uxth	r2, r3
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006714:	7bfb      	ldrb	r3, [r7, #15]
 8006716:	7b7a      	ldrb	r2, [r7, #13]
 8006718:	4909      	ldr	r1, [pc, #36]	@ (8006740 <UARTEx_SetNbDataToProcess+0x94>)
 800671a:	5c8a      	ldrb	r2, [r1, r2]
 800671c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006720:	7b7a      	ldrb	r2, [r7, #13]
 8006722:	4908      	ldr	r1, [pc, #32]	@ (8006744 <UARTEx_SetNbDataToProcess+0x98>)
 8006724:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006726:	fb93 f3f2 	sdiv	r3, r3, r2
 800672a:	b29a      	uxth	r2, r3
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006732:	bf00      	nop
 8006734:	3714      	adds	r7, #20
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr
 800673e:	bf00      	nop
 8006740:	0800ced8 	.word	0x0800ced8
 8006744:	0800cee0 	.word	0x0800cee0

08006748 <__NVIC_SetPriority>:
{
 8006748:	b480      	push	{r7}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
 800674e:	4603      	mov	r3, r0
 8006750:	6039      	str	r1, [r7, #0]
 8006752:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006758:	2b00      	cmp	r3, #0
 800675a:	db0a      	blt.n	8006772 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	b2da      	uxtb	r2, r3
 8006760:	490c      	ldr	r1, [pc, #48]	@ (8006794 <__NVIC_SetPriority+0x4c>)
 8006762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006766:	0112      	lsls	r2, r2, #4
 8006768:	b2d2      	uxtb	r2, r2
 800676a:	440b      	add	r3, r1
 800676c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006770:	e00a      	b.n	8006788 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	b2da      	uxtb	r2, r3
 8006776:	4908      	ldr	r1, [pc, #32]	@ (8006798 <__NVIC_SetPriority+0x50>)
 8006778:	79fb      	ldrb	r3, [r7, #7]
 800677a:	f003 030f 	and.w	r3, r3, #15
 800677e:	3b04      	subs	r3, #4
 8006780:	0112      	lsls	r2, r2, #4
 8006782:	b2d2      	uxtb	r2, r2
 8006784:	440b      	add	r3, r1
 8006786:	761a      	strb	r2, [r3, #24]
}
 8006788:	bf00      	nop
 800678a:	370c      	adds	r7, #12
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr
 8006794:	e000e100 	.word	0xe000e100
 8006798:	e000ed00 	.word	0xe000ed00

0800679c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800679c:	b580      	push	{r7, lr}
 800679e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80067a0:	4b05      	ldr	r3, [pc, #20]	@ (80067b8 <SysTick_Handler+0x1c>)
 80067a2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80067a4:	f002 f968 	bl	8008a78 <xTaskGetSchedulerState>
 80067a8:	4603      	mov	r3, r0
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d001      	beq.n	80067b2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80067ae:	f003 f863 	bl	8009878 <xPortSysTickHandler>
  }
}
 80067b2:	bf00      	nop
 80067b4:	bd80      	pop	{r7, pc}
 80067b6:	bf00      	nop
 80067b8:	e000e010 	.word	0xe000e010

080067bc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80067bc:	b580      	push	{r7, lr}
 80067be:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80067c0:	2100      	movs	r1, #0
 80067c2:	f06f 0004 	mvn.w	r0, #4
 80067c6:	f7ff ffbf 	bl	8006748 <__NVIC_SetPriority>
#endif
}
 80067ca:	bf00      	nop
 80067cc:	bd80      	pop	{r7, pc}
	...

080067d0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80067d0:	b480      	push	{r7}
 80067d2:	b083      	sub	sp, #12
 80067d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067d6:	f3ef 8305 	mrs	r3, IPSR
 80067da:	603b      	str	r3, [r7, #0]
  return(result);
 80067dc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d003      	beq.n	80067ea <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80067e2:	f06f 0305 	mvn.w	r3, #5
 80067e6:	607b      	str	r3, [r7, #4]
 80067e8:	e00c      	b.n	8006804 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80067ea:	4b0a      	ldr	r3, [pc, #40]	@ (8006814 <osKernelInitialize+0x44>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d105      	bne.n	80067fe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80067f2:	4b08      	ldr	r3, [pc, #32]	@ (8006814 <osKernelInitialize+0x44>)
 80067f4:	2201      	movs	r2, #1
 80067f6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80067f8:	2300      	movs	r3, #0
 80067fa:	607b      	str	r3, [r7, #4]
 80067fc:	e002      	b.n	8006804 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80067fe:	f04f 33ff 	mov.w	r3, #4294967295
 8006802:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006804:	687b      	ldr	r3, [r7, #4]
}
 8006806:	4618      	mov	r0, r3
 8006808:	370c      	adds	r7, #12
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr
 8006812:	bf00      	nop
 8006814:	20000664 	.word	0x20000664

08006818 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006818:	b580      	push	{r7, lr}
 800681a:	b082      	sub	sp, #8
 800681c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800681e:	f3ef 8305 	mrs	r3, IPSR
 8006822:	603b      	str	r3, [r7, #0]
  return(result);
 8006824:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006826:	2b00      	cmp	r3, #0
 8006828:	d003      	beq.n	8006832 <osKernelStart+0x1a>
    stat = osErrorISR;
 800682a:	f06f 0305 	mvn.w	r3, #5
 800682e:	607b      	str	r3, [r7, #4]
 8006830:	e010      	b.n	8006854 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006832:	4b0b      	ldr	r3, [pc, #44]	@ (8006860 <osKernelStart+0x48>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	2b01      	cmp	r3, #1
 8006838:	d109      	bne.n	800684e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800683a:	f7ff ffbf 	bl	80067bc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800683e:	4b08      	ldr	r3, [pc, #32]	@ (8006860 <osKernelStart+0x48>)
 8006840:	2202      	movs	r2, #2
 8006842:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006844:	f001 fcca 	bl	80081dc <vTaskStartScheduler>
      stat = osOK;
 8006848:	2300      	movs	r3, #0
 800684a:	607b      	str	r3, [r7, #4]
 800684c:	e002      	b.n	8006854 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800684e:	f04f 33ff 	mov.w	r3, #4294967295
 8006852:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006854:	687b      	ldr	r3, [r7, #4]
}
 8006856:	4618      	mov	r0, r3
 8006858:	3708      	adds	r7, #8
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	20000664 	.word	0x20000664

08006864 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006864:	b580      	push	{r7, lr}
 8006866:	b08e      	sub	sp, #56	@ 0x38
 8006868:	af04      	add	r7, sp, #16
 800686a:	60f8      	str	r0, [r7, #12]
 800686c:	60b9      	str	r1, [r7, #8]
 800686e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006870:	2300      	movs	r3, #0
 8006872:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006874:	f3ef 8305 	mrs	r3, IPSR
 8006878:	617b      	str	r3, [r7, #20]
  return(result);
 800687a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800687c:	2b00      	cmp	r3, #0
 800687e:	d17e      	bne.n	800697e <osThreadNew+0x11a>
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d07b      	beq.n	800697e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006886:	2380      	movs	r3, #128	@ 0x80
 8006888:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800688a:	2318      	movs	r3, #24
 800688c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800688e:	2300      	movs	r3, #0
 8006890:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006892:	f04f 33ff 	mov.w	r3, #4294967295
 8006896:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d045      	beq.n	800692a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d002      	beq.n	80068ac <osThreadNew+0x48>
        name = attr->name;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	699b      	ldr	r3, [r3, #24]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d002      	beq.n	80068ba <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	699b      	ldr	r3, [r3, #24]
 80068b8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80068ba:	69fb      	ldr	r3, [r7, #28]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d008      	beq.n	80068d2 <osThreadNew+0x6e>
 80068c0:	69fb      	ldr	r3, [r7, #28]
 80068c2:	2b38      	cmp	r3, #56	@ 0x38
 80068c4:	d805      	bhi.n	80068d2 <osThreadNew+0x6e>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	f003 0301 	and.w	r3, r3, #1
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d001      	beq.n	80068d6 <osThreadNew+0x72>
        return (NULL);
 80068d2:	2300      	movs	r3, #0
 80068d4:	e054      	b.n	8006980 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	695b      	ldr	r3, [r3, #20]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d003      	beq.n	80068e6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	695b      	ldr	r3, [r3, #20]
 80068e2:	089b      	lsrs	r3, r3, #2
 80068e4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d00e      	beq.n	800690c <osThreadNew+0xa8>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	2b5b      	cmp	r3, #91	@ 0x5b
 80068f4:	d90a      	bls.n	800690c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d006      	beq.n	800690c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	695b      	ldr	r3, [r3, #20]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d002      	beq.n	800690c <osThreadNew+0xa8>
        mem = 1;
 8006906:	2301      	movs	r3, #1
 8006908:	61bb      	str	r3, [r7, #24]
 800690a:	e010      	b.n	800692e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d10c      	bne.n	800692e <osThreadNew+0xca>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	68db      	ldr	r3, [r3, #12]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d108      	bne.n	800692e <osThreadNew+0xca>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	691b      	ldr	r3, [r3, #16]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d104      	bne.n	800692e <osThreadNew+0xca>
          mem = 0;
 8006924:	2300      	movs	r3, #0
 8006926:	61bb      	str	r3, [r7, #24]
 8006928:	e001      	b.n	800692e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800692a:	2300      	movs	r3, #0
 800692c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800692e:	69bb      	ldr	r3, [r7, #24]
 8006930:	2b01      	cmp	r3, #1
 8006932:	d110      	bne.n	8006956 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800693c:	9202      	str	r2, [sp, #8]
 800693e:	9301      	str	r3, [sp, #4]
 8006940:	69fb      	ldr	r3, [r7, #28]
 8006942:	9300      	str	r3, [sp, #0]
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	6a3a      	ldr	r2, [r7, #32]
 8006948:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800694a:	68f8      	ldr	r0, [r7, #12]
 800694c:	f001 fa6a 	bl	8007e24 <xTaskCreateStatic>
 8006950:	4603      	mov	r3, r0
 8006952:	613b      	str	r3, [r7, #16]
 8006954:	e013      	b.n	800697e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006956:	69bb      	ldr	r3, [r7, #24]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d110      	bne.n	800697e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800695c:	6a3b      	ldr	r3, [r7, #32]
 800695e:	b29a      	uxth	r2, r3
 8006960:	f107 0310 	add.w	r3, r7, #16
 8006964:	9301      	str	r3, [sp, #4]
 8006966:	69fb      	ldr	r3, [r7, #28]
 8006968:	9300      	str	r3, [sp, #0]
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800696e:	68f8      	ldr	r0, [r7, #12]
 8006970:	f001 fab8 	bl	8007ee4 <xTaskCreate>
 8006974:	4603      	mov	r3, r0
 8006976:	2b01      	cmp	r3, #1
 8006978:	d001      	beq.n	800697e <osThreadNew+0x11a>
            hTask = NULL;
 800697a:	2300      	movs	r3, #0
 800697c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800697e:	693b      	ldr	r3, [r7, #16]
}
 8006980:	4618      	mov	r0, r3
 8006982:	3728      	adds	r7, #40	@ 0x28
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}

08006988 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006988:	b580      	push	{r7, lr}
 800698a:	b084      	sub	sp, #16
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006990:	f3ef 8305 	mrs	r3, IPSR
 8006994:	60bb      	str	r3, [r7, #8]
  return(result);
 8006996:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006998:	2b00      	cmp	r3, #0
 800699a:	d003      	beq.n	80069a4 <osDelay+0x1c>
    stat = osErrorISR;
 800699c:	f06f 0305 	mvn.w	r3, #5
 80069a0:	60fb      	str	r3, [r7, #12]
 80069a2:	e007      	b.n	80069b4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80069a4:	2300      	movs	r3, #0
 80069a6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d002      	beq.n	80069b4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f001 fbde 	bl	8008170 <vTaskDelay>
    }
  }

  return (stat);
 80069b4:	68fb      	ldr	r3, [r7, #12]
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3710      	adds	r7, #16
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}

080069be <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80069be:	b580      	push	{r7, lr}
 80069c0:	b08a      	sub	sp, #40	@ 0x28
 80069c2:	af02      	add	r7, sp, #8
 80069c4:	60f8      	str	r0, [r7, #12]
 80069c6:	60b9      	str	r1, [r7, #8]
 80069c8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80069ca:	2300      	movs	r3, #0
 80069cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069ce:	f3ef 8305 	mrs	r3, IPSR
 80069d2:	613b      	str	r3, [r7, #16]
  return(result);
 80069d4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d175      	bne.n	8006ac6 <osSemaphoreNew+0x108>
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d072      	beq.n	8006ac6 <osSemaphoreNew+0x108>
 80069e0:	68ba      	ldr	r2, [r7, #8]
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d86e      	bhi.n	8006ac6 <osSemaphoreNew+0x108>
    mem = -1;
 80069e8:	f04f 33ff 	mov.w	r3, #4294967295
 80069ec:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d015      	beq.n	8006a20 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d006      	beq.n	8006a0a <osSemaphoreNew+0x4c>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	2b4f      	cmp	r3, #79	@ 0x4f
 8006a02:	d902      	bls.n	8006a0a <osSemaphoreNew+0x4c>
        mem = 1;
 8006a04:	2301      	movs	r3, #1
 8006a06:	61bb      	str	r3, [r7, #24]
 8006a08:	e00c      	b.n	8006a24 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d108      	bne.n	8006a24 <osSemaphoreNew+0x66>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	68db      	ldr	r3, [r3, #12]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d104      	bne.n	8006a24 <osSemaphoreNew+0x66>
          mem = 0;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	61bb      	str	r3, [r7, #24]
 8006a1e:	e001      	b.n	8006a24 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8006a20:	2300      	movs	r3, #0
 8006a22:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8006a24:	69bb      	ldr	r3, [r7, #24]
 8006a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a2a:	d04c      	beq.n	8006ac6 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d128      	bne.n	8006a84 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8006a32:	69bb      	ldr	r3, [r7, #24]
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d10a      	bne.n	8006a4e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	2203      	movs	r2, #3
 8006a3e:	9200      	str	r2, [sp, #0]
 8006a40:	2200      	movs	r2, #0
 8006a42:	2100      	movs	r1, #0
 8006a44:	2001      	movs	r0, #1
 8006a46:	f000 fa2b 	bl	8006ea0 <xQueueGenericCreateStatic>
 8006a4a:	61f8      	str	r0, [r7, #28]
 8006a4c:	e005      	b.n	8006a5a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8006a4e:	2203      	movs	r2, #3
 8006a50:	2100      	movs	r1, #0
 8006a52:	2001      	movs	r0, #1
 8006a54:	f000 faa1 	bl	8006f9a <xQueueGenericCreate>
 8006a58:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006a5a:	69fb      	ldr	r3, [r7, #28]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d022      	beq.n	8006aa6 <osSemaphoreNew+0xe8>
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d01f      	beq.n	8006aa6 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006a66:	2300      	movs	r3, #0
 8006a68:	2200      	movs	r2, #0
 8006a6a:	2100      	movs	r1, #0
 8006a6c:	69f8      	ldr	r0, [r7, #28]
 8006a6e:	f000 fb61 	bl	8007134 <xQueueGenericSend>
 8006a72:	4603      	mov	r3, r0
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d016      	beq.n	8006aa6 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8006a78:	69f8      	ldr	r0, [r7, #28]
 8006a7a:	f000 ffff 	bl	8007a7c <vQueueDelete>
            hSemaphore = NULL;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	61fb      	str	r3, [r7, #28]
 8006a82:	e010      	b.n	8006aa6 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8006a84:	69bb      	ldr	r3, [r7, #24]
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d108      	bne.n	8006a9c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	461a      	mov	r2, r3
 8006a90:	68b9      	ldr	r1, [r7, #8]
 8006a92:	68f8      	ldr	r0, [r7, #12]
 8006a94:	f000 fadf 	bl	8007056 <xQueueCreateCountingSemaphoreStatic>
 8006a98:	61f8      	str	r0, [r7, #28]
 8006a9a:	e004      	b.n	8006aa6 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006a9c:	68b9      	ldr	r1, [r7, #8]
 8006a9e:	68f8      	ldr	r0, [r7, #12]
 8006aa0:	f000 fb12 	bl	80070c8 <xQueueCreateCountingSemaphore>
 8006aa4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006aa6:	69fb      	ldr	r3, [r7, #28]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d00c      	beq.n	8006ac6 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d003      	beq.n	8006aba <osSemaphoreNew+0xfc>
          name = attr->name;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	617b      	str	r3, [r7, #20]
 8006ab8:	e001      	b.n	8006abe <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8006aba:	2300      	movs	r3, #0
 8006abc:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8006abe:	6979      	ldr	r1, [r7, #20]
 8006ac0:	69f8      	ldr	r0, [r7, #28]
 8006ac2:	f001 f927 	bl	8007d14 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8006ac6:	69fb      	ldr	r3, [r7, #28]
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3720      	adds	r7, #32
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b086      	sub	sp, #24
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d103      	bne.n	8006af0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8006ae8:	f06f 0303 	mvn.w	r3, #3
 8006aec:	617b      	str	r3, [r7, #20]
 8006aee:	e039      	b.n	8006b64 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006af0:	f3ef 8305 	mrs	r3, IPSR
 8006af4:	60fb      	str	r3, [r7, #12]
  return(result);
 8006af6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d022      	beq.n	8006b42 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d003      	beq.n	8006b0a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8006b02:	f06f 0303 	mvn.w	r3, #3
 8006b06:	617b      	str	r3, [r7, #20]
 8006b08:	e02c      	b.n	8006b64 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006b0e:	f107 0308 	add.w	r3, r7, #8
 8006b12:	461a      	mov	r2, r3
 8006b14:	2100      	movs	r1, #0
 8006b16:	6938      	ldr	r0, [r7, #16]
 8006b18:	f000 ff2e 	bl	8007978 <xQueueReceiveFromISR>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d003      	beq.n	8006b2a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8006b22:	f06f 0302 	mvn.w	r3, #2
 8006b26:	617b      	str	r3, [r7, #20]
 8006b28:	e01c      	b.n	8006b64 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d019      	beq.n	8006b64 <osSemaphoreAcquire+0x94>
 8006b30:	4b0f      	ldr	r3, [pc, #60]	@ (8006b70 <osSemaphoreAcquire+0xa0>)
 8006b32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b36:	601a      	str	r2, [r3, #0]
 8006b38:	f3bf 8f4f 	dsb	sy
 8006b3c:	f3bf 8f6f 	isb	sy
 8006b40:	e010      	b.n	8006b64 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8006b42:	6839      	ldr	r1, [r7, #0]
 8006b44:	6938      	ldr	r0, [r7, #16]
 8006b46:	f000 fe07 	bl	8007758 <xQueueSemaphoreTake>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d009      	beq.n	8006b64 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d003      	beq.n	8006b5e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8006b56:	f06f 0301 	mvn.w	r3, #1
 8006b5a:	617b      	str	r3, [r7, #20]
 8006b5c:	e002      	b.n	8006b64 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8006b5e:	f06f 0302 	mvn.w	r3, #2
 8006b62:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006b64:	697b      	ldr	r3, [r7, #20]
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3718      	adds	r7, #24
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	bf00      	nop
 8006b70:	e000ed04 	.word	0xe000ed04

08006b74 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b086      	sub	sp, #24
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006b80:	2300      	movs	r3, #0
 8006b82:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d103      	bne.n	8006b92 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8006b8a:	f06f 0303 	mvn.w	r3, #3
 8006b8e:	617b      	str	r3, [r7, #20]
 8006b90:	e02c      	b.n	8006bec <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b92:	f3ef 8305 	mrs	r3, IPSR
 8006b96:	60fb      	str	r3, [r7, #12]
  return(result);
 8006b98:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d01a      	beq.n	8006bd4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006ba2:	f107 0308 	add.w	r3, r7, #8
 8006ba6:	4619      	mov	r1, r3
 8006ba8:	6938      	ldr	r0, [r7, #16]
 8006baa:	f000 fc63 	bl	8007474 <xQueueGiveFromISR>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d003      	beq.n	8006bbc <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8006bb4:	f06f 0302 	mvn.w	r3, #2
 8006bb8:	617b      	str	r3, [r7, #20]
 8006bba:	e017      	b.n	8006bec <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d014      	beq.n	8006bec <osSemaphoreRelease+0x78>
 8006bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8006bf8 <osSemaphoreRelease+0x84>)
 8006bc4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bc8:	601a      	str	r2, [r3, #0]
 8006bca:	f3bf 8f4f 	dsb	sy
 8006bce:	f3bf 8f6f 	isb	sy
 8006bd2:	e00b      	b.n	8006bec <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	2100      	movs	r1, #0
 8006bda:	6938      	ldr	r0, [r7, #16]
 8006bdc:	f000 faaa 	bl	8007134 <xQueueGenericSend>
 8006be0:	4603      	mov	r3, r0
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d002      	beq.n	8006bec <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8006be6:	f06f 0302 	mvn.w	r3, #2
 8006bea:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8006bec:	697b      	ldr	r3, [r7, #20]
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3718      	adds	r7, #24
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}
 8006bf6:	bf00      	nop
 8006bf8:	e000ed04 	.word	0xe000ed04

08006bfc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006bfc:	b480      	push	{r7}
 8006bfe:	b085      	sub	sp, #20
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	60f8      	str	r0, [r7, #12]
 8006c04:	60b9      	str	r1, [r7, #8]
 8006c06:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	4a07      	ldr	r2, [pc, #28]	@ (8006c28 <vApplicationGetIdleTaskMemory+0x2c>)
 8006c0c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	4a06      	ldr	r2, [pc, #24]	@ (8006c2c <vApplicationGetIdleTaskMemory+0x30>)
 8006c12:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2280      	movs	r2, #128	@ 0x80
 8006c18:	601a      	str	r2, [r3, #0]
}
 8006c1a:	bf00      	nop
 8006c1c:	3714      	adds	r7, #20
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr
 8006c26:	bf00      	nop
 8006c28:	20000668 	.word	0x20000668
 8006c2c:	200006c4 	.word	0x200006c4

08006c30 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006c30:	b480      	push	{r7}
 8006c32:	b085      	sub	sp, #20
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	60f8      	str	r0, [r7, #12]
 8006c38:	60b9      	str	r1, [r7, #8]
 8006c3a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	4a07      	ldr	r2, [pc, #28]	@ (8006c5c <vApplicationGetTimerTaskMemory+0x2c>)
 8006c40:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	4a06      	ldr	r2, [pc, #24]	@ (8006c60 <vApplicationGetTimerTaskMemory+0x30>)
 8006c46:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006c4e:	601a      	str	r2, [r3, #0]
}
 8006c50:	bf00      	nop
 8006c52:	3714      	adds	r7, #20
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr
 8006c5c:	200008c4 	.word	0x200008c4
 8006c60:	20000920 	.word	0x20000920

08006c64 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006c64:	b480      	push	{r7}
 8006c66:	b083      	sub	sp, #12
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f103 0208 	add.w	r2, r3, #8
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f04f 32ff 	mov.w	r2, #4294967295
 8006c7c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f103 0208 	add.w	r2, r3, #8
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f103 0208 	add.w	r2, r3, #8
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006c98:	bf00      	nop
 8006c9a:	370c      	adds	r7, #12
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr

08006ca4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b083      	sub	sp, #12
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006cb2:	bf00      	nop
 8006cb4:	370c      	adds	r7, #12
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr

08006cbe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006cbe:	b480      	push	{r7}
 8006cc0:	b085      	sub	sp, #20
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	6078      	str	r0, [r7, #4]
 8006cc6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	68fa      	ldr	r2, [r7, #12]
 8006cd2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	689a      	ldr	r2, [r3, #8]
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	683a      	ldr	r2, [r7, #0]
 8006ce2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	683a      	ldr	r2, [r7, #0]
 8006ce8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	1c5a      	adds	r2, r3, #1
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	601a      	str	r2, [r3, #0]
}
 8006cfa:	bf00      	nop
 8006cfc:	3714      	adds	r7, #20
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr

08006d06 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d06:	b480      	push	{r7}
 8006d08:	b085      	sub	sp, #20
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	6078      	str	r0, [r7, #4]
 8006d0e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d1c:	d103      	bne.n	8006d26 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	691b      	ldr	r3, [r3, #16]
 8006d22:	60fb      	str	r3, [r7, #12]
 8006d24:	e00c      	b.n	8006d40 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	3308      	adds	r3, #8
 8006d2a:	60fb      	str	r3, [r7, #12]
 8006d2c:	e002      	b.n	8006d34 <vListInsert+0x2e>
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	60fb      	str	r3, [r7, #12]
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	68ba      	ldr	r2, [r7, #8]
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d2f6      	bcs.n	8006d2e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	685a      	ldr	r2, [r3, #4]
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	683a      	ldr	r2, [r7, #0]
 8006d4e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	68fa      	ldr	r2, [r7, #12]
 8006d54:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	683a      	ldr	r2, [r7, #0]
 8006d5a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	687a      	ldr	r2, [r7, #4]
 8006d60:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	1c5a      	adds	r2, r3, #1
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	601a      	str	r2, [r3, #0]
}
 8006d6c:	bf00      	nop
 8006d6e:	3714      	adds	r7, #20
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr

08006d78 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b085      	sub	sp, #20
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	691b      	ldr	r3, [r3, #16]
 8006d84:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	6892      	ldr	r2, [r2, #8]
 8006d8e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	6852      	ldr	r2, [r2, #4]
 8006d98:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d103      	bne.n	8006dac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	689a      	ldr	r2, [r3, #8]
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	1e5a      	subs	r2, r3, #1
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3714      	adds	r7, #20
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr

08006dcc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b084      	sub	sp, #16
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d10b      	bne.n	8006df8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006de4:	f383 8811 	msr	BASEPRI, r3
 8006de8:	f3bf 8f6f 	isb	sy
 8006dec:	f3bf 8f4f 	dsb	sy
 8006df0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006df2:	bf00      	nop
 8006df4:	bf00      	nop
 8006df6:	e7fd      	b.n	8006df4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006df8:	f002 fcae 	bl	8009758 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e04:	68f9      	ldr	r1, [r7, #12]
 8006e06:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006e08:	fb01 f303 	mul.w	r3, r1, r3
 8006e0c:	441a      	add	r2, r3
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2200      	movs	r2, #0
 8006e16:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e28:	3b01      	subs	r3, #1
 8006e2a:	68f9      	ldr	r1, [r7, #12]
 8006e2c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006e2e:	fb01 f303 	mul.w	r3, r1, r3
 8006e32:	441a      	add	r2, r3
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	22ff      	movs	r2, #255	@ 0xff
 8006e3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	22ff      	movs	r2, #255	@ 0xff
 8006e44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d114      	bne.n	8006e78 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	691b      	ldr	r3, [r3, #16]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d01a      	beq.n	8006e8c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	3310      	adds	r3, #16
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f001 fc4c 	bl	80086f8 <xTaskRemoveFromEventList>
 8006e60:	4603      	mov	r3, r0
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d012      	beq.n	8006e8c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006e66:	4b0d      	ldr	r3, [pc, #52]	@ (8006e9c <xQueueGenericReset+0xd0>)
 8006e68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e6c:	601a      	str	r2, [r3, #0]
 8006e6e:	f3bf 8f4f 	dsb	sy
 8006e72:	f3bf 8f6f 	isb	sy
 8006e76:	e009      	b.n	8006e8c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	3310      	adds	r3, #16
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f7ff fef1 	bl	8006c64 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	3324      	adds	r3, #36	@ 0x24
 8006e86:	4618      	mov	r0, r3
 8006e88:	f7ff feec 	bl	8006c64 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006e8c:	f002 fc96 	bl	80097bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006e90:	2301      	movs	r3, #1
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3710      	adds	r7, #16
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
 8006e9a:	bf00      	nop
 8006e9c:	e000ed04 	.word	0xe000ed04

08006ea0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b08e      	sub	sp, #56	@ 0x38
 8006ea4:	af02      	add	r7, sp, #8
 8006ea6:	60f8      	str	r0, [r7, #12]
 8006ea8:	60b9      	str	r1, [r7, #8]
 8006eaa:	607a      	str	r2, [r7, #4]
 8006eac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d10b      	bne.n	8006ecc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006eb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eb8:	f383 8811 	msr	BASEPRI, r3
 8006ebc:	f3bf 8f6f 	isb	sy
 8006ec0:	f3bf 8f4f 	dsb	sy
 8006ec4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006ec6:	bf00      	nop
 8006ec8:	bf00      	nop
 8006eca:	e7fd      	b.n	8006ec8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d10b      	bne.n	8006eea <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ed6:	f383 8811 	msr	BASEPRI, r3
 8006eda:	f3bf 8f6f 	isb	sy
 8006ede:	f3bf 8f4f 	dsb	sy
 8006ee2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006ee4:	bf00      	nop
 8006ee6:	bf00      	nop
 8006ee8:	e7fd      	b.n	8006ee6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d002      	beq.n	8006ef6 <xQueueGenericCreateStatic+0x56>
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d001      	beq.n	8006efa <xQueueGenericCreateStatic+0x5a>
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e000      	b.n	8006efc <xQueueGenericCreateStatic+0x5c>
 8006efa:	2300      	movs	r3, #0
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d10b      	bne.n	8006f18 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f04:	f383 8811 	msr	BASEPRI, r3
 8006f08:	f3bf 8f6f 	isb	sy
 8006f0c:	f3bf 8f4f 	dsb	sy
 8006f10:	623b      	str	r3, [r7, #32]
}
 8006f12:	bf00      	nop
 8006f14:	bf00      	nop
 8006f16:	e7fd      	b.n	8006f14 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d102      	bne.n	8006f24 <xQueueGenericCreateStatic+0x84>
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d101      	bne.n	8006f28 <xQueueGenericCreateStatic+0x88>
 8006f24:	2301      	movs	r3, #1
 8006f26:	e000      	b.n	8006f2a <xQueueGenericCreateStatic+0x8a>
 8006f28:	2300      	movs	r3, #0
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d10b      	bne.n	8006f46 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f32:	f383 8811 	msr	BASEPRI, r3
 8006f36:	f3bf 8f6f 	isb	sy
 8006f3a:	f3bf 8f4f 	dsb	sy
 8006f3e:	61fb      	str	r3, [r7, #28]
}
 8006f40:	bf00      	nop
 8006f42:	bf00      	nop
 8006f44:	e7fd      	b.n	8006f42 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006f46:	2350      	movs	r3, #80	@ 0x50
 8006f48:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	2b50      	cmp	r3, #80	@ 0x50
 8006f4e:	d00b      	beq.n	8006f68 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f54:	f383 8811 	msr	BASEPRI, r3
 8006f58:	f3bf 8f6f 	isb	sy
 8006f5c:	f3bf 8f4f 	dsb	sy
 8006f60:	61bb      	str	r3, [r7, #24]
}
 8006f62:	bf00      	nop
 8006f64:	bf00      	nop
 8006f66:	e7fd      	b.n	8006f64 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006f68:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006f6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d00d      	beq.n	8006f90 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006f74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f76:	2201      	movs	r2, #1
 8006f78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006f7c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006f80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f82:	9300      	str	r3, [sp, #0]
 8006f84:	4613      	mov	r3, r2
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	68b9      	ldr	r1, [r7, #8]
 8006f8a:	68f8      	ldr	r0, [r7, #12]
 8006f8c:	f000 f840 	bl	8007010 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3730      	adds	r7, #48	@ 0x30
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}

08006f9a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006f9a:	b580      	push	{r7, lr}
 8006f9c:	b08a      	sub	sp, #40	@ 0x28
 8006f9e:	af02      	add	r7, sp, #8
 8006fa0:	60f8      	str	r0, [r7, #12]
 8006fa2:	60b9      	str	r1, [r7, #8]
 8006fa4:	4613      	mov	r3, r2
 8006fa6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d10b      	bne.n	8006fc6 <xQueueGenericCreate+0x2c>
	__asm volatile
 8006fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fb2:	f383 8811 	msr	BASEPRI, r3
 8006fb6:	f3bf 8f6f 	isb	sy
 8006fba:	f3bf 8f4f 	dsb	sy
 8006fbe:	613b      	str	r3, [r7, #16]
}
 8006fc0:	bf00      	nop
 8006fc2:	bf00      	nop
 8006fc4:	e7fd      	b.n	8006fc2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	68ba      	ldr	r2, [r7, #8]
 8006fca:	fb02 f303 	mul.w	r3, r2, r3
 8006fce:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006fd0:	69fb      	ldr	r3, [r7, #28]
 8006fd2:	3350      	adds	r3, #80	@ 0x50
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f002 fce1 	bl	800999c <pvPortMalloc>
 8006fda:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006fdc:	69bb      	ldr	r3, [r7, #24]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d011      	beq.n	8007006 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006fe2:	69bb      	ldr	r3, [r7, #24]
 8006fe4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	3350      	adds	r3, #80	@ 0x50
 8006fea:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006fec:	69bb      	ldr	r3, [r7, #24]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006ff4:	79fa      	ldrb	r2, [r7, #7]
 8006ff6:	69bb      	ldr	r3, [r7, #24]
 8006ff8:	9300      	str	r3, [sp, #0]
 8006ffa:	4613      	mov	r3, r2
 8006ffc:	697a      	ldr	r2, [r7, #20]
 8006ffe:	68b9      	ldr	r1, [r7, #8]
 8007000:	68f8      	ldr	r0, [r7, #12]
 8007002:	f000 f805 	bl	8007010 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007006:	69bb      	ldr	r3, [r7, #24]
	}
 8007008:	4618      	mov	r0, r3
 800700a:	3720      	adds	r7, #32
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}

08007010 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b084      	sub	sp, #16
 8007014:	af00      	add	r7, sp, #0
 8007016:	60f8      	str	r0, [r7, #12]
 8007018:	60b9      	str	r1, [r7, #8]
 800701a:	607a      	str	r2, [r7, #4]
 800701c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d103      	bne.n	800702c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007024:	69bb      	ldr	r3, [r7, #24]
 8007026:	69ba      	ldr	r2, [r7, #24]
 8007028:	601a      	str	r2, [r3, #0]
 800702a:	e002      	b.n	8007032 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800702c:	69bb      	ldr	r3, [r7, #24]
 800702e:	687a      	ldr	r2, [r7, #4]
 8007030:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007032:	69bb      	ldr	r3, [r7, #24]
 8007034:	68fa      	ldr	r2, [r7, #12]
 8007036:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007038:	69bb      	ldr	r3, [r7, #24]
 800703a:	68ba      	ldr	r2, [r7, #8]
 800703c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800703e:	2101      	movs	r1, #1
 8007040:	69b8      	ldr	r0, [r7, #24]
 8007042:	f7ff fec3 	bl	8006dcc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007046:	69bb      	ldr	r3, [r7, #24]
 8007048:	78fa      	ldrb	r2, [r7, #3]
 800704a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800704e:	bf00      	nop
 8007050:	3710      	adds	r7, #16
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}

08007056 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007056:	b580      	push	{r7, lr}
 8007058:	b08a      	sub	sp, #40	@ 0x28
 800705a:	af02      	add	r7, sp, #8
 800705c:	60f8      	str	r0, [r7, #12]
 800705e:	60b9      	str	r1, [r7, #8]
 8007060:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d10b      	bne.n	8007080 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8007068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800706c:	f383 8811 	msr	BASEPRI, r3
 8007070:	f3bf 8f6f 	isb	sy
 8007074:	f3bf 8f4f 	dsb	sy
 8007078:	61bb      	str	r3, [r7, #24]
}
 800707a:	bf00      	nop
 800707c:	bf00      	nop
 800707e:	e7fd      	b.n	800707c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007080:	68ba      	ldr	r2, [r7, #8]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	429a      	cmp	r2, r3
 8007086:	d90b      	bls.n	80070a0 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8007088:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800708c:	f383 8811 	msr	BASEPRI, r3
 8007090:	f3bf 8f6f 	isb	sy
 8007094:	f3bf 8f4f 	dsb	sy
 8007098:	617b      	str	r3, [r7, #20]
}
 800709a:	bf00      	nop
 800709c:	bf00      	nop
 800709e:	e7fd      	b.n	800709c <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80070a0:	2302      	movs	r3, #2
 80070a2:	9300      	str	r3, [sp, #0]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2200      	movs	r2, #0
 80070a8:	2100      	movs	r1, #0
 80070aa:	68f8      	ldr	r0, [r7, #12]
 80070ac:	f7ff fef8 	bl	8006ea0 <xQueueGenericCreateStatic>
 80070b0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80070b2:	69fb      	ldr	r3, [r7, #28]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d002      	beq.n	80070be <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80070b8:	69fb      	ldr	r3, [r7, #28]
 80070ba:	68ba      	ldr	r2, [r7, #8]
 80070bc:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80070be:	69fb      	ldr	r3, [r7, #28]
	}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3720      	adds	r7, #32
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b086      	sub	sp, #24
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d10b      	bne.n	80070f0 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 80070d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070dc:	f383 8811 	msr	BASEPRI, r3
 80070e0:	f3bf 8f6f 	isb	sy
 80070e4:	f3bf 8f4f 	dsb	sy
 80070e8:	613b      	str	r3, [r7, #16]
}
 80070ea:	bf00      	nop
 80070ec:	bf00      	nop
 80070ee:	e7fd      	b.n	80070ec <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80070f0:	683a      	ldr	r2, [r7, #0]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d90b      	bls.n	8007110 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 80070f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070fc:	f383 8811 	msr	BASEPRI, r3
 8007100:	f3bf 8f6f 	isb	sy
 8007104:	f3bf 8f4f 	dsb	sy
 8007108:	60fb      	str	r3, [r7, #12]
}
 800710a:	bf00      	nop
 800710c:	bf00      	nop
 800710e:	e7fd      	b.n	800710c <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007110:	2202      	movs	r2, #2
 8007112:	2100      	movs	r1, #0
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f7ff ff40 	bl	8006f9a <xQueueGenericCreate>
 800711a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d002      	beq.n	8007128 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	683a      	ldr	r2, [r7, #0]
 8007126:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007128:	697b      	ldr	r3, [r7, #20]
	}
 800712a:	4618      	mov	r0, r3
 800712c:	3718      	adds	r7, #24
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
	...

08007134 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b08e      	sub	sp, #56	@ 0x38
 8007138:	af00      	add	r7, sp, #0
 800713a:	60f8      	str	r0, [r7, #12]
 800713c:	60b9      	str	r1, [r7, #8]
 800713e:	607a      	str	r2, [r7, #4]
 8007140:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007142:	2300      	movs	r3, #0
 8007144:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800714a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800714c:	2b00      	cmp	r3, #0
 800714e:	d10b      	bne.n	8007168 <xQueueGenericSend+0x34>
	__asm volatile
 8007150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007154:	f383 8811 	msr	BASEPRI, r3
 8007158:	f3bf 8f6f 	isb	sy
 800715c:	f3bf 8f4f 	dsb	sy
 8007160:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007162:	bf00      	nop
 8007164:	bf00      	nop
 8007166:	e7fd      	b.n	8007164 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d103      	bne.n	8007176 <xQueueGenericSend+0x42>
 800716e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007172:	2b00      	cmp	r3, #0
 8007174:	d101      	bne.n	800717a <xQueueGenericSend+0x46>
 8007176:	2301      	movs	r3, #1
 8007178:	e000      	b.n	800717c <xQueueGenericSend+0x48>
 800717a:	2300      	movs	r3, #0
 800717c:	2b00      	cmp	r3, #0
 800717e:	d10b      	bne.n	8007198 <xQueueGenericSend+0x64>
	__asm volatile
 8007180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007184:	f383 8811 	msr	BASEPRI, r3
 8007188:	f3bf 8f6f 	isb	sy
 800718c:	f3bf 8f4f 	dsb	sy
 8007190:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007192:	bf00      	nop
 8007194:	bf00      	nop
 8007196:	e7fd      	b.n	8007194 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	2b02      	cmp	r3, #2
 800719c:	d103      	bne.n	80071a6 <xQueueGenericSend+0x72>
 800719e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071a2:	2b01      	cmp	r3, #1
 80071a4:	d101      	bne.n	80071aa <xQueueGenericSend+0x76>
 80071a6:	2301      	movs	r3, #1
 80071a8:	e000      	b.n	80071ac <xQueueGenericSend+0x78>
 80071aa:	2300      	movs	r3, #0
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d10b      	bne.n	80071c8 <xQueueGenericSend+0x94>
	__asm volatile
 80071b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071b4:	f383 8811 	msr	BASEPRI, r3
 80071b8:	f3bf 8f6f 	isb	sy
 80071bc:	f3bf 8f4f 	dsb	sy
 80071c0:	623b      	str	r3, [r7, #32]
}
 80071c2:	bf00      	nop
 80071c4:	bf00      	nop
 80071c6:	e7fd      	b.n	80071c4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80071c8:	f001 fc56 	bl	8008a78 <xTaskGetSchedulerState>
 80071cc:	4603      	mov	r3, r0
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d102      	bne.n	80071d8 <xQueueGenericSend+0xa4>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d101      	bne.n	80071dc <xQueueGenericSend+0xa8>
 80071d8:	2301      	movs	r3, #1
 80071da:	e000      	b.n	80071de <xQueueGenericSend+0xaa>
 80071dc:	2300      	movs	r3, #0
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d10b      	bne.n	80071fa <xQueueGenericSend+0xc6>
	__asm volatile
 80071e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071e6:	f383 8811 	msr	BASEPRI, r3
 80071ea:	f3bf 8f6f 	isb	sy
 80071ee:	f3bf 8f4f 	dsb	sy
 80071f2:	61fb      	str	r3, [r7, #28]
}
 80071f4:	bf00      	nop
 80071f6:	bf00      	nop
 80071f8:	e7fd      	b.n	80071f6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80071fa:	f002 faad 	bl	8009758 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80071fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007200:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007204:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007206:	429a      	cmp	r2, r3
 8007208:	d302      	bcc.n	8007210 <xQueueGenericSend+0xdc>
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	2b02      	cmp	r3, #2
 800720e:	d129      	bne.n	8007264 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007210:	683a      	ldr	r2, [r7, #0]
 8007212:	68b9      	ldr	r1, [r7, #8]
 8007214:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007216:	f000 fc6d 	bl	8007af4 <prvCopyDataToQueue>
 800721a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800721c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800721e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007220:	2b00      	cmp	r3, #0
 8007222:	d010      	beq.n	8007246 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007226:	3324      	adds	r3, #36	@ 0x24
 8007228:	4618      	mov	r0, r3
 800722a:	f001 fa65 	bl	80086f8 <xTaskRemoveFromEventList>
 800722e:	4603      	mov	r3, r0
 8007230:	2b00      	cmp	r3, #0
 8007232:	d013      	beq.n	800725c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007234:	4b3f      	ldr	r3, [pc, #252]	@ (8007334 <xQueueGenericSend+0x200>)
 8007236:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800723a:	601a      	str	r2, [r3, #0]
 800723c:	f3bf 8f4f 	dsb	sy
 8007240:	f3bf 8f6f 	isb	sy
 8007244:	e00a      	b.n	800725c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007248:	2b00      	cmp	r3, #0
 800724a:	d007      	beq.n	800725c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800724c:	4b39      	ldr	r3, [pc, #228]	@ (8007334 <xQueueGenericSend+0x200>)
 800724e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007252:	601a      	str	r2, [r3, #0]
 8007254:	f3bf 8f4f 	dsb	sy
 8007258:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800725c:	f002 faae 	bl	80097bc <vPortExitCritical>
				return pdPASS;
 8007260:	2301      	movs	r3, #1
 8007262:	e063      	b.n	800732c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d103      	bne.n	8007272 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800726a:	f002 faa7 	bl	80097bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800726e:	2300      	movs	r3, #0
 8007270:	e05c      	b.n	800732c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007272:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007274:	2b00      	cmp	r3, #0
 8007276:	d106      	bne.n	8007286 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007278:	f107 0314 	add.w	r3, r7, #20
 800727c:	4618      	mov	r0, r3
 800727e:	f001 fa9f 	bl	80087c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007282:	2301      	movs	r3, #1
 8007284:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007286:	f002 fa99 	bl	80097bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800728a:	f001 f80f 	bl	80082ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800728e:	f002 fa63 	bl	8009758 <vPortEnterCritical>
 8007292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007294:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007298:	b25b      	sxtb	r3, r3
 800729a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800729e:	d103      	bne.n	80072a8 <xQueueGenericSend+0x174>
 80072a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072a2:	2200      	movs	r2, #0
 80072a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80072a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80072ae:	b25b      	sxtb	r3, r3
 80072b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072b4:	d103      	bne.n	80072be <xQueueGenericSend+0x18a>
 80072b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072b8:	2200      	movs	r2, #0
 80072ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80072be:	f002 fa7d 	bl	80097bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80072c2:	1d3a      	adds	r2, r7, #4
 80072c4:	f107 0314 	add.w	r3, r7, #20
 80072c8:	4611      	mov	r1, r2
 80072ca:	4618      	mov	r0, r3
 80072cc:	f001 fa8e 	bl	80087ec <xTaskCheckForTimeOut>
 80072d0:	4603      	mov	r3, r0
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d124      	bne.n	8007320 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80072d6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80072d8:	f000 fd04 	bl	8007ce4 <prvIsQueueFull>
 80072dc:	4603      	mov	r3, r0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d018      	beq.n	8007314 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80072e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072e4:	3310      	adds	r3, #16
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	4611      	mov	r1, r2
 80072ea:	4618      	mov	r0, r3
 80072ec:	f001 f9b2 	bl	8008654 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80072f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80072f2:	f000 fc8f 	bl	8007c14 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80072f6:	f000 ffe7 	bl	80082c8 <xTaskResumeAll>
 80072fa:	4603      	mov	r3, r0
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	f47f af7c 	bne.w	80071fa <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007302:	4b0c      	ldr	r3, [pc, #48]	@ (8007334 <xQueueGenericSend+0x200>)
 8007304:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007308:	601a      	str	r2, [r3, #0]
 800730a:	f3bf 8f4f 	dsb	sy
 800730e:	f3bf 8f6f 	isb	sy
 8007312:	e772      	b.n	80071fa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007314:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007316:	f000 fc7d 	bl	8007c14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800731a:	f000 ffd5 	bl	80082c8 <xTaskResumeAll>
 800731e:	e76c      	b.n	80071fa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007320:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007322:	f000 fc77 	bl	8007c14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007326:	f000 ffcf 	bl	80082c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800732a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800732c:	4618      	mov	r0, r3
 800732e:	3738      	adds	r7, #56	@ 0x38
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}
 8007334:	e000ed04 	.word	0xe000ed04

08007338 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b090      	sub	sp, #64	@ 0x40
 800733c:	af00      	add	r7, sp, #0
 800733e:	60f8      	str	r0, [r7, #12]
 8007340:	60b9      	str	r1, [r7, #8]
 8007342:	607a      	str	r2, [r7, #4]
 8007344:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800734a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800734c:	2b00      	cmp	r3, #0
 800734e:	d10b      	bne.n	8007368 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007354:	f383 8811 	msr	BASEPRI, r3
 8007358:	f3bf 8f6f 	isb	sy
 800735c:	f3bf 8f4f 	dsb	sy
 8007360:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007362:	bf00      	nop
 8007364:	bf00      	nop
 8007366:	e7fd      	b.n	8007364 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d103      	bne.n	8007376 <xQueueGenericSendFromISR+0x3e>
 800736e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007372:	2b00      	cmp	r3, #0
 8007374:	d101      	bne.n	800737a <xQueueGenericSendFromISR+0x42>
 8007376:	2301      	movs	r3, #1
 8007378:	e000      	b.n	800737c <xQueueGenericSendFromISR+0x44>
 800737a:	2300      	movs	r3, #0
 800737c:	2b00      	cmp	r3, #0
 800737e:	d10b      	bne.n	8007398 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007384:	f383 8811 	msr	BASEPRI, r3
 8007388:	f3bf 8f6f 	isb	sy
 800738c:	f3bf 8f4f 	dsb	sy
 8007390:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007392:	bf00      	nop
 8007394:	bf00      	nop
 8007396:	e7fd      	b.n	8007394 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	2b02      	cmp	r3, #2
 800739c:	d103      	bne.n	80073a6 <xQueueGenericSendFromISR+0x6e>
 800739e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073a2:	2b01      	cmp	r3, #1
 80073a4:	d101      	bne.n	80073aa <xQueueGenericSendFromISR+0x72>
 80073a6:	2301      	movs	r3, #1
 80073a8:	e000      	b.n	80073ac <xQueueGenericSendFromISR+0x74>
 80073aa:	2300      	movs	r3, #0
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d10b      	bne.n	80073c8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80073b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073b4:	f383 8811 	msr	BASEPRI, r3
 80073b8:	f3bf 8f6f 	isb	sy
 80073bc:	f3bf 8f4f 	dsb	sy
 80073c0:	623b      	str	r3, [r7, #32]
}
 80073c2:	bf00      	nop
 80073c4:	bf00      	nop
 80073c6:	e7fd      	b.n	80073c4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80073c8:	f002 faa6 	bl	8009918 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80073cc:	f3ef 8211 	mrs	r2, BASEPRI
 80073d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073d4:	f383 8811 	msr	BASEPRI, r3
 80073d8:	f3bf 8f6f 	isb	sy
 80073dc:	f3bf 8f4f 	dsb	sy
 80073e0:	61fa      	str	r2, [r7, #28]
 80073e2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80073e4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80073e6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80073e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80073ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d302      	bcc.n	80073fa <xQueueGenericSendFromISR+0xc2>
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	2b02      	cmp	r3, #2
 80073f8:	d12f      	bne.n	800745a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80073fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073fc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007400:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007408:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800740a:	683a      	ldr	r2, [r7, #0]
 800740c:	68b9      	ldr	r1, [r7, #8]
 800740e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007410:	f000 fb70 	bl	8007af4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007414:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800741c:	d112      	bne.n	8007444 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800741e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007422:	2b00      	cmp	r3, #0
 8007424:	d016      	beq.n	8007454 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007428:	3324      	adds	r3, #36	@ 0x24
 800742a:	4618      	mov	r0, r3
 800742c:	f001 f964 	bl	80086f8 <xTaskRemoveFromEventList>
 8007430:	4603      	mov	r3, r0
 8007432:	2b00      	cmp	r3, #0
 8007434:	d00e      	beq.n	8007454 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d00b      	beq.n	8007454 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2201      	movs	r2, #1
 8007440:	601a      	str	r2, [r3, #0]
 8007442:	e007      	b.n	8007454 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007444:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007448:	3301      	adds	r3, #1
 800744a:	b2db      	uxtb	r3, r3
 800744c:	b25a      	sxtb	r2, r3
 800744e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007450:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007454:	2301      	movs	r3, #1
 8007456:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007458:	e001      	b.n	800745e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800745a:	2300      	movs	r3, #0
 800745c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800745e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007460:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007468:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800746a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800746c:	4618      	mov	r0, r3
 800746e:	3740      	adds	r7, #64	@ 0x40
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}

08007474 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b08e      	sub	sp, #56	@ 0x38
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007484:	2b00      	cmp	r3, #0
 8007486:	d10b      	bne.n	80074a0 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8007488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800748c:	f383 8811 	msr	BASEPRI, r3
 8007490:	f3bf 8f6f 	isb	sy
 8007494:	f3bf 8f4f 	dsb	sy
 8007498:	623b      	str	r3, [r7, #32]
}
 800749a:	bf00      	nop
 800749c:	bf00      	nop
 800749e:	e7fd      	b.n	800749c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80074a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d00b      	beq.n	80074c0 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80074a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074ac:	f383 8811 	msr	BASEPRI, r3
 80074b0:	f3bf 8f6f 	isb	sy
 80074b4:	f3bf 8f4f 	dsb	sy
 80074b8:	61fb      	str	r3, [r7, #28]
}
 80074ba:	bf00      	nop
 80074bc:	bf00      	nop
 80074be:	e7fd      	b.n	80074bc <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80074c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d103      	bne.n	80074d0 <xQueueGiveFromISR+0x5c>
 80074c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d101      	bne.n	80074d4 <xQueueGiveFromISR+0x60>
 80074d0:	2301      	movs	r3, #1
 80074d2:	e000      	b.n	80074d6 <xQueueGiveFromISR+0x62>
 80074d4:	2300      	movs	r3, #0
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d10b      	bne.n	80074f2 <xQueueGiveFromISR+0x7e>
	__asm volatile
 80074da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074de:	f383 8811 	msr	BASEPRI, r3
 80074e2:	f3bf 8f6f 	isb	sy
 80074e6:	f3bf 8f4f 	dsb	sy
 80074ea:	61bb      	str	r3, [r7, #24]
}
 80074ec:	bf00      	nop
 80074ee:	bf00      	nop
 80074f0:	e7fd      	b.n	80074ee <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80074f2:	f002 fa11 	bl	8009918 <vPortValidateInterruptPriority>
	__asm volatile
 80074f6:	f3ef 8211 	mrs	r2, BASEPRI
 80074fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074fe:	f383 8811 	msr	BASEPRI, r3
 8007502:	f3bf 8f6f 	isb	sy
 8007506:	f3bf 8f4f 	dsb	sy
 800750a:	617a      	str	r2, [r7, #20]
 800750c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800750e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007510:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007514:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007516:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800751a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800751c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800751e:	429a      	cmp	r2, r3
 8007520:	d22b      	bcs.n	800757a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007524:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007528:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800752c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800752e:	1c5a      	adds	r2, r3, #1
 8007530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007532:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007534:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800753c:	d112      	bne.n	8007564 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800753e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007542:	2b00      	cmp	r3, #0
 8007544:	d016      	beq.n	8007574 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007548:	3324      	adds	r3, #36	@ 0x24
 800754a:	4618      	mov	r0, r3
 800754c:	f001 f8d4 	bl	80086f8 <xTaskRemoveFromEventList>
 8007550:	4603      	mov	r3, r0
 8007552:	2b00      	cmp	r3, #0
 8007554:	d00e      	beq.n	8007574 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d00b      	beq.n	8007574 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	2201      	movs	r2, #1
 8007560:	601a      	str	r2, [r3, #0]
 8007562:	e007      	b.n	8007574 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007564:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007568:	3301      	adds	r3, #1
 800756a:	b2db      	uxtb	r3, r3
 800756c:	b25a      	sxtb	r2, r3
 800756e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007570:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007574:	2301      	movs	r3, #1
 8007576:	637b      	str	r3, [r7, #52]	@ 0x34
 8007578:	e001      	b.n	800757e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800757a:	2300      	movs	r3, #0
 800757c:	637b      	str	r3, [r7, #52]	@ 0x34
 800757e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007580:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f383 8811 	msr	BASEPRI, r3
}
 8007588:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800758a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800758c:	4618      	mov	r0, r3
 800758e:	3738      	adds	r7, #56	@ 0x38
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}

08007594 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b08c      	sub	sp, #48	@ 0x30
 8007598:	af00      	add	r7, sp, #0
 800759a:	60f8      	str	r0, [r7, #12]
 800759c:	60b9      	str	r1, [r7, #8]
 800759e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80075a0:	2300      	movs	r3, #0
 80075a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80075a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d10b      	bne.n	80075c6 <xQueueReceive+0x32>
	__asm volatile
 80075ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075b2:	f383 8811 	msr	BASEPRI, r3
 80075b6:	f3bf 8f6f 	isb	sy
 80075ba:	f3bf 8f4f 	dsb	sy
 80075be:	623b      	str	r3, [r7, #32]
}
 80075c0:	bf00      	nop
 80075c2:	bf00      	nop
 80075c4:	e7fd      	b.n	80075c2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d103      	bne.n	80075d4 <xQueueReceive+0x40>
 80075cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d101      	bne.n	80075d8 <xQueueReceive+0x44>
 80075d4:	2301      	movs	r3, #1
 80075d6:	e000      	b.n	80075da <xQueueReceive+0x46>
 80075d8:	2300      	movs	r3, #0
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d10b      	bne.n	80075f6 <xQueueReceive+0x62>
	__asm volatile
 80075de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075e2:	f383 8811 	msr	BASEPRI, r3
 80075e6:	f3bf 8f6f 	isb	sy
 80075ea:	f3bf 8f4f 	dsb	sy
 80075ee:	61fb      	str	r3, [r7, #28]
}
 80075f0:	bf00      	nop
 80075f2:	bf00      	nop
 80075f4:	e7fd      	b.n	80075f2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80075f6:	f001 fa3f 	bl	8008a78 <xTaskGetSchedulerState>
 80075fa:	4603      	mov	r3, r0
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d102      	bne.n	8007606 <xQueueReceive+0x72>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d101      	bne.n	800760a <xQueueReceive+0x76>
 8007606:	2301      	movs	r3, #1
 8007608:	e000      	b.n	800760c <xQueueReceive+0x78>
 800760a:	2300      	movs	r3, #0
 800760c:	2b00      	cmp	r3, #0
 800760e:	d10b      	bne.n	8007628 <xQueueReceive+0x94>
	__asm volatile
 8007610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007614:	f383 8811 	msr	BASEPRI, r3
 8007618:	f3bf 8f6f 	isb	sy
 800761c:	f3bf 8f4f 	dsb	sy
 8007620:	61bb      	str	r3, [r7, #24]
}
 8007622:	bf00      	nop
 8007624:	bf00      	nop
 8007626:	e7fd      	b.n	8007624 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007628:	f002 f896 	bl	8009758 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800762c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800762e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007630:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007634:	2b00      	cmp	r3, #0
 8007636:	d01f      	beq.n	8007678 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007638:	68b9      	ldr	r1, [r7, #8]
 800763a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800763c:	f000 fac4 	bl	8007bc8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007642:	1e5a      	subs	r2, r3, #1
 8007644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007646:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800764a:	691b      	ldr	r3, [r3, #16]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d00f      	beq.n	8007670 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007652:	3310      	adds	r3, #16
 8007654:	4618      	mov	r0, r3
 8007656:	f001 f84f 	bl	80086f8 <xTaskRemoveFromEventList>
 800765a:	4603      	mov	r3, r0
 800765c:	2b00      	cmp	r3, #0
 800765e:	d007      	beq.n	8007670 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007660:	4b3c      	ldr	r3, [pc, #240]	@ (8007754 <xQueueReceive+0x1c0>)
 8007662:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007666:	601a      	str	r2, [r3, #0]
 8007668:	f3bf 8f4f 	dsb	sy
 800766c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007670:	f002 f8a4 	bl	80097bc <vPortExitCritical>
				return pdPASS;
 8007674:	2301      	movs	r3, #1
 8007676:	e069      	b.n	800774c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d103      	bne.n	8007686 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800767e:	f002 f89d 	bl	80097bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007682:	2300      	movs	r3, #0
 8007684:	e062      	b.n	800774c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007686:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007688:	2b00      	cmp	r3, #0
 800768a:	d106      	bne.n	800769a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800768c:	f107 0310 	add.w	r3, r7, #16
 8007690:	4618      	mov	r0, r3
 8007692:	f001 f895 	bl	80087c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007696:	2301      	movs	r3, #1
 8007698:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800769a:	f002 f88f 	bl	80097bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800769e:	f000 fe05 	bl	80082ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80076a2:	f002 f859 	bl	8009758 <vPortEnterCritical>
 80076a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80076ac:	b25b      	sxtb	r3, r3
 80076ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076b2:	d103      	bne.n	80076bc <xQueueReceive+0x128>
 80076b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076b6:	2200      	movs	r2, #0
 80076b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80076bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80076c2:	b25b      	sxtb	r3, r3
 80076c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076c8:	d103      	bne.n	80076d2 <xQueueReceive+0x13e>
 80076ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076cc:	2200      	movs	r2, #0
 80076ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80076d2:	f002 f873 	bl	80097bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80076d6:	1d3a      	adds	r2, r7, #4
 80076d8:	f107 0310 	add.w	r3, r7, #16
 80076dc:	4611      	mov	r1, r2
 80076de:	4618      	mov	r0, r3
 80076e0:	f001 f884 	bl	80087ec <xTaskCheckForTimeOut>
 80076e4:	4603      	mov	r3, r0
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d123      	bne.n	8007732 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80076ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80076ec:	f000 fae4 	bl	8007cb8 <prvIsQueueEmpty>
 80076f0:	4603      	mov	r3, r0
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d017      	beq.n	8007726 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80076f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076f8:	3324      	adds	r3, #36	@ 0x24
 80076fa:	687a      	ldr	r2, [r7, #4]
 80076fc:	4611      	mov	r1, r2
 80076fe:	4618      	mov	r0, r3
 8007700:	f000 ffa8 	bl	8008654 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007704:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007706:	f000 fa85 	bl	8007c14 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800770a:	f000 fddd 	bl	80082c8 <xTaskResumeAll>
 800770e:	4603      	mov	r3, r0
 8007710:	2b00      	cmp	r3, #0
 8007712:	d189      	bne.n	8007628 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007714:	4b0f      	ldr	r3, [pc, #60]	@ (8007754 <xQueueReceive+0x1c0>)
 8007716:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800771a:	601a      	str	r2, [r3, #0]
 800771c:	f3bf 8f4f 	dsb	sy
 8007720:	f3bf 8f6f 	isb	sy
 8007724:	e780      	b.n	8007628 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007726:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007728:	f000 fa74 	bl	8007c14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800772c:	f000 fdcc 	bl	80082c8 <xTaskResumeAll>
 8007730:	e77a      	b.n	8007628 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007732:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007734:	f000 fa6e 	bl	8007c14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007738:	f000 fdc6 	bl	80082c8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800773c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800773e:	f000 fabb 	bl	8007cb8 <prvIsQueueEmpty>
 8007742:	4603      	mov	r3, r0
 8007744:	2b00      	cmp	r3, #0
 8007746:	f43f af6f 	beq.w	8007628 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800774a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800774c:	4618      	mov	r0, r3
 800774e:	3730      	adds	r7, #48	@ 0x30
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}
 8007754:	e000ed04 	.word	0xe000ed04

08007758 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b08e      	sub	sp, #56	@ 0x38
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007762:	2300      	movs	r3, #0
 8007764:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800776a:	2300      	movs	r3, #0
 800776c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800776e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007770:	2b00      	cmp	r3, #0
 8007772:	d10b      	bne.n	800778c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8007774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007778:	f383 8811 	msr	BASEPRI, r3
 800777c:	f3bf 8f6f 	isb	sy
 8007780:	f3bf 8f4f 	dsb	sy
 8007784:	623b      	str	r3, [r7, #32]
}
 8007786:	bf00      	nop
 8007788:	bf00      	nop
 800778a:	e7fd      	b.n	8007788 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800778c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800778e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007790:	2b00      	cmp	r3, #0
 8007792:	d00b      	beq.n	80077ac <xQueueSemaphoreTake+0x54>
	__asm volatile
 8007794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007798:	f383 8811 	msr	BASEPRI, r3
 800779c:	f3bf 8f6f 	isb	sy
 80077a0:	f3bf 8f4f 	dsb	sy
 80077a4:	61fb      	str	r3, [r7, #28]
}
 80077a6:	bf00      	nop
 80077a8:	bf00      	nop
 80077aa:	e7fd      	b.n	80077a8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80077ac:	f001 f964 	bl	8008a78 <xTaskGetSchedulerState>
 80077b0:	4603      	mov	r3, r0
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d102      	bne.n	80077bc <xQueueSemaphoreTake+0x64>
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d101      	bne.n	80077c0 <xQueueSemaphoreTake+0x68>
 80077bc:	2301      	movs	r3, #1
 80077be:	e000      	b.n	80077c2 <xQueueSemaphoreTake+0x6a>
 80077c0:	2300      	movs	r3, #0
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d10b      	bne.n	80077de <xQueueSemaphoreTake+0x86>
	__asm volatile
 80077c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077ca:	f383 8811 	msr	BASEPRI, r3
 80077ce:	f3bf 8f6f 	isb	sy
 80077d2:	f3bf 8f4f 	dsb	sy
 80077d6:	61bb      	str	r3, [r7, #24]
}
 80077d8:	bf00      	nop
 80077da:	bf00      	nop
 80077dc:	e7fd      	b.n	80077da <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80077de:	f001 ffbb 	bl	8009758 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80077e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077e6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80077e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d024      	beq.n	8007838 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80077ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077f0:	1e5a      	subs	r2, r3, #1
 80077f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077f4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80077f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d104      	bne.n	8007808 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80077fe:	f001 fab5 	bl	8008d6c <pvTaskIncrementMutexHeldCount>
 8007802:	4602      	mov	r2, r0
 8007804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007806:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800780a:	691b      	ldr	r3, [r3, #16]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d00f      	beq.n	8007830 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007812:	3310      	adds	r3, #16
 8007814:	4618      	mov	r0, r3
 8007816:	f000 ff6f 	bl	80086f8 <xTaskRemoveFromEventList>
 800781a:	4603      	mov	r3, r0
 800781c:	2b00      	cmp	r3, #0
 800781e:	d007      	beq.n	8007830 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007820:	4b54      	ldr	r3, [pc, #336]	@ (8007974 <xQueueSemaphoreTake+0x21c>)
 8007822:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007826:	601a      	str	r2, [r3, #0]
 8007828:	f3bf 8f4f 	dsb	sy
 800782c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007830:	f001 ffc4 	bl	80097bc <vPortExitCritical>
				return pdPASS;
 8007834:	2301      	movs	r3, #1
 8007836:	e098      	b.n	800796a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d112      	bne.n	8007864 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800783e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007840:	2b00      	cmp	r3, #0
 8007842:	d00b      	beq.n	800785c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8007844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007848:	f383 8811 	msr	BASEPRI, r3
 800784c:	f3bf 8f6f 	isb	sy
 8007850:	f3bf 8f4f 	dsb	sy
 8007854:	617b      	str	r3, [r7, #20]
}
 8007856:	bf00      	nop
 8007858:	bf00      	nop
 800785a:	e7fd      	b.n	8007858 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800785c:	f001 ffae 	bl	80097bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007860:	2300      	movs	r3, #0
 8007862:	e082      	b.n	800796a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007864:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007866:	2b00      	cmp	r3, #0
 8007868:	d106      	bne.n	8007878 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800786a:	f107 030c 	add.w	r3, r7, #12
 800786e:	4618      	mov	r0, r3
 8007870:	f000 ffa6 	bl	80087c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007874:	2301      	movs	r3, #1
 8007876:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007878:	f001 ffa0 	bl	80097bc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800787c:	f000 fd16 	bl	80082ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007880:	f001 ff6a 	bl	8009758 <vPortEnterCritical>
 8007884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007886:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800788a:	b25b      	sxtb	r3, r3
 800788c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007890:	d103      	bne.n	800789a <xQueueSemaphoreTake+0x142>
 8007892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007894:	2200      	movs	r2, #0
 8007896:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800789a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800789c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80078a0:	b25b      	sxtb	r3, r3
 80078a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078a6:	d103      	bne.n	80078b0 <xQueueSemaphoreTake+0x158>
 80078a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078aa:	2200      	movs	r2, #0
 80078ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80078b0:	f001 ff84 	bl	80097bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80078b4:	463a      	mov	r2, r7
 80078b6:	f107 030c 	add.w	r3, r7, #12
 80078ba:	4611      	mov	r1, r2
 80078bc:	4618      	mov	r0, r3
 80078be:	f000 ff95 	bl	80087ec <xTaskCheckForTimeOut>
 80078c2:	4603      	mov	r3, r0
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d132      	bne.n	800792e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80078c8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80078ca:	f000 f9f5 	bl	8007cb8 <prvIsQueueEmpty>
 80078ce:	4603      	mov	r3, r0
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d026      	beq.n	8007922 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80078d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d109      	bne.n	80078f0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80078dc:	f001 ff3c 	bl	8009758 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80078e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	4618      	mov	r0, r3
 80078e6:	f001 f8e5 	bl	8008ab4 <xTaskPriorityInherit>
 80078ea:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80078ec:	f001 ff66 	bl	80097bc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80078f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078f2:	3324      	adds	r3, #36	@ 0x24
 80078f4:	683a      	ldr	r2, [r7, #0]
 80078f6:	4611      	mov	r1, r2
 80078f8:	4618      	mov	r0, r3
 80078fa:	f000 feab 	bl	8008654 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80078fe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007900:	f000 f988 	bl	8007c14 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007904:	f000 fce0 	bl	80082c8 <xTaskResumeAll>
 8007908:	4603      	mov	r3, r0
 800790a:	2b00      	cmp	r3, #0
 800790c:	f47f af67 	bne.w	80077de <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8007910:	4b18      	ldr	r3, [pc, #96]	@ (8007974 <xQueueSemaphoreTake+0x21c>)
 8007912:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007916:	601a      	str	r2, [r3, #0]
 8007918:	f3bf 8f4f 	dsb	sy
 800791c:	f3bf 8f6f 	isb	sy
 8007920:	e75d      	b.n	80077de <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007922:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007924:	f000 f976 	bl	8007c14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007928:	f000 fcce 	bl	80082c8 <xTaskResumeAll>
 800792c:	e757      	b.n	80077de <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800792e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007930:	f000 f970 	bl	8007c14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007934:	f000 fcc8 	bl	80082c8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007938:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800793a:	f000 f9bd 	bl	8007cb8 <prvIsQueueEmpty>
 800793e:	4603      	mov	r3, r0
 8007940:	2b00      	cmp	r3, #0
 8007942:	f43f af4c 	beq.w	80077de <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007948:	2b00      	cmp	r3, #0
 800794a:	d00d      	beq.n	8007968 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800794c:	f001 ff04 	bl	8009758 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007950:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007952:	f000 f8b7 	bl	8007ac4 <prvGetDisinheritPriorityAfterTimeout>
 8007956:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800795e:	4618      	mov	r0, r3
 8007960:	f001 f980 	bl	8008c64 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007964:	f001 ff2a 	bl	80097bc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007968:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800796a:	4618      	mov	r0, r3
 800796c:	3738      	adds	r7, #56	@ 0x38
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}
 8007972:	bf00      	nop
 8007974:	e000ed04 	.word	0xe000ed04

08007978 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b08e      	sub	sp, #56	@ 0x38
 800797c:	af00      	add	r7, sp, #0
 800797e:	60f8      	str	r0, [r7, #12]
 8007980:	60b9      	str	r1, [r7, #8]
 8007982:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800798a:	2b00      	cmp	r3, #0
 800798c:	d10b      	bne.n	80079a6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800798e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007992:	f383 8811 	msr	BASEPRI, r3
 8007996:	f3bf 8f6f 	isb	sy
 800799a:	f3bf 8f4f 	dsb	sy
 800799e:	623b      	str	r3, [r7, #32]
}
 80079a0:	bf00      	nop
 80079a2:	bf00      	nop
 80079a4:	e7fd      	b.n	80079a2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d103      	bne.n	80079b4 <xQueueReceiveFromISR+0x3c>
 80079ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d101      	bne.n	80079b8 <xQueueReceiveFromISR+0x40>
 80079b4:	2301      	movs	r3, #1
 80079b6:	e000      	b.n	80079ba <xQueueReceiveFromISR+0x42>
 80079b8:	2300      	movs	r3, #0
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d10b      	bne.n	80079d6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80079be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079c2:	f383 8811 	msr	BASEPRI, r3
 80079c6:	f3bf 8f6f 	isb	sy
 80079ca:	f3bf 8f4f 	dsb	sy
 80079ce:	61fb      	str	r3, [r7, #28]
}
 80079d0:	bf00      	nop
 80079d2:	bf00      	nop
 80079d4:	e7fd      	b.n	80079d2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80079d6:	f001 ff9f 	bl	8009918 <vPortValidateInterruptPriority>
	__asm volatile
 80079da:	f3ef 8211 	mrs	r2, BASEPRI
 80079de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079e2:	f383 8811 	msr	BASEPRI, r3
 80079e6:	f3bf 8f6f 	isb	sy
 80079ea:	f3bf 8f4f 	dsb	sy
 80079ee:	61ba      	str	r2, [r7, #24]
 80079f0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80079f2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80079f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80079f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079fa:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80079fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d02f      	beq.n	8007a62 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a04:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007a08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007a0c:	68b9      	ldr	r1, [r7, #8]
 8007a0e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007a10:	f000 f8da 	bl	8007bc8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a16:	1e5a      	subs	r2, r3, #1
 8007a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a1a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007a1c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a24:	d112      	bne.n	8007a4c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a28:	691b      	ldr	r3, [r3, #16]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d016      	beq.n	8007a5c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a30:	3310      	adds	r3, #16
 8007a32:	4618      	mov	r0, r3
 8007a34:	f000 fe60 	bl	80086f8 <xTaskRemoveFromEventList>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d00e      	beq.n	8007a5c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d00b      	beq.n	8007a5c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2201      	movs	r2, #1
 8007a48:	601a      	str	r2, [r3, #0]
 8007a4a:	e007      	b.n	8007a5c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007a4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a50:	3301      	adds	r3, #1
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	b25a      	sxtb	r2, r3
 8007a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a60:	e001      	b.n	8007a66 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8007a62:	2300      	movs	r3, #0
 8007a64:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a68:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	f383 8811 	msr	BASEPRI, r3
}
 8007a70:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007a72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3738      	adds	r7, #56	@ 0x38
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b084      	sub	sp, #16
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d10b      	bne.n	8007aa6 <vQueueDelete+0x2a>
	__asm volatile
 8007a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a92:	f383 8811 	msr	BASEPRI, r3
 8007a96:	f3bf 8f6f 	isb	sy
 8007a9a:	f3bf 8f4f 	dsb	sy
 8007a9e:	60bb      	str	r3, [r7, #8]
}
 8007aa0:	bf00      	nop
 8007aa2:	bf00      	nop
 8007aa4:	e7fd      	b.n	8007aa2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007aa6:	68f8      	ldr	r0, [r7, #12]
 8007aa8:	f000 f95e 	bl	8007d68 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d102      	bne.n	8007abc <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8007ab6:	68f8      	ldr	r0, [r7, #12]
 8007ab8:	f002 f83e 	bl	8009b38 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007abc:	bf00      	nop
 8007abe:	3710      	adds	r7, #16
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b085      	sub	sp, #20
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d006      	beq.n	8007ae2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8007ade:	60fb      	str	r3, [r7, #12]
 8007ae0:	e001      	b.n	8007ae6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
	}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3714      	adds	r7, #20
 8007aec:	46bd      	mov	sp, r7
 8007aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af2:	4770      	bx	lr

08007af4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b086      	sub	sp, #24
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	60f8      	str	r0, [r7, #12]
 8007afc:	60b9      	str	r1, [r7, #8]
 8007afe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007b00:	2300      	movs	r3, #0
 8007b02:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b08:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d10d      	bne.n	8007b2e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d14d      	bne.n	8007bb6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f001 f830 	bl	8008b84 <xTaskPriorityDisinherit>
 8007b24:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	609a      	str	r2, [r3, #8]
 8007b2c:	e043      	b.n	8007bb6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d119      	bne.n	8007b68 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	6858      	ldr	r0, [r3, #4]
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b3c:	461a      	mov	r2, r3
 8007b3e:	68b9      	ldr	r1, [r7, #8]
 8007b40:	f003 f94d 	bl	800adde <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	685a      	ldr	r2, [r3, #4]
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b4c:	441a      	add	r2, r3
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	685a      	ldr	r2, [r3, #4]
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	689b      	ldr	r3, [r3, #8]
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d32b      	bcc.n	8007bb6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681a      	ldr	r2, [r3, #0]
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	605a      	str	r2, [r3, #4]
 8007b66:	e026      	b.n	8007bb6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	68d8      	ldr	r0, [r3, #12]
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b70:	461a      	mov	r2, r3
 8007b72:	68b9      	ldr	r1, [r7, #8]
 8007b74:	f003 f933 	bl	800adde <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	68da      	ldr	r2, [r3, #12]
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b80:	425b      	negs	r3, r3
 8007b82:	441a      	add	r2, r3
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	68da      	ldr	r2, [r3, #12]
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d207      	bcs.n	8007ba4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	689a      	ldr	r2, [r3, #8]
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b9c:	425b      	negs	r3, r3
 8007b9e:	441a      	add	r2, r3
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2b02      	cmp	r3, #2
 8007ba8:	d105      	bne.n	8007bb6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d002      	beq.n	8007bb6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	3b01      	subs	r3, #1
 8007bb4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	1c5a      	adds	r2, r3, #1
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007bbe:	697b      	ldr	r3, [r7, #20]
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3718      	adds	r7, #24
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b082      	sub	sp, #8
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d018      	beq.n	8007c0c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	68da      	ldr	r2, [r3, #12]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007be2:	441a      	add	r2, r3
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	68da      	ldr	r2, [r3, #12]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	d303      	bcc.n	8007bfc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681a      	ldr	r2, [r3, #0]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	68d9      	ldr	r1, [r3, #12]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c04:	461a      	mov	r2, r3
 8007c06:	6838      	ldr	r0, [r7, #0]
 8007c08:	f003 f8e9 	bl	800adde <memcpy>
	}
}
 8007c0c:	bf00      	nop
 8007c0e:	3708      	adds	r7, #8
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b084      	sub	sp, #16
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007c1c:	f001 fd9c 	bl	8009758 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007c26:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007c28:	e011      	b.n	8007c4e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d012      	beq.n	8007c58 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	3324      	adds	r3, #36	@ 0x24
 8007c36:	4618      	mov	r0, r3
 8007c38:	f000 fd5e 	bl	80086f8 <xTaskRemoveFromEventList>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d001      	beq.n	8007c46 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007c42:	f000 fe37 	bl	80088b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007c46:	7bfb      	ldrb	r3, [r7, #15]
 8007c48:	3b01      	subs	r3, #1
 8007c4a:	b2db      	uxtb	r3, r3
 8007c4c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007c4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	dce9      	bgt.n	8007c2a <prvUnlockQueue+0x16>
 8007c56:	e000      	b.n	8007c5a <prvUnlockQueue+0x46>
					break;
 8007c58:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	22ff      	movs	r2, #255	@ 0xff
 8007c5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007c62:	f001 fdab 	bl	80097bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007c66:	f001 fd77 	bl	8009758 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007c70:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007c72:	e011      	b.n	8007c98 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	691b      	ldr	r3, [r3, #16]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d012      	beq.n	8007ca2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	3310      	adds	r3, #16
 8007c80:	4618      	mov	r0, r3
 8007c82:	f000 fd39 	bl	80086f8 <xTaskRemoveFromEventList>
 8007c86:	4603      	mov	r3, r0
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d001      	beq.n	8007c90 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007c8c:	f000 fe12 	bl	80088b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007c90:	7bbb      	ldrb	r3, [r7, #14]
 8007c92:	3b01      	subs	r3, #1
 8007c94:	b2db      	uxtb	r3, r3
 8007c96:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007c98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	dce9      	bgt.n	8007c74 <prvUnlockQueue+0x60>
 8007ca0:	e000      	b.n	8007ca4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007ca2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	22ff      	movs	r2, #255	@ 0xff
 8007ca8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007cac:	f001 fd86 	bl	80097bc <vPortExitCritical>
}
 8007cb0:	bf00      	nop
 8007cb2:	3710      	adds	r7, #16
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}

08007cb8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b084      	sub	sp, #16
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007cc0:	f001 fd4a 	bl	8009758 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d102      	bne.n	8007cd2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	60fb      	str	r3, [r7, #12]
 8007cd0:	e001      	b.n	8007cd6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007cd6:	f001 fd71 	bl	80097bc <vPortExitCritical>

	return xReturn;
 8007cda:	68fb      	ldr	r3, [r7, #12]
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3710      	adds	r7, #16
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007cec:	f001 fd34 	bl	8009758 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	d102      	bne.n	8007d02 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	60fb      	str	r3, [r7, #12]
 8007d00:	e001      	b.n	8007d06 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007d02:	2300      	movs	r3, #0
 8007d04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007d06:	f001 fd59 	bl	80097bc <vPortExitCritical>

	return xReturn;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3710      	adds	r7, #16
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007d14:	b480      	push	{r7}
 8007d16:	b085      	sub	sp, #20
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007d1e:	2300      	movs	r3, #0
 8007d20:	60fb      	str	r3, [r7, #12]
 8007d22:	e014      	b.n	8007d4e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007d24:	4a0f      	ldr	r2, [pc, #60]	@ (8007d64 <vQueueAddToRegistry+0x50>)
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d10b      	bne.n	8007d48 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007d30:	490c      	ldr	r1, [pc, #48]	@ (8007d64 <vQueueAddToRegistry+0x50>)
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	683a      	ldr	r2, [r7, #0]
 8007d36:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007d3a:	4a0a      	ldr	r2, [pc, #40]	@ (8007d64 <vQueueAddToRegistry+0x50>)
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	00db      	lsls	r3, r3, #3
 8007d40:	4413      	add	r3, r2
 8007d42:	687a      	ldr	r2, [r7, #4]
 8007d44:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007d46:	e006      	b.n	8007d56 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	60fb      	str	r3, [r7, #12]
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2b07      	cmp	r3, #7
 8007d52:	d9e7      	bls.n	8007d24 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007d54:	bf00      	nop
 8007d56:	bf00      	nop
 8007d58:	3714      	adds	r7, #20
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d60:	4770      	bx	lr
 8007d62:	bf00      	nop
 8007d64:	20000d20 	.word	0x20000d20

08007d68 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007d68:	b480      	push	{r7}
 8007d6a:	b085      	sub	sp, #20
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007d70:	2300      	movs	r3, #0
 8007d72:	60fb      	str	r3, [r7, #12]
 8007d74:	e016      	b.n	8007da4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007d76:	4a10      	ldr	r2, [pc, #64]	@ (8007db8 <vQueueUnregisterQueue+0x50>)
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	00db      	lsls	r3, r3, #3
 8007d7c:	4413      	add	r3, r2
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	687a      	ldr	r2, [r7, #4]
 8007d82:	429a      	cmp	r2, r3
 8007d84:	d10b      	bne.n	8007d9e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007d86:	4a0c      	ldr	r2, [pc, #48]	@ (8007db8 <vQueueUnregisterQueue+0x50>)
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2100      	movs	r1, #0
 8007d8c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007d90:	4a09      	ldr	r2, [pc, #36]	@ (8007db8 <vQueueUnregisterQueue+0x50>)
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	00db      	lsls	r3, r3, #3
 8007d96:	4413      	add	r3, r2
 8007d98:	2200      	movs	r2, #0
 8007d9a:	605a      	str	r2, [r3, #4]
				break;
 8007d9c:	e006      	b.n	8007dac <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	3301      	adds	r3, #1
 8007da2:	60fb      	str	r3, [r7, #12]
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2b07      	cmp	r3, #7
 8007da8:	d9e5      	bls.n	8007d76 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007daa:	bf00      	nop
 8007dac:	bf00      	nop
 8007dae:	3714      	adds	r7, #20
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr
 8007db8:	20000d20 	.word	0x20000d20

08007dbc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b086      	sub	sp, #24
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	60f8      	str	r0, [r7, #12]
 8007dc4:	60b9      	str	r1, [r7, #8]
 8007dc6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007dcc:	f001 fcc4 	bl	8009758 <vPortEnterCritical>
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007dd6:	b25b      	sxtb	r3, r3
 8007dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ddc:	d103      	bne.n	8007de6 <vQueueWaitForMessageRestricted+0x2a>
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	2200      	movs	r2, #0
 8007de2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007dec:	b25b      	sxtb	r3, r3
 8007dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007df2:	d103      	bne.n	8007dfc <vQueueWaitForMessageRestricted+0x40>
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	2200      	movs	r2, #0
 8007df8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007dfc:	f001 fcde 	bl	80097bc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d106      	bne.n	8007e16 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	3324      	adds	r3, #36	@ 0x24
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	68b9      	ldr	r1, [r7, #8]
 8007e10:	4618      	mov	r0, r3
 8007e12:	f000 fc45 	bl	80086a0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007e16:	6978      	ldr	r0, [r7, #20]
 8007e18:	f7ff fefc 	bl	8007c14 <prvUnlockQueue>
	}
 8007e1c:	bf00      	nop
 8007e1e:	3718      	adds	r7, #24
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b08e      	sub	sp, #56	@ 0x38
 8007e28:	af04      	add	r7, sp, #16
 8007e2a:	60f8      	str	r0, [r7, #12]
 8007e2c:	60b9      	str	r1, [r7, #8]
 8007e2e:	607a      	str	r2, [r7, #4]
 8007e30:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007e32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d10b      	bne.n	8007e50 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007e38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e3c:	f383 8811 	msr	BASEPRI, r3
 8007e40:	f3bf 8f6f 	isb	sy
 8007e44:	f3bf 8f4f 	dsb	sy
 8007e48:	623b      	str	r3, [r7, #32]
}
 8007e4a:	bf00      	nop
 8007e4c:	bf00      	nop
 8007e4e:	e7fd      	b.n	8007e4c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007e50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d10b      	bne.n	8007e6e <xTaskCreateStatic+0x4a>
	__asm volatile
 8007e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e5a:	f383 8811 	msr	BASEPRI, r3
 8007e5e:	f3bf 8f6f 	isb	sy
 8007e62:	f3bf 8f4f 	dsb	sy
 8007e66:	61fb      	str	r3, [r7, #28]
}
 8007e68:	bf00      	nop
 8007e6a:	bf00      	nop
 8007e6c:	e7fd      	b.n	8007e6a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007e6e:	235c      	movs	r3, #92	@ 0x5c
 8007e70:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	2b5c      	cmp	r3, #92	@ 0x5c
 8007e76:	d00b      	beq.n	8007e90 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007e78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e7c:	f383 8811 	msr	BASEPRI, r3
 8007e80:	f3bf 8f6f 	isb	sy
 8007e84:	f3bf 8f4f 	dsb	sy
 8007e88:	61bb      	str	r3, [r7, #24]
}
 8007e8a:	bf00      	nop
 8007e8c:	bf00      	nop
 8007e8e:	e7fd      	b.n	8007e8c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007e90:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007e92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d01e      	beq.n	8007ed6 <xTaskCreateStatic+0xb2>
 8007e98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d01b      	beq.n	8007ed6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007e9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ea0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ea4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007ea6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eaa:	2202      	movs	r2, #2
 8007eac:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	9303      	str	r3, [sp, #12]
 8007eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eb6:	9302      	str	r3, [sp, #8]
 8007eb8:	f107 0314 	add.w	r3, r7, #20
 8007ebc:	9301      	str	r3, [sp, #4]
 8007ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ec0:	9300      	str	r3, [sp, #0]
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	687a      	ldr	r2, [r7, #4]
 8007ec6:	68b9      	ldr	r1, [r7, #8]
 8007ec8:	68f8      	ldr	r0, [r7, #12]
 8007eca:	f000 f850 	bl	8007f6e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007ece:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007ed0:	f000 f8de 	bl	8008090 <prvAddNewTaskToReadyList>
 8007ed4:	e001      	b.n	8007eda <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007eda:	697b      	ldr	r3, [r7, #20]
	}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3728      	adds	r7, #40	@ 0x28
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b08c      	sub	sp, #48	@ 0x30
 8007ee8:	af04      	add	r7, sp, #16
 8007eea:	60f8      	str	r0, [r7, #12]
 8007eec:	60b9      	str	r1, [r7, #8]
 8007eee:	603b      	str	r3, [r7, #0]
 8007ef0:	4613      	mov	r3, r2
 8007ef2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007ef4:	88fb      	ldrh	r3, [r7, #6]
 8007ef6:	009b      	lsls	r3, r3, #2
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f001 fd4f 	bl	800999c <pvPortMalloc>
 8007efe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d00e      	beq.n	8007f24 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007f06:	205c      	movs	r0, #92	@ 0x5c
 8007f08:	f001 fd48 	bl	800999c <pvPortMalloc>
 8007f0c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007f0e:	69fb      	ldr	r3, [r7, #28]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d003      	beq.n	8007f1c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007f14:	69fb      	ldr	r3, [r7, #28]
 8007f16:	697a      	ldr	r2, [r7, #20]
 8007f18:	631a      	str	r2, [r3, #48]	@ 0x30
 8007f1a:	e005      	b.n	8007f28 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007f1c:	6978      	ldr	r0, [r7, #20]
 8007f1e:	f001 fe0b 	bl	8009b38 <vPortFree>
 8007f22:	e001      	b.n	8007f28 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007f24:	2300      	movs	r3, #0
 8007f26:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007f28:	69fb      	ldr	r3, [r7, #28]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d017      	beq.n	8007f5e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007f2e:	69fb      	ldr	r3, [r7, #28]
 8007f30:	2200      	movs	r2, #0
 8007f32:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007f36:	88fa      	ldrh	r2, [r7, #6]
 8007f38:	2300      	movs	r3, #0
 8007f3a:	9303      	str	r3, [sp, #12]
 8007f3c:	69fb      	ldr	r3, [r7, #28]
 8007f3e:	9302      	str	r3, [sp, #8]
 8007f40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f42:	9301      	str	r3, [sp, #4]
 8007f44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f46:	9300      	str	r3, [sp, #0]
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	68b9      	ldr	r1, [r7, #8]
 8007f4c:	68f8      	ldr	r0, [r7, #12]
 8007f4e:	f000 f80e 	bl	8007f6e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007f52:	69f8      	ldr	r0, [r7, #28]
 8007f54:	f000 f89c 	bl	8008090 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007f58:	2301      	movs	r3, #1
 8007f5a:	61bb      	str	r3, [r7, #24]
 8007f5c:	e002      	b.n	8007f64 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8007f62:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007f64:	69bb      	ldr	r3, [r7, #24]
	}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3720      	adds	r7, #32
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}

08007f6e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007f6e:	b580      	push	{r7, lr}
 8007f70:	b088      	sub	sp, #32
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	60f8      	str	r0, [r7, #12]
 8007f76:	60b9      	str	r1, [r7, #8]
 8007f78:	607a      	str	r2, [r7, #4]
 8007f7a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f7e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	009b      	lsls	r3, r3, #2
 8007f84:	461a      	mov	r2, r3
 8007f86:	21a5      	movs	r1, #165	@ 0xa5
 8007f88:	f002 fe3f 	bl	800ac0a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007f96:	3b01      	subs	r3, #1
 8007f98:	009b      	lsls	r3, r3, #2
 8007f9a:	4413      	add	r3, r2
 8007f9c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007f9e:	69bb      	ldr	r3, [r7, #24]
 8007fa0:	f023 0307 	bic.w	r3, r3, #7
 8007fa4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007fa6:	69bb      	ldr	r3, [r7, #24]
 8007fa8:	f003 0307 	and.w	r3, r3, #7
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d00b      	beq.n	8007fc8 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fb4:	f383 8811 	msr	BASEPRI, r3
 8007fb8:	f3bf 8f6f 	isb	sy
 8007fbc:	f3bf 8f4f 	dsb	sy
 8007fc0:	617b      	str	r3, [r7, #20]
}
 8007fc2:	bf00      	nop
 8007fc4:	bf00      	nop
 8007fc6:	e7fd      	b.n	8007fc4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d01f      	beq.n	800800e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007fce:	2300      	movs	r3, #0
 8007fd0:	61fb      	str	r3, [r7, #28]
 8007fd2:	e012      	b.n	8007ffa <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007fd4:	68ba      	ldr	r2, [r7, #8]
 8007fd6:	69fb      	ldr	r3, [r7, #28]
 8007fd8:	4413      	add	r3, r2
 8007fda:	7819      	ldrb	r1, [r3, #0]
 8007fdc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fde:	69fb      	ldr	r3, [r7, #28]
 8007fe0:	4413      	add	r3, r2
 8007fe2:	3334      	adds	r3, #52	@ 0x34
 8007fe4:	460a      	mov	r2, r1
 8007fe6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007fe8:	68ba      	ldr	r2, [r7, #8]
 8007fea:	69fb      	ldr	r3, [r7, #28]
 8007fec:	4413      	add	r3, r2
 8007fee:	781b      	ldrb	r3, [r3, #0]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d006      	beq.n	8008002 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007ff4:	69fb      	ldr	r3, [r7, #28]
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	61fb      	str	r3, [r7, #28]
 8007ffa:	69fb      	ldr	r3, [r7, #28]
 8007ffc:	2b0f      	cmp	r3, #15
 8007ffe:	d9e9      	bls.n	8007fd4 <prvInitialiseNewTask+0x66>
 8008000:	e000      	b.n	8008004 <prvInitialiseNewTask+0x96>
			{
				break;
 8008002:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008006:	2200      	movs	r2, #0
 8008008:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800800c:	e003      	b.n	8008016 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800800e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008010:	2200      	movs	r2, #0
 8008012:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008018:	2b37      	cmp	r3, #55	@ 0x37
 800801a:	d901      	bls.n	8008020 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800801c:	2337      	movs	r3, #55	@ 0x37
 800801e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008022:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008024:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008028:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800802a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800802c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800802e:	2200      	movs	r2, #0
 8008030:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008034:	3304      	adds	r3, #4
 8008036:	4618      	mov	r0, r3
 8008038:	f7fe fe34 	bl	8006ca4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800803c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800803e:	3318      	adds	r3, #24
 8008040:	4618      	mov	r0, r3
 8008042:	f7fe fe2f 	bl	8006ca4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008048:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800804a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800804c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800804e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008054:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008058:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800805a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800805c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800805e:	2200      	movs	r2, #0
 8008060:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008064:	2200      	movs	r2, #0
 8008066:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800806a:	683a      	ldr	r2, [r7, #0]
 800806c:	68f9      	ldr	r1, [r7, #12]
 800806e:	69b8      	ldr	r0, [r7, #24]
 8008070:	f001 fa3e 	bl	80094f0 <pxPortInitialiseStack>
 8008074:	4602      	mov	r2, r0
 8008076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008078:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800807a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800807c:	2b00      	cmp	r3, #0
 800807e:	d002      	beq.n	8008086 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008082:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008084:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008086:	bf00      	nop
 8008088:	3720      	adds	r7, #32
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}
	...

08008090 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b082      	sub	sp, #8
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008098:	f001 fb5e 	bl	8009758 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800809c:	4b2d      	ldr	r3, [pc, #180]	@ (8008154 <prvAddNewTaskToReadyList+0xc4>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	3301      	adds	r3, #1
 80080a2:	4a2c      	ldr	r2, [pc, #176]	@ (8008154 <prvAddNewTaskToReadyList+0xc4>)
 80080a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80080a6:	4b2c      	ldr	r3, [pc, #176]	@ (8008158 <prvAddNewTaskToReadyList+0xc8>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d109      	bne.n	80080c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80080ae:	4a2a      	ldr	r2, [pc, #168]	@ (8008158 <prvAddNewTaskToReadyList+0xc8>)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80080b4:	4b27      	ldr	r3, [pc, #156]	@ (8008154 <prvAddNewTaskToReadyList+0xc4>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d110      	bne.n	80080de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80080bc:	f000 fc1e 	bl	80088fc <prvInitialiseTaskLists>
 80080c0:	e00d      	b.n	80080de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80080c2:	4b26      	ldr	r3, [pc, #152]	@ (800815c <prvAddNewTaskToReadyList+0xcc>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d109      	bne.n	80080de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80080ca:	4b23      	ldr	r3, [pc, #140]	@ (8008158 <prvAddNewTaskToReadyList+0xc8>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080d4:	429a      	cmp	r2, r3
 80080d6:	d802      	bhi.n	80080de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80080d8:	4a1f      	ldr	r2, [pc, #124]	@ (8008158 <prvAddNewTaskToReadyList+0xc8>)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80080de:	4b20      	ldr	r3, [pc, #128]	@ (8008160 <prvAddNewTaskToReadyList+0xd0>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	3301      	adds	r3, #1
 80080e4:	4a1e      	ldr	r2, [pc, #120]	@ (8008160 <prvAddNewTaskToReadyList+0xd0>)
 80080e6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80080e8:	4b1d      	ldr	r3, [pc, #116]	@ (8008160 <prvAddNewTaskToReadyList+0xd0>)
 80080ea:	681a      	ldr	r2, [r3, #0]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080f4:	4b1b      	ldr	r3, [pc, #108]	@ (8008164 <prvAddNewTaskToReadyList+0xd4>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	429a      	cmp	r2, r3
 80080fa:	d903      	bls.n	8008104 <prvAddNewTaskToReadyList+0x74>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008100:	4a18      	ldr	r2, [pc, #96]	@ (8008164 <prvAddNewTaskToReadyList+0xd4>)
 8008102:	6013      	str	r3, [r2, #0]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008108:	4613      	mov	r3, r2
 800810a:	009b      	lsls	r3, r3, #2
 800810c:	4413      	add	r3, r2
 800810e:	009b      	lsls	r3, r3, #2
 8008110:	4a15      	ldr	r2, [pc, #84]	@ (8008168 <prvAddNewTaskToReadyList+0xd8>)
 8008112:	441a      	add	r2, r3
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	3304      	adds	r3, #4
 8008118:	4619      	mov	r1, r3
 800811a:	4610      	mov	r0, r2
 800811c:	f7fe fdcf 	bl	8006cbe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008120:	f001 fb4c 	bl	80097bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008124:	4b0d      	ldr	r3, [pc, #52]	@ (800815c <prvAddNewTaskToReadyList+0xcc>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d00e      	beq.n	800814a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800812c:	4b0a      	ldr	r3, [pc, #40]	@ (8008158 <prvAddNewTaskToReadyList+0xc8>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008136:	429a      	cmp	r2, r3
 8008138:	d207      	bcs.n	800814a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800813a:	4b0c      	ldr	r3, [pc, #48]	@ (800816c <prvAddNewTaskToReadyList+0xdc>)
 800813c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008140:	601a      	str	r2, [r3, #0]
 8008142:	f3bf 8f4f 	dsb	sy
 8008146:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800814a:	bf00      	nop
 800814c:	3708      	adds	r7, #8
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}
 8008152:	bf00      	nop
 8008154:	20001234 	.word	0x20001234
 8008158:	20000d60 	.word	0x20000d60
 800815c:	20001240 	.word	0x20001240
 8008160:	20001250 	.word	0x20001250
 8008164:	2000123c 	.word	0x2000123c
 8008168:	20000d64 	.word	0x20000d64
 800816c:	e000ed04 	.word	0xe000ed04

08008170 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008170:	b580      	push	{r7, lr}
 8008172:	b084      	sub	sp, #16
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008178:	2300      	movs	r3, #0
 800817a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d018      	beq.n	80081b4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008182:	4b14      	ldr	r3, [pc, #80]	@ (80081d4 <vTaskDelay+0x64>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d00b      	beq.n	80081a2 <vTaskDelay+0x32>
	__asm volatile
 800818a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800818e:	f383 8811 	msr	BASEPRI, r3
 8008192:	f3bf 8f6f 	isb	sy
 8008196:	f3bf 8f4f 	dsb	sy
 800819a:	60bb      	str	r3, [r7, #8]
}
 800819c:	bf00      	nop
 800819e:	bf00      	nop
 80081a0:	e7fd      	b.n	800819e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80081a2:	f000 f883 	bl	80082ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80081a6:	2100      	movs	r1, #0
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f000 fdf3 	bl	8008d94 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80081ae:	f000 f88b 	bl	80082c8 <xTaskResumeAll>
 80081b2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d107      	bne.n	80081ca <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80081ba:	4b07      	ldr	r3, [pc, #28]	@ (80081d8 <vTaskDelay+0x68>)
 80081bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081c0:	601a      	str	r2, [r3, #0]
 80081c2:	f3bf 8f4f 	dsb	sy
 80081c6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80081ca:	bf00      	nop
 80081cc:	3710      	adds	r7, #16
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}
 80081d2:	bf00      	nop
 80081d4:	2000125c 	.word	0x2000125c
 80081d8:	e000ed04 	.word	0xe000ed04

080081dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b08a      	sub	sp, #40	@ 0x28
 80081e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80081e2:	2300      	movs	r3, #0
 80081e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80081e6:	2300      	movs	r3, #0
 80081e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80081ea:	463a      	mov	r2, r7
 80081ec:	1d39      	adds	r1, r7, #4
 80081ee:	f107 0308 	add.w	r3, r7, #8
 80081f2:	4618      	mov	r0, r3
 80081f4:	f7fe fd02 	bl	8006bfc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80081f8:	6839      	ldr	r1, [r7, #0]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	68ba      	ldr	r2, [r7, #8]
 80081fe:	9202      	str	r2, [sp, #8]
 8008200:	9301      	str	r3, [sp, #4]
 8008202:	2300      	movs	r3, #0
 8008204:	9300      	str	r3, [sp, #0]
 8008206:	2300      	movs	r3, #0
 8008208:	460a      	mov	r2, r1
 800820a:	4922      	ldr	r1, [pc, #136]	@ (8008294 <vTaskStartScheduler+0xb8>)
 800820c:	4822      	ldr	r0, [pc, #136]	@ (8008298 <vTaskStartScheduler+0xbc>)
 800820e:	f7ff fe09 	bl	8007e24 <xTaskCreateStatic>
 8008212:	4603      	mov	r3, r0
 8008214:	4a21      	ldr	r2, [pc, #132]	@ (800829c <vTaskStartScheduler+0xc0>)
 8008216:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008218:	4b20      	ldr	r3, [pc, #128]	@ (800829c <vTaskStartScheduler+0xc0>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d002      	beq.n	8008226 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008220:	2301      	movs	r3, #1
 8008222:	617b      	str	r3, [r7, #20]
 8008224:	e001      	b.n	800822a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008226:	2300      	movs	r3, #0
 8008228:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	2b01      	cmp	r3, #1
 800822e:	d102      	bne.n	8008236 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008230:	f000 fe04 	bl	8008e3c <xTimerCreateTimerTask>
 8008234:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	2b01      	cmp	r3, #1
 800823a:	d116      	bne.n	800826a <vTaskStartScheduler+0x8e>
	__asm volatile
 800823c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008240:	f383 8811 	msr	BASEPRI, r3
 8008244:	f3bf 8f6f 	isb	sy
 8008248:	f3bf 8f4f 	dsb	sy
 800824c:	613b      	str	r3, [r7, #16]
}
 800824e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008250:	4b13      	ldr	r3, [pc, #76]	@ (80082a0 <vTaskStartScheduler+0xc4>)
 8008252:	f04f 32ff 	mov.w	r2, #4294967295
 8008256:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008258:	4b12      	ldr	r3, [pc, #72]	@ (80082a4 <vTaskStartScheduler+0xc8>)
 800825a:	2201      	movs	r2, #1
 800825c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800825e:	4b12      	ldr	r3, [pc, #72]	@ (80082a8 <vTaskStartScheduler+0xcc>)
 8008260:	2200      	movs	r2, #0
 8008262:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008264:	f001 f9d4 	bl	8009610 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008268:	e00f      	b.n	800828a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008270:	d10b      	bne.n	800828a <vTaskStartScheduler+0xae>
	__asm volatile
 8008272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008276:	f383 8811 	msr	BASEPRI, r3
 800827a:	f3bf 8f6f 	isb	sy
 800827e:	f3bf 8f4f 	dsb	sy
 8008282:	60fb      	str	r3, [r7, #12]
}
 8008284:	bf00      	nop
 8008286:	bf00      	nop
 8008288:	e7fd      	b.n	8008286 <vTaskStartScheduler+0xaa>
}
 800828a:	bf00      	nop
 800828c:	3718      	adds	r7, #24
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
 8008292:	bf00      	nop
 8008294:	0800ce28 	.word	0x0800ce28
 8008298:	080088cd 	.word	0x080088cd
 800829c:	20001258 	.word	0x20001258
 80082a0:	20001254 	.word	0x20001254
 80082a4:	20001240 	.word	0x20001240
 80082a8:	20001238 	.word	0x20001238

080082ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80082ac:	b480      	push	{r7}
 80082ae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80082b0:	4b04      	ldr	r3, [pc, #16]	@ (80082c4 <vTaskSuspendAll+0x18>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	3301      	adds	r3, #1
 80082b6:	4a03      	ldr	r2, [pc, #12]	@ (80082c4 <vTaskSuspendAll+0x18>)
 80082b8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80082ba:	bf00      	nop
 80082bc:	46bd      	mov	sp, r7
 80082be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c2:	4770      	bx	lr
 80082c4:	2000125c 	.word	0x2000125c

080082c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b084      	sub	sp, #16
 80082cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80082ce:	2300      	movs	r3, #0
 80082d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80082d2:	2300      	movs	r3, #0
 80082d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80082d6:	4b42      	ldr	r3, [pc, #264]	@ (80083e0 <xTaskResumeAll+0x118>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d10b      	bne.n	80082f6 <xTaskResumeAll+0x2e>
	__asm volatile
 80082de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082e2:	f383 8811 	msr	BASEPRI, r3
 80082e6:	f3bf 8f6f 	isb	sy
 80082ea:	f3bf 8f4f 	dsb	sy
 80082ee:	603b      	str	r3, [r7, #0]
}
 80082f0:	bf00      	nop
 80082f2:	bf00      	nop
 80082f4:	e7fd      	b.n	80082f2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80082f6:	f001 fa2f 	bl	8009758 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80082fa:	4b39      	ldr	r3, [pc, #228]	@ (80083e0 <xTaskResumeAll+0x118>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	3b01      	subs	r3, #1
 8008300:	4a37      	ldr	r2, [pc, #220]	@ (80083e0 <xTaskResumeAll+0x118>)
 8008302:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008304:	4b36      	ldr	r3, [pc, #216]	@ (80083e0 <xTaskResumeAll+0x118>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d162      	bne.n	80083d2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800830c:	4b35      	ldr	r3, [pc, #212]	@ (80083e4 <xTaskResumeAll+0x11c>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d05e      	beq.n	80083d2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008314:	e02f      	b.n	8008376 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008316:	4b34      	ldr	r3, [pc, #208]	@ (80083e8 <xTaskResumeAll+0x120>)
 8008318:	68db      	ldr	r3, [r3, #12]
 800831a:	68db      	ldr	r3, [r3, #12]
 800831c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	3318      	adds	r3, #24
 8008322:	4618      	mov	r0, r3
 8008324:	f7fe fd28 	bl	8006d78 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	3304      	adds	r3, #4
 800832c:	4618      	mov	r0, r3
 800832e:	f7fe fd23 	bl	8006d78 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008336:	4b2d      	ldr	r3, [pc, #180]	@ (80083ec <xTaskResumeAll+0x124>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	429a      	cmp	r2, r3
 800833c:	d903      	bls.n	8008346 <xTaskResumeAll+0x7e>
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008342:	4a2a      	ldr	r2, [pc, #168]	@ (80083ec <xTaskResumeAll+0x124>)
 8008344:	6013      	str	r3, [r2, #0]
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800834a:	4613      	mov	r3, r2
 800834c:	009b      	lsls	r3, r3, #2
 800834e:	4413      	add	r3, r2
 8008350:	009b      	lsls	r3, r3, #2
 8008352:	4a27      	ldr	r2, [pc, #156]	@ (80083f0 <xTaskResumeAll+0x128>)
 8008354:	441a      	add	r2, r3
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	3304      	adds	r3, #4
 800835a:	4619      	mov	r1, r3
 800835c:	4610      	mov	r0, r2
 800835e:	f7fe fcae 	bl	8006cbe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008366:	4b23      	ldr	r3, [pc, #140]	@ (80083f4 <xTaskResumeAll+0x12c>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800836c:	429a      	cmp	r2, r3
 800836e:	d302      	bcc.n	8008376 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008370:	4b21      	ldr	r3, [pc, #132]	@ (80083f8 <xTaskResumeAll+0x130>)
 8008372:	2201      	movs	r2, #1
 8008374:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008376:	4b1c      	ldr	r3, [pc, #112]	@ (80083e8 <xTaskResumeAll+0x120>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d1cb      	bne.n	8008316 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d001      	beq.n	8008388 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008384:	f000 fb58 	bl	8008a38 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008388:	4b1c      	ldr	r3, [pc, #112]	@ (80083fc <xTaskResumeAll+0x134>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d010      	beq.n	80083b6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008394:	f000 f846 	bl	8008424 <xTaskIncrementTick>
 8008398:	4603      	mov	r3, r0
 800839a:	2b00      	cmp	r3, #0
 800839c:	d002      	beq.n	80083a4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800839e:	4b16      	ldr	r3, [pc, #88]	@ (80083f8 <xTaskResumeAll+0x130>)
 80083a0:	2201      	movs	r2, #1
 80083a2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	3b01      	subs	r3, #1
 80083a8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d1f1      	bne.n	8008394 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80083b0:	4b12      	ldr	r3, [pc, #72]	@ (80083fc <xTaskResumeAll+0x134>)
 80083b2:	2200      	movs	r2, #0
 80083b4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80083b6:	4b10      	ldr	r3, [pc, #64]	@ (80083f8 <xTaskResumeAll+0x130>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d009      	beq.n	80083d2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80083be:	2301      	movs	r3, #1
 80083c0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80083c2:	4b0f      	ldr	r3, [pc, #60]	@ (8008400 <xTaskResumeAll+0x138>)
 80083c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083c8:	601a      	str	r2, [r3, #0]
 80083ca:	f3bf 8f4f 	dsb	sy
 80083ce:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80083d2:	f001 f9f3 	bl	80097bc <vPortExitCritical>

	return xAlreadyYielded;
 80083d6:	68bb      	ldr	r3, [r7, #8]
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3710      	adds	r7, #16
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}
 80083e0:	2000125c 	.word	0x2000125c
 80083e4:	20001234 	.word	0x20001234
 80083e8:	200011f4 	.word	0x200011f4
 80083ec:	2000123c 	.word	0x2000123c
 80083f0:	20000d64 	.word	0x20000d64
 80083f4:	20000d60 	.word	0x20000d60
 80083f8:	20001248 	.word	0x20001248
 80083fc:	20001244 	.word	0x20001244
 8008400:	e000ed04 	.word	0xe000ed04

08008404 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008404:	b480      	push	{r7}
 8008406:	b083      	sub	sp, #12
 8008408:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800840a:	4b05      	ldr	r3, [pc, #20]	@ (8008420 <xTaskGetTickCount+0x1c>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008410:	687b      	ldr	r3, [r7, #4]
}
 8008412:	4618      	mov	r0, r3
 8008414:	370c      	adds	r7, #12
 8008416:	46bd      	mov	sp, r7
 8008418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841c:	4770      	bx	lr
 800841e:	bf00      	nop
 8008420:	20001238 	.word	0x20001238

08008424 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b086      	sub	sp, #24
 8008428:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800842a:	2300      	movs	r3, #0
 800842c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800842e:	4b4f      	ldr	r3, [pc, #316]	@ (800856c <xTaskIncrementTick+0x148>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	2b00      	cmp	r3, #0
 8008434:	f040 8090 	bne.w	8008558 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008438:	4b4d      	ldr	r3, [pc, #308]	@ (8008570 <xTaskIncrementTick+0x14c>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	3301      	adds	r3, #1
 800843e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008440:	4a4b      	ldr	r2, [pc, #300]	@ (8008570 <xTaskIncrementTick+0x14c>)
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d121      	bne.n	8008490 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800844c:	4b49      	ldr	r3, [pc, #292]	@ (8008574 <xTaskIncrementTick+0x150>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d00b      	beq.n	800846e <xTaskIncrementTick+0x4a>
	__asm volatile
 8008456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800845a:	f383 8811 	msr	BASEPRI, r3
 800845e:	f3bf 8f6f 	isb	sy
 8008462:	f3bf 8f4f 	dsb	sy
 8008466:	603b      	str	r3, [r7, #0]
}
 8008468:	bf00      	nop
 800846a:	bf00      	nop
 800846c:	e7fd      	b.n	800846a <xTaskIncrementTick+0x46>
 800846e:	4b41      	ldr	r3, [pc, #260]	@ (8008574 <xTaskIncrementTick+0x150>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	60fb      	str	r3, [r7, #12]
 8008474:	4b40      	ldr	r3, [pc, #256]	@ (8008578 <xTaskIncrementTick+0x154>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a3e      	ldr	r2, [pc, #248]	@ (8008574 <xTaskIncrementTick+0x150>)
 800847a:	6013      	str	r3, [r2, #0]
 800847c:	4a3e      	ldr	r2, [pc, #248]	@ (8008578 <xTaskIncrementTick+0x154>)
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	6013      	str	r3, [r2, #0]
 8008482:	4b3e      	ldr	r3, [pc, #248]	@ (800857c <xTaskIncrementTick+0x158>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	3301      	adds	r3, #1
 8008488:	4a3c      	ldr	r2, [pc, #240]	@ (800857c <xTaskIncrementTick+0x158>)
 800848a:	6013      	str	r3, [r2, #0]
 800848c:	f000 fad4 	bl	8008a38 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008490:	4b3b      	ldr	r3, [pc, #236]	@ (8008580 <xTaskIncrementTick+0x15c>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	693a      	ldr	r2, [r7, #16]
 8008496:	429a      	cmp	r2, r3
 8008498:	d349      	bcc.n	800852e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800849a:	4b36      	ldr	r3, [pc, #216]	@ (8008574 <xTaskIncrementTick+0x150>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d104      	bne.n	80084ae <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084a4:	4b36      	ldr	r3, [pc, #216]	@ (8008580 <xTaskIncrementTick+0x15c>)
 80084a6:	f04f 32ff 	mov.w	r2, #4294967295
 80084aa:	601a      	str	r2, [r3, #0]
					break;
 80084ac:	e03f      	b.n	800852e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084ae:	4b31      	ldr	r3, [pc, #196]	@ (8008574 <xTaskIncrementTick+0x150>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	68db      	ldr	r3, [r3, #12]
 80084b4:	68db      	ldr	r3, [r3, #12]
 80084b6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80084be:	693a      	ldr	r2, [r7, #16]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	429a      	cmp	r2, r3
 80084c4:	d203      	bcs.n	80084ce <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80084c6:	4a2e      	ldr	r2, [pc, #184]	@ (8008580 <xTaskIncrementTick+0x15c>)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80084cc:	e02f      	b.n	800852e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	3304      	adds	r3, #4
 80084d2:	4618      	mov	r0, r3
 80084d4:	f7fe fc50 	bl	8006d78 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d004      	beq.n	80084ea <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	3318      	adds	r3, #24
 80084e4:	4618      	mov	r0, r3
 80084e6:	f7fe fc47 	bl	8006d78 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084ee:	4b25      	ldr	r3, [pc, #148]	@ (8008584 <xTaskIncrementTick+0x160>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	429a      	cmp	r2, r3
 80084f4:	d903      	bls.n	80084fe <xTaskIncrementTick+0xda>
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084fa:	4a22      	ldr	r2, [pc, #136]	@ (8008584 <xTaskIncrementTick+0x160>)
 80084fc:	6013      	str	r3, [r2, #0]
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008502:	4613      	mov	r3, r2
 8008504:	009b      	lsls	r3, r3, #2
 8008506:	4413      	add	r3, r2
 8008508:	009b      	lsls	r3, r3, #2
 800850a:	4a1f      	ldr	r2, [pc, #124]	@ (8008588 <xTaskIncrementTick+0x164>)
 800850c:	441a      	add	r2, r3
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	3304      	adds	r3, #4
 8008512:	4619      	mov	r1, r3
 8008514:	4610      	mov	r0, r2
 8008516:	f7fe fbd2 	bl	8006cbe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800851e:	4b1b      	ldr	r3, [pc, #108]	@ (800858c <xTaskIncrementTick+0x168>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008524:	429a      	cmp	r2, r3
 8008526:	d3b8      	bcc.n	800849a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008528:	2301      	movs	r3, #1
 800852a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800852c:	e7b5      	b.n	800849a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800852e:	4b17      	ldr	r3, [pc, #92]	@ (800858c <xTaskIncrementTick+0x168>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008534:	4914      	ldr	r1, [pc, #80]	@ (8008588 <xTaskIncrementTick+0x164>)
 8008536:	4613      	mov	r3, r2
 8008538:	009b      	lsls	r3, r3, #2
 800853a:	4413      	add	r3, r2
 800853c:	009b      	lsls	r3, r3, #2
 800853e:	440b      	add	r3, r1
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	2b01      	cmp	r3, #1
 8008544:	d901      	bls.n	800854a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008546:	2301      	movs	r3, #1
 8008548:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800854a:	4b11      	ldr	r3, [pc, #68]	@ (8008590 <xTaskIncrementTick+0x16c>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d007      	beq.n	8008562 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008552:	2301      	movs	r3, #1
 8008554:	617b      	str	r3, [r7, #20]
 8008556:	e004      	b.n	8008562 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008558:	4b0e      	ldr	r3, [pc, #56]	@ (8008594 <xTaskIncrementTick+0x170>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	3301      	adds	r3, #1
 800855e:	4a0d      	ldr	r2, [pc, #52]	@ (8008594 <xTaskIncrementTick+0x170>)
 8008560:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008562:	697b      	ldr	r3, [r7, #20]
}
 8008564:	4618      	mov	r0, r3
 8008566:	3718      	adds	r7, #24
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}
 800856c:	2000125c 	.word	0x2000125c
 8008570:	20001238 	.word	0x20001238
 8008574:	200011ec 	.word	0x200011ec
 8008578:	200011f0 	.word	0x200011f0
 800857c:	2000124c 	.word	0x2000124c
 8008580:	20001254 	.word	0x20001254
 8008584:	2000123c 	.word	0x2000123c
 8008588:	20000d64 	.word	0x20000d64
 800858c:	20000d60 	.word	0x20000d60
 8008590:	20001248 	.word	0x20001248
 8008594:	20001244 	.word	0x20001244

08008598 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008598:	b480      	push	{r7}
 800859a:	b085      	sub	sp, #20
 800859c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800859e:	4b28      	ldr	r3, [pc, #160]	@ (8008640 <vTaskSwitchContext+0xa8>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d003      	beq.n	80085ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80085a6:	4b27      	ldr	r3, [pc, #156]	@ (8008644 <vTaskSwitchContext+0xac>)
 80085a8:	2201      	movs	r2, #1
 80085aa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80085ac:	e042      	b.n	8008634 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80085ae:	4b25      	ldr	r3, [pc, #148]	@ (8008644 <vTaskSwitchContext+0xac>)
 80085b0:	2200      	movs	r2, #0
 80085b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085b4:	4b24      	ldr	r3, [pc, #144]	@ (8008648 <vTaskSwitchContext+0xb0>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	60fb      	str	r3, [r7, #12]
 80085ba:	e011      	b.n	80085e0 <vTaskSwitchContext+0x48>
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d10b      	bne.n	80085da <vTaskSwitchContext+0x42>
	__asm volatile
 80085c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085c6:	f383 8811 	msr	BASEPRI, r3
 80085ca:	f3bf 8f6f 	isb	sy
 80085ce:	f3bf 8f4f 	dsb	sy
 80085d2:	607b      	str	r3, [r7, #4]
}
 80085d4:	bf00      	nop
 80085d6:	bf00      	nop
 80085d8:	e7fd      	b.n	80085d6 <vTaskSwitchContext+0x3e>
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	3b01      	subs	r3, #1
 80085de:	60fb      	str	r3, [r7, #12]
 80085e0:	491a      	ldr	r1, [pc, #104]	@ (800864c <vTaskSwitchContext+0xb4>)
 80085e2:	68fa      	ldr	r2, [r7, #12]
 80085e4:	4613      	mov	r3, r2
 80085e6:	009b      	lsls	r3, r3, #2
 80085e8:	4413      	add	r3, r2
 80085ea:	009b      	lsls	r3, r3, #2
 80085ec:	440b      	add	r3, r1
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d0e3      	beq.n	80085bc <vTaskSwitchContext+0x24>
 80085f4:	68fa      	ldr	r2, [r7, #12]
 80085f6:	4613      	mov	r3, r2
 80085f8:	009b      	lsls	r3, r3, #2
 80085fa:	4413      	add	r3, r2
 80085fc:	009b      	lsls	r3, r3, #2
 80085fe:	4a13      	ldr	r2, [pc, #76]	@ (800864c <vTaskSwitchContext+0xb4>)
 8008600:	4413      	add	r3, r2
 8008602:	60bb      	str	r3, [r7, #8]
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	685a      	ldr	r2, [r3, #4]
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	605a      	str	r2, [r3, #4]
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	685a      	ldr	r2, [r3, #4]
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	3308      	adds	r3, #8
 8008616:	429a      	cmp	r2, r3
 8008618:	d104      	bne.n	8008624 <vTaskSwitchContext+0x8c>
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	685a      	ldr	r2, [r3, #4]
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	605a      	str	r2, [r3, #4]
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	685b      	ldr	r3, [r3, #4]
 8008628:	68db      	ldr	r3, [r3, #12]
 800862a:	4a09      	ldr	r2, [pc, #36]	@ (8008650 <vTaskSwitchContext+0xb8>)
 800862c:	6013      	str	r3, [r2, #0]
 800862e:	4a06      	ldr	r2, [pc, #24]	@ (8008648 <vTaskSwitchContext+0xb0>)
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	6013      	str	r3, [r2, #0]
}
 8008634:	bf00      	nop
 8008636:	3714      	adds	r7, #20
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr
 8008640:	2000125c 	.word	0x2000125c
 8008644:	20001248 	.word	0x20001248
 8008648:	2000123c 	.word	0x2000123c
 800864c:	20000d64 	.word	0x20000d64
 8008650:	20000d60 	.word	0x20000d60

08008654 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b084      	sub	sp, #16
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
 800865c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d10b      	bne.n	800867c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008668:	f383 8811 	msr	BASEPRI, r3
 800866c:	f3bf 8f6f 	isb	sy
 8008670:	f3bf 8f4f 	dsb	sy
 8008674:	60fb      	str	r3, [r7, #12]
}
 8008676:	bf00      	nop
 8008678:	bf00      	nop
 800867a:	e7fd      	b.n	8008678 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800867c:	4b07      	ldr	r3, [pc, #28]	@ (800869c <vTaskPlaceOnEventList+0x48>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	3318      	adds	r3, #24
 8008682:	4619      	mov	r1, r3
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f7fe fb3e 	bl	8006d06 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800868a:	2101      	movs	r1, #1
 800868c:	6838      	ldr	r0, [r7, #0]
 800868e:	f000 fb81 	bl	8008d94 <prvAddCurrentTaskToDelayedList>
}
 8008692:	bf00      	nop
 8008694:	3710      	adds	r7, #16
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}
 800869a:	bf00      	nop
 800869c:	20000d60 	.word	0x20000d60

080086a0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b086      	sub	sp, #24
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	60f8      	str	r0, [r7, #12]
 80086a8:	60b9      	str	r1, [r7, #8]
 80086aa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d10b      	bne.n	80086ca <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80086b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086b6:	f383 8811 	msr	BASEPRI, r3
 80086ba:	f3bf 8f6f 	isb	sy
 80086be:	f3bf 8f4f 	dsb	sy
 80086c2:	617b      	str	r3, [r7, #20]
}
 80086c4:	bf00      	nop
 80086c6:	bf00      	nop
 80086c8:	e7fd      	b.n	80086c6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80086ca:	4b0a      	ldr	r3, [pc, #40]	@ (80086f4 <vTaskPlaceOnEventListRestricted+0x54>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	3318      	adds	r3, #24
 80086d0:	4619      	mov	r1, r3
 80086d2:	68f8      	ldr	r0, [r7, #12]
 80086d4:	f7fe faf3 	bl	8006cbe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d002      	beq.n	80086e4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80086de:	f04f 33ff 	mov.w	r3, #4294967295
 80086e2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80086e4:	6879      	ldr	r1, [r7, #4]
 80086e6:	68b8      	ldr	r0, [r7, #8]
 80086e8:	f000 fb54 	bl	8008d94 <prvAddCurrentTaskToDelayedList>
	}
 80086ec:	bf00      	nop
 80086ee:	3718      	adds	r7, #24
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}
 80086f4:	20000d60 	.word	0x20000d60

080086f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b086      	sub	sp, #24
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	68db      	ldr	r3, [r3, #12]
 8008704:	68db      	ldr	r3, [r3, #12]
 8008706:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d10b      	bne.n	8008726 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800870e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008712:	f383 8811 	msr	BASEPRI, r3
 8008716:	f3bf 8f6f 	isb	sy
 800871a:	f3bf 8f4f 	dsb	sy
 800871e:	60fb      	str	r3, [r7, #12]
}
 8008720:	bf00      	nop
 8008722:	bf00      	nop
 8008724:	e7fd      	b.n	8008722 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	3318      	adds	r3, #24
 800872a:	4618      	mov	r0, r3
 800872c:	f7fe fb24 	bl	8006d78 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008730:	4b1d      	ldr	r3, [pc, #116]	@ (80087a8 <xTaskRemoveFromEventList+0xb0>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d11d      	bne.n	8008774 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	3304      	adds	r3, #4
 800873c:	4618      	mov	r0, r3
 800873e:	f7fe fb1b 	bl	8006d78 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008746:	4b19      	ldr	r3, [pc, #100]	@ (80087ac <xTaskRemoveFromEventList+0xb4>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	429a      	cmp	r2, r3
 800874c:	d903      	bls.n	8008756 <xTaskRemoveFromEventList+0x5e>
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008752:	4a16      	ldr	r2, [pc, #88]	@ (80087ac <xTaskRemoveFromEventList+0xb4>)
 8008754:	6013      	str	r3, [r2, #0]
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800875a:	4613      	mov	r3, r2
 800875c:	009b      	lsls	r3, r3, #2
 800875e:	4413      	add	r3, r2
 8008760:	009b      	lsls	r3, r3, #2
 8008762:	4a13      	ldr	r2, [pc, #76]	@ (80087b0 <xTaskRemoveFromEventList+0xb8>)
 8008764:	441a      	add	r2, r3
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	3304      	adds	r3, #4
 800876a:	4619      	mov	r1, r3
 800876c:	4610      	mov	r0, r2
 800876e:	f7fe faa6 	bl	8006cbe <vListInsertEnd>
 8008772:	e005      	b.n	8008780 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	3318      	adds	r3, #24
 8008778:	4619      	mov	r1, r3
 800877a:	480e      	ldr	r0, [pc, #56]	@ (80087b4 <xTaskRemoveFromEventList+0xbc>)
 800877c:	f7fe fa9f 	bl	8006cbe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008784:	4b0c      	ldr	r3, [pc, #48]	@ (80087b8 <xTaskRemoveFromEventList+0xc0>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800878a:	429a      	cmp	r2, r3
 800878c:	d905      	bls.n	800879a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800878e:	2301      	movs	r3, #1
 8008790:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008792:	4b0a      	ldr	r3, [pc, #40]	@ (80087bc <xTaskRemoveFromEventList+0xc4>)
 8008794:	2201      	movs	r2, #1
 8008796:	601a      	str	r2, [r3, #0]
 8008798:	e001      	b.n	800879e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800879a:	2300      	movs	r3, #0
 800879c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800879e:	697b      	ldr	r3, [r7, #20]
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3718      	adds	r7, #24
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}
 80087a8:	2000125c 	.word	0x2000125c
 80087ac:	2000123c 	.word	0x2000123c
 80087b0:	20000d64 	.word	0x20000d64
 80087b4:	200011f4 	.word	0x200011f4
 80087b8:	20000d60 	.word	0x20000d60
 80087bc:	20001248 	.word	0x20001248

080087c0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80087c0:	b480      	push	{r7}
 80087c2:	b083      	sub	sp, #12
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80087c8:	4b06      	ldr	r3, [pc, #24]	@ (80087e4 <vTaskInternalSetTimeOutState+0x24>)
 80087ca:	681a      	ldr	r2, [r3, #0]
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80087d0:	4b05      	ldr	r3, [pc, #20]	@ (80087e8 <vTaskInternalSetTimeOutState+0x28>)
 80087d2:	681a      	ldr	r2, [r3, #0]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	605a      	str	r2, [r3, #4]
}
 80087d8:	bf00      	nop
 80087da:	370c      	adds	r7, #12
 80087dc:	46bd      	mov	sp, r7
 80087de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e2:	4770      	bx	lr
 80087e4:	2000124c 	.word	0x2000124c
 80087e8:	20001238 	.word	0x20001238

080087ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b088      	sub	sp, #32
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
 80087f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d10b      	bne.n	8008814 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80087fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008800:	f383 8811 	msr	BASEPRI, r3
 8008804:	f3bf 8f6f 	isb	sy
 8008808:	f3bf 8f4f 	dsb	sy
 800880c:	613b      	str	r3, [r7, #16]
}
 800880e:	bf00      	nop
 8008810:	bf00      	nop
 8008812:	e7fd      	b.n	8008810 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d10b      	bne.n	8008832 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800881a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800881e:	f383 8811 	msr	BASEPRI, r3
 8008822:	f3bf 8f6f 	isb	sy
 8008826:	f3bf 8f4f 	dsb	sy
 800882a:	60fb      	str	r3, [r7, #12]
}
 800882c:	bf00      	nop
 800882e:	bf00      	nop
 8008830:	e7fd      	b.n	800882e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008832:	f000 ff91 	bl	8009758 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008836:	4b1d      	ldr	r3, [pc, #116]	@ (80088ac <xTaskCheckForTimeOut+0xc0>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	69ba      	ldr	r2, [r7, #24]
 8008842:	1ad3      	subs	r3, r2, r3
 8008844:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800884e:	d102      	bne.n	8008856 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008850:	2300      	movs	r3, #0
 8008852:	61fb      	str	r3, [r7, #28]
 8008854:	e023      	b.n	800889e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681a      	ldr	r2, [r3, #0]
 800885a:	4b15      	ldr	r3, [pc, #84]	@ (80088b0 <xTaskCheckForTimeOut+0xc4>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	429a      	cmp	r2, r3
 8008860:	d007      	beq.n	8008872 <xTaskCheckForTimeOut+0x86>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	69ba      	ldr	r2, [r7, #24]
 8008868:	429a      	cmp	r2, r3
 800886a:	d302      	bcc.n	8008872 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800886c:	2301      	movs	r3, #1
 800886e:	61fb      	str	r3, [r7, #28]
 8008870:	e015      	b.n	800889e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	697a      	ldr	r2, [r7, #20]
 8008878:	429a      	cmp	r2, r3
 800887a:	d20b      	bcs.n	8008894 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	681a      	ldr	r2, [r3, #0]
 8008880:	697b      	ldr	r3, [r7, #20]
 8008882:	1ad2      	subs	r2, r2, r3
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f7ff ff99 	bl	80087c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800888e:	2300      	movs	r3, #0
 8008890:	61fb      	str	r3, [r7, #28]
 8008892:	e004      	b.n	800889e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	2200      	movs	r2, #0
 8008898:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800889a:	2301      	movs	r3, #1
 800889c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800889e:	f000 ff8d 	bl	80097bc <vPortExitCritical>

	return xReturn;
 80088a2:	69fb      	ldr	r3, [r7, #28]
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3720      	adds	r7, #32
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}
 80088ac:	20001238 	.word	0x20001238
 80088b0:	2000124c 	.word	0x2000124c

080088b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80088b4:	b480      	push	{r7}
 80088b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80088b8:	4b03      	ldr	r3, [pc, #12]	@ (80088c8 <vTaskMissedYield+0x14>)
 80088ba:	2201      	movs	r2, #1
 80088bc:	601a      	str	r2, [r3, #0]
}
 80088be:	bf00      	nop
 80088c0:	46bd      	mov	sp, r7
 80088c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c6:	4770      	bx	lr
 80088c8:	20001248 	.word	0x20001248

080088cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b082      	sub	sp, #8
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80088d4:	f000 f852 	bl	800897c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80088d8:	4b06      	ldr	r3, [pc, #24]	@ (80088f4 <prvIdleTask+0x28>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	2b01      	cmp	r3, #1
 80088de:	d9f9      	bls.n	80088d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80088e0:	4b05      	ldr	r3, [pc, #20]	@ (80088f8 <prvIdleTask+0x2c>)
 80088e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088e6:	601a      	str	r2, [r3, #0]
 80088e8:	f3bf 8f4f 	dsb	sy
 80088ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80088f0:	e7f0      	b.n	80088d4 <prvIdleTask+0x8>
 80088f2:	bf00      	nop
 80088f4:	20000d64 	.word	0x20000d64
 80088f8:	e000ed04 	.word	0xe000ed04

080088fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b082      	sub	sp, #8
 8008900:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008902:	2300      	movs	r3, #0
 8008904:	607b      	str	r3, [r7, #4]
 8008906:	e00c      	b.n	8008922 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008908:	687a      	ldr	r2, [r7, #4]
 800890a:	4613      	mov	r3, r2
 800890c:	009b      	lsls	r3, r3, #2
 800890e:	4413      	add	r3, r2
 8008910:	009b      	lsls	r3, r3, #2
 8008912:	4a12      	ldr	r2, [pc, #72]	@ (800895c <prvInitialiseTaskLists+0x60>)
 8008914:	4413      	add	r3, r2
 8008916:	4618      	mov	r0, r3
 8008918:	f7fe f9a4 	bl	8006c64 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	3301      	adds	r3, #1
 8008920:	607b      	str	r3, [r7, #4]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2b37      	cmp	r3, #55	@ 0x37
 8008926:	d9ef      	bls.n	8008908 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008928:	480d      	ldr	r0, [pc, #52]	@ (8008960 <prvInitialiseTaskLists+0x64>)
 800892a:	f7fe f99b 	bl	8006c64 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800892e:	480d      	ldr	r0, [pc, #52]	@ (8008964 <prvInitialiseTaskLists+0x68>)
 8008930:	f7fe f998 	bl	8006c64 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008934:	480c      	ldr	r0, [pc, #48]	@ (8008968 <prvInitialiseTaskLists+0x6c>)
 8008936:	f7fe f995 	bl	8006c64 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800893a:	480c      	ldr	r0, [pc, #48]	@ (800896c <prvInitialiseTaskLists+0x70>)
 800893c:	f7fe f992 	bl	8006c64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008940:	480b      	ldr	r0, [pc, #44]	@ (8008970 <prvInitialiseTaskLists+0x74>)
 8008942:	f7fe f98f 	bl	8006c64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008946:	4b0b      	ldr	r3, [pc, #44]	@ (8008974 <prvInitialiseTaskLists+0x78>)
 8008948:	4a05      	ldr	r2, [pc, #20]	@ (8008960 <prvInitialiseTaskLists+0x64>)
 800894a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800894c:	4b0a      	ldr	r3, [pc, #40]	@ (8008978 <prvInitialiseTaskLists+0x7c>)
 800894e:	4a05      	ldr	r2, [pc, #20]	@ (8008964 <prvInitialiseTaskLists+0x68>)
 8008950:	601a      	str	r2, [r3, #0]
}
 8008952:	bf00      	nop
 8008954:	3708      	adds	r7, #8
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}
 800895a:	bf00      	nop
 800895c:	20000d64 	.word	0x20000d64
 8008960:	200011c4 	.word	0x200011c4
 8008964:	200011d8 	.word	0x200011d8
 8008968:	200011f4 	.word	0x200011f4
 800896c:	20001208 	.word	0x20001208
 8008970:	20001220 	.word	0x20001220
 8008974:	200011ec 	.word	0x200011ec
 8008978:	200011f0 	.word	0x200011f0

0800897c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b082      	sub	sp, #8
 8008980:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008982:	e019      	b.n	80089b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008984:	f000 fee8 	bl	8009758 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008988:	4b10      	ldr	r3, [pc, #64]	@ (80089cc <prvCheckTasksWaitingTermination+0x50>)
 800898a:	68db      	ldr	r3, [r3, #12]
 800898c:	68db      	ldr	r3, [r3, #12]
 800898e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	3304      	adds	r3, #4
 8008994:	4618      	mov	r0, r3
 8008996:	f7fe f9ef 	bl	8006d78 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800899a:	4b0d      	ldr	r3, [pc, #52]	@ (80089d0 <prvCheckTasksWaitingTermination+0x54>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	3b01      	subs	r3, #1
 80089a0:	4a0b      	ldr	r2, [pc, #44]	@ (80089d0 <prvCheckTasksWaitingTermination+0x54>)
 80089a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80089a4:	4b0b      	ldr	r3, [pc, #44]	@ (80089d4 <prvCheckTasksWaitingTermination+0x58>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	3b01      	subs	r3, #1
 80089aa:	4a0a      	ldr	r2, [pc, #40]	@ (80089d4 <prvCheckTasksWaitingTermination+0x58>)
 80089ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80089ae:	f000 ff05 	bl	80097bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f000 f810 	bl	80089d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80089b8:	4b06      	ldr	r3, [pc, #24]	@ (80089d4 <prvCheckTasksWaitingTermination+0x58>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d1e1      	bne.n	8008984 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80089c0:	bf00      	nop
 80089c2:	bf00      	nop
 80089c4:	3708      	adds	r7, #8
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}
 80089ca:	bf00      	nop
 80089cc:	20001208 	.word	0x20001208
 80089d0:	20001234 	.word	0x20001234
 80089d4:	2000121c 	.word	0x2000121c

080089d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b084      	sub	sp, #16
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d108      	bne.n	80089fc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089ee:	4618      	mov	r0, r3
 80089f0:	f001 f8a2 	bl	8009b38 <vPortFree>
				vPortFree( pxTCB );
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f001 f89f 	bl	8009b38 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80089fa:	e019      	b.n	8008a30 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008a02:	2b01      	cmp	r3, #1
 8008a04:	d103      	bne.n	8008a0e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f001 f896 	bl	8009b38 <vPortFree>
	}
 8008a0c:	e010      	b.n	8008a30 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008a14:	2b02      	cmp	r3, #2
 8008a16:	d00b      	beq.n	8008a30 <prvDeleteTCB+0x58>
	__asm volatile
 8008a18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a1c:	f383 8811 	msr	BASEPRI, r3
 8008a20:	f3bf 8f6f 	isb	sy
 8008a24:	f3bf 8f4f 	dsb	sy
 8008a28:	60fb      	str	r3, [r7, #12]
}
 8008a2a:	bf00      	nop
 8008a2c:	bf00      	nop
 8008a2e:	e7fd      	b.n	8008a2c <prvDeleteTCB+0x54>
	}
 8008a30:	bf00      	nop
 8008a32:	3710      	adds	r7, #16
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}

08008a38 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b083      	sub	sp, #12
 8008a3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a3e:	4b0c      	ldr	r3, [pc, #48]	@ (8008a70 <prvResetNextTaskUnblockTime+0x38>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d104      	bne.n	8008a52 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008a48:	4b0a      	ldr	r3, [pc, #40]	@ (8008a74 <prvResetNextTaskUnblockTime+0x3c>)
 8008a4a:	f04f 32ff 	mov.w	r2, #4294967295
 8008a4e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008a50:	e008      	b.n	8008a64 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a52:	4b07      	ldr	r3, [pc, #28]	@ (8008a70 <prvResetNextTaskUnblockTime+0x38>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	68db      	ldr	r3, [r3, #12]
 8008a58:	68db      	ldr	r3, [r3, #12]
 8008a5a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	4a04      	ldr	r2, [pc, #16]	@ (8008a74 <prvResetNextTaskUnblockTime+0x3c>)
 8008a62:	6013      	str	r3, [r2, #0]
}
 8008a64:	bf00      	nop
 8008a66:	370c      	adds	r7, #12
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6e:	4770      	bx	lr
 8008a70:	200011ec 	.word	0x200011ec
 8008a74:	20001254 	.word	0x20001254

08008a78 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008a78:	b480      	push	{r7}
 8008a7a:	b083      	sub	sp, #12
 8008a7c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008a7e:	4b0b      	ldr	r3, [pc, #44]	@ (8008aac <xTaskGetSchedulerState+0x34>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d102      	bne.n	8008a8c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008a86:	2301      	movs	r3, #1
 8008a88:	607b      	str	r3, [r7, #4]
 8008a8a:	e008      	b.n	8008a9e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a8c:	4b08      	ldr	r3, [pc, #32]	@ (8008ab0 <xTaskGetSchedulerState+0x38>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d102      	bne.n	8008a9a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008a94:	2302      	movs	r3, #2
 8008a96:	607b      	str	r3, [r7, #4]
 8008a98:	e001      	b.n	8008a9e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008a9e:	687b      	ldr	r3, [r7, #4]
	}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	370c      	adds	r7, #12
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aaa:	4770      	bx	lr
 8008aac:	20001240 	.word	0x20001240
 8008ab0:	2000125c 	.word	0x2000125c

08008ab4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b084      	sub	sp, #16
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d051      	beq.n	8008b6e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ace:	4b2a      	ldr	r3, [pc, #168]	@ (8008b78 <xTaskPriorityInherit+0xc4>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d241      	bcs.n	8008b5c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	699b      	ldr	r3, [r3, #24]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	db06      	blt.n	8008aee <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ae0:	4b25      	ldr	r3, [pc, #148]	@ (8008b78 <xTaskPriorityInherit+0xc4>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ae6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	6959      	ldr	r1, [r3, #20]
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008af6:	4613      	mov	r3, r2
 8008af8:	009b      	lsls	r3, r3, #2
 8008afa:	4413      	add	r3, r2
 8008afc:	009b      	lsls	r3, r3, #2
 8008afe:	4a1f      	ldr	r2, [pc, #124]	@ (8008b7c <xTaskPriorityInherit+0xc8>)
 8008b00:	4413      	add	r3, r2
 8008b02:	4299      	cmp	r1, r3
 8008b04:	d122      	bne.n	8008b4c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	3304      	adds	r3, #4
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f7fe f934 	bl	8006d78 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008b10:	4b19      	ldr	r3, [pc, #100]	@ (8008b78 <xTaskPriorityInherit+0xc4>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b1e:	4b18      	ldr	r3, [pc, #96]	@ (8008b80 <xTaskPriorityInherit+0xcc>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	429a      	cmp	r2, r3
 8008b24:	d903      	bls.n	8008b2e <xTaskPriorityInherit+0x7a>
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b2a:	4a15      	ldr	r2, [pc, #84]	@ (8008b80 <xTaskPriorityInherit+0xcc>)
 8008b2c:	6013      	str	r3, [r2, #0]
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b32:	4613      	mov	r3, r2
 8008b34:	009b      	lsls	r3, r3, #2
 8008b36:	4413      	add	r3, r2
 8008b38:	009b      	lsls	r3, r3, #2
 8008b3a:	4a10      	ldr	r2, [pc, #64]	@ (8008b7c <xTaskPriorityInherit+0xc8>)
 8008b3c:	441a      	add	r2, r3
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	3304      	adds	r3, #4
 8008b42:	4619      	mov	r1, r3
 8008b44:	4610      	mov	r0, r2
 8008b46:	f7fe f8ba 	bl	8006cbe <vListInsertEnd>
 8008b4a:	e004      	b.n	8008b56 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8008b78 <xTaskPriorityInherit+0xc4>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008b56:	2301      	movs	r3, #1
 8008b58:	60fb      	str	r3, [r7, #12]
 8008b5a:	e008      	b.n	8008b6e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008b60:	4b05      	ldr	r3, [pc, #20]	@ (8008b78 <xTaskPriorityInherit+0xc4>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b66:	429a      	cmp	r2, r3
 8008b68:	d201      	bcs.n	8008b6e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
	}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3710      	adds	r7, #16
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}
 8008b78:	20000d60 	.word	0x20000d60
 8008b7c:	20000d64 	.word	0x20000d64
 8008b80:	2000123c 	.word	0x2000123c

08008b84 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b086      	sub	sp, #24
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008b90:	2300      	movs	r3, #0
 8008b92:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d058      	beq.n	8008c4c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008b9a:	4b2f      	ldr	r3, [pc, #188]	@ (8008c58 <xTaskPriorityDisinherit+0xd4>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	693a      	ldr	r2, [r7, #16]
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	d00b      	beq.n	8008bbc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ba8:	f383 8811 	msr	BASEPRI, r3
 8008bac:	f3bf 8f6f 	isb	sy
 8008bb0:	f3bf 8f4f 	dsb	sy
 8008bb4:	60fb      	str	r3, [r7, #12]
}
 8008bb6:	bf00      	nop
 8008bb8:	bf00      	nop
 8008bba:	e7fd      	b.n	8008bb8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d10b      	bne.n	8008bdc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008bc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bc8:	f383 8811 	msr	BASEPRI, r3
 8008bcc:	f3bf 8f6f 	isb	sy
 8008bd0:	f3bf 8f4f 	dsb	sy
 8008bd4:	60bb      	str	r3, [r7, #8]
}
 8008bd6:	bf00      	nop
 8008bd8:	bf00      	nop
 8008bda:	e7fd      	b.n	8008bd8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008bdc:	693b      	ldr	r3, [r7, #16]
 8008bde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008be0:	1e5a      	subs	r2, r3, #1
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008be6:	693b      	ldr	r3, [r7, #16]
 8008be8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	d02c      	beq.n	8008c4c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d128      	bne.n	8008c4c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	3304      	adds	r3, #4
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f7fe f8ba 	bl	8006d78 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008c04:	693b      	ldr	r3, [r7, #16]
 8008c06:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c10:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c1c:	4b0f      	ldr	r3, [pc, #60]	@ (8008c5c <xTaskPriorityDisinherit+0xd8>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	429a      	cmp	r2, r3
 8008c22:	d903      	bls.n	8008c2c <xTaskPriorityDisinherit+0xa8>
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c28:	4a0c      	ldr	r2, [pc, #48]	@ (8008c5c <xTaskPriorityDisinherit+0xd8>)
 8008c2a:	6013      	str	r3, [r2, #0]
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c30:	4613      	mov	r3, r2
 8008c32:	009b      	lsls	r3, r3, #2
 8008c34:	4413      	add	r3, r2
 8008c36:	009b      	lsls	r3, r3, #2
 8008c38:	4a09      	ldr	r2, [pc, #36]	@ (8008c60 <xTaskPriorityDisinherit+0xdc>)
 8008c3a:	441a      	add	r2, r3
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	3304      	adds	r3, #4
 8008c40:	4619      	mov	r1, r3
 8008c42:	4610      	mov	r0, r2
 8008c44:	f7fe f83b 	bl	8006cbe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008c48:	2301      	movs	r3, #1
 8008c4a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008c4c:	697b      	ldr	r3, [r7, #20]
	}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3718      	adds	r7, #24
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}
 8008c56:	bf00      	nop
 8008c58:	20000d60 	.word	0x20000d60
 8008c5c:	2000123c 	.word	0x2000123c
 8008c60:	20000d64 	.word	0x20000d64

08008c64 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b088      	sub	sp, #32
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
 8008c6c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008c72:	2301      	movs	r3, #1
 8008c74:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d06c      	beq.n	8008d56 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008c7c:	69bb      	ldr	r3, [r7, #24]
 8008c7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d10b      	bne.n	8008c9c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8008c84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c88:	f383 8811 	msr	BASEPRI, r3
 8008c8c:	f3bf 8f6f 	isb	sy
 8008c90:	f3bf 8f4f 	dsb	sy
 8008c94:	60fb      	str	r3, [r7, #12]
}
 8008c96:	bf00      	nop
 8008c98:	bf00      	nop
 8008c9a:	e7fd      	b.n	8008c98 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008c9c:	69bb      	ldr	r3, [r7, #24]
 8008c9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ca0:	683a      	ldr	r2, [r7, #0]
 8008ca2:	429a      	cmp	r2, r3
 8008ca4:	d902      	bls.n	8008cac <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	61fb      	str	r3, [r7, #28]
 8008caa:	e002      	b.n	8008cb2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008cac:	69bb      	ldr	r3, [r7, #24]
 8008cae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008cb0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008cb2:	69bb      	ldr	r3, [r7, #24]
 8008cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cb6:	69fa      	ldr	r2, [r7, #28]
 8008cb8:	429a      	cmp	r2, r3
 8008cba:	d04c      	beq.n	8008d56 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008cbc:	69bb      	ldr	r3, [r7, #24]
 8008cbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008cc0:	697a      	ldr	r2, [r7, #20]
 8008cc2:	429a      	cmp	r2, r3
 8008cc4:	d147      	bne.n	8008d56 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008cc6:	4b26      	ldr	r3, [pc, #152]	@ (8008d60 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	69ba      	ldr	r2, [r7, #24]
 8008ccc:	429a      	cmp	r2, r3
 8008cce:	d10b      	bne.n	8008ce8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8008cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cd4:	f383 8811 	msr	BASEPRI, r3
 8008cd8:	f3bf 8f6f 	isb	sy
 8008cdc:	f3bf 8f4f 	dsb	sy
 8008ce0:	60bb      	str	r3, [r7, #8]
}
 8008ce2:	bf00      	nop
 8008ce4:	bf00      	nop
 8008ce6:	e7fd      	b.n	8008ce4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008ce8:	69bb      	ldr	r3, [r7, #24]
 8008cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cec:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008cee:	69bb      	ldr	r3, [r7, #24]
 8008cf0:	69fa      	ldr	r2, [r7, #28]
 8008cf2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008cf4:	69bb      	ldr	r3, [r7, #24]
 8008cf6:	699b      	ldr	r3, [r3, #24]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	db04      	blt.n	8008d06 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cfc:	69fb      	ldr	r3, [r7, #28]
 8008cfe:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008d02:	69bb      	ldr	r3, [r7, #24]
 8008d04:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008d06:	69bb      	ldr	r3, [r7, #24]
 8008d08:	6959      	ldr	r1, [r3, #20]
 8008d0a:	693a      	ldr	r2, [r7, #16]
 8008d0c:	4613      	mov	r3, r2
 8008d0e:	009b      	lsls	r3, r3, #2
 8008d10:	4413      	add	r3, r2
 8008d12:	009b      	lsls	r3, r3, #2
 8008d14:	4a13      	ldr	r2, [pc, #76]	@ (8008d64 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008d16:	4413      	add	r3, r2
 8008d18:	4299      	cmp	r1, r3
 8008d1a:	d11c      	bne.n	8008d56 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d1c:	69bb      	ldr	r3, [r7, #24]
 8008d1e:	3304      	adds	r3, #4
 8008d20:	4618      	mov	r0, r3
 8008d22:	f7fe f829 	bl	8006d78 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008d26:	69bb      	ldr	r3, [r7, #24]
 8008d28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d2a:	4b0f      	ldr	r3, [pc, #60]	@ (8008d68 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	429a      	cmp	r2, r3
 8008d30:	d903      	bls.n	8008d3a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8008d32:	69bb      	ldr	r3, [r7, #24]
 8008d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d36:	4a0c      	ldr	r2, [pc, #48]	@ (8008d68 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008d38:	6013      	str	r3, [r2, #0]
 8008d3a:	69bb      	ldr	r3, [r7, #24]
 8008d3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d3e:	4613      	mov	r3, r2
 8008d40:	009b      	lsls	r3, r3, #2
 8008d42:	4413      	add	r3, r2
 8008d44:	009b      	lsls	r3, r3, #2
 8008d46:	4a07      	ldr	r2, [pc, #28]	@ (8008d64 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008d48:	441a      	add	r2, r3
 8008d4a:	69bb      	ldr	r3, [r7, #24]
 8008d4c:	3304      	adds	r3, #4
 8008d4e:	4619      	mov	r1, r3
 8008d50:	4610      	mov	r0, r2
 8008d52:	f7fd ffb4 	bl	8006cbe <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008d56:	bf00      	nop
 8008d58:	3720      	adds	r7, #32
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
 8008d5e:	bf00      	nop
 8008d60:	20000d60 	.word	0x20000d60
 8008d64:	20000d64 	.word	0x20000d64
 8008d68:	2000123c 	.word	0x2000123c

08008d6c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008d6c:	b480      	push	{r7}
 8008d6e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008d70:	4b07      	ldr	r3, [pc, #28]	@ (8008d90 <pvTaskIncrementMutexHeldCount+0x24>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d004      	beq.n	8008d82 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008d78:	4b05      	ldr	r3, [pc, #20]	@ (8008d90 <pvTaskIncrementMutexHeldCount+0x24>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008d7e:	3201      	adds	r2, #1
 8008d80:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8008d82:	4b03      	ldr	r3, [pc, #12]	@ (8008d90 <pvTaskIncrementMutexHeldCount+0x24>)
 8008d84:	681b      	ldr	r3, [r3, #0]
	}
 8008d86:	4618      	mov	r0, r3
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8e:	4770      	bx	lr
 8008d90:	20000d60 	.word	0x20000d60

08008d94 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b084      	sub	sp, #16
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008d9e:	4b21      	ldr	r3, [pc, #132]	@ (8008e24 <prvAddCurrentTaskToDelayedList+0x90>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008da4:	4b20      	ldr	r3, [pc, #128]	@ (8008e28 <prvAddCurrentTaskToDelayedList+0x94>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	3304      	adds	r3, #4
 8008daa:	4618      	mov	r0, r3
 8008dac:	f7fd ffe4 	bl	8006d78 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008db6:	d10a      	bne.n	8008dce <prvAddCurrentTaskToDelayedList+0x3a>
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d007      	beq.n	8008dce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008dbe:	4b1a      	ldr	r3, [pc, #104]	@ (8008e28 <prvAddCurrentTaskToDelayedList+0x94>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	3304      	adds	r3, #4
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	4819      	ldr	r0, [pc, #100]	@ (8008e2c <prvAddCurrentTaskToDelayedList+0x98>)
 8008dc8:	f7fd ff79 	bl	8006cbe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008dcc:	e026      	b.n	8008e1c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008dce:	68fa      	ldr	r2, [r7, #12]
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	4413      	add	r3, r2
 8008dd4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008dd6:	4b14      	ldr	r3, [pc, #80]	@ (8008e28 <prvAddCurrentTaskToDelayedList+0x94>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	68ba      	ldr	r2, [r7, #8]
 8008ddc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008dde:	68ba      	ldr	r2, [r7, #8]
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	429a      	cmp	r2, r3
 8008de4:	d209      	bcs.n	8008dfa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008de6:	4b12      	ldr	r3, [pc, #72]	@ (8008e30 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008de8:	681a      	ldr	r2, [r3, #0]
 8008dea:	4b0f      	ldr	r3, [pc, #60]	@ (8008e28 <prvAddCurrentTaskToDelayedList+0x94>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	3304      	adds	r3, #4
 8008df0:	4619      	mov	r1, r3
 8008df2:	4610      	mov	r0, r2
 8008df4:	f7fd ff87 	bl	8006d06 <vListInsert>
}
 8008df8:	e010      	b.n	8008e1c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008dfa:	4b0e      	ldr	r3, [pc, #56]	@ (8008e34 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008dfc:	681a      	ldr	r2, [r3, #0]
 8008dfe:	4b0a      	ldr	r3, [pc, #40]	@ (8008e28 <prvAddCurrentTaskToDelayedList+0x94>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	3304      	adds	r3, #4
 8008e04:	4619      	mov	r1, r3
 8008e06:	4610      	mov	r0, r2
 8008e08:	f7fd ff7d 	bl	8006d06 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008e0c:	4b0a      	ldr	r3, [pc, #40]	@ (8008e38 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	68ba      	ldr	r2, [r7, #8]
 8008e12:	429a      	cmp	r2, r3
 8008e14:	d202      	bcs.n	8008e1c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008e16:	4a08      	ldr	r2, [pc, #32]	@ (8008e38 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	6013      	str	r3, [r2, #0]
}
 8008e1c:	bf00      	nop
 8008e1e:	3710      	adds	r7, #16
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}
 8008e24:	20001238 	.word	0x20001238
 8008e28:	20000d60 	.word	0x20000d60
 8008e2c:	20001220 	.word	0x20001220
 8008e30:	200011f0 	.word	0x200011f0
 8008e34:	200011ec 	.word	0x200011ec
 8008e38:	20001254 	.word	0x20001254

08008e3c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b08a      	sub	sp, #40	@ 0x28
 8008e40:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008e42:	2300      	movs	r3, #0
 8008e44:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008e46:	f000 fb13 	bl	8009470 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008e4a:	4b1d      	ldr	r3, [pc, #116]	@ (8008ec0 <xTimerCreateTimerTask+0x84>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d021      	beq.n	8008e96 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008e52:	2300      	movs	r3, #0
 8008e54:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008e56:	2300      	movs	r3, #0
 8008e58:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008e5a:	1d3a      	adds	r2, r7, #4
 8008e5c:	f107 0108 	add.w	r1, r7, #8
 8008e60:	f107 030c 	add.w	r3, r7, #12
 8008e64:	4618      	mov	r0, r3
 8008e66:	f7fd fee3 	bl	8006c30 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008e6a:	6879      	ldr	r1, [r7, #4]
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	68fa      	ldr	r2, [r7, #12]
 8008e70:	9202      	str	r2, [sp, #8]
 8008e72:	9301      	str	r3, [sp, #4]
 8008e74:	2302      	movs	r3, #2
 8008e76:	9300      	str	r3, [sp, #0]
 8008e78:	2300      	movs	r3, #0
 8008e7a:	460a      	mov	r2, r1
 8008e7c:	4911      	ldr	r1, [pc, #68]	@ (8008ec4 <xTimerCreateTimerTask+0x88>)
 8008e7e:	4812      	ldr	r0, [pc, #72]	@ (8008ec8 <xTimerCreateTimerTask+0x8c>)
 8008e80:	f7fe ffd0 	bl	8007e24 <xTaskCreateStatic>
 8008e84:	4603      	mov	r3, r0
 8008e86:	4a11      	ldr	r2, [pc, #68]	@ (8008ecc <xTimerCreateTimerTask+0x90>)
 8008e88:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008e8a:	4b10      	ldr	r3, [pc, #64]	@ (8008ecc <xTimerCreateTimerTask+0x90>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d001      	beq.n	8008e96 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008e92:	2301      	movs	r3, #1
 8008e94:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d10b      	bne.n	8008eb4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008e9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ea0:	f383 8811 	msr	BASEPRI, r3
 8008ea4:	f3bf 8f6f 	isb	sy
 8008ea8:	f3bf 8f4f 	dsb	sy
 8008eac:	613b      	str	r3, [r7, #16]
}
 8008eae:	bf00      	nop
 8008eb0:	bf00      	nop
 8008eb2:	e7fd      	b.n	8008eb0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008eb4:	697b      	ldr	r3, [r7, #20]
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	3718      	adds	r7, #24
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}
 8008ebe:	bf00      	nop
 8008ec0:	20001290 	.word	0x20001290
 8008ec4:	0800ce30 	.word	0x0800ce30
 8008ec8:	08009009 	.word	0x08009009
 8008ecc:	20001294 	.word	0x20001294

08008ed0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b08a      	sub	sp, #40	@ 0x28
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	60f8      	str	r0, [r7, #12]
 8008ed8:	60b9      	str	r1, [r7, #8]
 8008eda:	607a      	str	r2, [r7, #4]
 8008edc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d10b      	bne.n	8008f00 <xTimerGenericCommand+0x30>
	__asm volatile
 8008ee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eec:	f383 8811 	msr	BASEPRI, r3
 8008ef0:	f3bf 8f6f 	isb	sy
 8008ef4:	f3bf 8f4f 	dsb	sy
 8008ef8:	623b      	str	r3, [r7, #32]
}
 8008efa:	bf00      	nop
 8008efc:	bf00      	nop
 8008efe:	e7fd      	b.n	8008efc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008f00:	4b19      	ldr	r3, [pc, #100]	@ (8008f68 <xTimerGenericCommand+0x98>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d02a      	beq.n	8008f5e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	2b05      	cmp	r3, #5
 8008f18:	dc18      	bgt.n	8008f4c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008f1a:	f7ff fdad 	bl	8008a78 <xTaskGetSchedulerState>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	2b02      	cmp	r3, #2
 8008f22:	d109      	bne.n	8008f38 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008f24:	4b10      	ldr	r3, [pc, #64]	@ (8008f68 <xTimerGenericCommand+0x98>)
 8008f26:	6818      	ldr	r0, [r3, #0]
 8008f28:	f107 0110 	add.w	r1, r7, #16
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f30:	f7fe f900 	bl	8007134 <xQueueGenericSend>
 8008f34:	6278      	str	r0, [r7, #36]	@ 0x24
 8008f36:	e012      	b.n	8008f5e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008f38:	4b0b      	ldr	r3, [pc, #44]	@ (8008f68 <xTimerGenericCommand+0x98>)
 8008f3a:	6818      	ldr	r0, [r3, #0]
 8008f3c:	f107 0110 	add.w	r1, r7, #16
 8008f40:	2300      	movs	r3, #0
 8008f42:	2200      	movs	r2, #0
 8008f44:	f7fe f8f6 	bl	8007134 <xQueueGenericSend>
 8008f48:	6278      	str	r0, [r7, #36]	@ 0x24
 8008f4a:	e008      	b.n	8008f5e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008f4c:	4b06      	ldr	r3, [pc, #24]	@ (8008f68 <xTimerGenericCommand+0x98>)
 8008f4e:	6818      	ldr	r0, [r3, #0]
 8008f50:	f107 0110 	add.w	r1, r7, #16
 8008f54:	2300      	movs	r3, #0
 8008f56:	683a      	ldr	r2, [r7, #0]
 8008f58:	f7fe f9ee 	bl	8007338 <xQueueGenericSendFromISR>
 8008f5c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	3728      	adds	r7, #40	@ 0x28
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}
 8008f68:	20001290 	.word	0x20001290

08008f6c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b088      	sub	sp, #32
 8008f70:	af02      	add	r7, sp, #8
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f76:	4b23      	ldr	r3, [pc, #140]	@ (8009004 <prvProcessExpiredTimer+0x98>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	68db      	ldr	r3, [r3, #12]
 8008f7c:	68db      	ldr	r3, [r3, #12]
 8008f7e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	3304      	adds	r3, #4
 8008f84:	4618      	mov	r0, r3
 8008f86:	f7fd fef7 	bl	8006d78 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008f90:	f003 0304 	and.w	r3, r3, #4
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d023      	beq.n	8008fe0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	699a      	ldr	r2, [r3, #24]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	18d1      	adds	r1, r2, r3
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	683a      	ldr	r2, [r7, #0]
 8008fa4:	6978      	ldr	r0, [r7, #20]
 8008fa6:	f000 f8d5 	bl	8009154 <prvInsertTimerInActiveList>
 8008faa:	4603      	mov	r3, r0
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d020      	beq.n	8008ff2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	9300      	str	r3, [sp, #0]
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	687a      	ldr	r2, [r7, #4]
 8008fb8:	2100      	movs	r1, #0
 8008fba:	6978      	ldr	r0, [r7, #20]
 8008fbc:	f7ff ff88 	bl	8008ed0 <xTimerGenericCommand>
 8008fc0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d114      	bne.n	8008ff2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008fc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fcc:	f383 8811 	msr	BASEPRI, r3
 8008fd0:	f3bf 8f6f 	isb	sy
 8008fd4:	f3bf 8f4f 	dsb	sy
 8008fd8:	60fb      	str	r3, [r7, #12]
}
 8008fda:	bf00      	nop
 8008fdc:	bf00      	nop
 8008fde:	e7fd      	b.n	8008fdc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008fe6:	f023 0301 	bic.w	r3, r3, #1
 8008fea:	b2da      	uxtb	r2, r3
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008ff2:	697b      	ldr	r3, [r7, #20]
 8008ff4:	6a1b      	ldr	r3, [r3, #32]
 8008ff6:	6978      	ldr	r0, [r7, #20]
 8008ff8:	4798      	blx	r3
}
 8008ffa:	bf00      	nop
 8008ffc:	3718      	adds	r7, #24
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}
 8009002:	bf00      	nop
 8009004:	20001288 	.word	0x20001288

08009008 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b084      	sub	sp, #16
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009010:	f107 0308 	add.w	r3, r7, #8
 8009014:	4618      	mov	r0, r3
 8009016:	f000 f859 	bl	80090cc <prvGetNextExpireTime>
 800901a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	4619      	mov	r1, r3
 8009020:	68f8      	ldr	r0, [r7, #12]
 8009022:	f000 f805 	bl	8009030 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009026:	f000 f8d7 	bl	80091d8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800902a:	bf00      	nop
 800902c:	e7f0      	b.n	8009010 <prvTimerTask+0x8>
	...

08009030 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b084      	sub	sp, #16
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
 8009038:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800903a:	f7ff f937 	bl	80082ac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800903e:	f107 0308 	add.w	r3, r7, #8
 8009042:	4618      	mov	r0, r3
 8009044:	f000 f866 	bl	8009114 <prvSampleTimeNow>
 8009048:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d130      	bne.n	80090b2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d10a      	bne.n	800906c <prvProcessTimerOrBlockTask+0x3c>
 8009056:	687a      	ldr	r2, [r7, #4]
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	429a      	cmp	r2, r3
 800905c:	d806      	bhi.n	800906c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800905e:	f7ff f933 	bl	80082c8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009062:	68f9      	ldr	r1, [r7, #12]
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f7ff ff81 	bl	8008f6c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800906a:	e024      	b.n	80090b6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d008      	beq.n	8009084 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009072:	4b13      	ldr	r3, [pc, #76]	@ (80090c0 <prvProcessTimerOrBlockTask+0x90>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d101      	bne.n	8009080 <prvProcessTimerOrBlockTask+0x50>
 800907c:	2301      	movs	r3, #1
 800907e:	e000      	b.n	8009082 <prvProcessTimerOrBlockTask+0x52>
 8009080:	2300      	movs	r3, #0
 8009082:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009084:	4b0f      	ldr	r3, [pc, #60]	@ (80090c4 <prvProcessTimerOrBlockTask+0x94>)
 8009086:	6818      	ldr	r0, [r3, #0]
 8009088:	687a      	ldr	r2, [r7, #4]
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	1ad3      	subs	r3, r2, r3
 800908e:	683a      	ldr	r2, [r7, #0]
 8009090:	4619      	mov	r1, r3
 8009092:	f7fe fe93 	bl	8007dbc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009096:	f7ff f917 	bl	80082c8 <xTaskResumeAll>
 800909a:	4603      	mov	r3, r0
 800909c:	2b00      	cmp	r3, #0
 800909e:	d10a      	bne.n	80090b6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80090a0:	4b09      	ldr	r3, [pc, #36]	@ (80090c8 <prvProcessTimerOrBlockTask+0x98>)
 80090a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80090a6:	601a      	str	r2, [r3, #0]
 80090a8:	f3bf 8f4f 	dsb	sy
 80090ac:	f3bf 8f6f 	isb	sy
}
 80090b0:	e001      	b.n	80090b6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80090b2:	f7ff f909 	bl	80082c8 <xTaskResumeAll>
}
 80090b6:	bf00      	nop
 80090b8:	3710      	adds	r7, #16
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}
 80090be:	bf00      	nop
 80090c0:	2000128c 	.word	0x2000128c
 80090c4:	20001290 	.word	0x20001290
 80090c8:	e000ed04 	.word	0xe000ed04

080090cc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80090cc:	b480      	push	{r7}
 80090ce:	b085      	sub	sp, #20
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80090d4:	4b0e      	ldr	r3, [pc, #56]	@ (8009110 <prvGetNextExpireTime+0x44>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d101      	bne.n	80090e2 <prvGetNextExpireTime+0x16>
 80090de:	2201      	movs	r2, #1
 80090e0:	e000      	b.n	80090e4 <prvGetNextExpireTime+0x18>
 80090e2:	2200      	movs	r2, #0
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d105      	bne.n	80090fc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80090f0:	4b07      	ldr	r3, [pc, #28]	@ (8009110 <prvGetNextExpireTime+0x44>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	68db      	ldr	r3, [r3, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	60fb      	str	r3, [r7, #12]
 80090fa:	e001      	b.n	8009100 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80090fc:	2300      	movs	r3, #0
 80090fe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009100:	68fb      	ldr	r3, [r7, #12]
}
 8009102:	4618      	mov	r0, r3
 8009104:	3714      	adds	r7, #20
 8009106:	46bd      	mov	sp, r7
 8009108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910c:	4770      	bx	lr
 800910e:	bf00      	nop
 8009110:	20001288 	.word	0x20001288

08009114 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b084      	sub	sp, #16
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800911c:	f7ff f972 	bl	8008404 <xTaskGetTickCount>
 8009120:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009122:	4b0b      	ldr	r3, [pc, #44]	@ (8009150 <prvSampleTimeNow+0x3c>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	68fa      	ldr	r2, [r7, #12]
 8009128:	429a      	cmp	r2, r3
 800912a:	d205      	bcs.n	8009138 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800912c:	f000 f93a 	bl	80093a4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2201      	movs	r2, #1
 8009134:	601a      	str	r2, [r3, #0]
 8009136:	e002      	b.n	800913e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2200      	movs	r2, #0
 800913c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800913e:	4a04      	ldr	r2, [pc, #16]	@ (8009150 <prvSampleTimeNow+0x3c>)
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009144:	68fb      	ldr	r3, [r7, #12]
}
 8009146:	4618      	mov	r0, r3
 8009148:	3710      	adds	r7, #16
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}
 800914e:	bf00      	nop
 8009150:	20001298 	.word	0x20001298

08009154 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b086      	sub	sp, #24
 8009158:	af00      	add	r7, sp, #0
 800915a:	60f8      	str	r0, [r7, #12]
 800915c:	60b9      	str	r1, [r7, #8]
 800915e:	607a      	str	r2, [r7, #4]
 8009160:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009162:	2300      	movs	r3, #0
 8009164:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	68ba      	ldr	r2, [r7, #8]
 800916a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	68fa      	ldr	r2, [r7, #12]
 8009170:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009172:	68ba      	ldr	r2, [r7, #8]
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	429a      	cmp	r2, r3
 8009178:	d812      	bhi.n	80091a0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800917a:	687a      	ldr	r2, [r7, #4]
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	1ad2      	subs	r2, r2, r3
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	699b      	ldr	r3, [r3, #24]
 8009184:	429a      	cmp	r2, r3
 8009186:	d302      	bcc.n	800918e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009188:	2301      	movs	r3, #1
 800918a:	617b      	str	r3, [r7, #20]
 800918c:	e01b      	b.n	80091c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800918e:	4b10      	ldr	r3, [pc, #64]	@ (80091d0 <prvInsertTimerInActiveList+0x7c>)
 8009190:	681a      	ldr	r2, [r3, #0]
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	3304      	adds	r3, #4
 8009196:	4619      	mov	r1, r3
 8009198:	4610      	mov	r0, r2
 800919a:	f7fd fdb4 	bl	8006d06 <vListInsert>
 800919e:	e012      	b.n	80091c6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80091a0:	687a      	ldr	r2, [r7, #4]
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	429a      	cmp	r2, r3
 80091a6:	d206      	bcs.n	80091b6 <prvInsertTimerInActiveList+0x62>
 80091a8:	68ba      	ldr	r2, [r7, #8]
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	429a      	cmp	r2, r3
 80091ae:	d302      	bcc.n	80091b6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80091b0:	2301      	movs	r3, #1
 80091b2:	617b      	str	r3, [r7, #20]
 80091b4:	e007      	b.n	80091c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80091b6:	4b07      	ldr	r3, [pc, #28]	@ (80091d4 <prvInsertTimerInActiveList+0x80>)
 80091b8:	681a      	ldr	r2, [r3, #0]
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	3304      	adds	r3, #4
 80091be:	4619      	mov	r1, r3
 80091c0:	4610      	mov	r0, r2
 80091c2:	f7fd fda0 	bl	8006d06 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80091c6:	697b      	ldr	r3, [r7, #20]
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3718      	adds	r7, #24
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}
 80091d0:	2000128c 	.word	0x2000128c
 80091d4:	20001288 	.word	0x20001288

080091d8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b08e      	sub	sp, #56	@ 0x38
 80091dc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80091de:	e0ce      	b.n	800937e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	da19      	bge.n	800921a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80091e6:	1d3b      	adds	r3, r7, #4
 80091e8:	3304      	adds	r3, #4
 80091ea:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80091ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d10b      	bne.n	800920a <prvProcessReceivedCommands+0x32>
	__asm volatile
 80091f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091f6:	f383 8811 	msr	BASEPRI, r3
 80091fa:	f3bf 8f6f 	isb	sy
 80091fe:	f3bf 8f4f 	dsb	sy
 8009202:	61fb      	str	r3, [r7, #28]
}
 8009204:	bf00      	nop
 8009206:	bf00      	nop
 8009208:	e7fd      	b.n	8009206 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800920a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009210:	6850      	ldr	r0, [r2, #4]
 8009212:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009214:	6892      	ldr	r2, [r2, #8]
 8009216:	4611      	mov	r1, r2
 8009218:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2b00      	cmp	r3, #0
 800921e:	f2c0 80ae 	blt.w	800937e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009228:	695b      	ldr	r3, [r3, #20]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d004      	beq.n	8009238 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800922e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009230:	3304      	adds	r3, #4
 8009232:	4618      	mov	r0, r3
 8009234:	f7fd fda0 	bl	8006d78 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009238:	463b      	mov	r3, r7
 800923a:	4618      	mov	r0, r3
 800923c:	f7ff ff6a 	bl	8009114 <prvSampleTimeNow>
 8009240:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2b09      	cmp	r3, #9
 8009246:	f200 8097 	bhi.w	8009378 <prvProcessReceivedCommands+0x1a0>
 800924a:	a201      	add	r2, pc, #4	@ (adr r2, 8009250 <prvProcessReceivedCommands+0x78>)
 800924c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009250:	08009279 	.word	0x08009279
 8009254:	08009279 	.word	0x08009279
 8009258:	08009279 	.word	0x08009279
 800925c:	080092ef 	.word	0x080092ef
 8009260:	08009303 	.word	0x08009303
 8009264:	0800934f 	.word	0x0800934f
 8009268:	08009279 	.word	0x08009279
 800926c:	08009279 	.word	0x08009279
 8009270:	080092ef 	.word	0x080092ef
 8009274:	08009303 	.word	0x08009303
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800927a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800927e:	f043 0301 	orr.w	r3, r3, #1
 8009282:	b2da      	uxtb	r2, r3
 8009284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009286:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800928a:	68ba      	ldr	r2, [r7, #8]
 800928c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800928e:	699b      	ldr	r3, [r3, #24]
 8009290:	18d1      	adds	r1, r2, r3
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009296:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009298:	f7ff ff5c 	bl	8009154 <prvInsertTimerInActiveList>
 800929c:	4603      	mov	r3, r0
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d06c      	beq.n	800937c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80092a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092a4:	6a1b      	ldr	r3, [r3, #32]
 80092a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80092a8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80092aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80092b0:	f003 0304 	and.w	r3, r3, #4
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d061      	beq.n	800937c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80092b8:	68ba      	ldr	r2, [r7, #8]
 80092ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092bc:	699b      	ldr	r3, [r3, #24]
 80092be:	441a      	add	r2, r3
 80092c0:	2300      	movs	r3, #0
 80092c2:	9300      	str	r3, [sp, #0]
 80092c4:	2300      	movs	r3, #0
 80092c6:	2100      	movs	r1, #0
 80092c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80092ca:	f7ff fe01 	bl	8008ed0 <xTimerGenericCommand>
 80092ce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80092d0:	6a3b      	ldr	r3, [r7, #32]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d152      	bne.n	800937c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80092d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092da:	f383 8811 	msr	BASEPRI, r3
 80092de:	f3bf 8f6f 	isb	sy
 80092e2:	f3bf 8f4f 	dsb	sy
 80092e6:	61bb      	str	r3, [r7, #24]
}
 80092e8:	bf00      	nop
 80092ea:	bf00      	nop
 80092ec:	e7fd      	b.n	80092ea <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80092ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80092f4:	f023 0301 	bic.w	r3, r3, #1
 80092f8:	b2da      	uxtb	r2, r3
 80092fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092fc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009300:	e03d      	b.n	800937e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009304:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009308:	f043 0301 	orr.w	r3, r3, #1
 800930c:	b2da      	uxtb	r2, r3
 800930e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009310:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009314:	68ba      	ldr	r2, [r7, #8]
 8009316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009318:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800931a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800931c:	699b      	ldr	r3, [r3, #24]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d10b      	bne.n	800933a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009326:	f383 8811 	msr	BASEPRI, r3
 800932a:	f3bf 8f6f 	isb	sy
 800932e:	f3bf 8f4f 	dsb	sy
 8009332:	617b      	str	r3, [r7, #20]
}
 8009334:	bf00      	nop
 8009336:	bf00      	nop
 8009338:	e7fd      	b.n	8009336 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800933a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800933c:	699a      	ldr	r2, [r3, #24]
 800933e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009340:	18d1      	adds	r1, r2, r3
 8009342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009344:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009346:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009348:	f7ff ff04 	bl	8009154 <prvInsertTimerInActiveList>
					break;
 800934c:	e017      	b.n	800937e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800934e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009350:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009354:	f003 0302 	and.w	r3, r3, #2
 8009358:	2b00      	cmp	r3, #0
 800935a:	d103      	bne.n	8009364 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800935c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800935e:	f000 fbeb 	bl	8009b38 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009362:	e00c      	b.n	800937e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009366:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800936a:	f023 0301 	bic.w	r3, r3, #1
 800936e:	b2da      	uxtb	r2, r3
 8009370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009372:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009376:	e002      	b.n	800937e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009378:	bf00      	nop
 800937a:	e000      	b.n	800937e <prvProcessReceivedCommands+0x1a6>
					break;
 800937c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800937e:	4b08      	ldr	r3, [pc, #32]	@ (80093a0 <prvProcessReceivedCommands+0x1c8>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	1d39      	adds	r1, r7, #4
 8009384:	2200      	movs	r2, #0
 8009386:	4618      	mov	r0, r3
 8009388:	f7fe f904 	bl	8007594 <xQueueReceive>
 800938c:	4603      	mov	r3, r0
 800938e:	2b00      	cmp	r3, #0
 8009390:	f47f af26 	bne.w	80091e0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009394:	bf00      	nop
 8009396:	bf00      	nop
 8009398:	3730      	adds	r7, #48	@ 0x30
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}
 800939e:	bf00      	nop
 80093a0:	20001290 	.word	0x20001290

080093a4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b088      	sub	sp, #32
 80093a8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80093aa:	e049      	b.n	8009440 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80093ac:	4b2e      	ldr	r3, [pc, #184]	@ (8009468 <prvSwitchTimerLists+0xc4>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	68db      	ldr	r3, [r3, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093b6:	4b2c      	ldr	r3, [pc, #176]	@ (8009468 <prvSwitchTimerLists+0xc4>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	68db      	ldr	r3, [r3, #12]
 80093bc:	68db      	ldr	r3, [r3, #12]
 80093be:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	3304      	adds	r3, #4
 80093c4:	4618      	mov	r0, r3
 80093c6:	f7fd fcd7 	bl	8006d78 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	6a1b      	ldr	r3, [r3, #32]
 80093ce:	68f8      	ldr	r0, [r7, #12]
 80093d0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80093d8:	f003 0304 	and.w	r3, r3, #4
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d02f      	beq.n	8009440 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	699b      	ldr	r3, [r3, #24]
 80093e4:	693a      	ldr	r2, [r7, #16]
 80093e6:	4413      	add	r3, r2
 80093e8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80093ea:	68ba      	ldr	r2, [r7, #8]
 80093ec:	693b      	ldr	r3, [r7, #16]
 80093ee:	429a      	cmp	r2, r3
 80093f0:	d90e      	bls.n	8009410 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	68ba      	ldr	r2, [r7, #8]
 80093f6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	68fa      	ldr	r2, [r7, #12]
 80093fc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80093fe:	4b1a      	ldr	r3, [pc, #104]	@ (8009468 <prvSwitchTimerLists+0xc4>)
 8009400:	681a      	ldr	r2, [r3, #0]
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	3304      	adds	r3, #4
 8009406:	4619      	mov	r1, r3
 8009408:	4610      	mov	r0, r2
 800940a:	f7fd fc7c 	bl	8006d06 <vListInsert>
 800940e:	e017      	b.n	8009440 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009410:	2300      	movs	r3, #0
 8009412:	9300      	str	r3, [sp, #0]
 8009414:	2300      	movs	r3, #0
 8009416:	693a      	ldr	r2, [r7, #16]
 8009418:	2100      	movs	r1, #0
 800941a:	68f8      	ldr	r0, [r7, #12]
 800941c:	f7ff fd58 	bl	8008ed0 <xTimerGenericCommand>
 8009420:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d10b      	bne.n	8009440 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800942c:	f383 8811 	msr	BASEPRI, r3
 8009430:	f3bf 8f6f 	isb	sy
 8009434:	f3bf 8f4f 	dsb	sy
 8009438:	603b      	str	r3, [r7, #0]
}
 800943a:	bf00      	nop
 800943c:	bf00      	nop
 800943e:	e7fd      	b.n	800943c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009440:	4b09      	ldr	r3, [pc, #36]	@ (8009468 <prvSwitchTimerLists+0xc4>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d1b0      	bne.n	80093ac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800944a:	4b07      	ldr	r3, [pc, #28]	@ (8009468 <prvSwitchTimerLists+0xc4>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009450:	4b06      	ldr	r3, [pc, #24]	@ (800946c <prvSwitchTimerLists+0xc8>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	4a04      	ldr	r2, [pc, #16]	@ (8009468 <prvSwitchTimerLists+0xc4>)
 8009456:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009458:	4a04      	ldr	r2, [pc, #16]	@ (800946c <prvSwitchTimerLists+0xc8>)
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	6013      	str	r3, [r2, #0]
}
 800945e:	bf00      	nop
 8009460:	3718      	adds	r7, #24
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}
 8009466:	bf00      	nop
 8009468:	20001288 	.word	0x20001288
 800946c:	2000128c 	.word	0x2000128c

08009470 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b082      	sub	sp, #8
 8009474:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009476:	f000 f96f 	bl	8009758 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800947a:	4b15      	ldr	r3, [pc, #84]	@ (80094d0 <prvCheckForValidListAndQueue+0x60>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d120      	bne.n	80094c4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009482:	4814      	ldr	r0, [pc, #80]	@ (80094d4 <prvCheckForValidListAndQueue+0x64>)
 8009484:	f7fd fbee 	bl	8006c64 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009488:	4813      	ldr	r0, [pc, #76]	@ (80094d8 <prvCheckForValidListAndQueue+0x68>)
 800948a:	f7fd fbeb 	bl	8006c64 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800948e:	4b13      	ldr	r3, [pc, #76]	@ (80094dc <prvCheckForValidListAndQueue+0x6c>)
 8009490:	4a10      	ldr	r2, [pc, #64]	@ (80094d4 <prvCheckForValidListAndQueue+0x64>)
 8009492:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009494:	4b12      	ldr	r3, [pc, #72]	@ (80094e0 <prvCheckForValidListAndQueue+0x70>)
 8009496:	4a10      	ldr	r2, [pc, #64]	@ (80094d8 <prvCheckForValidListAndQueue+0x68>)
 8009498:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800949a:	2300      	movs	r3, #0
 800949c:	9300      	str	r3, [sp, #0]
 800949e:	4b11      	ldr	r3, [pc, #68]	@ (80094e4 <prvCheckForValidListAndQueue+0x74>)
 80094a0:	4a11      	ldr	r2, [pc, #68]	@ (80094e8 <prvCheckForValidListAndQueue+0x78>)
 80094a2:	2110      	movs	r1, #16
 80094a4:	200a      	movs	r0, #10
 80094a6:	f7fd fcfb 	bl	8006ea0 <xQueueGenericCreateStatic>
 80094aa:	4603      	mov	r3, r0
 80094ac:	4a08      	ldr	r2, [pc, #32]	@ (80094d0 <prvCheckForValidListAndQueue+0x60>)
 80094ae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80094b0:	4b07      	ldr	r3, [pc, #28]	@ (80094d0 <prvCheckForValidListAndQueue+0x60>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d005      	beq.n	80094c4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80094b8:	4b05      	ldr	r3, [pc, #20]	@ (80094d0 <prvCheckForValidListAndQueue+0x60>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	490b      	ldr	r1, [pc, #44]	@ (80094ec <prvCheckForValidListAndQueue+0x7c>)
 80094be:	4618      	mov	r0, r3
 80094c0:	f7fe fc28 	bl	8007d14 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80094c4:	f000 f97a 	bl	80097bc <vPortExitCritical>
}
 80094c8:	bf00      	nop
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}
 80094ce:	bf00      	nop
 80094d0:	20001290 	.word	0x20001290
 80094d4:	20001260 	.word	0x20001260
 80094d8:	20001274 	.word	0x20001274
 80094dc:	20001288 	.word	0x20001288
 80094e0:	2000128c 	.word	0x2000128c
 80094e4:	2000133c 	.word	0x2000133c
 80094e8:	2000129c 	.word	0x2000129c
 80094ec:	0800ce38 	.word	0x0800ce38

080094f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80094f0:	b480      	push	{r7}
 80094f2:	b085      	sub	sp, #20
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	60f8      	str	r0, [r7, #12]
 80094f8:	60b9      	str	r1, [r7, #8]
 80094fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	3b04      	subs	r3, #4
 8009500:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009508:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	3b04      	subs	r3, #4
 800950e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	f023 0201 	bic.w	r2, r3, #1
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	3b04      	subs	r3, #4
 800951e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009520:	4a0c      	ldr	r2, [pc, #48]	@ (8009554 <pxPortInitialiseStack+0x64>)
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	3b14      	subs	r3, #20
 800952a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800952c:	687a      	ldr	r2, [r7, #4]
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	3b04      	subs	r3, #4
 8009536:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f06f 0202 	mvn.w	r2, #2
 800953e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	3b20      	subs	r3, #32
 8009544:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009546:	68fb      	ldr	r3, [r7, #12]
}
 8009548:	4618      	mov	r0, r3
 800954a:	3714      	adds	r7, #20
 800954c:	46bd      	mov	sp, r7
 800954e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009552:	4770      	bx	lr
 8009554:	08009559 	.word	0x08009559

08009558 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009558:	b480      	push	{r7}
 800955a:	b085      	sub	sp, #20
 800955c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800955e:	2300      	movs	r3, #0
 8009560:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009562:	4b13      	ldr	r3, [pc, #76]	@ (80095b0 <prvTaskExitError+0x58>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800956a:	d00b      	beq.n	8009584 <prvTaskExitError+0x2c>
	__asm volatile
 800956c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009570:	f383 8811 	msr	BASEPRI, r3
 8009574:	f3bf 8f6f 	isb	sy
 8009578:	f3bf 8f4f 	dsb	sy
 800957c:	60fb      	str	r3, [r7, #12]
}
 800957e:	bf00      	nop
 8009580:	bf00      	nop
 8009582:	e7fd      	b.n	8009580 <prvTaskExitError+0x28>
	__asm volatile
 8009584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009588:	f383 8811 	msr	BASEPRI, r3
 800958c:	f3bf 8f6f 	isb	sy
 8009590:	f3bf 8f4f 	dsb	sy
 8009594:	60bb      	str	r3, [r7, #8]
}
 8009596:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009598:	bf00      	nop
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d0fc      	beq.n	800959a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80095a0:	bf00      	nop
 80095a2:	bf00      	nop
 80095a4:	3714      	adds	r7, #20
 80095a6:	46bd      	mov	sp, r7
 80095a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ac:	4770      	bx	lr
 80095ae:	bf00      	nop
 80095b0:	2000000c 	.word	0x2000000c
	...

080095c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80095c0:	4b07      	ldr	r3, [pc, #28]	@ (80095e0 <pxCurrentTCBConst2>)
 80095c2:	6819      	ldr	r1, [r3, #0]
 80095c4:	6808      	ldr	r0, [r1, #0]
 80095c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095ca:	f380 8809 	msr	PSP, r0
 80095ce:	f3bf 8f6f 	isb	sy
 80095d2:	f04f 0000 	mov.w	r0, #0
 80095d6:	f380 8811 	msr	BASEPRI, r0
 80095da:	4770      	bx	lr
 80095dc:	f3af 8000 	nop.w

080095e0 <pxCurrentTCBConst2>:
 80095e0:	20000d60 	.word	0x20000d60
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80095e4:	bf00      	nop
 80095e6:	bf00      	nop

080095e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80095e8:	4808      	ldr	r0, [pc, #32]	@ (800960c <prvPortStartFirstTask+0x24>)
 80095ea:	6800      	ldr	r0, [r0, #0]
 80095ec:	6800      	ldr	r0, [r0, #0]
 80095ee:	f380 8808 	msr	MSP, r0
 80095f2:	f04f 0000 	mov.w	r0, #0
 80095f6:	f380 8814 	msr	CONTROL, r0
 80095fa:	b662      	cpsie	i
 80095fc:	b661      	cpsie	f
 80095fe:	f3bf 8f4f 	dsb	sy
 8009602:	f3bf 8f6f 	isb	sy
 8009606:	df00      	svc	0
 8009608:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800960a:	bf00      	nop
 800960c:	e000ed08 	.word	0xe000ed08

08009610 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b086      	sub	sp, #24
 8009614:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009616:	4b47      	ldr	r3, [pc, #284]	@ (8009734 <xPortStartScheduler+0x124>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	4a47      	ldr	r2, [pc, #284]	@ (8009738 <xPortStartScheduler+0x128>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d10b      	bne.n	8009638 <xPortStartScheduler+0x28>
	__asm volatile
 8009620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009624:	f383 8811 	msr	BASEPRI, r3
 8009628:	f3bf 8f6f 	isb	sy
 800962c:	f3bf 8f4f 	dsb	sy
 8009630:	613b      	str	r3, [r7, #16]
}
 8009632:	bf00      	nop
 8009634:	bf00      	nop
 8009636:	e7fd      	b.n	8009634 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009638:	4b3e      	ldr	r3, [pc, #248]	@ (8009734 <xPortStartScheduler+0x124>)
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4a3f      	ldr	r2, [pc, #252]	@ (800973c <xPortStartScheduler+0x12c>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d10b      	bne.n	800965a <xPortStartScheduler+0x4a>
	__asm volatile
 8009642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009646:	f383 8811 	msr	BASEPRI, r3
 800964a:	f3bf 8f6f 	isb	sy
 800964e:	f3bf 8f4f 	dsb	sy
 8009652:	60fb      	str	r3, [r7, #12]
}
 8009654:	bf00      	nop
 8009656:	bf00      	nop
 8009658:	e7fd      	b.n	8009656 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800965a:	4b39      	ldr	r3, [pc, #228]	@ (8009740 <xPortStartScheduler+0x130>)
 800965c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	781b      	ldrb	r3, [r3, #0]
 8009662:	b2db      	uxtb	r3, r3
 8009664:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	22ff      	movs	r2, #255	@ 0xff
 800966a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	781b      	ldrb	r3, [r3, #0]
 8009670:	b2db      	uxtb	r3, r3
 8009672:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009674:	78fb      	ldrb	r3, [r7, #3]
 8009676:	b2db      	uxtb	r3, r3
 8009678:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800967c:	b2da      	uxtb	r2, r3
 800967e:	4b31      	ldr	r3, [pc, #196]	@ (8009744 <xPortStartScheduler+0x134>)
 8009680:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009682:	4b31      	ldr	r3, [pc, #196]	@ (8009748 <xPortStartScheduler+0x138>)
 8009684:	2207      	movs	r2, #7
 8009686:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009688:	e009      	b.n	800969e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800968a:	4b2f      	ldr	r3, [pc, #188]	@ (8009748 <xPortStartScheduler+0x138>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	3b01      	subs	r3, #1
 8009690:	4a2d      	ldr	r2, [pc, #180]	@ (8009748 <xPortStartScheduler+0x138>)
 8009692:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009694:	78fb      	ldrb	r3, [r7, #3]
 8009696:	b2db      	uxtb	r3, r3
 8009698:	005b      	lsls	r3, r3, #1
 800969a:	b2db      	uxtb	r3, r3
 800969c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800969e:	78fb      	ldrb	r3, [r7, #3]
 80096a0:	b2db      	uxtb	r3, r3
 80096a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096a6:	2b80      	cmp	r3, #128	@ 0x80
 80096a8:	d0ef      	beq.n	800968a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80096aa:	4b27      	ldr	r3, [pc, #156]	@ (8009748 <xPortStartScheduler+0x138>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f1c3 0307 	rsb	r3, r3, #7
 80096b2:	2b04      	cmp	r3, #4
 80096b4:	d00b      	beq.n	80096ce <xPortStartScheduler+0xbe>
	__asm volatile
 80096b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096ba:	f383 8811 	msr	BASEPRI, r3
 80096be:	f3bf 8f6f 	isb	sy
 80096c2:	f3bf 8f4f 	dsb	sy
 80096c6:	60bb      	str	r3, [r7, #8]
}
 80096c8:	bf00      	nop
 80096ca:	bf00      	nop
 80096cc:	e7fd      	b.n	80096ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80096ce:	4b1e      	ldr	r3, [pc, #120]	@ (8009748 <xPortStartScheduler+0x138>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	021b      	lsls	r3, r3, #8
 80096d4:	4a1c      	ldr	r2, [pc, #112]	@ (8009748 <xPortStartScheduler+0x138>)
 80096d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80096d8:	4b1b      	ldr	r3, [pc, #108]	@ (8009748 <xPortStartScheduler+0x138>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80096e0:	4a19      	ldr	r2, [pc, #100]	@ (8009748 <xPortStartScheduler+0x138>)
 80096e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	b2da      	uxtb	r2, r3
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80096ec:	4b17      	ldr	r3, [pc, #92]	@ (800974c <xPortStartScheduler+0x13c>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4a16      	ldr	r2, [pc, #88]	@ (800974c <xPortStartScheduler+0x13c>)
 80096f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80096f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80096f8:	4b14      	ldr	r3, [pc, #80]	@ (800974c <xPortStartScheduler+0x13c>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	4a13      	ldr	r2, [pc, #76]	@ (800974c <xPortStartScheduler+0x13c>)
 80096fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009702:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009704:	f000 f8da 	bl	80098bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009708:	4b11      	ldr	r3, [pc, #68]	@ (8009750 <xPortStartScheduler+0x140>)
 800970a:	2200      	movs	r2, #0
 800970c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800970e:	f000 f8f9 	bl	8009904 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009712:	4b10      	ldr	r3, [pc, #64]	@ (8009754 <xPortStartScheduler+0x144>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4a0f      	ldr	r2, [pc, #60]	@ (8009754 <xPortStartScheduler+0x144>)
 8009718:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800971c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800971e:	f7ff ff63 	bl	80095e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009722:	f7fe ff39 	bl	8008598 <vTaskSwitchContext>
	prvTaskExitError();
 8009726:	f7ff ff17 	bl	8009558 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800972a:	2300      	movs	r3, #0
}
 800972c:	4618      	mov	r0, r3
 800972e:	3718      	adds	r7, #24
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}
 8009734:	e000ed00 	.word	0xe000ed00
 8009738:	410fc271 	.word	0x410fc271
 800973c:	410fc270 	.word	0x410fc270
 8009740:	e000e400 	.word	0xe000e400
 8009744:	2000138c 	.word	0x2000138c
 8009748:	20001390 	.word	0x20001390
 800974c:	e000ed20 	.word	0xe000ed20
 8009750:	2000000c 	.word	0x2000000c
 8009754:	e000ef34 	.word	0xe000ef34

08009758 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009758:	b480      	push	{r7}
 800975a:	b083      	sub	sp, #12
 800975c:	af00      	add	r7, sp, #0
	__asm volatile
 800975e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009762:	f383 8811 	msr	BASEPRI, r3
 8009766:	f3bf 8f6f 	isb	sy
 800976a:	f3bf 8f4f 	dsb	sy
 800976e:	607b      	str	r3, [r7, #4]
}
 8009770:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009772:	4b10      	ldr	r3, [pc, #64]	@ (80097b4 <vPortEnterCritical+0x5c>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	3301      	adds	r3, #1
 8009778:	4a0e      	ldr	r2, [pc, #56]	@ (80097b4 <vPortEnterCritical+0x5c>)
 800977a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800977c:	4b0d      	ldr	r3, [pc, #52]	@ (80097b4 <vPortEnterCritical+0x5c>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	2b01      	cmp	r3, #1
 8009782:	d110      	bne.n	80097a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009784:	4b0c      	ldr	r3, [pc, #48]	@ (80097b8 <vPortEnterCritical+0x60>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	b2db      	uxtb	r3, r3
 800978a:	2b00      	cmp	r3, #0
 800978c:	d00b      	beq.n	80097a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800978e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009792:	f383 8811 	msr	BASEPRI, r3
 8009796:	f3bf 8f6f 	isb	sy
 800979a:	f3bf 8f4f 	dsb	sy
 800979e:	603b      	str	r3, [r7, #0]
}
 80097a0:	bf00      	nop
 80097a2:	bf00      	nop
 80097a4:	e7fd      	b.n	80097a2 <vPortEnterCritical+0x4a>
	}
}
 80097a6:	bf00      	nop
 80097a8:	370c      	adds	r7, #12
 80097aa:	46bd      	mov	sp, r7
 80097ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b0:	4770      	bx	lr
 80097b2:	bf00      	nop
 80097b4:	2000000c 	.word	0x2000000c
 80097b8:	e000ed04 	.word	0xe000ed04

080097bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80097bc:	b480      	push	{r7}
 80097be:	b083      	sub	sp, #12
 80097c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80097c2:	4b12      	ldr	r3, [pc, #72]	@ (800980c <vPortExitCritical+0x50>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d10b      	bne.n	80097e2 <vPortExitCritical+0x26>
	__asm volatile
 80097ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097ce:	f383 8811 	msr	BASEPRI, r3
 80097d2:	f3bf 8f6f 	isb	sy
 80097d6:	f3bf 8f4f 	dsb	sy
 80097da:	607b      	str	r3, [r7, #4]
}
 80097dc:	bf00      	nop
 80097de:	bf00      	nop
 80097e0:	e7fd      	b.n	80097de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80097e2:	4b0a      	ldr	r3, [pc, #40]	@ (800980c <vPortExitCritical+0x50>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	3b01      	subs	r3, #1
 80097e8:	4a08      	ldr	r2, [pc, #32]	@ (800980c <vPortExitCritical+0x50>)
 80097ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80097ec:	4b07      	ldr	r3, [pc, #28]	@ (800980c <vPortExitCritical+0x50>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d105      	bne.n	8009800 <vPortExitCritical+0x44>
 80097f4:	2300      	movs	r3, #0
 80097f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	f383 8811 	msr	BASEPRI, r3
}
 80097fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009800:	bf00      	nop
 8009802:	370c      	adds	r7, #12
 8009804:	46bd      	mov	sp, r7
 8009806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980a:	4770      	bx	lr
 800980c:	2000000c 	.word	0x2000000c

08009810 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009810:	f3ef 8009 	mrs	r0, PSP
 8009814:	f3bf 8f6f 	isb	sy
 8009818:	4b15      	ldr	r3, [pc, #84]	@ (8009870 <pxCurrentTCBConst>)
 800981a:	681a      	ldr	r2, [r3, #0]
 800981c:	f01e 0f10 	tst.w	lr, #16
 8009820:	bf08      	it	eq
 8009822:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009826:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800982a:	6010      	str	r0, [r2, #0]
 800982c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009830:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009834:	f380 8811 	msr	BASEPRI, r0
 8009838:	f3bf 8f4f 	dsb	sy
 800983c:	f3bf 8f6f 	isb	sy
 8009840:	f7fe feaa 	bl	8008598 <vTaskSwitchContext>
 8009844:	f04f 0000 	mov.w	r0, #0
 8009848:	f380 8811 	msr	BASEPRI, r0
 800984c:	bc09      	pop	{r0, r3}
 800984e:	6819      	ldr	r1, [r3, #0]
 8009850:	6808      	ldr	r0, [r1, #0]
 8009852:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009856:	f01e 0f10 	tst.w	lr, #16
 800985a:	bf08      	it	eq
 800985c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009860:	f380 8809 	msr	PSP, r0
 8009864:	f3bf 8f6f 	isb	sy
 8009868:	4770      	bx	lr
 800986a:	bf00      	nop
 800986c:	f3af 8000 	nop.w

08009870 <pxCurrentTCBConst>:
 8009870:	20000d60 	.word	0x20000d60
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009874:	bf00      	nop
 8009876:	bf00      	nop

08009878 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b082      	sub	sp, #8
 800987c:	af00      	add	r7, sp, #0
	__asm volatile
 800987e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009882:	f383 8811 	msr	BASEPRI, r3
 8009886:	f3bf 8f6f 	isb	sy
 800988a:	f3bf 8f4f 	dsb	sy
 800988e:	607b      	str	r3, [r7, #4]
}
 8009890:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009892:	f7fe fdc7 	bl	8008424 <xTaskIncrementTick>
 8009896:	4603      	mov	r3, r0
 8009898:	2b00      	cmp	r3, #0
 800989a:	d003      	beq.n	80098a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800989c:	4b06      	ldr	r3, [pc, #24]	@ (80098b8 <xPortSysTickHandler+0x40>)
 800989e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80098a2:	601a      	str	r2, [r3, #0]
 80098a4:	2300      	movs	r3, #0
 80098a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	f383 8811 	msr	BASEPRI, r3
}
 80098ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80098b0:	bf00      	nop
 80098b2:	3708      	adds	r7, #8
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}
 80098b8:	e000ed04 	.word	0xe000ed04

080098bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80098bc:	b480      	push	{r7}
 80098be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80098c0:	4b0b      	ldr	r3, [pc, #44]	@ (80098f0 <vPortSetupTimerInterrupt+0x34>)
 80098c2:	2200      	movs	r2, #0
 80098c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80098c6:	4b0b      	ldr	r3, [pc, #44]	@ (80098f4 <vPortSetupTimerInterrupt+0x38>)
 80098c8:	2200      	movs	r2, #0
 80098ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80098cc:	4b0a      	ldr	r3, [pc, #40]	@ (80098f8 <vPortSetupTimerInterrupt+0x3c>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	4a0a      	ldr	r2, [pc, #40]	@ (80098fc <vPortSetupTimerInterrupt+0x40>)
 80098d2:	fba2 2303 	umull	r2, r3, r2, r3
 80098d6:	099b      	lsrs	r3, r3, #6
 80098d8:	4a09      	ldr	r2, [pc, #36]	@ (8009900 <vPortSetupTimerInterrupt+0x44>)
 80098da:	3b01      	subs	r3, #1
 80098dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80098de:	4b04      	ldr	r3, [pc, #16]	@ (80098f0 <vPortSetupTimerInterrupt+0x34>)
 80098e0:	2207      	movs	r2, #7
 80098e2:	601a      	str	r2, [r3, #0]
}
 80098e4:	bf00      	nop
 80098e6:	46bd      	mov	sp, r7
 80098e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ec:	4770      	bx	lr
 80098ee:	bf00      	nop
 80098f0:	e000e010 	.word	0xe000e010
 80098f4:	e000e018 	.word	0xe000e018
 80098f8:	20000000 	.word	0x20000000
 80098fc:	10624dd3 	.word	0x10624dd3
 8009900:	e000e014 	.word	0xe000e014

08009904 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009904:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009914 <vPortEnableVFP+0x10>
 8009908:	6801      	ldr	r1, [r0, #0]
 800990a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800990e:	6001      	str	r1, [r0, #0]
 8009910:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009912:	bf00      	nop
 8009914:	e000ed88 	.word	0xe000ed88

08009918 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009918:	b480      	push	{r7}
 800991a:	b085      	sub	sp, #20
 800991c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800991e:	f3ef 8305 	mrs	r3, IPSR
 8009922:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	2b0f      	cmp	r3, #15
 8009928:	d915      	bls.n	8009956 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800992a:	4a18      	ldr	r2, [pc, #96]	@ (800998c <vPortValidateInterruptPriority+0x74>)
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	4413      	add	r3, r2
 8009930:	781b      	ldrb	r3, [r3, #0]
 8009932:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009934:	4b16      	ldr	r3, [pc, #88]	@ (8009990 <vPortValidateInterruptPriority+0x78>)
 8009936:	781b      	ldrb	r3, [r3, #0]
 8009938:	7afa      	ldrb	r2, [r7, #11]
 800993a:	429a      	cmp	r2, r3
 800993c:	d20b      	bcs.n	8009956 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800993e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009942:	f383 8811 	msr	BASEPRI, r3
 8009946:	f3bf 8f6f 	isb	sy
 800994a:	f3bf 8f4f 	dsb	sy
 800994e:	607b      	str	r3, [r7, #4]
}
 8009950:	bf00      	nop
 8009952:	bf00      	nop
 8009954:	e7fd      	b.n	8009952 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009956:	4b0f      	ldr	r3, [pc, #60]	@ (8009994 <vPortValidateInterruptPriority+0x7c>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800995e:	4b0e      	ldr	r3, [pc, #56]	@ (8009998 <vPortValidateInterruptPriority+0x80>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	429a      	cmp	r2, r3
 8009964:	d90b      	bls.n	800997e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800996a:	f383 8811 	msr	BASEPRI, r3
 800996e:	f3bf 8f6f 	isb	sy
 8009972:	f3bf 8f4f 	dsb	sy
 8009976:	603b      	str	r3, [r7, #0]
}
 8009978:	bf00      	nop
 800997a:	bf00      	nop
 800997c:	e7fd      	b.n	800997a <vPortValidateInterruptPriority+0x62>
	}
 800997e:	bf00      	nop
 8009980:	3714      	adds	r7, #20
 8009982:	46bd      	mov	sp, r7
 8009984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009988:	4770      	bx	lr
 800998a:	bf00      	nop
 800998c:	e000e3f0 	.word	0xe000e3f0
 8009990:	2000138c 	.word	0x2000138c
 8009994:	e000ed0c 	.word	0xe000ed0c
 8009998:	20001390 	.word	0x20001390

0800999c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b08a      	sub	sp, #40	@ 0x28
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80099a4:	2300      	movs	r3, #0
 80099a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80099a8:	f7fe fc80 	bl	80082ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80099ac:	4b5c      	ldr	r3, [pc, #368]	@ (8009b20 <pvPortMalloc+0x184>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d101      	bne.n	80099b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80099b4:	f000 f924 	bl	8009c00 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80099b8:	4b5a      	ldr	r3, [pc, #360]	@ (8009b24 <pvPortMalloc+0x188>)
 80099ba:	681a      	ldr	r2, [r3, #0]
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	4013      	ands	r3, r2
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	f040 8095 	bne.w	8009af0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d01e      	beq.n	8009a0a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80099cc:	2208      	movs	r2, #8
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	4413      	add	r3, r2
 80099d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f003 0307 	and.w	r3, r3, #7
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d015      	beq.n	8009a0a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f023 0307 	bic.w	r3, r3, #7
 80099e4:	3308      	adds	r3, #8
 80099e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f003 0307 	and.w	r3, r3, #7
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d00b      	beq.n	8009a0a <pvPortMalloc+0x6e>
	__asm volatile
 80099f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099f6:	f383 8811 	msr	BASEPRI, r3
 80099fa:	f3bf 8f6f 	isb	sy
 80099fe:	f3bf 8f4f 	dsb	sy
 8009a02:	617b      	str	r3, [r7, #20]
}
 8009a04:	bf00      	nop
 8009a06:	bf00      	nop
 8009a08:	e7fd      	b.n	8009a06 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d06f      	beq.n	8009af0 <pvPortMalloc+0x154>
 8009a10:	4b45      	ldr	r3, [pc, #276]	@ (8009b28 <pvPortMalloc+0x18c>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	687a      	ldr	r2, [r7, #4]
 8009a16:	429a      	cmp	r2, r3
 8009a18:	d86a      	bhi.n	8009af0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009a1a:	4b44      	ldr	r3, [pc, #272]	@ (8009b2c <pvPortMalloc+0x190>)
 8009a1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009a1e:	4b43      	ldr	r3, [pc, #268]	@ (8009b2c <pvPortMalloc+0x190>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009a24:	e004      	b.n	8009a30 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a32:	685b      	ldr	r3, [r3, #4]
 8009a34:	687a      	ldr	r2, [r7, #4]
 8009a36:	429a      	cmp	r2, r3
 8009a38:	d903      	bls.n	8009a42 <pvPortMalloc+0xa6>
 8009a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d1f1      	bne.n	8009a26 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009a42:	4b37      	ldr	r3, [pc, #220]	@ (8009b20 <pvPortMalloc+0x184>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a48:	429a      	cmp	r2, r3
 8009a4a:	d051      	beq.n	8009af0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009a4c:	6a3b      	ldr	r3, [r7, #32]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	2208      	movs	r2, #8
 8009a52:	4413      	add	r3, r2
 8009a54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a58:	681a      	ldr	r2, [r3, #0]
 8009a5a:	6a3b      	ldr	r3, [r7, #32]
 8009a5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a60:	685a      	ldr	r2, [r3, #4]
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	1ad2      	subs	r2, r2, r3
 8009a66:	2308      	movs	r3, #8
 8009a68:	005b      	lsls	r3, r3, #1
 8009a6a:	429a      	cmp	r2, r3
 8009a6c:	d920      	bls.n	8009ab0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009a6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	4413      	add	r3, r2
 8009a74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a76:	69bb      	ldr	r3, [r7, #24]
 8009a78:	f003 0307 	and.w	r3, r3, #7
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d00b      	beq.n	8009a98 <pvPortMalloc+0xfc>
	__asm volatile
 8009a80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a84:	f383 8811 	msr	BASEPRI, r3
 8009a88:	f3bf 8f6f 	isb	sy
 8009a8c:	f3bf 8f4f 	dsb	sy
 8009a90:	613b      	str	r3, [r7, #16]
}
 8009a92:	bf00      	nop
 8009a94:	bf00      	nop
 8009a96:	e7fd      	b.n	8009a94 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a9a:	685a      	ldr	r2, [r3, #4]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	1ad2      	subs	r2, r2, r3
 8009aa0:	69bb      	ldr	r3, [r7, #24]
 8009aa2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aa6:	687a      	ldr	r2, [r7, #4]
 8009aa8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009aaa:	69b8      	ldr	r0, [r7, #24]
 8009aac:	f000 f90a 	bl	8009cc4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009ab0:	4b1d      	ldr	r3, [pc, #116]	@ (8009b28 <pvPortMalloc+0x18c>)
 8009ab2:	681a      	ldr	r2, [r3, #0]
 8009ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ab6:	685b      	ldr	r3, [r3, #4]
 8009ab8:	1ad3      	subs	r3, r2, r3
 8009aba:	4a1b      	ldr	r2, [pc, #108]	@ (8009b28 <pvPortMalloc+0x18c>)
 8009abc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009abe:	4b1a      	ldr	r3, [pc, #104]	@ (8009b28 <pvPortMalloc+0x18c>)
 8009ac0:	681a      	ldr	r2, [r3, #0]
 8009ac2:	4b1b      	ldr	r3, [pc, #108]	@ (8009b30 <pvPortMalloc+0x194>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	429a      	cmp	r2, r3
 8009ac8:	d203      	bcs.n	8009ad2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009aca:	4b17      	ldr	r3, [pc, #92]	@ (8009b28 <pvPortMalloc+0x18c>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	4a18      	ldr	r2, [pc, #96]	@ (8009b30 <pvPortMalloc+0x194>)
 8009ad0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ad4:	685a      	ldr	r2, [r3, #4]
 8009ad6:	4b13      	ldr	r3, [pc, #76]	@ (8009b24 <pvPortMalloc+0x188>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	431a      	orrs	r2, r3
 8009adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ade:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009ae6:	4b13      	ldr	r3, [pc, #76]	@ (8009b34 <pvPortMalloc+0x198>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	3301      	adds	r3, #1
 8009aec:	4a11      	ldr	r2, [pc, #68]	@ (8009b34 <pvPortMalloc+0x198>)
 8009aee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009af0:	f7fe fbea 	bl	80082c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009af4:	69fb      	ldr	r3, [r7, #28]
 8009af6:	f003 0307 	and.w	r3, r3, #7
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d00b      	beq.n	8009b16 <pvPortMalloc+0x17a>
	__asm volatile
 8009afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b02:	f383 8811 	msr	BASEPRI, r3
 8009b06:	f3bf 8f6f 	isb	sy
 8009b0a:	f3bf 8f4f 	dsb	sy
 8009b0e:	60fb      	str	r3, [r7, #12]
}
 8009b10:	bf00      	nop
 8009b12:	bf00      	nop
 8009b14:	e7fd      	b.n	8009b12 <pvPortMalloc+0x176>
	return pvReturn;
 8009b16:	69fb      	ldr	r3, [r7, #28]
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	3728      	adds	r7, #40	@ 0x28
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}
 8009b20:	20001f9c 	.word	0x20001f9c
 8009b24:	20001fb0 	.word	0x20001fb0
 8009b28:	20001fa0 	.word	0x20001fa0
 8009b2c:	20001f94 	.word	0x20001f94
 8009b30:	20001fa4 	.word	0x20001fa4
 8009b34:	20001fa8 	.word	0x20001fa8

08009b38 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b086      	sub	sp, #24
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d04f      	beq.n	8009bea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009b4a:	2308      	movs	r3, #8
 8009b4c:	425b      	negs	r3, r3
 8009b4e:	697a      	ldr	r2, [r7, #20]
 8009b50:	4413      	add	r3, r2
 8009b52:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009b58:	693b      	ldr	r3, [r7, #16]
 8009b5a:	685a      	ldr	r2, [r3, #4]
 8009b5c:	4b25      	ldr	r3, [pc, #148]	@ (8009bf4 <vPortFree+0xbc>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	4013      	ands	r3, r2
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d10b      	bne.n	8009b7e <vPortFree+0x46>
	__asm volatile
 8009b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b6a:	f383 8811 	msr	BASEPRI, r3
 8009b6e:	f3bf 8f6f 	isb	sy
 8009b72:	f3bf 8f4f 	dsb	sy
 8009b76:	60fb      	str	r3, [r7, #12]
}
 8009b78:	bf00      	nop
 8009b7a:	bf00      	nop
 8009b7c:	e7fd      	b.n	8009b7a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d00b      	beq.n	8009b9e <vPortFree+0x66>
	__asm volatile
 8009b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b8a:	f383 8811 	msr	BASEPRI, r3
 8009b8e:	f3bf 8f6f 	isb	sy
 8009b92:	f3bf 8f4f 	dsb	sy
 8009b96:	60bb      	str	r3, [r7, #8]
}
 8009b98:	bf00      	nop
 8009b9a:	bf00      	nop
 8009b9c:	e7fd      	b.n	8009b9a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009b9e:	693b      	ldr	r3, [r7, #16]
 8009ba0:	685a      	ldr	r2, [r3, #4]
 8009ba2:	4b14      	ldr	r3, [pc, #80]	@ (8009bf4 <vPortFree+0xbc>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	4013      	ands	r3, r2
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d01e      	beq.n	8009bea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009bac:	693b      	ldr	r3, [r7, #16]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d11a      	bne.n	8009bea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009bb4:	693b      	ldr	r3, [r7, #16]
 8009bb6:	685a      	ldr	r2, [r3, #4]
 8009bb8:	4b0e      	ldr	r3, [pc, #56]	@ (8009bf4 <vPortFree+0xbc>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	43db      	mvns	r3, r3
 8009bbe:	401a      	ands	r2, r3
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009bc4:	f7fe fb72 	bl	80082ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009bc8:	693b      	ldr	r3, [r7, #16]
 8009bca:	685a      	ldr	r2, [r3, #4]
 8009bcc:	4b0a      	ldr	r3, [pc, #40]	@ (8009bf8 <vPortFree+0xc0>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	4413      	add	r3, r2
 8009bd2:	4a09      	ldr	r2, [pc, #36]	@ (8009bf8 <vPortFree+0xc0>)
 8009bd4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009bd6:	6938      	ldr	r0, [r7, #16]
 8009bd8:	f000 f874 	bl	8009cc4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009bdc:	4b07      	ldr	r3, [pc, #28]	@ (8009bfc <vPortFree+0xc4>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	3301      	adds	r3, #1
 8009be2:	4a06      	ldr	r2, [pc, #24]	@ (8009bfc <vPortFree+0xc4>)
 8009be4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009be6:	f7fe fb6f 	bl	80082c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009bea:	bf00      	nop
 8009bec:	3718      	adds	r7, #24
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}
 8009bf2:	bf00      	nop
 8009bf4:	20001fb0 	.word	0x20001fb0
 8009bf8:	20001fa0 	.word	0x20001fa0
 8009bfc:	20001fac 	.word	0x20001fac

08009c00 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009c00:	b480      	push	{r7}
 8009c02:	b085      	sub	sp, #20
 8009c04:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009c06:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8009c0a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009c0c:	4b27      	ldr	r3, [pc, #156]	@ (8009cac <prvHeapInit+0xac>)
 8009c0e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	f003 0307 	and.w	r3, r3, #7
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d00c      	beq.n	8009c34 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	3307      	adds	r3, #7
 8009c1e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	f023 0307 	bic.w	r3, r3, #7
 8009c26:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009c28:	68ba      	ldr	r2, [r7, #8]
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	1ad3      	subs	r3, r2, r3
 8009c2e:	4a1f      	ldr	r2, [pc, #124]	@ (8009cac <prvHeapInit+0xac>)
 8009c30:	4413      	add	r3, r2
 8009c32:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009c38:	4a1d      	ldr	r2, [pc, #116]	@ (8009cb0 <prvHeapInit+0xb0>)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009c3e:	4b1c      	ldr	r3, [pc, #112]	@ (8009cb0 <prvHeapInit+0xb0>)
 8009c40:	2200      	movs	r2, #0
 8009c42:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	68ba      	ldr	r2, [r7, #8]
 8009c48:	4413      	add	r3, r2
 8009c4a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009c4c:	2208      	movs	r2, #8
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	1a9b      	subs	r3, r3, r2
 8009c52:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	f023 0307 	bic.w	r3, r3, #7
 8009c5a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	4a15      	ldr	r2, [pc, #84]	@ (8009cb4 <prvHeapInit+0xb4>)
 8009c60:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009c62:	4b14      	ldr	r3, [pc, #80]	@ (8009cb4 <prvHeapInit+0xb4>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	2200      	movs	r2, #0
 8009c68:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009c6a:	4b12      	ldr	r3, [pc, #72]	@ (8009cb4 <prvHeapInit+0xb4>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	68fa      	ldr	r2, [r7, #12]
 8009c7a:	1ad2      	subs	r2, r2, r3
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009c80:	4b0c      	ldr	r3, [pc, #48]	@ (8009cb4 <prvHeapInit+0xb4>)
 8009c82:	681a      	ldr	r2, [r3, #0]
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	685b      	ldr	r3, [r3, #4]
 8009c8c:	4a0a      	ldr	r2, [pc, #40]	@ (8009cb8 <prvHeapInit+0xb8>)
 8009c8e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	685b      	ldr	r3, [r3, #4]
 8009c94:	4a09      	ldr	r2, [pc, #36]	@ (8009cbc <prvHeapInit+0xbc>)
 8009c96:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009c98:	4b09      	ldr	r3, [pc, #36]	@ (8009cc0 <prvHeapInit+0xc0>)
 8009c9a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009c9e:	601a      	str	r2, [r3, #0]
}
 8009ca0:	bf00      	nop
 8009ca2:	3714      	adds	r7, #20
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009caa:	4770      	bx	lr
 8009cac:	20001394 	.word	0x20001394
 8009cb0:	20001f94 	.word	0x20001f94
 8009cb4:	20001f9c 	.word	0x20001f9c
 8009cb8:	20001fa4 	.word	0x20001fa4
 8009cbc:	20001fa0 	.word	0x20001fa0
 8009cc0:	20001fb0 	.word	0x20001fb0

08009cc4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b085      	sub	sp, #20
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009ccc:	4b28      	ldr	r3, [pc, #160]	@ (8009d70 <prvInsertBlockIntoFreeList+0xac>)
 8009cce:	60fb      	str	r3, [r7, #12]
 8009cd0:	e002      	b.n	8009cd8 <prvInsertBlockIntoFreeList+0x14>
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	60fb      	str	r3, [r7, #12]
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	687a      	ldr	r2, [r7, #4]
 8009cde:	429a      	cmp	r2, r3
 8009ce0:	d8f7      	bhi.n	8009cd2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	685b      	ldr	r3, [r3, #4]
 8009cea:	68ba      	ldr	r2, [r7, #8]
 8009cec:	4413      	add	r3, r2
 8009cee:	687a      	ldr	r2, [r7, #4]
 8009cf0:	429a      	cmp	r2, r3
 8009cf2:	d108      	bne.n	8009d06 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	685a      	ldr	r2, [r3, #4]
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	685b      	ldr	r3, [r3, #4]
 8009cfc:	441a      	add	r2, r3
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	685b      	ldr	r3, [r3, #4]
 8009d0e:	68ba      	ldr	r2, [r7, #8]
 8009d10:	441a      	add	r2, r3
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	429a      	cmp	r2, r3
 8009d18:	d118      	bne.n	8009d4c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681a      	ldr	r2, [r3, #0]
 8009d1e:	4b15      	ldr	r3, [pc, #84]	@ (8009d74 <prvInsertBlockIntoFreeList+0xb0>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	429a      	cmp	r2, r3
 8009d24:	d00d      	beq.n	8009d42 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	685a      	ldr	r2, [r3, #4]
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	685b      	ldr	r3, [r3, #4]
 8009d30:	441a      	add	r2, r3
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	681a      	ldr	r2, [r3, #0]
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	601a      	str	r2, [r3, #0]
 8009d40:	e008      	b.n	8009d54 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009d42:	4b0c      	ldr	r3, [pc, #48]	@ (8009d74 <prvInsertBlockIntoFreeList+0xb0>)
 8009d44:	681a      	ldr	r2, [r3, #0]
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	601a      	str	r2, [r3, #0]
 8009d4a:	e003      	b.n	8009d54 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	681a      	ldr	r2, [r3, #0]
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009d54:	68fa      	ldr	r2, [r7, #12]
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	d002      	beq.n	8009d62 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	687a      	ldr	r2, [r7, #4]
 8009d60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009d62:	bf00      	nop
 8009d64:	3714      	adds	r7, #20
 8009d66:	46bd      	mov	sp, r7
 8009d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6c:	4770      	bx	lr
 8009d6e:	bf00      	nop
 8009d70:	20001f94 	.word	0x20001f94
 8009d74:	20001f9c 	.word	0x20001f9c

08009d78 <atof>:
 8009d78:	2100      	movs	r1, #0
 8009d7a:	f000 be05 	b.w	800a988 <strtod>

08009d7e <sulp>:
 8009d7e:	b570      	push	{r4, r5, r6, lr}
 8009d80:	4604      	mov	r4, r0
 8009d82:	460d      	mov	r5, r1
 8009d84:	ec45 4b10 	vmov	d0, r4, r5
 8009d88:	4616      	mov	r6, r2
 8009d8a:	f002 f81f 	bl	800bdcc <__ulp>
 8009d8e:	ec51 0b10 	vmov	r0, r1, d0
 8009d92:	b17e      	cbz	r6, 8009db4 <sulp+0x36>
 8009d94:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009d98:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	dd09      	ble.n	8009db4 <sulp+0x36>
 8009da0:	051b      	lsls	r3, r3, #20
 8009da2:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009da6:	2400      	movs	r4, #0
 8009da8:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009dac:	4622      	mov	r2, r4
 8009dae:	462b      	mov	r3, r5
 8009db0:	f7f6 fc52 	bl	8000658 <__aeabi_dmul>
 8009db4:	ec41 0b10 	vmov	d0, r0, r1
 8009db8:	bd70      	pop	{r4, r5, r6, pc}
 8009dba:	0000      	movs	r0, r0
 8009dbc:	0000      	movs	r0, r0
	...

08009dc0 <_strtod_l>:
 8009dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dc4:	b09f      	sub	sp, #124	@ 0x7c
 8009dc6:	460c      	mov	r4, r1
 8009dc8:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009dca:	2200      	movs	r2, #0
 8009dcc:	921a      	str	r2, [sp, #104]	@ 0x68
 8009dce:	9005      	str	r0, [sp, #20]
 8009dd0:	f04f 0a00 	mov.w	sl, #0
 8009dd4:	f04f 0b00 	mov.w	fp, #0
 8009dd8:	460a      	mov	r2, r1
 8009dda:	9219      	str	r2, [sp, #100]	@ 0x64
 8009ddc:	7811      	ldrb	r1, [r2, #0]
 8009dde:	292b      	cmp	r1, #43	@ 0x2b
 8009de0:	d04a      	beq.n	8009e78 <_strtod_l+0xb8>
 8009de2:	d838      	bhi.n	8009e56 <_strtod_l+0x96>
 8009de4:	290d      	cmp	r1, #13
 8009de6:	d832      	bhi.n	8009e4e <_strtod_l+0x8e>
 8009de8:	2908      	cmp	r1, #8
 8009dea:	d832      	bhi.n	8009e52 <_strtod_l+0x92>
 8009dec:	2900      	cmp	r1, #0
 8009dee:	d03b      	beq.n	8009e68 <_strtod_l+0xa8>
 8009df0:	2200      	movs	r2, #0
 8009df2:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009df4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009df6:	782a      	ldrb	r2, [r5, #0]
 8009df8:	2a30      	cmp	r2, #48	@ 0x30
 8009dfa:	f040 80b3 	bne.w	8009f64 <_strtod_l+0x1a4>
 8009dfe:	786a      	ldrb	r2, [r5, #1]
 8009e00:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009e04:	2a58      	cmp	r2, #88	@ 0x58
 8009e06:	d16e      	bne.n	8009ee6 <_strtod_l+0x126>
 8009e08:	9302      	str	r3, [sp, #8]
 8009e0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e0c:	9301      	str	r3, [sp, #4]
 8009e0e:	ab1a      	add	r3, sp, #104	@ 0x68
 8009e10:	9300      	str	r3, [sp, #0]
 8009e12:	4a8e      	ldr	r2, [pc, #568]	@ (800a04c <_strtod_l+0x28c>)
 8009e14:	9805      	ldr	r0, [sp, #20]
 8009e16:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009e18:	a919      	add	r1, sp, #100	@ 0x64
 8009e1a:	f001 f8c9 	bl	800afb0 <__gethex>
 8009e1e:	f010 060f 	ands.w	r6, r0, #15
 8009e22:	4604      	mov	r4, r0
 8009e24:	d005      	beq.n	8009e32 <_strtod_l+0x72>
 8009e26:	2e06      	cmp	r6, #6
 8009e28:	d128      	bne.n	8009e7c <_strtod_l+0xbc>
 8009e2a:	3501      	adds	r5, #1
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	9519      	str	r5, [sp, #100]	@ 0x64
 8009e30:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009e32:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	f040 858e 	bne.w	800a956 <_strtod_l+0xb96>
 8009e3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e3c:	b1cb      	cbz	r3, 8009e72 <_strtod_l+0xb2>
 8009e3e:	4652      	mov	r2, sl
 8009e40:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8009e44:	ec43 2b10 	vmov	d0, r2, r3
 8009e48:	b01f      	add	sp, #124	@ 0x7c
 8009e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e4e:	2920      	cmp	r1, #32
 8009e50:	d1ce      	bne.n	8009df0 <_strtod_l+0x30>
 8009e52:	3201      	adds	r2, #1
 8009e54:	e7c1      	b.n	8009dda <_strtod_l+0x1a>
 8009e56:	292d      	cmp	r1, #45	@ 0x2d
 8009e58:	d1ca      	bne.n	8009df0 <_strtod_l+0x30>
 8009e5a:	2101      	movs	r1, #1
 8009e5c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009e5e:	1c51      	adds	r1, r2, #1
 8009e60:	9119      	str	r1, [sp, #100]	@ 0x64
 8009e62:	7852      	ldrb	r2, [r2, #1]
 8009e64:	2a00      	cmp	r2, #0
 8009e66:	d1c5      	bne.n	8009df4 <_strtod_l+0x34>
 8009e68:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009e6a:	9419      	str	r4, [sp, #100]	@ 0x64
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	f040 8570 	bne.w	800a952 <_strtod_l+0xb92>
 8009e72:	4652      	mov	r2, sl
 8009e74:	465b      	mov	r3, fp
 8009e76:	e7e5      	b.n	8009e44 <_strtod_l+0x84>
 8009e78:	2100      	movs	r1, #0
 8009e7a:	e7ef      	b.n	8009e5c <_strtod_l+0x9c>
 8009e7c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009e7e:	b13a      	cbz	r2, 8009e90 <_strtod_l+0xd0>
 8009e80:	2135      	movs	r1, #53	@ 0x35
 8009e82:	a81c      	add	r0, sp, #112	@ 0x70
 8009e84:	f002 f89c 	bl	800bfc0 <__copybits>
 8009e88:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009e8a:	9805      	ldr	r0, [sp, #20]
 8009e8c:	f001 fc6a 	bl	800b764 <_Bfree>
 8009e90:	3e01      	subs	r6, #1
 8009e92:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009e94:	2e04      	cmp	r6, #4
 8009e96:	d806      	bhi.n	8009ea6 <_strtod_l+0xe6>
 8009e98:	e8df f006 	tbb	[pc, r6]
 8009e9c:	201d0314 	.word	0x201d0314
 8009ea0:	14          	.byte	0x14
 8009ea1:	00          	.byte	0x00
 8009ea2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009ea6:	05e1      	lsls	r1, r4, #23
 8009ea8:	bf48      	it	mi
 8009eaa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009eae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009eb2:	0d1b      	lsrs	r3, r3, #20
 8009eb4:	051b      	lsls	r3, r3, #20
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d1bb      	bne.n	8009e32 <_strtod_l+0x72>
 8009eba:	f000 ff63 	bl	800ad84 <__errno>
 8009ebe:	2322      	movs	r3, #34	@ 0x22
 8009ec0:	6003      	str	r3, [r0, #0]
 8009ec2:	e7b6      	b.n	8009e32 <_strtod_l+0x72>
 8009ec4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009ec8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009ecc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009ed0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009ed4:	e7e7      	b.n	8009ea6 <_strtod_l+0xe6>
 8009ed6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800a054 <_strtod_l+0x294>
 8009eda:	e7e4      	b.n	8009ea6 <_strtod_l+0xe6>
 8009edc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009ee0:	f04f 3aff 	mov.w	sl, #4294967295
 8009ee4:	e7df      	b.n	8009ea6 <_strtod_l+0xe6>
 8009ee6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009ee8:	1c5a      	adds	r2, r3, #1
 8009eea:	9219      	str	r2, [sp, #100]	@ 0x64
 8009eec:	785b      	ldrb	r3, [r3, #1]
 8009eee:	2b30      	cmp	r3, #48	@ 0x30
 8009ef0:	d0f9      	beq.n	8009ee6 <_strtod_l+0x126>
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d09d      	beq.n	8009e32 <_strtod_l+0x72>
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	9309      	str	r3, [sp, #36]	@ 0x24
 8009efa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009efc:	930c      	str	r3, [sp, #48]	@ 0x30
 8009efe:	2300      	movs	r3, #0
 8009f00:	9308      	str	r3, [sp, #32]
 8009f02:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f04:	461f      	mov	r7, r3
 8009f06:	220a      	movs	r2, #10
 8009f08:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009f0a:	7805      	ldrb	r5, [r0, #0]
 8009f0c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009f10:	b2d9      	uxtb	r1, r3
 8009f12:	2909      	cmp	r1, #9
 8009f14:	d928      	bls.n	8009f68 <_strtod_l+0x1a8>
 8009f16:	494e      	ldr	r1, [pc, #312]	@ (800a050 <_strtod_l+0x290>)
 8009f18:	2201      	movs	r2, #1
 8009f1a:	f000 fe7e 	bl	800ac1a <strncmp>
 8009f1e:	2800      	cmp	r0, #0
 8009f20:	d032      	beq.n	8009f88 <_strtod_l+0x1c8>
 8009f22:	2000      	movs	r0, #0
 8009f24:	462a      	mov	r2, r5
 8009f26:	4681      	mov	r9, r0
 8009f28:	463d      	mov	r5, r7
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	2a65      	cmp	r2, #101	@ 0x65
 8009f2e:	d001      	beq.n	8009f34 <_strtod_l+0x174>
 8009f30:	2a45      	cmp	r2, #69	@ 0x45
 8009f32:	d114      	bne.n	8009f5e <_strtod_l+0x19e>
 8009f34:	b91d      	cbnz	r5, 8009f3e <_strtod_l+0x17e>
 8009f36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f38:	4302      	orrs	r2, r0
 8009f3a:	d095      	beq.n	8009e68 <_strtod_l+0xa8>
 8009f3c:	2500      	movs	r5, #0
 8009f3e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009f40:	1c62      	adds	r2, r4, #1
 8009f42:	9219      	str	r2, [sp, #100]	@ 0x64
 8009f44:	7862      	ldrb	r2, [r4, #1]
 8009f46:	2a2b      	cmp	r2, #43	@ 0x2b
 8009f48:	d077      	beq.n	800a03a <_strtod_l+0x27a>
 8009f4a:	2a2d      	cmp	r2, #45	@ 0x2d
 8009f4c:	d07b      	beq.n	800a046 <_strtod_l+0x286>
 8009f4e:	f04f 0c00 	mov.w	ip, #0
 8009f52:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009f56:	2909      	cmp	r1, #9
 8009f58:	f240 8082 	bls.w	800a060 <_strtod_l+0x2a0>
 8009f5c:	9419      	str	r4, [sp, #100]	@ 0x64
 8009f5e:	f04f 0800 	mov.w	r8, #0
 8009f62:	e0a2      	b.n	800a0aa <_strtod_l+0x2ea>
 8009f64:	2300      	movs	r3, #0
 8009f66:	e7c7      	b.n	8009ef8 <_strtod_l+0x138>
 8009f68:	2f08      	cmp	r7, #8
 8009f6a:	bfd5      	itete	le
 8009f6c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8009f6e:	9908      	ldrgt	r1, [sp, #32]
 8009f70:	fb02 3301 	mlale	r3, r2, r1, r3
 8009f74:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009f78:	f100 0001 	add.w	r0, r0, #1
 8009f7c:	bfd4      	ite	le
 8009f7e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009f80:	9308      	strgt	r3, [sp, #32]
 8009f82:	3701      	adds	r7, #1
 8009f84:	9019      	str	r0, [sp, #100]	@ 0x64
 8009f86:	e7bf      	b.n	8009f08 <_strtod_l+0x148>
 8009f88:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009f8a:	1c5a      	adds	r2, r3, #1
 8009f8c:	9219      	str	r2, [sp, #100]	@ 0x64
 8009f8e:	785a      	ldrb	r2, [r3, #1]
 8009f90:	b37f      	cbz	r7, 8009ff2 <_strtod_l+0x232>
 8009f92:	4681      	mov	r9, r0
 8009f94:	463d      	mov	r5, r7
 8009f96:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009f9a:	2b09      	cmp	r3, #9
 8009f9c:	d912      	bls.n	8009fc4 <_strtod_l+0x204>
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	e7c4      	b.n	8009f2c <_strtod_l+0x16c>
 8009fa2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009fa4:	1c5a      	adds	r2, r3, #1
 8009fa6:	9219      	str	r2, [sp, #100]	@ 0x64
 8009fa8:	785a      	ldrb	r2, [r3, #1]
 8009faa:	3001      	adds	r0, #1
 8009fac:	2a30      	cmp	r2, #48	@ 0x30
 8009fae:	d0f8      	beq.n	8009fa2 <_strtod_l+0x1e2>
 8009fb0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009fb4:	2b08      	cmp	r3, #8
 8009fb6:	f200 84d3 	bhi.w	800a960 <_strtod_l+0xba0>
 8009fba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009fbc:	930c      	str	r3, [sp, #48]	@ 0x30
 8009fbe:	4681      	mov	r9, r0
 8009fc0:	2000      	movs	r0, #0
 8009fc2:	4605      	mov	r5, r0
 8009fc4:	3a30      	subs	r2, #48	@ 0x30
 8009fc6:	f100 0301 	add.w	r3, r0, #1
 8009fca:	d02a      	beq.n	800a022 <_strtod_l+0x262>
 8009fcc:	4499      	add	r9, r3
 8009fce:	eb00 0c05 	add.w	ip, r0, r5
 8009fd2:	462b      	mov	r3, r5
 8009fd4:	210a      	movs	r1, #10
 8009fd6:	4563      	cmp	r3, ip
 8009fd8:	d10d      	bne.n	8009ff6 <_strtod_l+0x236>
 8009fda:	1c69      	adds	r1, r5, #1
 8009fdc:	4401      	add	r1, r0
 8009fde:	4428      	add	r0, r5
 8009fe0:	2808      	cmp	r0, #8
 8009fe2:	dc16      	bgt.n	800a012 <_strtod_l+0x252>
 8009fe4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009fe6:	230a      	movs	r3, #10
 8009fe8:	fb03 2300 	mla	r3, r3, r0, r2
 8009fec:	930a      	str	r3, [sp, #40]	@ 0x28
 8009fee:	2300      	movs	r3, #0
 8009ff0:	e018      	b.n	800a024 <_strtod_l+0x264>
 8009ff2:	4638      	mov	r0, r7
 8009ff4:	e7da      	b.n	8009fac <_strtod_l+0x1ec>
 8009ff6:	2b08      	cmp	r3, #8
 8009ff8:	f103 0301 	add.w	r3, r3, #1
 8009ffc:	dc03      	bgt.n	800a006 <_strtod_l+0x246>
 8009ffe:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a000:	434e      	muls	r6, r1
 800a002:	960a      	str	r6, [sp, #40]	@ 0x28
 800a004:	e7e7      	b.n	8009fd6 <_strtod_l+0x216>
 800a006:	2b10      	cmp	r3, #16
 800a008:	bfde      	ittt	le
 800a00a:	9e08      	ldrle	r6, [sp, #32]
 800a00c:	434e      	mulle	r6, r1
 800a00e:	9608      	strle	r6, [sp, #32]
 800a010:	e7e1      	b.n	8009fd6 <_strtod_l+0x216>
 800a012:	280f      	cmp	r0, #15
 800a014:	dceb      	bgt.n	8009fee <_strtod_l+0x22e>
 800a016:	9808      	ldr	r0, [sp, #32]
 800a018:	230a      	movs	r3, #10
 800a01a:	fb03 2300 	mla	r3, r3, r0, r2
 800a01e:	9308      	str	r3, [sp, #32]
 800a020:	e7e5      	b.n	8009fee <_strtod_l+0x22e>
 800a022:	4629      	mov	r1, r5
 800a024:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a026:	1c50      	adds	r0, r2, #1
 800a028:	9019      	str	r0, [sp, #100]	@ 0x64
 800a02a:	7852      	ldrb	r2, [r2, #1]
 800a02c:	4618      	mov	r0, r3
 800a02e:	460d      	mov	r5, r1
 800a030:	e7b1      	b.n	8009f96 <_strtod_l+0x1d6>
 800a032:	f04f 0900 	mov.w	r9, #0
 800a036:	2301      	movs	r3, #1
 800a038:	e77d      	b.n	8009f36 <_strtod_l+0x176>
 800a03a:	f04f 0c00 	mov.w	ip, #0
 800a03e:	1ca2      	adds	r2, r4, #2
 800a040:	9219      	str	r2, [sp, #100]	@ 0x64
 800a042:	78a2      	ldrb	r2, [r4, #2]
 800a044:	e785      	b.n	8009f52 <_strtod_l+0x192>
 800a046:	f04f 0c01 	mov.w	ip, #1
 800a04a:	e7f8      	b.n	800a03e <_strtod_l+0x27e>
 800a04c:	0800cf0c 	.word	0x0800cf0c
 800a050:	0800cee8 	.word	0x0800cee8
 800a054:	7ff00000 	.word	0x7ff00000
 800a058:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a05a:	1c51      	adds	r1, r2, #1
 800a05c:	9119      	str	r1, [sp, #100]	@ 0x64
 800a05e:	7852      	ldrb	r2, [r2, #1]
 800a060:	2a30      	cmp	r2, #48	@ 0x30
 800a062:	d0f9      	beq.n	800a058 <_strtod_l+0x298>
 800a064:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a068:	2908      	cmp	r1, #8
 800a06a:	f63f af78 	bhi.w	8009f5e <_strtod_l+0x19e>
 800a06e:	3a30      	subs	r2, #48	@ 0x30
 800a070:	920e      	str	r2, [sp, #56]	@ 0x38
 800a072:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a074:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a076:	f04f 080a 	mov.w	r8, #10
 800a07a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a07c:	1c56      	adds	r6, r2, #1
 800a07e:	9619      	str	r6, [sp, #100]	@ 0x64
 800a080:	7852      	ldrb	r2, [r2, #1]
 800a082:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a086:	f1be 0f09 	cmp.w	lr, #9
 800a08a:	d939      	bls.n	800a100 <_strtod_l+0x340>
 800a08c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a08e:	1a76      	subs	r6, r6, r1
 800a090:	2e08      	cmp	r6, #8
 800a092:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a096:	dc03      	bgt.n	800a0a0 <_strtod_l+0x2e0>
 800a098:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a09a:	4588      	cmp	r8, r1
 800a09c:	bfa8      	it	ge
 800a09e:	4688      	movge	r8, r1
 800a0a0:	f1bc 0f00 	cmp.w	ip, #0
 800a0a4:	d001      	beq.n	800a0aa <_strtod_l+0x2ea>
 800a0a6:	f1c8 0800 	rsb	r8, r8, #0
 800a0aa:	2d00      	cmp	r5, #0
 800a0ac:	d14e      	bne.n	800a14c <_strtod_l+0x38c>
 800a0ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a0b0:	4308      	orrs	r0, r1
 800a0b2:	f47f aebe 	bne.w	8009e32 <_strtod_l+0x72>
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	f47f aed6 	bne.w	8009e68 <_strtod_l+0xa8>
 800a0bc:	2a69      	cmp	r2, #105	@ 0x69
 800a0be:	d028      	beq.n	800a112 <_strtod_l+0x352>
 800a0c0:	dc25      	bgt.n	800a10e <_strtod_l+0x34e>
 800a0c2:	2a49      	cmp	r2, #73	@ 0x49
 800a0c4:	d025      	beq.n	800a112 <_strtod_l+0x352>
 800a0c6:	2a4e      	cmp	r2, #78	@ 0x4e
 800a0c8:	f47f aece 	bne.w	8009e68 <_strtod_l+0xa8>
 800a0cc:	499b      	ldr	r1, [pc, #620]	@ (800a33c <_strtod_l+0x57c>)
 800a0ce:	a819      	add	r0, sp, #100	@ 0x64
 800a0d0:	f001 f990 	bl	800b3f4 <__match>
 800a0d4:	2800      	cmp	r0, #0
 800a0d6:	f43f aec7 	beq.w	8009e68 <_strtod_l+0xa8>
 800a0da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a0dc:	781b      	ldrb	r3, [r3, #0]
 800a0de:	2b28      	cmp	r3, #40	@ 0x28
 800a0e0:	d12e      	bne.n	800a140 <_strtod_l+0x380>
 800a0e2:	4997      	ldr	r1, [pc, #604]	@ (800a340 <_strtod_l+0x580>)
 800a0e4:	aa1c      	add	r2, sp, #112	@ 0x70
 800a0e6:	a819      	add	r0, sp, #100	@ 0x64
 800a0e8:	f001 f998 	bl	800b41c <__hexnan>
 800a0ec:	2805      	cmp	r0, #5
 800a0ee:	d127      	bne.n	800a140 <_strtod_l+0x380>
 800a0f0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a0f2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a0f6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a0fa:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a0fe:	e698      	b.n	8009e32 <_strtod_l+0x72>
 800a100:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a102:	fb08 2101 	mla	r1, r8, r1, r2
 800a106:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a10a:	920e      	str	r2, [sp, #56]	@ 0x38
 800a10c:	e7b5      	b.n	800a07a <_strtod_l+0x2ba>
 800a10e:	2a6e      	cmp	r2, #110	@ 0x6e
 800a110:	e7da      	b.n	800a0c8 <_strtod_l+0x308>
 800a112:	498c      	ldr	r1, [pc, #560]	@ (800a344 <_strtod_l+0x584>)
 800a114:	a819      	add	r0, sp, #100	@ 0x64
 800a116:	f001 f96d 	bl	800b3f4 <__match>
 800a11a:	2800      	cmp	r0, #0
 800a11c:	f43f aea4 	beq.w	8009e68 <_strtod_l+0xa8>
 800a120:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a122:	4989      	ldr	r1, [pc, #548]	@ (800a348 <_strtod_l+0x588>)
 800a124:	3b01      	subs	r3, #1
 800a126:	a819      	add	r0, sp, #100	@ 0x64
 800a128:	9319      	str	r3, [sp, #100]	@ 0x64
 800a12a:	f001 f963 	bl	800b3f4 <__match>
 800a12e:	b910      	cbnz	r0, 800a136 <_strtod_l+0x376>
 800a130:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a132:	3301      	adds	r3, #1
 800a134:	9319      	str	r3, [sp, #100]	@ 0x64
 800a136:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800a358 <_strtod_l+0x598>
 800a13a:	f04f 0a00 	mov.w	sl, #0
 800a13e:	e678      	b.n	8009e32 <_strtod_l+0x72>
 800a140:	4882      	ldr	r0, [pc, #520]	@ (800a34c <_strtod_l+0x58c>)
 800a142:	f000 fe5d 	bl	800ae00 <nan>
 800a146:	ec5b ab10 	vmov	sl, fp, d0
 800a14a:	e672      	b.n	8009e32 <_strtod_l+0x72>
 800a14c:	eba8 0309 	sub.w	r3, r8, r9
 800a150:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a152:	9309      	str	r3, [sp, #36]	@ 0x24
 800a154:	2f00      	cmp	r7, #0
 800a156:	bf08      	it	eq
 800a158:	462f      	moveq	r7, r5
 800a15a:	2d10      	cmp	r5, #16
 800a15c:	462c      	mov	r4, r5
 800a15e:	bfa8      	it	ge
 800a160:	2410      	movge	r4, #16
 800a162:	f7f6 f9ff 	bl	8000564 <__aeabi_ui2d>
 800a166:	2d09      	cmp	r5, #9
 800a168:	4682      	mov	sl, r0
 800a16a:	468b      	mov	fp, r1
 800a16c:	dc13      	bgt.n	800a196 <_strtod_l+0x3d6>
 800a16e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a170:	2b00      	cmp	r3, #0
 800a172:	f43f ae5e 	beq.w	8009e32 <_strtod_l+0x72>
 800a176:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a178:	dd78      	ble.n	800a26c <_strtod_l+0x4ac>
 800a17a:	2b16      	cmp	r3, #22
 800a17c:	dc5f      	bgt.n	800a23e <_strtod_l+0x47e>
 800a17e:	4974      	ldr	r1, [pc, #464]	@ (800a350 <_strtod_l+0x590>)
 800a180:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a184:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a188:	4652      	mov	r2, sl
 800a18a:	465b      	mov	r3, fp
 800a18c:	f7f6 fa64 	bl	8000658 <__aeabi_dmul>
 800a190:	4682      	mov	sl, r0
 800a192:	468b      	mov	fp, r1
 800a194:	e64d      	b.n	8009e32 <_strtod_l+0x72>
 800a196:	4b6e      	ldr	r3, [pc, #440]	@ (800a350 <_strtod_l+0x590>)
 800a198:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a19c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a1a0:	f7f6 fa5a 	bl	8000658 <__aeabi_dmul>
 800a1a4:	4682      	mov	sl, r0
 800a1a6:	9808      	ldr	r0, [sp, #32]
 800a1a8:	468b      	mov	fp, r1
 800a1aa:	f7f6 f9db 	bl	8000564 <__aeabi_ui2d>
 800a1ae:	4602      	mov	r2, r0
 800a1b0:	460b      	mov	r3, r1
 800a1b2:	4650      	mov	r0, sl
 800a1b4:	4659      	mov	r1, fp
 800a1b6:	f7f6 f899 	bl	80002ec <__adddf3>
 800a1ba:	2d0f      	cmp	r5, #15
 800a1bc:	4682      	mov	sl, r0
 800a1be:	468b      	mov	fp, r1
 800a1c0:	ddd5      	ble.n	800a16e <_strtod_l+0x3ae>
 800a1c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1c4:	1b2c      	subs	r4, r5, r4
 800a1c6:	441c      	add	r4, r3
 800a1c8:	2c00      	cmp	r4, #0
 800a1ca:	f340 8096 	ble.w	800a2fa <_strtod_l+0x53a>
 800a1ce:	f014 030f 	ands.w	r3, r4, #15
 800a1d2:	d00a      	beq.n	800a1ea <_strtod_l+0x42a>
 800a1d4:	495e      	ldr	r1, [pc, #376]	@ (800a350 <_strtod_l+0x590>)
 800a1d6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a1da:	4652      	mov	r2, sl
 800a1dc:	465b      	mov	r3, fp
 800a1de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1e2:	f7f6 fa39 	bl	8000658 <__aeabi_dmul>
 800a1e6:	4682      	mov	sl, r0
 800a1e8:	468b      	mov	fp, r1
 800a1ea:	f034 040f 	bics.w	r4, r4, #15
 800a1ee:	d073      	beq.n	800a2d8 <_strtod_l+0x518>
 800a1f0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a1f4:	dd48      	ble.n	800a288 <_strtod_l+0x4c8>
 800a1f6:	2400      	movs	r4, #0
 800a1f8:	46a0      	mov	r8, r4
 800a1fa:	940a      	str	r4, [sp, #40]	@ 0x28
 800a1fc:	46a1      	mov	r9, r4
 800a1fe:	9a05      	ldr	r2, [sp, #20]
 800a200:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800a358 <_strtod_l+0x598>
 800a204:	2322      	movs	r3, #34	@ 0x22
 800a206:	6013      	str	r3, [r2, #0]
 800a208:	f04f 0a00 	mov.w	sl, #0
 800a20c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a20e:	2b00      	cmp	r3, #0
 800a210:	f43f ae0f 	beq.w	8009e32 <_strtod_l+0x72>
 800a214:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a216:	9805      	ldr	r0, [sp, #20]
 800a218:	f001 faa4 	bl	800b764 <_Bfree>
 800a21c:	9805      	ldr	r0, [sp, #20]
 800a21e:	4649      	mov	r1, r9
 800a220:	f001 faa0 	bl	800b764 <_Bfree>
 800a224:	9805      	ldr	r0, [sp, #20]
 800a226:	4641      	mov	r1, r8
 800a228:	f001 fa9c 	bl	800b764 <_Bfree>
 800a22c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a22e:	9805      	ldr	r0, [sp, #20]
 800a230:	f001 fa98 	bl	800b764 <_Bfree>
 800a234:	9805      	ldr	r0, [sp, #20]
 800a236:	4621      	mov	r1, r4
 800a238:	f001 fa94 	bl	800b764 <_Bfree>
 800a23c:	e5f9      	b.n	8009e32 <_strtod_l+0x72>
 800a23e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a240:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a244:	4293      	cmp	r3, r2
 800a246:	dbbc      	blt.n	800a1c2 <_strtod_l+0x402>
 800a248:	4c41      	ldr	r4, [pc, #260]	@ (800a350 <_strtod_l+0x590>)
 800a24a:	f1c5 050f 	rsb	r5, r5, #15
 800a24e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a252:	4652      	mov	r2, sl
 800a254:	465b      	mov	r3, fp
 800a256:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a25a:	f7f6 f9fd 	bl	8000658 <__aeabi_dmul>
 800a25e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a260:	1b5d      	subs	r5, r3, r5
 800a262:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a266:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a26a:	e78f      	b.n	800a18c <_strtod_l+0x3cc>
 800a26c:	3316      	adds	r3, #22
 800a26e:	dba8      	blt.n	800a1c2 <_strtod_l+0x402>
 800a270:	4b37      	ldr	r3, [pc, #220]	@ (800a350 <_strtod_l+0x590>)
 800a272:	eba9 0808 	sub.w	r8, r9, r8
 800a276:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a27a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a27e:	4650      	mov	r0, sl
 800a280:	4659      	mov	r1, fp
 800a282:	f7f6 fb13 	bl	80008ac <__aeabi_ddiv>
 800a286:	e783      	b.n	800a190 <_strtod_l+0x3d0>
 800a288:	4b32      	ldr	r3, [pc, #200]	@ (800a354 <_strtod_l+0x594>)
 800a28a:	9308      	str	r3, [sp, #32]
 800a28c:	2300      	movs	r3, #0
 800a28e:	1124      	asrs	r4, r4, #4
 800a290:	4650      	mov	r0, sl
 800a292:	4659      	mov	r1, fp
 800a294:	461e      	mov	r6, r3
 800a296:	2c01      	cmp	r4, #1
 800a298:	dc21      	bgt.n	800a2de <_strtod_l+0x51e>
 800a29a:	b10b      	cbz	r3, 800a2a0 <_strtod_l+0x4e0>
 800a29c:	4682      	mov	sl, r0
 800a29e:	468b      	mov	fp, r1
 800a2a0:	492c      	ldr	r1, [pc, #176]	@ (800a354 <_strtod_l+0x594>)
 800a2a2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a2a6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a2aa:	4652      	mov	r2, sl
 800a2ac:	465b      	mov	r3, fp
 800a2ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2b2:	f7f6 f9d1 	bl	8000658 <__aeabi_dmul>
 800a2b6:	4b28      	ldr	r3, [pc, #160]	@ (800a358 <_strtod_l+0x598>)
 800a2b8:	460a      	mov	r2, r1
 800a2ba:	400b      	ands	r3, r1
 800a2bc:	4927      	ldr	r1, [pc, #156]	@ (800a35c <_strtod_l+0x59c>)
 800a2be:	428b      	cmp	r3, r1
 800a2c0:	4682      	mov	sl, r0
 800a2c2:	d898      	bhi.n	800a1f6 <_strtod_l+0x436>
 800a2c4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a2c8:	428b      	cmp	r3, r1
 800a2ca:	bf86      	itte	hi
 800a2cc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800a360 <_strtod_l+0x5a0>
 800a2d0:	f04f 3aff 	movhi.w	sl, #4294967295
 800a2d4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a2d8:	2300      	movs	r3, #0
 800a2da:	9308      	str	r3, [sp, #32]
 800a2dc:	e07a      	b.n	800a3d4 <_strtod_l+0x614>
 800a2de:	07e2      	lsls	r2, r4, #31
 800a2e0:	d505      	bpl.n	800a2ee <_strtod_l+0x52e>
 800a2e2:	9b08      	ldr	r3, [sp, #32]
 800a2e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e8:	f7f6 f9b6 	bl	8000658 <__aeabi_dmul>
 800a2ec:	2301      	movs	r3, #1
 800a2ee:	9a08      	ldr	r2, [sp, #32]
 800a2f0:	3208      	adds	r2, #8
 800a2f2:	3601      	adds	r6, #1
 800a2f4:	1064      	asrs	r4, r4, #1
 800a2f6:	9208      	str	r2, [sp, #32]
 800a2f8:	e7cd      	b.n	800a296 <_strtod_l+0x4d6>
 800a2fa:	d0ed      	beq.n	800a2d8 <_strtod_l+0x518>
 800a2fc:	4264      	negs	r4, r4
 800a2fe:	f014 020f 	ands.w	r2, r4, #15
 800a302:	d00a      	beq.n	800a31a <_strtod_l+0x55a>
 800a304:	4b12      	ldr	r3, [pc, #72]	@ (800a350 <_strtod_l+0x590>)
 800a306:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a30a:	4650      	mov	r0, sl
 800a30c:	4659      	mov	r1, fp
 800a30e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a312:	f7f6 facb 	bl	80008ac <__aeabi_ddiv>
 800a316:	4682      	mov	sl, r0
 800a318:	468b      	mov	fp, r1
 800a31a:	1124      	asrs	r4, r4, #4
 800a31c:	d0dc      	beq.n	800a2d8 <_strtod_l+0x518>
 800a31e:	2c1f      	cmp	r4, #31
 800a320:	dd20      	ble.n	800a364 <_strtod_l+0x5a4>
 800a322:	2400      	movs	r4, #0
 800a324:	46a0      	mov	r8, r4
 800a326:	940a      	str	r4, [sp, #40]	@ 0x28
 800a328:	46a1      	mov	r9, r4
 800a32a:	9a05      	ldr	r2, [sp, #20]
 800a32c:	2322      	movs	r3, #34	@ 0x22
 800a32e:	f04f 0a00 	mov.w	sl, #0
 800a332:	f04f 0b00 	mov.w	fp, #0
 800a336:	6013      	str	r3, [r2, #0]
 800a338:	e768      	b.n	800a20c <_strtod_l+0x44c>
 800a33a:	bf00      	nop
 800a33c:	0800cef3 	.word	0x0800cef3
 800a340:	0800cef8 	.word	0x0800cef8
 800a344:	0800ceea 	.word	0x0800ceea
 800a348:	0800ceed 	.word	0x0800ceed
 800a34c:	0800cffc 	.word	0x0800cffc
 800a350:	0800d100 	.word	0x0800d100
 800a354:	0800d0d8 	.word	0x0800d0d8
 800a358:	7ff00000 	.word	0x7ff00000
 800a35c:	7ca00000 	.word	0x7ca00000
 800a360:	7fefffff 	.word	0x7fefffff
 800a364:	f014 0310 	ands.w	r3, r4, #16
 800a368:	bf18      	it	ne
 800a36a:	236a      	movne	r3, #106	@ 0x6a
 800a36c:	4ea9      	ldr	r6, [pc, #676]	@ (800a614 <_strtod_l+0x854>)
 800a36e:	9308      	str	r3, [sp, #32]
 800a370:	4650      	mov	r0, sl
 800a372:	4659      	mov	r1, fp
 800a374:	2300      	movs	r3, #0
 800a376:	07e2      	lsls	r2, r4, #31
 800a378:	d504      	bpl.n	800a384 <_strtod_l+0x5c4>
 800a37a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a37e:	f7f6 f96b 	bl	8000658 <__aeabi_dmul>
 800a382:	2301      	movs	r3, #1
 800a384:	1064      	asrs	r4, r4, #1
 800a386:	f106 0608 	add.w	r6, r6, #8
 800a38a:	d1f4      	bne.n	800a376 <_strtod_l+0x5b6>
 800a38c:	b10b      	cbz	r3, 800a392 <_strtod_l+0x5d2>
 800a38e:	4682      	mov	sl, r0
 800a390:	468b      	mov	fp, r1
 800a392:	9b08      	ldr	r3, [sp, #32]
 800a394:	b1b3      	cbz	r3, 800a3c4 <_strtod_l+0x604>
 800a396:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a39a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	4659      	mov	r1, fp
 800a3a2:	dd0f      	ble.n	800a3c4 <_strtod_l+0x604>
 800a3a4:	2b1f      	cmp	r3, #31
 800a3a6:	dd55      	ble.n	800a454 <_strtod_l+0x694>
 800a3a8:	2b34      	cmp	r3, #52	@ 0x34
 800a3aa:	bfde      	ittt	le
 800a3ac:	f04f 33ff 	movle.w	r3, #4294967295
 800a3b0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a3b4:	4093      	lslle	r3, r2
 800a3b6:	f04f 0a00 	mov.w	sl, #0
 800a3ba:	bfcc      	ite	gt
 800a3bc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a3c0:	ea03 0b01 	andle.w	fp, r3, r1
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	4650      	mov	r0, sl
 800a3ca:	4659      	mov	r1, fp
 800a3cc:	f7f6 fbac 	bl	8000b28 <__aeabi_dcmpeq>
 800a3d0:	2800      	cmp	r0, #0
 800a3d2:	d1a6      	bne.n	800a322 <_strtod_l+0x562>
 800a3d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a3d6:	9300      	str	r3, [sp, #0]
 800a3d8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a3da:	9805      	ldr	r0, [sp, #20]
 800a3dc:	462b      	mov	r3, r5
 800a3de:	463a      	mov	r2, r7
 800a3e0:	f001 fa28 	bl	800b834 <__s2b>
 800a3e4:	900a      	str	r0, [sp, #40]	@ 0x28
 800a3e6:	2800      	cmp	r0, #0
 800a3e8:	f43f af05 	beq.w	800a1f6 <_strtod_l+0x436>
 800a3ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a3ee:	2a00      	cmp	r2, #0
 800a3f0:	eba9 0308 	sub.w	r3, r9, r8
 800a3f4:	bfa8      	it	ge
 800a3f6:	2300      	movge	r3, #0
 800a3f8:	9312      	str	r3, [sp, #72]	@ 0x48
 800a3fa:	2400      	movs	r4, #0
 800a3fc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a400:	9316      	str	r3, [sp, #88]	@ 0x58
 800a402:	46a0      	mov	r8, r4
 800a404:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a406:	9805      	ldr	r0, [sp, #20]
 800a408:	6859      	ldr	r1, [r3, #4]
 800a40a:	f001 f96b 	bl	800b6e4 <_Balloc>
 800a40e:	4681      	mov	r9, r0
 800a410:	2800      	cmp	r0, #0
 800a412:	f43f aef4 	beq.w	800a1fe <_strtod_l+0x43e>
 800a416:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a418:	691a      	ldr	r2, [r3, #16]
 800a41a:	3202      	adds	r2, #2
 800a41c:	f103 010c 	add.w	r1, r3, #12
 800a420:	0092      	lsls	r2, r2, #2
 800a422:	300c      	adds	r0, #12
 800a424:	f000 fcdb 	bl	800adde <memcpy>
 800a428:	ec4b ab10 	vmov	d0, sl, fp
 800a42c:	9805      	ldr	r0, [sp, #20]
 800a42e:	aa1c      	add	r2, sp, #112	@ 0x70
 800a430:	a91b      	add	r1, sp, #108	@ 0x6c
 800a432:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a436:	f001 fd39 	bl	800beac <__d2b>
 800a43a:	901a      	str	r0, [sp, #104]	@ 0x68
 800a43c:	2800      	cmp	r0, #0
 800a43e:	f43f aede 	beq.w	800a1fe <_strtod_l+0x43e>
 800a442:	9805      	ldr	r0, [sp, #20]
 800a444:	2101      	movs	r1, #1
 800a446:	f001 fa8b 	bl	800b960 <__i2b>
 800a44a:	4680      	mov	r8, r0
 800a44c:	b948      	cbnz	r0, 800a462 <_strtod_l+0x6a2>
 800a44e:	f04f 0800 	mov.w	r8, #0
 800a452:	e6d4      	b.n	800a1fe <_strtod_l+0x43e>
 800a454:	f04f 32ff 	mov.w	r2, #4294967295
 800a458:	fa02 f303 	lsl.w	r3, r2, r3
 800a45c:	ea03 0a0a 	and.w	sl, r3, sl
 800a460:	e7b0      	b.n	800a3c4 <_strtod_l+0x604>
 800a462:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a464:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a466:	2d00      	cmp	r5, #0
 800a468:	bfab      	itete	ge
 800a46a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a46c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a46e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a470:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a472:	bfac      	ite	ge
 800a474:	18ef      	addge	r7, r5, r3
 800a476:	1b5e      	sublt	r6, r3, r5
 800a478:	9b08      	ldr	r3, [sp, #32]
 800a47a:	1aed      	subs	r5, r5, r3
 800a47c:	4415      	add	r5, r2
 800a47e:	4b66      	ldr	r3, [pc, #408]	@ (800a618 <_strtod_l+0x858>)
 800a480:	3d01      	subs	r5, #1
 800a482:	429d      	cmp	r5, r3
 800a484:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a488:	da50      	bge.n	800a52c <_strtod_l+0x76c>
 800a48a:	1b5b      	subs	r3, r3, r5
 800a48c:	2b1f      	cmp	r3, #31
 800a48e:	eba2 0203 	sub.w	r2, r2, r3
 800a492:	f04f 0101 	mov.w	r1, #1
 800a496:	dc3d      	bgt.n	800a514 <_strtod_l+0x754>
 800a498:	fa01 f303 	lsl.w	r3, r1, r3
 800a49c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a49e:	2300      	movs	r3, #0
 800a4a0:	9310      	str	r3, [sp, #64]	@ 0x40
 800a4a2:	18bd      	adds	r5, r7, r2
 800a4a4:	9b08      	ldr	r3, [sp, #32]
 800a4a6:	42af      	cmp	r7, r5
 800a4a8:	4416      	add	r6, r2
 800a4aa:	441e      	add	r6, r3
 800a4ac:	463b      	mov	r3, r7
 800a4ae:	bfa8      	it	ge
 800a4b0:	462b      	movge	r3, r5
 800a4b2:	42b3      	cmp	r3, r6
 800a4b4:	bfa8      	it	ge
 800a4b6:	4633      	movge	r3, r6
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	bfc2      	ittt	gt
 800a4bc:	1aed      	subgt	r5, r5, r3
 800a4be:	1af6      	subgt	r6, r6, r3
 800a4c0:	1aff      	subgt	r7, r7, r3
 800a4c2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	dd16      	ble.n	800a4f6 <_strtod_l+0x736>
 800a4c8:	4641      	mov	r1, r8
 800a4ca:	9805      	ldr	r0, [sp, #20]
 800a4cc:	461a      	mov	r2, r3
 800a4ce:	f001 fb07 	bl	800bae0 <__pow5mult>
 800a4d2:	4680      	mov	r8, r0
 800a4d4:	2800      	cmp	r0, #0
 800a4d6:	d0ba      	beq.n	800a44e <_strtod_l+0x68e>
 800a4d8:	4601      	mov	r1, r0
 800a4da:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a4dc:	9805      	ldr	r0, [sp, #20]
 800a4de:	f001 fa55 	bl	800b98c <__multiply>
 800a4e2:	900e      	str	r0, [sp, #56]	@ 0x38
 800a4e4:	2800      	cmp	r0, #0
 800a4e6:	f43f ae8a 	beq.w	800a1fe <_strtod_l+0x43e>
 800a4ea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a4ec:	9805      	ldr	r0, [sp, #20]
 800a4ee:	f001 f939 	bl	800b764 <_Bfree>
 800a4f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a4f4:	931a      	str	r3, [sp, #104]	@ 0x68
 800a4f6:	2d00      	cmp	r5, #0
 800a4f8:	dc1d      	bgt.n	800a536 <_strtod_l+0x776>
 800a4fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	dd23      	ble.n	800a548 <_strtod_l+0x788>
 800a500:	4649      	mov	r1, r9
 800a502:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a504:	9805      	ldr	r0, [sp, #20]
 800a506:	f001 faeb 	bl	800bae0 <__pow5mult>
 800a50a:	4681      	mov	r9, r0
 800a50c:	b9e0      	cbnz	r0, 800a548 <_strtod_l+0x788>
 800a50e:	f04f 0900 	mov.w	r9, #0
 800a512:	e674      	b.n	800a1fe <_strtod_l+0x43e>
 800a514:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a518:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a51c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a520:	35e2      	adds	r5, #226	@ 0xe2
 800a522:	fa01 f305 	lsl.w	r3, r1, r5
 800a526:	9310      	str	r3, [sp, #64]	@ 0x40
 800a528:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a52a:	e7ba      	b.n	800a4a2 <_strtod_l+0x6e2>
 800a52c:	2300      	movs	r3, #0
 800a52e:	9310      	str	r3, [sp, #64]	@ 0x40
 800a530:	2301      	movs	r3, #1
 800a532:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a534:	e7b5      	b.n	800a4a2 <_strtod_l+0x6e2>
 800a536:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a538:	9805      	ldr	r0, [sp, #20]
 800a53a:	462a      	mov	r2, r5
 800a53c:	f001 fb2a 	bl	800bb94 <__lshift>
 800a540:	901a      	str	r0, [sp, #104]	@ 0x68
 800a542:	2800      	cmp	r0, #0
 800a544:	d1d9      	bne.n	800a4fa <_strtod_l+0x73a>
 800a546:	e65a      	b.n	800a1fe <_strtod_l+0x43e>
 800a548:	2e00      	cmp	r6, #0
 800a54a:	dd07      	ble.n	800a55c <_strtod_l+0x79c>
 800a54c:	4649      	mov	r1, r9
 800a54e:	9805      	ldr	r0, [sp, #20]
 800a550:	4632      	mov	r2, r6
 800a552:	f001 fb1f 	bl	800bb94 <__lshift>
 800a556:	4681      	mov	r9, r0
 800a558:	2800      	cmp	r0, #0
 800a55a:	d0d8      	beq.n	800a50e <_strtod_l+0x74e>
 800a55c:	2f00      	cmp	r7, #0
 800a55e:	dd08      	ble.n	800a572 <_strtod_l+0x7b2>
 800a560:	4641      	mov	r1, r8
 800a562:	9805      	ldr	r0, [sp, #20]
 800a564:	463a      	mov	r2, r7
 800a566:	f001 fb15 	bl	800bb94 <__lshift>
 800a56a:	4680      	mov	r8, r0
 800a56c:	2800      	cmp	r0, #0
 800a56e:	f43f ae46 	beq.w	800a1fe <_strtod_l+0x43e>
 800a572:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a574:	9805      	ldr	r0, [sp, #20]
 800a576:	464a      	mov	r2, r9
 800a578:	f001 fb94 	bl	800bca4 <__mdiff>
 800a57c:	4604      	mov	r4, r0
 800a57e:	2800      	cmp	r0, #0
 800a580:	f43f ae3d 	beq.w	800a1fe <_strtod_l+0x43e>
 800a584:	68c3      	ldr	r3, [r0, #12]
 800a586:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a588:	2300      	movs	r3, #0
 800a58a:	60c3      	str	r3, [r0, #12]
 800a58c:	4641      	mov	r1, r8
 800a58e:	f001 fb6d 	bl	800bc6c <__mcmp>
 800a592:	2800      	cmp	r0, #0
 800a594:	da46      	bge.n	800a624 <_strtod_l+0x864>
 800a596:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a598:	ea53 030a 	orrs.w	r3, r3, sl
 800a59c:	d16c      	bne.n	800a678 <_strtod_l+0x8b8>
 800a59e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d168      	bne.n	800a678 <_strtod_l+0x8b8>
 800a5a6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a5aa:	0d1b      	lsrs	r3, r3, #20
 800a5ac:	051b      	lsls	r3, r3, #20
 800a5ae:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a5b2:	d961      	bls.n	800a678 <_strtod_l+0x8b8>
 800a5b4:	6963      	ldr	r3, [r4, #20]
 800a5b6:	b913      	cbnz	r3, 800a5be <_strtod_l+0x7fe>
 800a5b8:	6923      	ldr	r3, [r4, #16]
 800a5ba:	2b01      	cmp	r3, #1
 800a5bc:	dd5c      	ble.n	800a678 <_strtod_l+0x8b8>
 800a5be:	4621      	mov	r1, r4
 800a5c0:	2201      	movs	r2, #1
 800a5c2:	9805      	ldr	r0, [sp, #20]
 800a5c4:	f001 fae6 	bl	800bb94 <__lshift>
 800a5c8:	4641      	mov	r1, r8
 800a5ca:	4604      	mov	r4, r0
 800a5cc:	f001 fb4e 	bl	800bc6c <__mcmp>
 800a5d0:	2800      	cmp	r0, #0
 800a5d2:	dd51      	ble.n	800a678 <_strtod_l+0x8b8>
 800a5d4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a5d8:	9a08      	ldr	r2, [sp, #32]
 800a5da:	0d1b      	lsrs	r3, r3, #20
 800a5dc:	051b      	lsls	r3, r3, #20
 800a5de:	2a00      	cmp	r2, #0
 800a5e0:	d06b      	beq.n	800a6ba <_strtod_l+0x8fa>
 800a5e2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a5e6:	d868      	bhi.n	800a6ba <_strtod_l+0x8fa>
 800a5e8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a5ec:	f67f ae9d 	bls.w	800a32a <_strtod_l+0x56a>
 800a5f0:	4b0a      	ldr	r3, [pc, #40]	@ (800a61c <_strtod_l+0x85c>)
 800a5f2:	4650      	mov	r0, sl
 800a5f4:	4659      	mov	r1, fp
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	f7f6 f82e 	bl	8000658 <__aeabi_dmul>
 800a5fc:	4b08      	ldr	r3, [pc, #32]	@ (800a620 <_strtod_l+0x860>)
 800a5fe:	400b      	ands	r3, r1
 800a600:	4682      	mov	sl, r0
 800a602:	468b      	mov	fp, r1
 800a604:	2b00      	cmp	r3, #0
 800a606:	f47f ae05 	bne.w	800a214 <_strtod_l+0x454>
 800a60a:	9a05      	ldr	r2, [sp, #20]
 800a60c:	2322      	movs	r3, #34	@ 0x22
 800a60e:	6013      	str	r3, [r2, #0]
 800a610:	e600      	b.n	800a214 <_strtod_l+0x454>
 800a612:	bf00      	nop
 800a614:	0800cf20 	.word	0x0800cf20
 800a618:	fffffc02 	.word	0xfffffc02
 800a61c:	39500000 	.word	0x39500000
 800a620:	7ff00000 	.word	0x7ff00000
 800a624:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a628:	d165      	bne.n	800a6f6 <_strtod_l+0x936>
 800a62a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a62c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a630:	b35a      	cbz	r2, 800a68a <_strtod_l+0x8ca>
 800a632:	4a9f      	ldr	r2, [pc, #636]	@ (800a8b0 <_strtod_l+0xaf0>)
 800a634:	4293      	cmp	r3, r2
 800a636:	d12b      	bne.n	800a690 <_strtod_l+0x8d0>
 800a638:	9b08      	ldr	r3, [sp, #32]
 800a63a:	4651      	mov	r1, sl
 800a63c:	b303      	cbz	r3, 800a680 <_strtod_l+0x8c0>
 800a63e:	4b9d      	ldr	r3, [pc, #628]	@ (800a8b4 <_strtod_l+0xaf4>)
 800a640:	465a      	mov	r2, fp
 800a642:	4013      	ands	r3, r2
 800a644:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a648:	f04f 32ff 	mov.w	r2, #4294967295
 800a64c:	d81b      	bhi.n	800a686 <_strtod_l+0x8c6>
 800a64e:	0d1b      	lsrs	r3, r3, #20
 800a650:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a654:	fa02 f303 	lsl.w	r3, r2, r3
 800a658:	4299      	cmp	r1, r3
 800a65a:	d119      	bne.n	800a690 <_strtod_l+0x8d0>
 800a65c:	4b96      	ldr	r3, [pc, #600]	@ (800a8b8 <_strtod_l+0xaf8>)
 800a65e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a660:	429a      	cmp	r2, r3
 800a662:	d102      	bne.n	800a66a <_strtod_l+0x8aa>
 800a664:	3101      	adds	r1, #1
 800a666:	f43f adca 	beq.w	800a1fe <_strtod_l+0x43e>
 800a66a:	4b92      	ldr	r3, [pc, #584]	@ (800a8b4 <_strtod_l+0xaf4>)
 800a66c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a66e:	401a      	ands	r2, r3
 800a670:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a674:	f04f 0a00 	mov.w	sl, #0
 800a678:	9b08      	ldr	r3, [sp, #32]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d1b8      	bne.n	800a5f0 <_strtod_l+0x830>
 800a67e:	e5c9      	b.n	800a214 <_strtod_l+0x454>
 800a680:	f04f 33ff 	mov.w	r3, #4294967295
 800a684:	e7e8      	b.n	800a658 <_strtod_l+0x898>
 800a686:	4613      	mov	r3, r2
 800a688:	e7e6      	b.n	800a658 <_strtod_l+0x898>
 800a68a:	ea53 030a 	orrs.w	r3, r3, sl
 800a68e:	d0a1      	beq.n	800a5d4 <_strtod_l+0x814>
 800a690:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a692:	b1db      	cbz	r3, 800a6cc <_strtod_l+0x90c>
 800a694:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a696:	4213      	tst	r3, r2
 800a698:	d0ee      	beq.n	800a678 <_strtod_l+0x8b8>
 800a69a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a69c:	9a08      	ldr	r2, [sp, #32]
 800a69e:	4650      	mov	r0, sl
 800a6a0:	4659      	mov	r1, fp
 800a6a2:	b1bb      	cbz	r3, 800a6d4 <_strtod_l+0x914>
 800a6a4:	f7ff fb6b 	bl	8009d7e <sulp>
 800a6a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a6ac:	ec53 2b10 	vmov	r2, r3, d0
 800a6b0:	f7f5 fe1c 	bl	80002ec <__adddf3>
 800a6b4:	4682      	mov	sl, r0
 800a6b6:	468b      	mov	fp, r1
 800a6b8:	e7de      	b.n	800a678 <_strtod_l+0x8b8>
 800a6ba:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a6be:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a6c2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a6c6:	f04f 3aff 	mov.w	sl, #4294967295
 800a6ca:	e7d5      	b.n	800a678 <_strtod_l+0x8b8>
 800a6cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a6ce:	ea13 0f0a 	tst.w	r3, sl
 800a6d2:	e7e1      	b.n	800a698 <_strtod_l+0x8d8>
 800a6d4:	f7ff fb53 	bl	8009d7e <sulp>
 800a6d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a6dc:	ec53 2b10 	vmov	r2, r3, d0
 800a6e0:	f7f5 fe02 	bl	80002e8 <__aeabi_dsub>
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	4682      	mov	sl, r0
 800a6ea:	468b      	mov	fp, r1
 800a6ec:	f7f6 fa1c 	bl	8000b28 <__aeabi_dcmpeq>
 800a6f0:	2800      	cmp	r0, #0
 800a6f2:	d0c1      	beq.n	800a678 <_strtod_l+0x8b8>
 800a6f4:	e619      	b.n	800a32a <_strtod_l+0x56a>
 800a6f6:	4641      	mov	r1, r8
 800a6f8:	4620      	mov	r0, r4
 800a6fa:	f001 fc2f 	bl	800bf5c <__ratio>
 800a6fe:	ec57 6b10 	vmov	r6, r7, d0
 800a702:	2200      	movs	r2, #0
 800a704:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a708:	4630      	mov	r0, r6
 800a70a:	4639      	mov	r1, r7
 800a70c:	f7f6 fa20 	bl	8000b50 <__aeabi_dcmple>
 800a710:	2800      	cmp	r0, #0
 800a712:	d06f      	beq.n	800a7f4 <_strtod_l+0xa34>
 800a714:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a716:	2b00      	cmp	r3, #0
 800a718:	d17a      	bne.n	800a810 <_strtod_l+0xa50>
 800a71a:	f1ba 0f00 	cmp.w	sl, #0
 800a71e:	d158      	bne.n	800a7d2 <_strtod_l+0xa12>
 800a720:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a722:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a726:	2b00      	cmp	r3, #0
 800a728:	d15a      	bne.n	800a7e0 <_strtod_l+0xa20>
 800a72a:	4b64      	ldr	r3, [pc, #400]	@ (800a8bc <_strtod_l+0xafc>)
 800a72c:	2200      	movs	r2, #0
 800a72e:	4630      	mov	r0, r6
 800a730:	4639      	mov	r1, r7
 800a732:	f7f6 fa03 	bl	8000b3c <__aeabi_dcmplt>
 800a736:	2800      	cmp	r0, #0
 800a738:	d159      	bne.n	800a7ee <_strtod_l+0xa2e>
 800a73a:	4630      	mov	r0, r6
 800a73c:	4639      	mov	r1, r7
 800a73e:	4b60      	ldr	r3, [pc, #384]	@ (800a8c0 <_strtod_l+0xb00>)
 800a740:	2200      	movs	r2, #0
 800a742:	f7f5 ff89 	bl	8000658 <__aeabi_dmul>
 800a746:	4606      	mov	r6, r0
 800a748:	460f      	mov	r7, r1
 800a74a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a74e:	9606      	str	r6, [sp, #24]
 800a750:	9307      	str	r3, [sp, #28]
 800a752:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a756:	4d57      	ldr	r5, [pc, #348]	@ (800a8b4 <_strtod_l+0xaf4>)
 800a758:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a75c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a75e:	401d      	ands	r5, r3
 800a760:	4b58      	ldr	r3, [pc, #352]	@ (800a8c4 <_strtod_l+0xb04>)
 800a762:	429d      	cmp	r5, r3
 800a764:	f040 80b2 	bne.w	800a8cc <_strtod_l+0xb0c>
 800a768:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a76a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a76e:	ec4b ab10 	vmov	d0, sl, fp
 800a772:	f001 fb2b 	bl	800bdcc <__ulp>
 800a776:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a77a:	ec51 0b10 	vmov	r0, r1, d0
 800a77e:	f7f5 ff6b 	bl	8000658 <__aeabi_dmul>
 800a782:	4652      	mov	r2, sl
 800a784:	465b      	mov	r3, fp
 800a786:	f7f5 fdb1 	bl	80002ec <__adddf3>
 800a78a:	460b      	mov	r3, r1
 800a78c:	4949      	ldr	r1, [pc, #292]	@ (800a8b4 <_strtod_l+0xaf4>)
 800a78e:	4a4e      	ldr	r2, [pc, #312]	@ (800a8c8 <_strtod_l+0xb08>)
 800a790:	4019      	ands	r1, r3
 800a792:	4291      	cmp	r1, r2
 800a794:	4682      	mov	sl, r0
 800a796:	d942      	bls.n	800a81e <_strtod_l+0xa5e>
 800a798:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a79a:	4b47      	ldr	r3, [pc, #284]	@ (800a8b8 <_strtod_l+0xaf8>)
 800a79c:	429a      	cmp	r2, r3
 800a79e:	d103      	bne.n	800a7a8 <_strtod_l+0x9e8>
 800a7a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a7a2:	3301      	adds	r3, #1
 800a7a4:	f43f ad2b 	beq.w	800a1fe <_strtod_l+0x43e>
 800a7a8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a8b8 <_strtod_l+0xaf8>
 800a7ac:	f04f 3aff 	mov.w	sl, #4294967295
 800a7b0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a7b2:	9805      	ldr	r0, [sp, #20]
 800a7b4:	f000 ffd6 	bl	800b764 <_Bfree>
 800a7b8:	9805      	ldr	r0, [sp, #20]
 800a7ba:	4649      	mov	r1, r9
 800a7bc:	f000 ffd2 	bl	800b764 <_Bfree>
 800a7c0:	9805      	ldr	r0, [sp, #20]
 800a7c2:	4641      	mov	r1, r8
 800a7c4:	f000 ffce 	bl	800b764 <_Bfree>
 800a7c8:	9805      	ldr	r0, [sp, #20]
 800a7ca:	4621      	mov	r1, r4
 800a7cc:	f000 ffca 	bl	800b764 <_Bfree>
 800a7d0:	e618      	b.n	800a404 <_strtod_l+0x644>
 800a7d2:	f1ba 0f01 	cmp.w	sl, #1
 800a7d6:	d103      	bne.n	800a7e0 <_strtod_l+0xa20>
 800a7d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	f43f ada5 	beq.w	800a32a <_strtod_l+0x56a>
 800a7e0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800a890 <_strtod_l+0xad0>
 800a7e4:	4f35      	ldr	r7, [pc, #212]	@ (800a8bc <_strtod_l+0xafc>)
 800a7e6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a7ea:	2600      	movs	r6, #0
 800a7ec:	e7b1      	b.n	800a752 <_strtod_l+0x992>
 800a7ee:	4f34      	ldr	r7, [pc, #208]	@ (800a8c0 <_strtod_l+0xb00>)
 800a7f0:	2600      	movs	r6, #0
 800a7f2:	e7aa      	b.n	800a74a <_strtod_l+0x98a>
 800a7f4:	4b32      	ldr	r3, [pc, #200]	@ (800a8c0 <_strtod_l+0xb00>)
 800a7f6:	4630      	mov	r0, r6
 800a7f8:	4639      	mov	r1, r7
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	f7f5 ff2c 	bl	8000658 <__aeabi_dmul>
 800a800:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a802:	4606      	mov	r6, r0
 800a804:	460f      	mov	r7, r1
 800a806:	2b00      	cmp	r3, #0
 800a808:	d09f      	beq.n	800a74a <_strtod_l+0x98a>
 800a80a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a80e:	e7a0      	b.n	800a752 <_strtod_l+0x992>
 800a810:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a898 <_strtod_l+0xad8>
 800a814:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a818:	ec57 6b17 	vmov	r6, r7, d7
 800a81c:	e799      	b.n	800a752 <_strtod_l+0x992>
 800a81e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a822:	9b08      	ldr	r3, [sp, #32]
 800a824:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d1c1      	bne.n	800a7b0 <_strtod_l+0x9f0>
 800a82c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a830:	0d1b      	lsrs	r3, r3, #20
 800a832:	051b      	lsls	r3, r3, #20
 800a834:	429d      	cmp	r5, r3
 800a836:	d1bb      	bne.n	800a7b0 <_strtod_l+0x9f0>
 800a838:	4630      	mov	r0, r6
 800a83a:	4639      	mov	r1, r7
 800a83c:	f7f6 f9de 	bl	8000bfc <__aeabi_d2lz>
 800a840:	f7f5 fedc 	bl	80005fc <__aeabi_l2d>
 800a844:	4602      	mov	r2, r0
 800a846:	460b      	mov	r3, r1
 800a848:	4630      	mov	r0, r6
 800a84a:	4639      	mov	r1, r7
 800a84c:	f7f5 fd4c 	bl	80002e8 <__aeabi_dsub>
 800a850:	460b      	mov	r3, r1
 800a852:	4602      	mov	r2, r0
 800a854:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a858:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a85c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a85e:	ea46 060a 	orr.w	r6, r6, sl
 800a862:	431e      	orrs	r6, r3
 800a864:	d06f      	beq.n	800a946 <_strtod_l+0xb86>
 800a866:	a30e      	add	r3, pc, #56	@ (adr r3, 800a8a0 <_strtod_l+0xae0>)
 800a868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a86c:	f7f6 f966 	bl	8000b3c <__aeabi_dcmplt>
 800a870:	2800      	cmp	r0, #0
 800a872:	f47f accf 	bne.w	800a214 <_strtod_l+0x454>
 800a876:	a30c      	add	r3, pc, #48	@ (adr r3, 800a8a8 <_strtod_l+0xae8>)
 800a878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a87c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a880:	f7f6 f97a 	bl	8000b78 <__aeabi_dcmpgt>
 800a884:	2800      	cmp	r0, #0
 800a886:	d093      	beq.n	800a7b0 <_strtod_l+0x9f0>
 800a888:	e4c4      	b.n	800a214 <_strtod_l+0x454>
 800a88a:	bf00      	nop
 800a88c:	f3af 8000 	nop.w
 800a890:	00000000 	.word	0x00000000
 800a894:	bff00000 	.word	0xbff00000
 800a898:	00000000 	.word	0x00000000
 800a89c:	3ff00000 	.word	0x3ff00000
 800a8a0:	94a03595 	.word	0x94a03595
 800a8a4:	3fdfffff 	.word	0x3fdfffff
 800a8a8:	35afe535 	.word	0x35afe535
 800a8ac:	3fe00000 	.word	0x3fe00000
 800a8b0:	000fffff 	.word	0x000fffff
 800a8b4:	7ff00000 	.word	0x7ff00000
 800a8b8:	7fefffff 	.word	0x7fefffff
 800a8bc:	3ff00000 	.word	0x3ff00000
 800a8c0:	3fe00000 	.word	0x3fe00000
 800a8c4:	7fe00000 	.word	0x7fe00000
 800a8c8:	7c9fffff 	.word	0x7c9fffff
 800a8cc:	9b08      	ldr	r3, [sp, #32]
 800a8ce:	b323      	cbz	r3, 800a91a <_strtod_l+0xb5a>
 800a8d0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a8d4:	d821      	bhi.n	800a91a <_strtod_l+0xb5a>
 800a8d6:	a328      	add	r3, pc, #160	@ (adr r3, 800a978 <_strtod_l+0xbb8>)
 800a8d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8dc:	4630      	mov	r0, r6
 800a8de:	4639      	mov	r1, r7
 800a8e0:	f7f6 f936 	bl	8000b50 <__aeabi_dcmple>
 800a8e4:	b1a0      	cbz	r0, 800a910 <_strtod_l+0xb50>
 800a8e6:	4639      	mov	r1, r7
 800a8e8:	4630      	mov	r0, r6
 800a8ea:	f7f6 f94f 	bl	8000b8c <__aeabi_d2uiz>
 800a8ee:	2801      	cmp	r0, #1
 800a8f0:	bf38      	it	cc
 800a8f2:	2001      	movcc	r0, #1
 800a8f4:	f7f5 fe36 	bl	8000564 <__aeabi_ui2d>
 800a8f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8fa:	4606      	mov	r6, r0
 800a8fc:	460f      	mov	r7, r1
 800a8fe:	b9fb      	cbnz	r3, 800a940 <_strtod_l+0xb80>
 800a900:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a904:	9014      	str	r0, [sp, #80]	@ 0x50
 800a906:	9315      	str	r3, [sp, #84]	@ 0x54
 800a908:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a90c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a910:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a912:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a916:	1b5b      	subs	r3, r3, r5
 800a918:	9311      	str	r3, [sp, #68]	@ 0x44
 800a91a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a91e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a922:	f001 fa53 	bl	800bdcc <__ulp>
 800a926:	4650      	mov	r0, sl
 800a928:	ec53 2b10 	vmov	r2, r3, d0
 800a92c:	4659      	mov	r1, fp
 800a92e:	f7f5 fe93 	bl	8000658 <__aeabi_dmul>
 800a932:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a936:	f7f5 fcd9 	bl	80002ec <__adddf3>
 800a93a:	4682      	mov	sl, r0
 800a93c:	468b      	mov	fp, r1
 800a93e:	e770      	b.n	800a822 <_strtod_l+0xa62>
 800a940:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a944:	e7e0      	b.n	800a908 <_strtod_l+0xb48>
 800a946:	a30e      	add	r3, pc, #56	@ (adr r3, 800a980 <_strtod_l+0xbc0>)
 800a948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a94c:	f7f6 f8f6 	bl	8000b3c <__aeabi_dcmplt>
 800a950:	e798      	b.n	800a884 <_strtod_l+0xac4>
 800a952:	2300      	movs	r3, #0
 800a954:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a956:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a958:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a95a:	6013      	str	r3, [r2, #0]
 800a95c:	f7ff ba6d 	b.w	8009e3a <_strtod_l+0x7a>
 800a960:	2a65      	cmp	r2, #101	@ 0x65
 800a962:	f43f ab66 	beq.w	800a032 <_strtod_l+0x272>
 800a966:	2a45      	cmp	r2, #69	@ 0x45
 800a968:	f43f ab63 	beq.w	800a032 <_strtod_l+0x272>
 800a96c:	2301      	movs	r3, #1
 800a96e:	f7ff bb9e 	b.w	800a0ae <_strtod_l+0x2ee>
 800a972:	bf00      	nop
 800a974:	f3af 8000 	nop.w
 800a978:	ffc00000 	.word	0xffc00000
 800a97c:	41dfffff 	.word	0x41dfffff
 800a980:	94a03595 	.word	0x94a03595
 800a984:	3fcfffff 	.word	0x3fcfffff

0800a988 <strtod>:
 800a988:	460a      	mov	r2, r1
 800a98a:	4601      	mov	r1, r0
 800a98c:	4802      	ldr	r0, [pc, #8]	@ (800a998 <strtod+0x10>)
 800a98e:	4b03      	ldr	r3, [pc, #12]	@ (800a99c <strtod+0x14>)
 800a990:	6800      	ldr	r0, [r0, #0]
 800a992:	f7ff ba15 	b.w	8009dc0 <_strtod_l>
 800a996:	bf00      	nop
 800a998:	20000188 	.word	0x20000188
 800a99c:	2000001c 	.word	0x2000001c

0800a9a0 <std>:
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	b510      	push	{r4, lr}
 800a9a4:	4604      	mov	r4, r0
 800a9a6:	e9c0 3300 	strd	r3, r3, [r0]
 800a9aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a9ae:	6083      	str	r3, [r0, #8]
 800a9b0:	8181      	strh	r1, [r0, #12]
 800a9b2:	6643      	str	r3, [r0, #100]	@ 0x64
 800a9b4:	81c2      	strh	r2, [r0, #14]
 800a9b6:	6183      	str	r3, [r0, #24]
 800a9b8:	4619      	mov	r1, r3
 800a9ba:	2208      	movs	r2, #8
 800a9bc:	305c      	adds	r0, #92	@ 0x5c
 800a9be:	f000 f924 	bl	800ac0a <memset>
 800a9c2:	4b0d      	ldr	r3, [pc, #52]	@ (800a9f8 <std+0x58>)
 800a9c4:	6263      	str	r3, [r4, #36]	@ 0x24
 800a9c6:	4b0d      	ldr	r3, [pc, #52]	@ (800a9fc <std+0x5c>)
 800a9c8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a9ca:	4b0d      	ldr	r3, [pc, #52]	@ (800aa00 <std+0x60>)
 800a9cc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a9ce:	4b0d      	ldr	r3, [pc, #52]	@ (800aa04 <std+0x64>)
 800a9d0:	6323      	str	r3, [r4, #48]	@ 0x30
 800a9d2:	4b0d      	ldr	r3, [pc, #52]	@ (800aa08 <std+0x68>)
 800a9d4:	6224      	str	r4, [r4, #32]
 800a9d6:	429c      	cmp	r4, r3
 800a9d8:	d006      	beq.n	800a9e8 <std+0x48>
 800a9da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a9de:	4294      	cmp	r4, r2
 800a9e0:	d002      	beq.n	800a9e8 <std+0x48>
 800a9e2:	33d0      	adds	r3, #208	@ 0xd0
 800a9e4:	429c      	cmp	r4, r3
 800a9e6:	d105      	bne.n	800a9f4 <std+0x54>
 800a9e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a9ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9f0:	f000 b9f2 	b.w	800add8 <__retarget_lock_init_recursive>
 800a9f4:	bd10      	pop	{r4, pc}
 800a9f6:	bf00      	nop
 800a9f8:	0800ab65 	.word	0x0800ab65
 800a9fc:	0800ab87 	.word	0x0800ab87
 800aa00:	0800abbf 	.word	0x0800abbf
 800aa04:	0800abe3 	.word	0x0800abe3
 800aa08:	20001fb4 	.word	0x20001fb4

0800aa0c <stdio_exit_handler>:
 800aa0c:	4a02      	ldr	r2, [pc, #8]	@ (800aa18 <stdio_exit_handler+0xc>)
 800aa0e:	4903      	ldr	r1, [pc, #12]	@ (800aa1c <stdio_exit_handler+0x10>)
 800aa10:	4803      	ldr	r0, [pc, #12]	@ (800aa20 <stdio_exit_handler+0x14>)
 800aa12:	f000 b869 	b.w	800aae8 <_fwalk_sglue>
 800aa16:	bf00      	nop
 800aa18:	20000010 	.word	0x20000010
 800aa1c:	0800c735 	.word	0x0800c735
 800aa20:	2000018c 	.word	0x2000018c

0800aa24 <cleanup_stdio>:
 800aa24:	6841      	ldr	r1, [r0, #4]
 800aa26:	4b0c      	ldr	r3, [pc, #48]	@ (800aa58 <cleanup_stdio+0x34>)
 800aa28:	4299      	cmp	r1, r3
 800aa2a:	b510      	push	{r4, lr}
 800aa2c:	4604      	mov	r4, r0
 800aa2e:	d001      	beq.n	800aa34 <cleanup_stdio+0x10>
 800aa30:	f001 fe80 	bl	800c734 <_fflush_r>
 800aa34:	68a1      	ldr	r1, [r4, #8]
 800aa36:	4b09      	ldr	r3, [pc, #36]	@ (800aa5c <cleanup_stdio+0x38>)
 800aa38:	4299      	cmp	r1, r3
 800aa3a:	d002      	beq.n	800aa42 <cleanup_stdio+0x1e>
 800aa3c:	4620      	mov	r0, r4
 800aa3e:	f001 fe79 	bl	800c734 <_fflush_r>
 800aa42:	68e1      	ldr	r1, [r4, #12]
 800aa44:	4b06      	ldr	r3, [pc, #24]	@ (800aa60 <cleanup_stdio+0x3c>)
 800aa46:	4299      	cmp	r1, r3
 800aa48:	d004      	beq.n	800aa54 <cleanup_stdio+0x30>
 800aa4a:	4620      	mov	r0, r4
 800aa4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa50:	f001 be70 	b.w	800c734 <_fflush_r>
 800aa54:	bd10      	pop	{r4, pc}
 800aa56:	bf00      	nop
 800aa58:	20001fb4 	.word	0x20001fb4
 800aa5c:	2000201c 	.word	0x2000201c
 800aa60:	20002084 	.word	0x20002084

0800aa64 <global_stdio_init.part.0>:
 800aa64:	b510      	push	{r4, lr}
 800aa66:	4b0b      	ldr	r3, [pc, #44]	@ (800aa94 <global_stdio_init.part.0+0x30>)
 800aa68:	4c0b      	ldr	r4, [pc, #44]	@ (800aa98 <global_stdio_init.part.0+0x34>)
 800aa6a:	4a0c      	ldr	r2, [pc, #48]	@ (800aa9c <global_stdio_init.part.0+0x38>)
 800aa6c:	601a      	str	r2, [r3, #0]
 800aa6e:	4620      	mov	r0, r4
 800aa70:	2200      	movs	r2, #0
 800aa72:	2104      	movs	r1, #4
 800aa74:	f7ff ff94 	bl	800a9a0 <std>
 800aa78:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800aa7c:	2201      	movs	r2, #1
 800aa7e:	2109      	movs	r1, #9
 800aa80:	f7ff ff8e 	bl	800a9a0 <std>
 800aa84:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800aa88:	2202      	movs	r2, #2
 800aa8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa8e:	2112      	movs	r1, #18
 800aa90:	f7ff bf86 	b.w	800a9a0 <std>
 800aa94:	200020ec 	.word	0x200020ec
 800aa98:	20001fb4 	.word	0x20001fb4
 800aa9c:	0800aa0d 	.word	0x0800aa0d

0800aaa0 <__sfp_lock_acquire>:
 800aaa0:	4801      	ldr	r0, [pc, #4]	@ (800aaa8 <__sfp_lock_acquire+0x8>)
 800aaa2:	f000 b99a 	b.w	800adda <__retarget_lock_acquire_recursive>
 800aaa6:	bf00      	nop
 800aaa8:	200020f5 	.word	0x200020f5

0800aaac <__sfp_lock_release>:
 800aaac:	4801      	ldr	r0, [pc, #4]	@ (800aab4 <__sfp_lock_release+0x8>)
 800aaae:	f000 b995 	b.w	800addc <__retarget_lock_release_recursive>
 800aab2:	bf00      	nop
 800aab4:	200020f5 	.word	0x200020f5

0800aab8 <__sinit>:
 800aab8:	b510      	push	{r4, lr}
 800aaba:	4604      	mov	r4, r0
 800aabc:	f7ff fff0 	bl	800aaa0 <__sfp_lock_acquire>
 800aac0:	6a23      	ldr	r3, [r4, #32]
 800aac2:	b11b      	cbz	r3, 800aacc <__sinit+0x14>
 800aac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aac8:	f7ff bff0 	b.w	800aaac <__sfp_lock_release>
 800aacc:	4b04      	ldr	r3, [pc, #16]	@ (800aae0 <__sinit+0x28>)
 800aace:	6223      	str	r3, [r4, #32]
 800aad0:	4b04      	ldr	r3, [pc, #16]	@ (800aae4 <__sinit+0x2c>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d1f5      	bne.n	800aac4 <__sinit+0xc>
 800aad8:	f7ff ffc4 	bl	800aa64 <global_stdio_init.part.0>
 800aadc:	e7f2      	b.n	800aac4 <__sinit+0xc>
 800aade:	bf00      	nop
 800aae0:	0800aa25 	.word	0x0800aa25
 800aae4:	200020ec 	.word	0x200020ec

0800aae8 <_fwalk_sglue>:
 800aae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aaec:	4607      	mov	r7, r0
 800aaee:	4688      	mov	r8, r1
 800aaf0:	4614      	mov	r4, r2
 800aaf2:	2600      	movs	r6, #0
 800aaf4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aaf8:	f1b9 0901 	subs.w	r9, r9, #1
 800aafc:	d505      	bpl.n	800ab0a <_fwalk_sglue+0x22>
 800aafe:	6824      	ldr	r4, [r4, #0]
 800ab00:	2c00      	cmp	r4, #0
 800ab02:	d1f7      	bne.n	800aaf4 <_fwalk_sglue+0xc>
 800ab04:	4630      	mov	r0, r6
 800ab06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab0a:	89ab      	ldrh	r3, [r5, #12]
 800ab0c:	2b01      	cmp	r3, #1
 800ab0e:	d907      	bls.n	800ab20 <_fwalk_sglue+0x38>
 800ab10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ab14:	3301      	adds	r3, #1
 800ab16:	d003      	beq.n	800ab20 <_fwalk_sglue+0x38>
 800ab18:	4629      	mov	r1, r5
 800ab1a:	4638      	mov	r0, r7
 800ab1c:	47c0      	blx	r8
 800ab1e:	4306      	orrs	r6, r0
 800ab20:	3568      	adds	r5, #104	@ 0x68
 800ab22:	e7e9      	b.n	800aaf8 <_fwalk_sglue+0x10>

0800ab24 <siprintf>:
 800ab24:	b40e      	push	{r1, r2, r3}
 800ab26:	b500      	push	{lr}
 800ab28:	b09c      	sub	sp, #112	@ 0x70
 800ab2a:	ab1d      	add	r3, sp, #116	@ 0x74
 800ab2c:	9002      	str	r0, [sp, #8]
 800ab2e:	9006      	str	r0, [sp, #24]
 800ab30:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ab34:	4809      	ldr	r0, [pc, #36]	@ (800ab5c <siprintf+0x38>)
 800ab36:	9107      	str	r1, [sp, #28]
 800ab38:	9104      	str	r1, [sp, #16]
 800ab3a:	4909      	ldr	r1, [pc, #36]	@ (800ab60 <siprintf+0x3c>)
 800ab3c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab40:	9105      	str	r1, [sp, #20]
 800ab42:	6800      	ldr	r0, [r0, #0]
 800ab44:	9301      	str	r3, [sp, #4]
 800ab46:	a902      	add	r1, sp, #8
 800ab48:	f001 fae6 	bl	800c118 <_svfiprintf_r>
 800ab4c:	9b02      	ldr	r3, [sp, #8]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	701a      	strb	r2, [r3, #0]
 800ab52:	b01c      	add	sp, #112	@ 0x70
 800ab54:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab58:	b003      	add	sp, #12
 800ab5a:	4770      	bx	lr
 800ab5c:	20000188 	.word	0x20000188
 800ab60:	ffff0208 	.word	0xffff0208

0800ab64 <__sread>:
 800ab64:	b510      	push	{r4, lr}
 800ab66:	460c      	mov	r4, r1
 800ab68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab6c:	f000 f8e6 	bl	800ad3c <_read_r>
 800ab70:	2800      	cmp	r0, #0
 800ab72:	bfab      	itete	ge
 800ab74:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ab76:	89a3      	ldrhlt	r3, [r4, #12]
 800ab78:	181b      	addge	r3, r3, r0
 800ab7a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ab7e:	bfac      	ite	ge
 800ab80:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ab82:	81a3      	strhlt	r3, [r4, #12]
 800ab84:	bd10      	pop	{r4, pc}

0800ab86 <__swrite>:
 800ab86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab8a:	461f      	mov	r7, r3
 800ab8c:	898b      	ldrh	r3, [r1, #12]
 800ab8e:	05db      	lsls	r3, r3, #23
 800ab90:	4605      	mov	r5, r0
 800ab92:	460c      	mov	r4, r1
 800ab94:	4616      	mov	r6, r2
 800ab96:	d505      	bpl.n	800aba4 <__swrite+0x1e>
 800ab98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab9c:	2302      	movs	r3, #2
 800ab9e:	2200      	movs	r2, #0
 800aba0:	f000 f8ba 	bl	800ad18 <_lseek_r>
 800aba4:	89a3      	ldrh	r3, [r4, #12]
 800aba6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800abaa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800abae:	81a3      	strh	r3, [r4, #12]
 800abb0:	4632      	mov	r2, r6
 800abb2:	463b      	mov	r3, r7
 800abb4:	4628      	mov	r0, r5
 800abb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800abba:	f000 b8d1 	b.w	800ad60 <_write_r>

0800abbe <__sseek>:
 800abbe:	b510      	push	{r4, lr}
 800abc0:	460c      	mov	r4, r1
 800abc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abc6:	f000 f8a7 	bl	800ad18 <_lseek_r>
 800abca:	1c43      	adds	r3, r0, #1
 800abcc:	89a3      	ldrh	r3, [r4, #12]
 800abce:	bf15      	itete	ne
 800abd0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800abd2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800abd6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800abda:	81a3      	strheq	r3, [r4, #12]
 800abdc:	bf18      	it	ne
 800abde:	81a3      	strhne	r3, [r4, #12]
 800abe0:	bd10      	pop	{r4, pc}

0800abe2 <__sclose>:
 800abe2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abe6:	f000 b887 	b.w	800acf8 <_close_r>

0800abea <memcmp>:
 800abea:	b510      	push	{r4, lr}
 800abec:	3901      	subs	r1, #1
 800abee:	4402      	add	r2, r0
 800abf0:	4290      	cmp	r0, r2
 800abf2:	d101      	bne.n	800abf8 <memcmp+0xe>
 800abf4:	2000      	movs	r0, #0
 800abf6:	e005      	b.n	800ac04 <memcmp+0x1a>
 800abf8:	7803      	ldrb	r3, [r0, #0]
 800abfa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800abfe:	42a3      	cmp	r3, r4
 800ac00:	d001      	beq.n	800ac06 <memcmp+0x1c>
 800ac02:	1b18      	subs	r0, r3, r4
 800ac04:	bd10      	pop	{r4, pc}
 800ac06:	3001      	adds	r0, #1
 800ac08:	e7f2      	b.n	800abf0 <memcmp+0x6>

0800ac0a <memset>:
 800ac0a:	4402      	add	r2, r0
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	4293      	cmp	r3, r2
 800ac10:	d100      	bne.n	800ac14 <memset+0xa>
 800ac12:	4770      	bx	lr
 800ac14:	f803 1b01 	strb.w	r1, [r3], #1
 800ac18:	e7f9      	b.n	800ac0e <memset+0x4>

0800ac1a <strncmp>:
 800ac1a:	b510      	push	{r4, lr}
 800ac1c:	b16a      	cbz	r2, 800ac3a <strncmp+0x20>
 800ac1e:	3901      	subs	r1, #1
 800ac20:	1884      	adds	r4, r0, r2
 800ac22:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac26:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ac2a:	429a      	cmp	r2, r3
 800ac2c:	d103      	bne.n	800ac36 <strncmp+0x1c>
 800ac2e:	42a0      	cmp	r0, r4
 800ac30:	d001      	beq.n	800ac36 <strncmp+0x1c>
 800ac32:	2a00      	cmp	r2, #0
 800ac34:	d1f5      	bne.n	800ac22 <strncmp+0x8>
 800ac36:	1ad0      	subs	r0, r2, r3
 800ac38:	bd10      	pop	{r4, pc}
 800ac3a:	4610      	mov	r0, r2
 800ac3c:	e7fc      	b.n	800ac38 <strncmp+0x1e>
	...

0800ac40 <strtok>:
 800ac40:	4b16      	ldr	r3, [pc, #88]	@ (800ac9c <strtok+0x5c>)
 800ac42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac46:	681f      	ldr	r7, [r3, #0]
 800ac48:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800ac4a:	4605      	mov	r5, r0
 800ac4c:	460e      	mov	r6, r1
 800ac4e:	b9ec      	cbnz	r4, 800ac8c <strtok+0x4c>
 800ac50:	2050      	movs	r0, #80	@ 0x50
 800ac52:	f000 fc7f 	bl	800b554 <malloc>
 800ac56:	4602      	mov	r2, r0
 800ac58:	6478      	str	r0, [r7, #68]	@ 0x44
 800ac5a:	b920      	cbnz	r0, 800ac66 <strtok+0x26>
 800ac5c:	4b10      	ldr	r3, [pc, #64]	@ (800aca0 <strtok+0x60>)
 800ac5e:	4811      	ldr	r0, [pc, #68]	@ (800aca4 <strtok+0x64>)
 800ac60:	215b      	movs	r1, #91	@ 0x5b
 800ac62:	f000 f8d5 	bl	800ae10 <__assert_func>
 800ac66:	e9c0 4400 	strd	r4, r4, [r0]
 800ac6a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800ac6e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800ac72:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800ac76:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800ac7a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800ac7e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800ac82:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800ac86:	6184      	str	r4, [r0, #24]
 800ac88:	7704      	strb	r4, [r0, #28]
 800ac8a:	6244      	str	r4, [r0, #36]	@ 0x24
 800ac8c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ac8e:	4631      	mov	r1, r6
 800ac90:	4628      	mov	r0, r5
 800ac92:	2301      	movs	r3, #1
 800ac94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac98:	f000 b806 	b.w	800aca8 <__strtok_r>
 800ac9c:	20000188 	.word	0x20000188
 800aca0:	0800cf48 	.word	0x0800cf48
 800aca4:	0800cf5f 	.word	0x0800cf5f

0800aca8 <__strtok_r>:
 800aca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acaa:	4604      	mov	r4, r0
 800acac:	b908      	cbnz	r0, 800acb2 <__strtok_r+0xa>
 800acae:	6814      	ldr	r4, [r2, #0]
 800acb0:	b144      	cbz	r4, 800acc4 <__strtok_r+0x1c>
 800acb2:	4620      	mov	r0, r4
 800acb4:	f814 5b01 	ldrb.w	r5, [r4], #1
 800acb8:	460f      	mov	r7, r1
 800acba:	f817 6b01 	ldrb.w	r6, [r7], #1
 800acbe:	b91e      	cbnz	r6, 800acc8 <__strtok_r+0x20>
 800acc0:	b965      	cbnz	r5, 800acdc <__strtok_r+0x34>
 800acc2:	6015      	str	r5, [r2, #0]
 800acc4:	2000      	movs	r0, #0
 800acc6:	e005      	b.n	800acd4 <__strtok_r+0x2c>
 800acc8:	42b5      	cmp	r5, r6
 800acca:	d1f6      	bne.n	800acba <__strtok_r+0x12>
 800accc:	2b00      	cmp	r3, #0
 800acce:	d1f0      	bne.n	800acb2 <__strtok_r+0xa>
 800acd0:	6014      	str	r4, [r2, #0]
 800acd2:	7003      	strb	r3, [r0, #0]
 800acd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acd6:	461c      	mov	r4, r3
 800acd8:	e00c      	b.n	800acf4 <__strtok_r+0x4c>
 800acda:	b915      	cbnz	r5, 800ace2 <__strtok_r+0x3a>
 800acdc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ace0:	460e      	mov	r6, r1
 800ace2:	f816 5b01 	ldrb.w	r5, [r6], #1
 800ace6:	42ab      	cmp	r3, r5
 800ace8:	d1f7      	bne.n	800acda <__strtok_r+0x32>
 800acea:	2b00      	cmp	r3, #0
 800acec:	d0f3      	beq.n	800acd6 <__strtok_r+0x2e>
 800acee:	2300      	movs	r3, #0
 800acf0:	f804 3c01 	strb.w	r3, [r4, #-1]
 800acf4:	6014      	str	r4, [r2, #0]
 800acf6:	e7ed      	b.n	800acd4 <__strtok_r+0x2c>

0800acf8 <_close_r>:
 800acf8:	b538      	push	{r3, r4, r5, lr}
 800acfa:	4d06      	ldr	r5, [pc, #24]	@ (800ad14 <_close_r+0x1c>)
 800acfc:	2300      	movs	r3, #0
 800acfe:	4604      	mov	r4, r0
 800ad00:	4608      	mov	r0, r1
 800ad02:	602b      	str	r3, [r5, #0]
 800ad04:	f7f6 fbb0 	bl	8001468 <_close>
 800ad08:	1c43      	adds	r3, r0, #1
 800ad0a:	d102      	bne.n	800ad12 <_close_r+0x1a>
 800ad0c:	682b      	ldr	r3, [r5, #0]
 800ad0e:	b103      	cbz	r3, 800ad12 <_close_r+0x1a>
 800ad10:	6023      	str	r3, [r4, #0]
 800ad12:	bd38      	pop	{r3, r4, r5, pc}
 800ad14:	200020f0 	.word	0x200020f0

0800ad18 <_lseek_r>:
 800ad18:	b538      	push	{r3, r4, r5, lr}
 800ad1a:	4d07      	ldr	r5, [pc, #28]	@ (800ad38 <_lseek_r+0x20>)
 800ad1c:	4604      	mov	r4, r0
 800ad1e:	4608      	mov	r0, r1
 800ad20:	4611      	mov	r1, r2
 800ad22:	2200      	movs	r2, #0
 800ad24:	602a      	str	r2, [r5, #0]
 800ad26:	461a      	mov	r2, r3
 800ad28:	f7f6 fbc5 	bl	80014b6 <_lseek>
 800ad2c:	1c43      	adds	r3, r0, #1
 800ad2e:	d102      	bne.n	800ad36 <_lseek_r+0x1e>
 800ad30:	682b      	ldr	r3, [r5, #0]
 800ad32:	b103      	cbz	r3, 800ad36 <_lseek_r+0x1e>
 800ad34:	6023      	str	r3, [r4, #0]
 800ad36:	bd38      	pop	{r3, r4, r5, pc}
 800ad38:	200020f0 	.word	0x200020f0

0800ad3c <_read_r>:
 800ad3c:	b538      	push	{r3, r4, r5, lr}
 800ad3e:	4d07      	ldr	r5, [pc, #28]	@ (800ad5c <_read_r+0x20>)
 800ad40:	4604      	mov	r4, r0
 800ad42:	4608      	mov	r0, r1
 800ad44:	4611      	mov	r1, r2
 800ad46:	2200      	movs	r2, #0
 800ad48:	602a      	str	r2, [r5, #0]
 800ad4a:	461a      	mov	r2, r3
 800ad4c:	f7f6 fb53 	bl	80013f6 <_read>
 800ad50:	1c43      	adds	r3, r0, #1
 800ad52:	d102      	bne.n	800ad5a <_read_r+0x1e>
 800ad54:	682b      	ldr	r3, [r5, #0]
 800ad56:	b103      	cbz	r3, 800ad5a <_read_r+0x1e>
 800ad58:	6023      	str	r3, [r4, #0]
 800ad5a:	bd38      	pop	{r3, r4, r5, pc}
 800ad5c:	200020f0 	.word	0x200020f0

0800ad60 <_write_r>:
 800ad60:	b538      	push	{r3, r4, r5, lr}
 800ad62:	4d07      	ldr	r5, [pc, #28]	@ (800ad80 <_write_r+0x20>)
 800ad64:	4604      	mov	r4, r0
 800ad66:	4608      	mov	r0, r1
 800ad68:	4611      	mov	r1, r2
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	602a      	str	r2, [r5, #0]
 800ad6e:	461a      	mov	r2, r3
 800ad70:	f7f6 fb5e 	bl	8001430 <_write>
 800ad74:	1c43      	adds	r3, r0, #1
 800ad76:	d102      	bne.n	800ad7e <_write_r+0x1e>
 800ad78:	682b      	ldr	r3, [r5, #0]
 800ad7a:	b103      	cbz	r3, 800ad7e <_write_r+0x1e>
 800ad7c:	6023      	str	r3, [r4, #0]
 800ad7e:	bd38      	pop	{r3, r4, r5, pc}
 800ad80:	200020f0 	.word	0x200020f0

0800ad84 <__errno>:
 800ad84:	4b01      	ldr	r3, [pc, #4]	@ (800ad8c <__errno+0x8>)
 800ad86:	6818      	ldr	r0, [r3, #0]
 800ad88:	4770      	bx	lr
 800ad8a:	bf00      	nop
 800ad8c:	20000188 	.word	0x20000188

0800ad90 <__libc_init_array>:
 800ad90:	b570      	push	{r4, r5, r6, lr}
 800ad92:	4d0d      	ldr	r5, [pc, #52]	@ (800adc8 <__libc_init_array+0x38>)
 800ad94:	4c0d      	ldr	r4, [pc, #52]	@ (800adcc <__libc_init_array+0x3c>)
 800ad96:	1b64      	subs	r4, r4, r5
 800ad98:	10a4      	asrs	r4, r4, #2
 800ad9a:	2600      	movs	r6, #0
 800ad9c:	42a6      	cmp	r6, r4
 800ad9e:	d109      	bne.n	800adb4 <__libc_init_array+0x24>
 800ada0:	4d0b      	ldr	r5, [pc, #44]	@ (800add0 <__libc_init_array+0x40>)
 800ada2:	4c0c      	ldr	r4, [pc, #48]	@ (800add4 <__libc_init_array+0x44>)
 800ada4:	f002 f818 	bl	800cdd8 <_init>
 800ada8:	1b64      	subs	r4, r4, r5
 800adaa:	10a4      	asrs	r4, r4, #2
 800adac:	2600      	movs	r6, #0
 800adae:	42a6      	cmp	r6, r4
 800adb0:	d105      	bne.n	800adbe <__libc_init_array+0x2e>
 800adb2:	bd70      	pop	{r4, r5, r6, pc}
 800adb4:	f855 3b04 	ldr.w	r3, [r5], #4
 800adb8:	4798      	blx	r3
 800adba:	3601      	adds	r6, #1
 800adbc:	e7ee      	b.n	800ad9c <__libc_init_array+0xc>
 800adbe:	f855 3b04 	ldr.w	r3, [r5], #4
 800adc2:	4798      	blx	r3
 800adc4:	3601      	adds	r6, #1
 800adc6:	e7f2      	b.n	800adae <__libc_init_array+0x1e>
 800adc8:	0800d304 	.word	0x0800d304
 800adcc:	0800d304 	.word	0x0800d304
 800add0:	0800d304 	.word	0x0800d304
 800add4:	0800d308 	.word	0x0800d308

0800add8 <__retarget_lock_init_recursive>:
 800add8:	4770      	bx	lr

0800adda <__retarget_lock_acquire_recursive>:
 800adda:	4770      	bx	lr

0800addc <__retarget_lock_release_recursive>:
 800addc:	4770      	bx	lr

0800adde <memcpy>:
 800adde:	440a      	add	r2, r1
 800ade0:	4291      	cmp	r1, r2
 800ade2:	f100 33ff 	add.w	r3, r0, #4294967295
 800ade6:	d100      	bne.n	800adea <memcpy+0xc>
 800ade8:	4770      	bx	lr
 800adea:	b510      	push	{r4, lr}
 800adec:	f811 4b01 	ldrb.w	r4, [r1], #1
 800adf0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800adf4:	4291      	cmp	r1, r2
 800adf6:	d1f9      	bne.n	800adec <memcpy+0xe>
 800adf8:	bd10      	pop	{r4, pc}
 800adfa:	0000      	movs	r0, r0
 800adfc:	0000      	movs	r0, r0
	...

0800ae00 <nan>:
 800ae00:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ae08 <nan+0x8>
 800ae04:	4770      	bx	lr
 800ae06:	bf00      	nop
 800ae08:	00000000 	.word	0x00000000
 800ae0c:	7ff80000 	.word	0x7ff80000

0800ae10 <__assert_func>:
 800ae10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ae12:	4614      	mov	r4, r2
 800ae14:	461a      	mov	r2, r3
 800ae16:	4b09      	ldr	r3, [pc, #36]	@ (800ae3c <__assert_func+0x2c>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	4605      	mov	r5, r0
 800ae1c:	68d8      	ldr	r0, [r3, #12]
 800ae1e:	b954      	cbnz	r4, 800ae36 <__assert_func+0x26>
 800ae20:	4b07      	ldr	r3, [pc, #28]	@ (800ae40 <__assert_func+0x30>)
 800ae22:	461c      	mov	r4, r3
 800ae24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ae28:	9100      	str	r1, [sp, #0]
 800ae2a:	462b      	mov	r3, r5
 800ae2c:	4905      	ldr	r1, [pc, #20]	@ (800ae44 <__assert_func+0x34>)
 800ae2e:	f001 fca9 	bl	800c784 <fiprintf>
 800ae32:	f001 fce3 	bl	800c7fc <abort>
 800ae36:	4b04      	ldr	r3, [pc, #16]	@ (800ae48 <__assert_func+0x38>)
 800ae38:	e7f4      	b.n	800ae24 <__assert_func+0x14>
 800ae3a:	bf00      	nop
 800ae3c:	20000188 	.word	0x20000188
 800ae40:	0800cffc 	.word	0x0800cffc
 800ae44:	0800cfce 	.word	0x0800cfce
 800ae48:	0800cfc1 	.word	0x0800cfc1

0800ae4c <_free_r>:
 800ae4c:	b538      	push	{r3, r4, r5, lr}
 800ae4e:	4605      	mov	r5, r0
 800ae50:	2900      	cmp	r1, #0
 800ae52:	d041      	beq.n	800aed8 <_free_r+0x8c>
 800ae54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae58:	1f0c      	subs	r4, r1, #4
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	bfb8      	it	lt
 800ae5e:	18e4      	addlt	r4, r4, r3
 800ae60:	f000 fc34 	bl	800b6cc <__malloc_lock>
 800ae64:	4a1d      	ldr	r2, [pc, #116]	@ (800aedc <_free_r+0x90>)
 800ae66:	6813      	ldr	r3, [r2, #0]
 800ae68:	b933      	cbnz	r3, 800ae78 <_free_r+0x2c>
 800ae6a:	6063      	str	r3, [r4, #4]
 800ae6c:	6014      	str	r4, [r2, #0]
 800ae6e:	4628      	mov	r0, r5
 800ae70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae74:	f000 bc30 	b.w	800b6d8 <__malloc_unlock>
 800ae78:	42a3      	cmp	r3, r4
 800ae7a:	d908      	bls.n	800ae8e <_free_r+0x42>
 800ae7c:	6820      	ldr	r0, [r4, #0]
 800ae7e:	1821      	adds	r1, r4, r0
 800ae80:	428b      	cmp	r3, r1
 800ae82:	bf01      	itttt	eq
 800ae84:	6819      	ldreq	r1, [r3, #0]
 800ae86:	685b      	ldreq	r3, [r3, #4]
 800ae88:	1809      	addeq	r1, r1, r0
 800ae8a:	6021      	streq	r1, [r4, #0]
 800ae8c:	e7ed      	b.n	800ae6a <_free_r+0x1e>
 800ae8e:	461a      	mov	r2, r3
 800ae90:	685b      	ldr	r3, [r3, #4]
 800ae92:	b10b      	cbz	r3, 800ae98 <_free_r+0x4c>
 800ae94:	42a3      	cmp	r3, r4
 800ae96:	d9fa      	bls.n	800ae8e <_free_r+0x42>
 800ae98:	6811      	ldr	r1, [r2, #0]
 800ae9a:	1850      	adds	r0, r2, r1
 800ae9c:	42a0      	cmp	r0, r4
 800ae9e:	d10b      	bne.n	800aeb8 <_free_r+0x6c>
 800aea0:	6820      	ldr	r0, [r4, #0]
 800aea2:	4401      	add	r1, r0
 800aea4:	1850      	adds	r0, r2, r1
 800aea6:	4283      	cmp	r3, r0
 800aea8:	6011      	str	r1, [r2, #0]
 800aeaa:	d1e0      	bne.n	800ae6e <_free_r+0x22>
 800aeac:	6818      	ldr	r0, [r3, #0]
 800aeae:	685b      	ldr	r3, [r3, #4]
 800aeb0:	6053      	str	r3, [r2, #4]
 800aeb2:	4408      	add	r0, r1
 800aeb4:	6010      	str	r0, [r2, #0]
 800aeb6:	e7da      	b.n	800ae6e <_free_r+0x22>
 800aeb8:	d902      	bls.n	800aec0 <_free_r+0x74>
 800aeba:	230c      	movs	r3, #12
 800aebc:	602b      	str	r3, [r5, #0]
 800aebe:	e7d6      	b.n	800ae6e <_free_r+0x22>
 800aec0:	6820      	ldr	r0, [r4, #0]
 800aec2:	1821      	adds	r1, r4, r0
 800aec4:	428b      	cmp	r3, r1
 800aec6:	bf04      	itt	eq
 800aec8:	6819      	ldreq	r1, [r3, #0]
 800aeca:	685b      	ldreq	r3, [r3, #4]
 800aecc:	6063      	str	r3, [r4, #4]
 800aece:	bf04      	itt	eq
 800aed0:	1809      	addeq	r1, r1, r0
 800aed2:	6021      	streq	r1, [r4, #0]
 800aed4:	6054      	str	r4, [r2, #4]
 800aed6:	e7ca      	b.n	800ae6e <_free_r+0x22>
 800aed8:	bd38      	pop	{r3, r4, r5, pc}
 800aeda:	bf00      	nop
 800aedc:	200020fc 	.word	0x200020fc

0800aee0 <rshift>:
 800aee0:	6903      	ldr	r3, [r0, #16]
 800aee2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800aee6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aeea:	ea4f 1261 	mov.w	r2, r1, asr #5
 800aeee:	f100 0414 	add.w	r4, r0, #20
 800aef2:	dd45      	ble.n	800af80 <rshift+0xa0>
 800aef4:	f011 011f 	ands.w	r1, r1, #31
 800aef8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800aefc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800af00:	d10c      	bne.n	800af1c <rshift+0x3c>
 800af02:	f100 0710 	add.w	r7, r0, #16
 800af06:	4629      	mov	r1, r5
 800af08:	42b1      	cmp	r1, r6
 800af0a:	d334      	bcc.n	800af76 <rshift+0x96>
 800af0c:	1a9b      	subs	r3, r3, r2
 800af0e:	009b      	lsls	r3, r3, #2
 800af10:	1eea      	subs	r2, r5, #3
 800af12:	4296      	cmp	r6, r2
 800af14:	bf38      	it	cc
 800af16:	2300      	movcc	r3, #0
 800af18:	4423      	add	r3, r4
 800af1a:	e015      	b.n	800af48 <rshift+0x68>
 800af1c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800af20:	f1c1 0820 	rsb	r8, r1, #32
 800af24:	40cf      	lsrs	r7, r1
 800af26:	f105 0e04 	add.w	lr, r5, #4
 800af2a:	46a1      	mov	r9, r4
 800af2c:	4576      	cmp	r6, lr
 800af2e:	46f4      	mov	ip, lr
 800af30:	d815      	bhi.n	800af5e <rshift+0x7e>
 800af32:	1a9a      	subs	r2, r3, r2
 800af34:	0092      	lsls	r2, r2, #2
 800af36:	3a04      	subs	r2, #4
 800af38:	3501      	adds	r5, #1
 800af3a:	42ae      	cmp	r6, r5
 800af3c:	bf38      	it	cc
 800af3e:	2200      	movcc	r2, #0
 800af40:	18a3      	adds	r3, r4, r2
 800af42:	50a7      	str	r7, [r4, r2]
 800af44:	b107      	cbz	r7, 800af48 <rshift+0x68>
 800af46:	3304      	adds	r3, #4
 800af48:	1b1a      	subs	r2, r3, r4
 800af4a:	42a3      	cmp	r3, r4
 800af4c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800af50:	bf08      	it	eq
 800af52:	2300      	moveq	r3, #0
 800af54:	6102      	str	r2, [r0, #16]
 800af56:	bf08      	it	eq
 800af58:	6143      	streq	r3, [r0, #20]
 800af5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af5e:	f8dc c000 	ldr.w	ip, [ip]
 800af62:	fa0c fc08 	lsl.w	ip, ip, r8
 800af66:	ea4c 0707 	orr.w	r7, ip, r7
 800af6a:	f849 7b04 	str.w	r7, [r9], #4
 800af6e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800af72:	40cf      	lsrs	r7, r1
 800af74:	e7da      	b.n	800af2c <rshift+0x4c>
 800af76:	f851 cb04 	ldr.w	ip, [r1], #4
 800af7a:	f847 cf04 	str.w	ip, [r7, #4]!
 800af7e:	e7c3      	b.n	800af08 <rshift+0x28>
 800af80:	4623      	mov	r3, r4
 800af82:	e7e1      	b.n	800af48 <rshift+0x68>

0800af84 <__hexdig_fun>:
 800af84:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800af88:	2b09      	cmp	r3, #9
 800af8a:	d802      	bhi.n	800af92 <__hexdig_fun+0xe>
 800af8c:	3820      	subs	r0, #32
 800af8e:	b2c0      	uxtb	r0, r0
 800af90:	4770      	bx	lr
 800af92:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800af96:	2b05      	cmp	r3, #5
 800af98:	d801      	bhi.n	800af9e <__hexdig_fun+0x1a>
 800af9a:	3847      	subs	r0, #71	@ 0x47
 800af9c:	e7f7      	b.n	800af8e <__hexdig_fun+0xa>
 800af9e:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800afa2:	2b05      	cmp	r3, #5
 800afa4:	d801      	bhi.n	800afaa <__hexdig_fun+0x26>
 800afa6:	3827      	subs	r0, #39	@ 0x27
 800afa8:	e7f1      	b.n	800af8e <__hexdig_fun+0xa>
 800afaa:	2000      	movs	r0, #0
 800afac:	4770      	bx	lr
	...

0800afb0 <__gethex>:
 800afb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afb4:	b085      	sub	sp, #20
 800afb6:	468a      	mov	sl, r1
 800afb8:	9302      	str	r3, [sp, #8]
 800afba:	680b      	ldr	r3, [r1, #0]
 800afbc:	9001      	str	r0, [sp, #4]
 800afbe:	4690      	mov	r8, r2
 800afc0:	1c9c      	adds	r4, r3, #2
 800afc2:	46a1      	mov	r9, r4
 800afc4:	f814 0b01 	ldrb.w	r0, [r4], #1
 800afc8:	2830      	cmp	r0, #48	@ 0x30
 800afca:	d0fa      	beq.n	800afc2 <__gethex+0x12>
 800afcc:	eba9 0303 	sub.w	r3, r9, r3
 800afd0:	f1a3 0b02 	sub.w	fp, r3, #2
 800afd4:	f7ff ffd6 	bl	800af84 <__hexdig_fun>
 800afd8:	4605      	mov	r5, r0
 800afda:	2800      	cmp	r0, #0
 800afdc:	d168      	bne.n	800b0b0 <__gethex+0x100>
 800afde:	49a0      	ldr	r1, [pc, #640]	@ (800b260 <__gethex+0x2b0>)
 800afe0:	2201      	movs	r2, #1
 800afe2:	4648      	mov	r0, r9
 800afe4:	f7ff fe19 	bl	800ac1a <strncmp>
 800afe8:	4607      	mov	r7, r0
 800afea:	2800      	cmp	r0, #0
 800afec:	d167      	bne.n	800b0be <__gethex+0x10e>
 800afee:	f899 0001 	ldrb.w	r0, [r9, #1]
 800aff2:	4626      	mov	r6, r4
 800aff4:	f7ff ffc6 	bl	800af84 <__hexdig_fun>
 800aff8:	2800      	cmp	r0, #0
 800affa:	d062      	beq.n	800b0c2 <__gethex+0x112>
 800affc:	4623      	mov	r3, r4
 800affe:	7818      	ldrb	r0, [r3, #0]
 800b000:	2830      	cmp	r0, #48	@ 0x30
 800b002:	4699      	mov	r9, r3
 800b004:	f103 0301 	add.w	r3, r3, #1
 800b008:	d0f9      	beq.n	800affe <__gethex+0x4e>
 800b00a:	f7ff ffbb 	bl	800af84 <__hexdig_fun>
 800b00e:	fab0 f580 	clz	r5, r0
 800b012:	096d      	lsrs	r5, r5, #5
 800b014:	f04f 0b01 	mov.w	fp, #1
 800b018:	464a      	mov	r2, r9
 800b01a:	4616      	mov	r6, r2
 800b01c:	3201      	adds	r2, #1
 800b01e:	7830      	ldrb	r0, [r6, #0]
 800b020:	f7ff ffb0 	bl	800af84 <__hexdig_fun>
 800b024:	2800      	cmp	r0, #0
 800b026:	d1f8      	bne.n	800b01a <__gethex+0x6a>
 800b028:	498d      	ldr	r1, [pc, #564]	@ (800b260 <__gethex+0x2b0>)
 800b02a:	2201      	movs	r2, #1
 800b02c:	4630      	mov	r0, r6
 800b02e:	f7ff fdf4 	bl	800ac1a <strncmp>
 800b032:	2800      	cmp	r0, #0
 800b034:	d13f      	bne.n	800b0b6 <__gethex+0x106>
 800b036:	b944      	cbnz	r4, 800b04a <__gethex+0x9a>
 800b038:	1c74      	adds	r4, r6, #1
 800b03a:	4622      	mov	r2, r4
 800b03c:	4616      	mov	r6, r2
 800b03e:	3201      	adds	r2, #1
 800b040:	7830      	ldrb	r0, [r6, #0]
 800b042:	f7ff ff9f 	bl	800af84 <__hexdig_fun>
 800b046:	2800      	cmp	r0, #0
 800b048:	d1f8      	bne.n	800b03c <__gethex+0x8c>
 800b04a:	1ba4      	subs	r4, r4, r6
 800b04c:	00a7      	lsls	r7, r4, #2
 800b04e:	7833      	ldrb	r3, [r6, #0]
 800b050:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b054:	2b50      	cmp	r3, #80	@ 0x50
 800b056:	d13e      	bne.n	800b0d6 <__gethex+0x126>
 800b058:	7873      	ldrb	r3, [r6, #1]
 800b05a:	2b2b      	cmp	r3, #43	@ 0x2b
 800b05c:	d033      	beq.n	800b0c6 <__gethex+0x116>
 800b05e:	2b2d      	cmp	r3, #45	@ 0x2d
 800b060:	d034      	beq.n	800b0cc <__gethex+0x11c>
 800b062:	1c71      	adds	r1, r6, #1
 800b064:	2400      	movs	r4, #0
 800b066:	7808      	ldrb	r0, [r1, #0]
 800b068:	f7ff ff8c 	bl	800af84 <__hexdig_fun>
 800b06c:	1e43      	subs	r3, r0, #1
 800b06e:	b2db      	uxtb	r3, r3
 800b070:	2b18      	cmp	r3, #24
 800b072:	d830      	bhi.n	800b0d6 <__gethex+0x126>
 800b074:	f1a0 0210 	sub.w	r2, r0, #16
 800b078:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b07c:	f7ff ff82 	bl	800af84 <__hexdig_fun>
 800b080:	f100 3cff 	add.w	ip, r0, #4294967295
 800b084:	fa5f fc8c 	uxtb.w	ip, ip
 800b088:	f1bc 0f18 	cmp.w	ip, #24
 800b08c:	f04f 030a 	mov.w	r3, #10
 800b090:	d91e      	bls.n	800b0d0 <__gethex+0x120>
 800b092:	b104      	cbz	r4, 800b096 <__gethex+0xe6>
 800b094:	4252      	negs	r2, r2
 800b096:	4417      	add	r7, r2
 800b098:	f8ca 1000 	str.w	r1, [sl]
 800b09c:	b1ed      	cbz	r5, 800b0da <__gethex+0x12a>
 800b09e:	f1bb 0f00 	cmp.w	fp, #0
 800b0a2:	bf0c      	ite	eq
 800b0a4:	2506      	moveq	r5, #6
 800b0a6:	2500      	movne	r5, #0
 800b0a8:	4628      	mov	r0, r5
 800b0aa:	b005      	add	sp, #20
 800b0ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0b0:	2500      	movs	r5, #0
 800b0b2:	462c      	mov	r4, r5
 800b0b4:	e7b0      	b.n	800b018 <__gethex+0x68>
 800b0b6:	2c00      	cmp	r4, #0
 800b0b8:	d1c7      	bne.n	800b04a <__gethex+0x9a>
 800b0ba:	4627      	mov	r7, r4
 800b0bc:	e7c7      	b.n	800b04e <__gethex+0x9e>
 800b0be:	464e      	mov	r6, r9
 800b0c0:	462f      	mov	r7, r5
 800b0c2:	2501      	movs	r5, #1
 800b0c4:	e7c3      	b.n	800b04e <__gethex+0x9e>
 800b0c6:	2400      	movs	r4, #0
 800b0c8:	1cb1      	adds	r1, r6, #2
 800b0ca:	e7cc      	b.n	800b066 <__gethex+0xb6>
 800b0cc:	2401      	movs	r4, #1
 800b0ce:	e7fb      	b.n	800b0c8 <__gethex+0x118>
 800b0d0:	fb03 0002 	mla	r0, r3, r2, r0
 800b0d4:	e7ce      	b.n	800b074 <__gethex+0xc4>
 800b0d6:	4631      	mov	r1, r6
 800b0d8:	e7de      	b.n	800b098 <__gethex+0xe8>
 800b0da:	eba6 0309 	sub.w	r3, r6, r9
 800b0de:	3b01      	subs	r3, #1
 800b0e0:	4629      	mov	r1, r5
 800b0e2:	2b07      	cmp	r3, #7
 800b0e4:	dc0a      	bgt.n	800b0fc <__gethex+0x14c>
 800b0e6:	9801      	ldr	r0, [sp, #4]
 800b0e8:	f000 fafc 	bl	800b6e4 <_Balloc>
 800b0ec:	4604      	mov	r4, r0
 800b0ee:	b940      	cbnz	r0, 800b102 <__gethex+0x152>
 800b0f0:	4b5c      	ldr	r3, [pc, #368]	@ (800b264 <__gethex+0x2b4>)
 800b0f2:	4602      	mov	r2, r0
 800b0f4:	21e4      	movs	r1, #228	@ 0xe4
 800b0f6:	485c      	ldr	r0, [pc, #368]	@ (800b268 <__gethex+0x2b8>)
 800b0f8:	f7ff fe8a 	bl	800ae10 <__assert_func>
 800b0fc:	3101      	adds	r1, #1
 800b0fe:	105b      	asrs	r3, r3, #1
 800b100:	e7ef      	b.n	800b0e2 <__gethex+0x132>
 800b102:	f100 0a14 	add.w	sl, r0, #20
 800b106:	2300      	movs	r3, #0
 800b108:	4655      	mov	r5, sl
 800b10a:	469b      	mov	fp, r3
 800b10c:	45b1      	cmp	r9, r6
 800b10e:	d337      	bcc.n	800b180 <__gethex+0x1d0>
 800b110:	f845 bb04 	str.w	fp, [r5], #4
 800b114:	eba5 050a 	sub.w	r5, r5, sl
 800b118:	10ad      	asrs	r5, r5, #2
 800b11a:	6125      	str	r5, [r4, #16]
 800b11c:	4658      	mov	r0, fp
 800b11e:	f000 fbd3 	bl	800b8c8 <__hi0bits>
 800b122:	016d      	lsls	r5, r5, #5
 800b124:	f8d8 6000 	ldr.w	r6, [r8]
 800b128:	1a2d      	subs	r5, r5, r0
 800b12a:	42b5      	cmp	r5, r6
 800b12c:	dd54      	ble.n	800b1d8 <__gethex+0x228>
 800b12e:	1bad      	subs	r5, r5, r6
 800b130:	4629      	mov	r1, r5
 800b132:	4620      	mov	r0, r4
 800b134:	f000 ff67 	bl	800c006 <__any_on>
 800b138:	4681      	mov	r9, r0
 800b13a:	b178      	cbz	r0, 800b15c <__gethex+0x1ac>
 800b13c:	1e6b      	subs	r3, r5, #1
 800b13e:	1159      	asrs	r1, r3, #5
 800b140:	f003 021f 	and.w	r2, r3, #31
 800b144:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b148:	f04f 0901 	mov.w	r9, #1
 800b14c:	fa09 f202 	lsl.w	r2, r9, r2
 800b150:	420a      	tst	r2, r1
 800b152:	d003      	beq.n	800b15c <__gethex+0x1ac>
 800b154:	454b      	cmp	r3, r9
 800b156:	dc36      	bgt.n	800b1c6 <__gethex+0x216>
 800b158:	f04f 0902 	mov.w	r9, #2
 800b15c:	4629      	mov	r1, r5
 800b15e:	4620      	mov	r0, r4
 800b160:	f7ff febe 	bl	800aee0 <rshift>
 800b164:	442f      	add	r7, r5
 800b166:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b16a:	42bb      	cmp	r3, r7
 800b16c:	da42      	bge.n	800b1f4 <__gethex+0x244>
 800b16e:	9801      	ldr	r0, [sp, #4]
 800b170:	4621      	mov	r1, r4
 800b172:	f000 faf7 	bl	800b764 <_Bfree>
 800b176:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b178:	2300      	movs	r3, #0
 800b17a:	6013      	str	r3, [r2, #0]
 800b17c:	25a3      	movs	r5, #163	@ 0xa3
 800b17e:	e793      	b.n	800b0a8 <__gethex+0xf8>
 800b180:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b184:	2a2e      	cmp	r2, #46	@ 0x2e
 800b186:	d012      	beq.n	800b1ae <__gethex+0x1fe>
 800b188:	2b20      	cmp	r3, #32
 800b18a:	d104      	bne.n	800b196 <__gethex+0x1e6>
 800b18c:	f845 bb04 	str.w	fp, [r5], #4
 800b190:	f04f 0b00 	mov.w	fp, #0
 800b194:	465b      	mov	r3, fp
 800b196:	7830      	ldrb	r0, [r6, #0]
 800b198:	9303      	str	r3, [sp, #12]
 800b19a:	f7ff fef3 	bl	800af84 <__hexdig_fun>
 800b19e:	9b03      	ldr	r3, [sp, #12]
 800b1a0:	f000 000f 	and.w	r0, r0, #15
 800b1a4:	4098      	lsls	r0, r3
 800b1a6:	ea4b 0b00 	orr.w	fp, fp, r0
 800b1aa:	3304      	adds	r3, #4
 800b1ac:	e7ae      	b.n	800b10c <__gethex+0x15c>
 800b1ae:	45b1      	cmp	r9, r6
 800b1b0:	d8ea      	bhi.n	800b188 <__gethex+0x1d8>
 800b1b2:	492b      	ldr	r1, [pc, #172]	@ (800b260 <__gethex+0x2b0>)
 800b1b4:	9303      	str	r3, [sp, #12]
 800b1b6:	2201      	movs	r2, #1
 800b1b8:	4630      	mov	r0, r6
 800b1ba:	f7ff fd2e 	bl	800ac1a <strncmp>
 800b1be:	9b03      	ldr	r3, [sp, #12]
 800b1c0:	2800      	cmp	r0, #0
 800b1c2:	d1e1      	bne.n	800b188 <__gethex+0x1d8>
 800b1c4:	e7a2      	b.n	800b10c <__gethex+0x15c>
 800b1c6:	1ea9      	subs	r1, r5, #2
 800b1c8:	4620      	mov	r0, r4
 800b1ca:	f000 ff1c 	bl	800c006 <__any_on>
 800b1ce:	2800      	cmp	r0, #0
 800b1d0:	d0c2      	beq.n	800b158 <__gethex+0x1a8>
 800b1d2:	f04f 0903 	mov.w	r9, #3
 800b1d6:	e7c1      	b.n	800b15c <__gethex+0x1ac>
 800b1d8:	da09      	bge.n	800b1ee <__gethex+0x23e>
 800b1da:	1b75      	subs	r5, r6, r5
 800b1dc:	4621      	mov	r1, r4
 800b1de:	9801      	ldr	r0, [sp, #4]
 800b1e0:	462a      	mov	r2, r5
 800b1e2:	f000 fcd7 	bl	800bb94 <__lshift>
 800b1e6:	1b7f      	subs	r7, r7, r5
 800b1e8:	4604      	mov	r4, r0
 800b1ea:	f100 0a14 	add.w	sl, r0, #20
 800b1ee:	f04f 0900 	mov.w	r9, #0
 800b1f2:	e7b8      	b.n	800b166 <__gethex+0x1b6>
 800b1f4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b1f8:	42bd      	cmp	r5, r7
 800b1fa:	dd6f      	ble.n	800b2dc <__gethex+0x32c>
 800b1fc:	1bed      	subs	r5, r5, r7
 800b1fe:	42ae      	cmp	r6, r5
 800b200:	dc34      	bgt.n	800b26c <__gethex+0x2bc>
 800b202:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b206:	2b02      	cmp	r3, #2
 800b208:	d022      	beq.n	800b250 <__gethex+0x2a0>
 800b20a:	2b03      	cmp	r3, #3
 800b20c:	d024      	beq.n	800b258 <__gethex+0x2a8>
 800b20e:	2b01      	cmp	r3, #1
 800b210:	d115      	bne.n	800b23e <__gethex+0x28e>
 800b212:	42ae      	cmp	r6, r5
 800b214:	d113      	bne.n	800b23e <__gethex+0x28e>
 800b216:	2e01      	cmp	r6, #1
 800b218:	d10b      	bne.n	800b232 <__gethex+0x282>
 800b21a:	9a02      	ldr	r2, [sp, #8]
 800b21c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b220:	6013      	str	r3, [r2, #0]
 800b222:	2301      	movs	r3, #1
 800b224:	6123      	str	r3, [r4, #16]
 800b226:	f8ca 3000 	str.w	r3, [sl]
 800b22a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b22c:	2562      	movs	r5, #98	@ 0x62
 800b22e:	601c      	str	r4, [r3, #0]
 800b230:	e73a      	b.n	800b0a8 <__gethex+0xf8>
 800b232:	1e71      	subs	r1, r6, #1
 800b234:	4620      	mov	r0, r4
 800b236:	f000 fee6 	bl	800c006 <__any_on>
 800b23a:	2800      	cmp	r0, #0
 800b23c:	d1ed      	bne.n	800b21a <__gethex+0x26a>
 800b23e:	9801      	ldr	r0, [sp, #4]
 800b240:	4621      	mov	r1, r4
 800b242:	f000 fa8f 	bl	800b764 <_Bfree>
 800b246:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b248:	2300      	movs	r3, #0
 800b24a:	6013      	str	r3, [r2, #0]
 800b24c:	2550      	movs	r5, #80	@ 0x50
 800b24e:	e72b      	b.n	800b0a8 <__gethex+0xf8>
 800b250:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b252:	2b00      	cmp	r3, #0
 800b254:	d1f3      	bne.n	800b23e <__gethex+0x28e>
 800b256:	e7e0      	b.n	800b21a <__gethex+0x26a>
 800b258:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d1dd      	bne.n	800b21a <__gethex+0x26a>
 800b25e:	e7ee      	b.n	800b23e <__gethex+0x28e>
 800b260:	0800cee8 	.word	0x0800cee8
 800b264:	0800cffd 	.word	0x0800cffd
 800b268:	0800d00e 	.word	0x0800d00e
 800b26c:	1e6f      	subs	r7, r5, #1
 800b26e:	f1b9 0f00 	cmp.w	r9, #0
 800b272:	d130      	bne.n	800b2d6 <__gethex+0x326>
 800b274:	b127      	cbz	r7, 800b280 <__gethex+0x2d0>
 800b276:	4639      	mov	r1, r7
 800b278:	4620      	mov	r0, r4
 800b27a:	f000 fec4 	bl	800c006 <__any_on>
 800b27e:	4681      	mov	r9, r0
 800b280:	117a      	asrs	r2, r7, #5
 800b282:	2301      	movs	r3, #1
 800b284:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b288:	f007 071f 	and.w	r7, r7, #31
 800b28c:	40bb      	lsls	r3, r7
 800b28e:	4213      	tst	r3, r2
 800b290:	4629      	mov	r1, r5
 800b292:	4620      	mov	r0, r4
 800b294:	bf18      	it	ne
 800b296:	f049 0902 	orrne.w	r9, r9, #2
 800b29a:	f7ff fe21 	bl	800aee0 <rshift>
 800b29e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b2a2:	1b76      	subs	r6, r6, r5
 800b2a4:	2502      	movs	r5, #2
 800b2a6:	f1b9 0f00 	cmp.w	r9, #0
 800b2aa:	d047      	beq.n	800b33c <__gethex+0x38c>
 800b2ac:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b2b0:	2b02      	cmp	r3, #2
 800b2b2:	d015      	beq.n	800b2e0 <__gethex+0x330>
 800b2b4:	2b03      	cmp	r3, #3
 800b2b6:	d017      	beq.n	800b2e8 <__gethex+0x338>
 800b2b8:	2b01      	cmp	r3, #1
 800b2ba:	d109      	bne.n	800b2d0 <__gethex+0x320>
 800b2bc:	f019 0f02 	tst.w	r9, #2
 800b2c0:	d006      	beq.n	800b2d0 <__gethex+0x320>
 800b2c2:	f8da 3000 	ldr.w	r3, [sl]
 800b2c6:	ea49 0903 	orr.w	r9, r9, r3
 800b2ca:	f019 0f01 	tst.w	r9, #1
 800b2ce:	d10e      	bne.n	800b2ee <__gethex+0x33e>
 800b2d0:	f045 0510 	orr.w	r5, r5, #16
 800b2d4:	e032      	b.n	800b33c <__gethex+0x38c>
 800b2d6:	f04f 0901 	mov.w	r9, #1
 800b2da:	e7d1      	b.n	800b280 <__gethex+0x2d0>
 800b2dc:	2501      	movs	r5, #1
 800b2de:	e7e2      	b.n	800b2a6 <__gethex+0x2f6>
 800b2e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b2e2:	f1c3 0301 	rsb	r3, r3, #1
 800b2e6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b2e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d0f0      	beq.n	800b2d0 <__gethex+0x320>
 800b2ee:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b2f2:	f104 0314 	add.w	r3, r4, #20
 800b2f6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b2fa:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b2fe:	f04f 0c00 	mov.w	ip, #0
 800b302:	4618      	mov	r0, r3
 800b304:	f853 2b04 	ldr.w	r2, [r3], #4
 800b308:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b30c:	d01b      	beq.n	800b346 <__gethex+0x396>
 800b30e:	3201      	adds	r2, #1
 800b310:	6002      	str	r2, [r0, #0]
 800b312:	2d02      	cmp	r5, #2
 800b314:	f104 0314 	add.w	r3, r4, #20
 800b318:	d13c      	bne.n	800b394 <__gethex+0x3e4>
 800b31a:	f8d8 2000 	ldr.w	r2, [r8]
 800b31e:	3a01      	subs	r2, #1
 800b320:	42b2      	cmp	r2, r6
 800b322:	d109      	bne.n	800b338 <__gethex+0x388>
 800b324:	1171      	asrs	r1, r6, #5
 800b326:	2201      	movs	r2, #1
 800b328:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b32c:	f006 061f 	and.w	r6, r6, #31
 800b330:	fa02 f606 	lsl.w	r6, r2, r6
 800b334:	421e      	tst	r6, r3
 800b336:	d13a      	bne.n	800b3ae <__gethex+0x3fe>
 800b338:	f045 0520 	orr.w	r5, r5, #32
 800b33c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b33e:	601c      	str	r4, [r3, #0]
 800b340:	9b02      	ldr	r3, [sp, #8]
 800b342:	601f      	str	r7, [r3, #0]
 800b344:	e6b0      	b.n	800b0a8 <__gethex+0xf8>
 800b346:	4299      	cmp	r1, r3
 800b348:	f843 cc04 	str.w	ip, [r3, #-4]
 800b34c:	d8d9      	bhi.n	800b302 <__gethex+0x352>
 800b34e:	68a3      	ldr	r3, [r4, #8]
 800b350:	459b      	cmp	fp, r3
 800b352:	db17      	blt.n	800b384 <__gethex+0x3d4>
 800b354:	6861      	ldr	r1, [r4, #4]
 800b356:	9801      	ldr	r0, [sp, #4]
 800b358:	3101      	adds	r1, #1
 800b35a:	f000 f9c3 	bl	800b6e4 <_Balloc>
 800b35e:	4681      	mov	r9, r0
 800b360:	b918      	cbnz	r0, 800b36a <__gethex+0x3ba>
 800b362:	4b1a      	ldr	r3, [pc, #104]	@ (800b3cc <__gethex+0x41c>)
 800b364:	4602      	mov	r2, r0
 800b366:	2184      	movs	r1, #132	@ 0x84
 800b368:	e6c5      	b.n	800b0f6 <__gethex+0x146>
 800b36a:	6922      	ldr	r2, [r4, #16]
 800b36c:	3202      	adds	r2, #2
 800b36e:	f104 010c 	add.w	r1, r4, #12
 800b372:	0092      	lsls	r2, r2, #2
 800b374:	300c      	adds	r0, #12
 800b376:	f7ff fd32 	bl	800adde <memcpy>
 800b37a:	4621      	mov	r1, r4
 800b37c:	9801      	ldr	r0, [sp, #4]
 800b37e:	f000 f9f1 	bl	800b764 <_Bfree>
 800b382:	464c      	mov	r4, r9
 800b384:	6923      	ldr	r3, [r4, #16]
 800b386:	1c5a      	adds	r2, r3, #1
 800b388:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b38c:	6122      	str	r2, [r4, #16]
 800b38e:	2201      	movs	r2, #1
 800b390:	615a      	str	r2, [r3, #20]
 800b392:	e7be      	b.n	800b312 <__gethex+0x362>
 800b394:	6922      	ldr	r2, [r4, #16]
 800b396:	455a      	cmp	r2, fp
 800b398:	dd0b      	ble.n	800b3b2 <__gethex+0x402>
 800b39a:	2101      	movs	r1, #1
 800b39c:	4620      	mov	r0, r4
 800b39e:	f7ff fd9f 	bl	800aee0 <rshift>
 800b3a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b3a6:	3701      	adds	r7, #1
 800b3a8:	42bb      	cmp	r3, r7
 800b3aa:	f6ff aee0 	blt.w	800b16e <__gethex+0x1be>
 800b3ae:	2501      	movs	r5, #1
 800b3b0:	e7c2      	b.n	800b338 <__gethex+0x388>
 800b3b2:	f016 061f 	ands.w	r6, r6, #31
 800b3b6:	d0fa      	beq.n	800b3ae <__gethex+0x3fe>
 800b3b8:	4453      	add	r3, sl
 800b3ba:	f1c6 0620 	rsb	r6, r6, #32
 800b3be:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b3c2:	f000 fa81 	bl	800b8c8 <__hi0bits>
 800b3c6:	42b0      	cmp	r0, r6
 800b3c8:	dbe7      	blt.n	800b39a <__gethex+0x3ea>
 800b3ca:	e7f0      	b.n	800b3ae <__gethex+0x3fe>
 800b3cc:	0800cffd 	.word	0x0800cffd

0800b3d0 <L_shift>:
 800b3d0:	f1c2 0208 	rsb	r2, r2, #8
 800b3d4:	0092      	lsls	r2, r2, #2
 800b3d6:	b570      	push	{r4, r5, r6, lr}
 800b3d8:	f1c2 0620 	rsb	r6, r2, #32
 800b3dc:	6843      	ldr	r3, [r0, #4]
 800b3de:	6804      	ldr	r4, [r0, #0]
 800b3e0:	fa03 f506 	lsl.w	r5, r3, r6
 800b3e4:	432c      	orrs	r4, r5
 800b3e6:	40d3      	lsrs	r3, r2
 800b3e8:	6004      	str	r4, [r0, #0]
 800b3ea:	f840 3f04 	str.w	r3, [r0, #4]!
 800b3ee:	4288      	cmp	r0, r1
 800b3f0:	d3f4      	bcc.n	800b3dc <L_shift+0xc>
 800b3f2:	bd70      	pop	{r4, r5, r6, pc}

0800b3f4 <__match>:
 800b3f4:	b530      	push	{r4, r5, lr}
 800b3f6:	6803      	ldr	r3, [r0, #0]
 800b3f8:	3301      	adds	r3, #1
 800b3fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b3fe:	b914      	cbnz	r4, 800b406 <__match+0x12>
 800b400:	6003      	str	r3, [r0, #0]
 800b402:	2001      	movs	r0, #1
 800b404:	bd30      	pop	{r4, r5, pc}
 800b406:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b40a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b40e:	2d19      	cmp	r5, #25
 800b410:	bf98      	it	ls
 800b412:	3220      	addls	r2, #32
 800b414:	42a2      	cmp	r2, r4
 800b416:	d0f0      	beq.n	800b3fa <__match+0x6>
 800b418:	2000      	movs	r0, #0
 800b41a:	e7f3      	b.n	800b404 <__match+0x10>

0800b41c <__hexnan>:
 800b41c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b420:	680b      	ldr	r3, [r1, #0]
 800b422:	6801      	ldr	r1, [r0, #0]
 800b424:	115e      	asrs	r6, r3, #5
 800b426:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b42a:	f013 031f 	ands.w	r3, r3, #31
 800b42e:	b087      	sub	sp, #28
 800b430:	bf18      	it	ne
 800b432:	3604      	addne	r6, #4
 800b434:	2500      	movs	r5, #0
 800b436:	1f37      	subs	r7, r6, #4
 800b438:	4682      	mov	sl, r0
 800b43a:	4690      	mov	r8, r2
 800b43c:	9301      	str	r3, [sp, #4]
 800b43e:	f846 5c04 	str.w	r5, [r6, #-4]
 800b442:	46b9      	mov	r9, r7
 800b444:	463c      	mov	r4, r7
 800b446:	9502      	str	r5, [sp, #8]
 800b448:	46ab      	mov	fp, r5
 800b44a:	784a      	ldrb	r2, [r1, #1]
 800b44c:	1c4b      	adds	r3, r1, #1
 800b44e:	9303      	str	r3, [sp, #12]
 800b450:	b342      	cbz	r2, 800b4a4 <__hexnan+0x88>
 800b452:	4610      	mov	r0, r2
 800b454:	9105      	str	r1, [sp, #20]
 800b456:	9204      	str	r2, [sp, #16]
 800b458:	f7ff fd94 	bl	800af84 <__hexdig_fun>
 800b45c:	2800      	cmp	r0, #0
 800b45e:	d151      	bne.n	800b504 <__hexnan+0xe8>
 800b460:	9a04      	ldr	r2, [sp, #16]
 800b462:	9905      	ldr	r1, [sp, #20]
 800b464:	2a20      	cmp	r2, #32
 800b466:	d818      	bhi.n	800b49a <__hexnan+0x7e>
 800b468:	9b02      	ldr	r3, [sp, #8]
 800b46a:	459b      	cmp	fp, r3
 800b46c:	dd13      	ble.n	800b496 <__hexnan+0x7a>
 800b46e:	454c      	cmp	r4, r9
 800b470:	d206      	bcs.n	800b480 <__hexnan+0x64>
 800b472:	2d07      	cmp	r5, #7
 800b474:	dc04      	bgt.n	800b480 <__hexnan+0x64>
 800b476:	462a      	mov	r2, r5
 800b478:	4649      	mov	r1, r9
 800b47a:	4620      	mov	r0, r4
 800b47c:	f7ff ffa8 	bl	800b3d0 <L_shift>
 800b480:	4544      	cmp	r4, r8
 800b482:	d952      	bls.n	800b52a <__hexnan+0x10e>
 800b484:	2300      	movs	r3, #0
 800b486:	f1a4 0904 	sub.w	r9, r4, #4
 800b48a:	f844 3c04 	str.w	r3, [r4, #-4]
 800b48e:	f8cd b008 	str.w	fp, [sp, #8]
 800b492:	464c      	mov	r4, r9
 800b494:	461d      	mov	r5, r3
 800b496:	9903      	ldr	r1, [sp, #12]
 800b498:	e7d7      	b.n	800b44a <__hexnan+0x2e>
 800b49a:	2a29      	cmp	r2, #41	@ 0x29
 800b49c:	d157      	bne.n	800b54e <__hexnan+0x132>
 800b49e:	3102      	adds	r1, #2
 800b4a0:	f8ca 1000 	str.w	r1, [sl]
 800b4a4:	f1bb 0f00 	cmp.w	fp, #0
 800b4a8:	d051      	beq.n	800b54e <__hexnan+0x132>
 800b4aa:	454c      	cmp	r4, r9
 800b4ac:	d206      	bcs.n	800b4bc <__hexnan+0xa0>
 800b4ae:	2d07      	cmp	r5, #7
 800b4b0:	dc04      	bgt.n	800b4bc <__hexnan+0xa0>
 800b4b2:	462a      	mov	r2, r5
 800b4b4:	4649      	mov	r1, r9
 800b4b6:	4620      	mov	r0, r4
 800b4b8:	f7ff ff8a 	bl	800b3d0 <L_shift>
 800b4bc:	4544      	cmp	r4, r8
 800b4be:	d936      	bls.n	800b52e <__hexnan+0x112>
 800b4c0:	f1a8 0204 	sub.w	r2, r8, #4
 800b4c4:	4623      	mov	r3, r4
 800b4c6:	f853 1b04 	ldr.w	r1, [r3], #4
 800b4ca:	f842 1f04 	str.w	r1, [r2, #4]!
 800b4ce:	429f      	cmp	r7, r3
 800b4d0:	d2f9      	bcs.n	800b4c6 <__hexnan+0xaa>
 800b4d2:	1b3b      	subs	r3, r7, r4
 800b4d4:	f023 0303 	bic.w	r3, r3, #3
 800b4d8:	3304      	adds	r3, #4
 800b4da:	3401      	adds	r4, #1
 800b4dc:	3e03      	subs	r6, #3
 800b4de:	42b4      	cmp	r4, r6
 800b4e0:	bf88      	it	hi
 800b4e2:	2304      	movhi	r3, #4
 800b4e4:	4443      	add	r3, r8
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	f843 2b04 	str.w	r2, [r3], #4
 800b4ec:	429f      	cmp	r7, r3
 800b4ee:	d2fb      	bcs.n	800b4e8 <__hexnan+0xcc>
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	b91b      	cbnz	r3, 800b4fc <__hexnan+0xe0>
 800b4f4:	4547      	cmp	r7, r8
 800b4f6:	d128      	bne.n	800b54a <__hexnan+0x12e>
 800b4f8:	2301      	movs	r3, #1
 800b4fa:	603b      	str	r3, [r7, #0]
 800b4fc:	2005      	movs	r0, #5
 800b4fe:	b007      	add	sp, #28
 800b500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b504:	3501      	adds	r5, #1
 800b506:	2d08      	cmp	r5, #8
 800b508:	f10b 0b01 	add.w	fp, fp, #1
 800b50c:	dd06      	ble.n	800b51c <__hexnan+0x100>
 800b50e:	4544      	cmp	r4, r8
 800b510:	d9c1      	bls.n	800b496 <__hexnan+0x7a>
 800b512:	2300      	movs	r3, #0
 800b514:	f844 3c04 	str.w	r3, [r4, #-4]
 800b518:	2501      	movs	r5, #1
 800b51a:	3c04      	subs	r4, #4
 800b51c:	6822      	ldr	r2, [r4, #0]
 800b51e:	f000 000f 	and.w	r0, r0, #15
 800b522:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b526:	6020      	str	r0, [r4, #0]
 800b528:	e7b5      	b.n	800b496 <__hexnan+0x7a>
 800b52a:	2508      	movs	r5, #8
 800b52c:	e7b3      	b.n	800b496 <__hexnan+0x7a>
 800b52e:	9b01      	ldr	r3, [sp, #4]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d0dd      	beq.n	800b4f0 <__hexnan+0xd4>
 800b534:	f1c3 0320 	rsb	r3, r3, #32
 800b538:	f04f 32ff 	mov.w	r2, #4294967295
 800b53c:	40da      	lsrs	r2, r3
 800b53e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b542:	4013      	ands	r3, r2
 800b544:	f846 3c04 	str.w	r3, [r6, #-4]
 800b548:	e7d2      	b.n	800b4f0 <__hexnan+0xd4>
 800b54a:	3f04      	subs	r7, #4
 800b54c:	e7d0      	b.n	800b4f0 <__hexnan+0xd4>
 800b54e:	2004      	movs	r0, #4
 800b550:	e7d5      	b.n	800b4fe <__hexnan+0xe2>
	...

0800b554 <malloc>:
 800b554:	4b02      	ldr	r3, [pc, #8]	@ (800b560 <malloc+0xc>)
 800b556:	4601      	mov	r1, r0
 800b558:	6818      	ldr	r0, [r3, #0]
 800b55a:	f000 b825 	b.w	800b5a8 <_malloc_r>
 800b55e:	bf00      	nop
 800b560:	20000188 	.word	0x20000188

0800b564 <sbrk_aligned>:
 800b564:	b570      	push	{r4, r5, r6, lr}
 800b566:	4e0f      	ldr	r6, [pc, #60]	@ (800b5a4 <sbrk_aligned+0x40>)
 800b568:	460c      	mov	r4, r1
 800b56a:	6831      	ldr	r1, [r6, #0]
 800b56c:	4605      	mov	r5, r0
 800b56e:	b911      	cbnz	r1, 800b576 <sbrk_aligned+0x12>
 800b570:	f001 f934 	bl	800c7dc <_sbrk_r>
 800b574:	6030      	str	r0, [r6, #0]
 800b576:	4621      	mov	r1, r4
 800b578:	4628      	mov	r0, r5
 800b57a:	f001 f92f 	bl	800c7dc <_sbrk_r>
 800b57e:	1c43      	adds	r3, r0, #1
 800b580:	d103      	bne.n	800b58a <sbrk_aligned+0x26>
 800b582:	f04f 34ff 	mov.w	r4, #4294967295
 800b586:	4620      	mov	r0, r4
 800b588:	bd70      	pop	{r4, r5, r6, pc}
 800b58a:	1cc4      	adds	r4, r0, #3
 800b58c:	f024 0403 	bic.w	r4, r4, #3
 800b590:	42a0      	cmp	r0, r4
 800b592:	d0f8      	beq.n	800b586 <sbrk_aligned+0x22>
 800b594:	1a21      	subs	r1, r4, r0
 800b596:	4628      	mov	r0, r5
 800b598:	f001 f920 	bl	800c7dc <_sbrk_r>
 800b59c:	3001      	adds	r0, #1
 800b59e:	d1f2      	bne.n	800b586 <sbrk_aligned+0x22>
 800b5a0:	e7ef      	b.n	800b582 <sbrk_aligned+0x1e>
 800b5a2:	bf00      	nop
 800b5a4:	200020f8 	.word	0x200020f8

0800b5a8 <_malloc_r>:
 800b5a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5ac:	1ccd      	adds	r5, r1, #3
 800b5ae:	f025 0503 	bic.w	r5, r5, #3
 800b5b2:	3508      	adds	r5, #8
 800b5b4:	2d0c      	cmp	r5, #12
 800b5b6:	bf38      	it	cc
 800b5b8:	250c      	movcc	r5, #12
 800b5ba:	2d00      	cmp	r5, #0
 800b5bc:	4606      	mov	r6, r0
 800b5be:	db01      	blt.n	800b5c4 <_malloc_r+0x1c>
 800b5c0:	42a9      	cmp	r1, r5
 800b5c2:	d904      	bls.n	800b5ce <_malloc_r+0x26>
 800b5c4:	230c      	movs	r3, #12
 800b5c6:	6033      	str	r3, [r6, #0]
 800b5c8:	2000      	movs	r0, #0
 800b5ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b6a4 <_malloc_r+0xfc>
 800b5d2:	f000 f87b 	bl	800b6cc <__malloc_lock>
 800b5d6:	f8d8 3000 	ldr.w	r3, [r8]
 800b5da:	461c      	mov	r4, r3
 800b5dc:	bb44      	cbnz	r4, 800b630 <_malloc_r+0x88>
 800b5de:	4629      	mov	r1, r5
 800b5e0:	4630      	mov	r0, r6
 800b5e2:	f7ff ffbf 	bl	800b564 <sbrk_aligned>
 800b5e6:	1c43      	adds	r3, r0, #1
 800b5e8:	4604      	mov	r4, r0
 800b5ea:	d158      	bne.n	800b69e <_malloc_r+0xf6>
 800b5ec:	f8d8 4000 	ldr.w	r4, [r8]
 800b5f0:	4627      	mov	r7, r4
 800b5f2:	2f00      	cmp	r7, #0
 800b5f4:	d143      	bne.n	800b67e <_malloc_r+0xd6>
 800b5f6:	2c00      	cmp	r4, #0
 800b5f8:	d04b      	beq.n	800b692 <_malloc_r+0xea>
 800b5fa:	6823      	ldr	r3, [r4, #0]
 800b5fc:	4639      	mov	r1, r7
 800b5fe:	4630      	mov	r0, r6
 800b600:	eb04 0903 	add.w	r9, r4, r3
 800b604:	f001 f8ea 	bl	800c7dc <_sbrk_r>
 800b608:	4581      	cmp	r9, r0
 800b60a:	d142      	bne.n	800b692 <_malloc_r+0xea>
 800b60c:	6821      	ldr	r1, [r4, #0]
 800b60e:	1a6d      	subs	r5, r5, r1
 800b610:	4629      	mov	r1, r5
 800b612:	4630      	mov	r0, r6
 800b614:	f7ff ffa6 	bl	800b564 <sbrk_aligned>
 800b618:	3001      	adds	r0, #1
 800b61a:	d03a      	beq.n	800b692 <_malloc_r+0xea>
 800b61c:	6823      	ldr	r3, [r4, #0]
 800b61e:	442b      	add	r3, r5
 800b620:	6023      	str	r3, [r4, #0]
 800b622:	f8d8 3000 	ldr.w	r3, [r8]
 800b626:	685a      	ldr	r2, [r3, #4]
 800b628:	bb62      	cbnz	r2, 800b684 <_malloc_r+0xdc>
 800b62a:	f8c8 7000 	str.w	r7, [r8]
 800b62e:	e00f      	b.n	800b650 <_malloc_r+0xa8>
 800b630:	6822      	ldr	r2, [r4, #0]
 800b632:	1b52      	subs	r2, r2, r5
 800b634:	d420      	bmi.n	800b678 <_malloc_r+0xd0>
 800b636:	2a0b      	cmp	r2, #11
 800b638:	d917      	bls.n	800b66a <_malloc_r+0xc2>
 800b63a:	1961      	adds	r1, r4, r5
 800b63c:	42a3      	cmp	r3, r4
 800b63e:	6025      	str	r5, [r4, #0]
 800b640:	bf18      	it	ne
 800b642:	6059      	strne	r1, [r3, #4]
 800b644:	6863      	ldr	r3, [r4, #4]
 800b646:	bf08      	it	eq
 800b648:	f8c8 1000 	streq.w	r1, [r8]
 800b64c:	5162      	str	r2, [r4, r5]
 800b64e:	604b      	str	r3, [r1, #4]
 800b650:	4630      	mov	r0, r6
 800b652:	f000 f841 	bl	800b6d8 <__malloc_unlock>
 800b656:	f104 000b 	add.w	r0, r4, #11
 800b65a:	1d23      	adds	r3, r4, #4
 800b65c:	f020 0007 	bic.w	r0, r0, #7
 800b660:	1ac2      	subs	r2, r0, r3
 800b662:	bf1c      	itt	ne
 800b664:	1a1b      	subne	r3, r3, r0
 800b666:	50a3      	strne	r3, [r4, r2]
 800b668:	e7af      	b.n	800b5ca <_malloc_r+0x22>
 800b66a:	6862      	ldr	r2, [r4, #4]
 800b66c:	42a3      	cmp	r3, r4
 800b66e:	bf0c      	ite	eq
 800b670:	f8c8 2000 	streq.w	r2, [r8]
 800b674:	605a      	strne	r2, [r3, #4]
 800b676:	e7eb      	b.n	800b650 <_malloc_r+0xa8>
 800b678:	4623      	mov	r3, r4
 800b67a:	6864      	ldr	r4, [r4, #4]
 800b67c:	e7ae      	b.n	800b5dc <_malloc_r+0x34>
 800b67e:	463c      	mov	r4, r7
 800b680:	687f      	ldr	r7, [r7, #4]
 800b682:	e7b6      	b.n	800b5f2 <_malloc_r+0x4a>
 800b684:	461a      	mov	r2, r3
 800b686:	685b      	ldr	r3, [r3, #4]
 800b688:	42a3      	cmp	r3, r4
 800b68a:	d1fb      	bne.n	800b684 <_malloc_r+0xdc>
 800b68c:	2300      	movs	r3, #0
 800b68e:	6053      	str	r3, [r2, #4]
 800b690:	e7de      	b.n	800b650 <_malloc_r+0xa8>
 800b692:	230c      	movs	r3, #12
 800b694:	6033      	str	r3, [r6, #0]
 800b696:	4630      	mov	r0, r6
 800b698:	f000 f81e 	bl	800b6d8 <__malloc_unlock>
 800b69c:	e794      	b.n	800b5c8 <_malloc_r+0x20>
 800b69e:	6005      	str	r5, [r0, #0]
 800b6a0:	e7d6      	b.n	800b650 <_malloc_r+0xa8>
 800b6a2:	bf00      	nop
 800b6a4:	200020fc 	.word	0x200020fc

0800b6a8 <__ascii_mbtowc>:
 800b6a8:	b082      	sub	sp, #8
 800b6aa:	b901      	cbnz	r1, 800b6ae <__ascii_mbtowc+0x6>
 800b6ac:	a901      	add	r1, sp, #4
 800b6ae:	b142      	cbz	r2, 800b6c2 <__ascii_mbtowc+0x1a>
 800b6b0:	b14b      	cbz	r3, 800b6c6 <__ascii_mbtowc+0x1e>
 800b6b2:	7813      	ldrb	r3, [r2, #0]
 800b6b4:	600b      	str	r3, [r1, #0]
 800b6b6:	7812      	ldrb	r2, [r2, #0]
 800b6b8:	1e10      	subs	r0, r2, #0
 800b6ba:	bf18      	it	ne
 800b6bc:	2001      	movne	r0, #1
 800b6be:	b002      	add	sp, #8
 800b6c0:	4770      	bx	lr
 800b6c2:	4610      	mov	r0, r2
 800b6c4:	e7fb      	b.n	800b6be <__ascii_mbtowc+0x16>
 800b6c6:	f06f 0001 	mvn.w	r0, #1
 800b6ca:	e7f8      	b.n	800b6be <__ascii_mbtowc+0x16>

0800b6cc <__malloc_lock>:
 800b6cc:	4801      	ldr	r0, [pc, #4]	@ (800b6d4 <__malloc_lock+0x8>)
 800b6ce:	f7ff bb84 	b.w	800adda <__retarget_lock_acquire_recursive>
 800b6d2:	bf00      	nop
 800b6d4:	200020f4 	.word	0x200020f4

0800b6d8 <__malloc_unlock>:
 800b6d8:	4801      	ldr	r0, [pc, #4]	@ (800b6e0 <__malloc_unlock+0x8>)
 800b6da:	f7ff bb7f 	b.w	800addc <__retarget_lock_release_recursive>
 800b6de:	bf00      	nop
 800b6e0:	200020f4 	.word	0x200020f4

0800b6e4 <_Balloc>:
 800b6e4:	b570      	push	{r4, r5, r6, lr}
 800b6e6:	69c6      	ldr	r6, [r0, #28]
 800b6e8:	4604      	mov	r4, r0
 800b6ea:	460d      	mov	r5, r1
 800b6ec:	b976      	cbnz	r6, 800b70c <_Balloc+0x28>
 800b6ee:	2010      	movs	r0, #16
 800b6f0:	f7ff ff30 	bl	800b554 <malloc>
 800b6f4:	4602      	mov	r2, r0
 800b6f6:	61e0      	str	r0, [r4, #28]
 800b6f8:	b920      	cbnz	r0, 800b704 <_Balloc+0x20>
 800b6fa:	4b18      	ldr	r3, [pc, #96]	@ (800b75c <_Balloc+0x78>)
 800b6fc:	4818      	ldr	r0, [pc, #96]	@ (800b760 <_Balloc+0x7c>)
 800b6fe:	216b      	movs	r1, #107	@ 0x6b
 800b700:	f7ff fb86 	bl	800ae10 <__assert_func>
 800b704:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b708:	6006      	str	r6, [r0, #0]
 800b70a:	60c6      	str	r6, [r0, #12]
 800b70c:	69e6      	ldr	r6, [r4, #28]
 800b70e:	68f3      	ldr	r3, [r6, #12]
 800b710:	b183      	cbz	r3, 800b734 <_Balloc+0x50>
 800b712:	69e3      	ldr	r3, [r4, #28]
 800b714:	68db      	ldr	r3, [r3, #12]
 800b716:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b71a:	b9b8      	cbnz	r0, 800b74c <_Balloc+0x68>
 800b71c:	2101      	movs	r1, #1
 800b71e:	fa01 f605 	lsl.w	r6, r1, r5
 800b722:	1d72      	adds	r2, r6, #5
 800b724:	0092      	lsls	r2, r2, #2
 800b726:	4620      	mov	r0, r4
 800b728:	f001 f86f 	bl	800c80a <_calloc_r>
 800b72c:	b160      	cbz	r0, 800b748 <_Balloc+0x64>
 800b72e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b732:	e00e      	b.n	800b752 <_Balloc+0x6e>
 800b734:	2221      	movs	r2, #33	@ 0x21
 800b736:	2104      	movs	r1, #4
 800b738:	4620      	mov	r0, r4
 800b73a:	f001 f866 	bl	800c80a <_calloc_r>
 800b73e:	69e3      	ldr	r3, [r4, #28]
 800b740:	60f0      	str	r0, [r6, #12]
 800b742:	68db      	ldr	r3, [r3, #12]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d1e4      	bne.n	800b712 <_Balloc+0x2e>
 800b748:	2000      	movs	r0, #0
 800b74a:	bd70      	pop	{r4, r5, r6, pc}
 800b74c:	6802      	ldr	r2, [r0, #0]
 800b74e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b752:	2300      	movs	r3, #0
 800b754:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b758:	e7f7      	b.n	800b74a <_Balloc+0x66>
 800b75a:	bf00      	nop
 800b75c:	0800cf48 	.word	0x0800cf48
 800b760:	0800d06e 	.word	0x0800d06e

0800b764 <_Bfree>:
 800b764:	b570      	push	{r4, r5, r6, lr}
 800b766:	69c6      	ldr	r6, [r0, #28]
 800b768:	4605      	mov	r5, r0
 800b76a:	460c      	mov	r4, r1
 800b76c:	b976      	cbnz	r6, 800b78c <_Bfree+0x28>
 800b76e:	2010      	movs	r0, #16
 800b770:	f7ff fef0 	bl	800b554 <malloc>
 800b774:	4602      	mov	r2, r0
 800b776:	61e8      	str	r0, [r5, #28]
 800b778:	b920      	cbnz	r0, 800b784 <_Bfree+0x20>
 800b77a:	4b09      	ldr	r3, [pc, #36]	@ (800b7a0 <_Bfree+0x3c>)
 800b77c:	4809      	ldr	r0, [pc, #36]	@ (800b7a4 <_Bfree+0x40>)
 800b77e:	218f      	movs	r1, #143	@ 0x8f
 800b780:	f7ff fb46 	bl	800ae10 <__assert_func>
 800b784:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b788:	6006      	str	r6, [r0, #0]
 800b78a:	60c6      	str	r6, [r0, #12]
 800b78c:	b13c      	cbz	r4, 800b79e <_Bfree+0x3a>
 800b78e:	69eb      	ldr	r3, [r5, #28]
 800b790:	6862      	ldr	r2, [r4, #4]
 800b792:	68db      	ldr	r3, [r3, #12]
 800b794:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b798:	6021      	str	r1, [r4, #0]
 800b79a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b79e:	bd70      	pop	{r4, r5, r6, pc}
 800b7a0:	0800cf48 	.word	0x0800cf48
 800b7a4:	0800d06e 	.word	0x0800d06e

0800b7a8 <__multadd>:
 800b7a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7ac:	690d      	ldr	r5, [r1, #16]
 800b7ae:	4607      	mov	r7, r0
 800b7b0:	460c      	mov	r4, r1
 800b7b2:	461e      	mov	r6, r3
 800b7b4:	f101 0c14 	add.w	ip, r1, #20
 800b7b8:	2000      	movs	r0, #0
 800b7ba:	f8dc 3000 	ldr.w	r3, [ip]
 800b7be:	b299      	uxth	r1, r3
 800b7c0:	fb02 6101 	mla	r1, r2, r1, r6
 800b7c4:	0c1e      	lsrs	r6, r3, #16
 800b7c6:	0c0b      	lsrs	r3, r1, #16
 800b7c8:	fb02 3306 	mla	r3, r2, r6, r3
 800b7cc:	b289      	uxth	r1, r1
 800b7ce:	3001      	adds	r0, #1
 800b7d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b7d4:	4285      	cmp	r5, r0
 800b7d6:	f84c 1b04 	str.w	r1, [ip], #4
 800b7da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b7de:	dcec      	bgt.n	800b7ba <__multadd+0x12>
 800b7e0:	b30e      	cbz	r6, 800b826 <__multadd+0x7e>
 800b7e2:	68a3      	ldr	r3, [r4, #8]
 800b7e4:	42ab      	cmp	r3, r5
 800b7e6:	dc19      	bgt.n	800b81c <__multadd+0x74>
 800b7e8:	6861      	ldr	r1, [r4, #4]
 800b7ea:	4638      	mov	r0, r7
 800b7ec:	3101      	adds	r1, #1
 800b7ee:	f7ff ff79 	bl	800b6e4 <_Balloc>
 800b7f2:	4680      	mov	r8, r0
 800b7f4:	b928      	cbnz	r0, 800b802 <__multadd+0x5a>
 800b7f6:	4602      	mov	r2, r0
 800b7f8:	4b0c      	ldr	r3, [pc, #48]	@ (800b82c <__multadd+0x84>)
 800b7fa:	480d      	ldr	r0, [pc, #52]	@ (800b830 <__multadd+0x88>)
 800b7fc:	21ba      	movs	r1, #186	@ 0xba
 800b7fe:	f7ff fb07 	bl	800ae10 <__assert_func>
 800b802:	6922      	ldr	r2, [r4, #16]
 800b804:	3202      	adds	r2, #2
 800b806:	f104 010c 	add.w	r1, r4, #12
 800b80a:	0092      	lsls	r2, r2, #2
 800b80c:	300c      	adds	r0, #12
 800b80e:	f7ff fae6 	bl	800adde <memcpy>
 800b812:	4621      	mov	r1, r4
 800b814:	4638      	mov	r0, r7
 800b816:	f7ff ffa5 	bl	800b764 <_Bfree>
 800b81a:	4644      	mov	r4, r8
 800b81c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b820:	3501      	adds	r5, #1
 800b822:	615e      	str	r6, [r3, #20]
 800b824:	6125      	str	r5, [r4, #16]
 800b826:	4620      	mov	r0, r4
 800b828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b82c:	0800cffd 	.word	0x0800cffd
 800b830:	0800d06e 	.word	0x0800d06e

0800b834 <__s2b>:
 800b834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b838:	460c      	mov	r4, r1
 800b83a:	4615      	mov	r5, r2
 800b83c:	461f      	mov	r7, r3
 800b83e:	2209      	movs	r2, #9
 800b840:	3308      	adds	r3, #8
 800b842:	4606      	mov	r6, r0
 800b844:	fb93 f3f2 	sdiv	r3, r3, r2
 800b848:	2100      	movs	r1, #0
 800b84a:	2201      	movs	r2, #1
 800b84c:	429a      	cmp	r2, r3
 800b84e:	db09      	blt.n	800b864 <__s2b+0x30>
 800b850:	4630      	mov	r0, r6
 800b852:	f7ff ff47 	bl	800b6e4 <_Balloc>
 800b856:	b940      	cbnz	r0, 800b86a <__s2b+0x36>
 800b858:	4602      	mov	r2, r0
 800b85a:	4b19      	ldr	r3, [pc, #100]	@ (800b8c0 <__s2b+0x8c>)
 800b85c:	4819      	ldr	r0, [pc, #100]	@ (800b8c4 <__s2b+0x90>)
 800b85e:	21d3      	movs	r1, #211	@ 0xd3
 800b860:	f7ff fad6 	bl	800ae10 <__assert_func>
 800b864:	0052      	lsls	r2, r2, #1
 800b866:	3101      	adds	r1, #1
 800b868:	e7f0      	b.n	800b84c <__s2b+0x18>
 800b86a:	9b08      	ldr	r3, [sp, #32]
 800b86c:	6143      	str	r3, [r0, #20]
 800b86e:	2d09      	cmp	r5, #9
 800b870:	f04f 0301 	mov.w	r3, #1
 800b874:	6103      	str	r3, [r0, #16]
 800b876:	dd16      	ble.n	800b8a6 <__s2b+0x72>
 800b878:	f104 0909 	add.w	r9, r4, #9
 800b87c:	46c8      	mov	r8, r9
 800b87e:	442c      	add	r4, r5
 800b880:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b884:	4601      	mov	r1, r0
 800b886:	3b30      	subs	r3, #48	@ 0x30
 800b888:	220a      	movs	r2, #10
 800b88a:	4630      	mov	r0, r6
 800b88c:	f7ff ff8c 	bl	800b7a8 <__multadd>
 800b890:	45a0      	cmp	r8, r4
 800b892:	d1f5      	bne.n	800b880 <__s2b+0x4c>
 800b894:	f1a5 0408 	sub.w	r4, r5, #8
 800b898:	444c      	add	r4, r9
 800b89a:	1b2d      	subs	r5, r5, r4
 800b89c:	1963      	adds	r3, r4, r5
 800b89e:	42bb      	cmp	r3, r7
 800b8a0:	db04      	blt.n	800b8ac <__s2b+0x78>
 800b8a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8a6:	340a      	adds	r4, #10
 800b8a8:	2509      	movs	r5, #9
 800b8aa:	e7f6      	b.n	800b89a <__s2b+0x66>
 800b8ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b8b0:	4601      	mov	r1, r0
 800b8b2:	3b30      	subs	r3, #48	@ 0x30
 800b8b4:	220a      	movs	r2, #10
 800b8b6:	4630      	mov	r0, r6
 800b8b8:	f7ff ff76 	bl	800b7a8 <__multadd>
 800b8bc:	e7ee      	b.n	800b89c <__s2b+0x68>
 800b8be:	bf00      	nop
 800b8c0:	0800cffd 	.word	0x0800cffd
 800b8c4:	0800d06e 	.word	0x0800d06e

0800b8c8 <__hi0bits>:
 800b8c8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	bf36      	itet	cc
 800b8d0:	0403      	lslcc	r3, r0, #16
 800b8d2:	2000      	movcs	r0, #0
 800b8d4:	2010      	movcc	r0, #16
 800b8d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b8da:	bf3c      	itt	cc
 800b8dc:	021b      	lslcc	r3, r3, #8
 800b8de:	3008      	addcc	r0, #8
 800b8e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b8e4:	bf3c      	itt	cc
 800b8e6:	011b      	lslcc	r3, r3, #4
 800b8e8:	3004      	addcc	r0, #4
 800b8ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b8ee:	bf3c      	itt	cc
 800b8f0:	009b      	lslcc	r3, r3, #2
 800b8f2:	3002      	addcc	r0, #2
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	db05      	blt.n	800b904 <__hi0bits+0x3c>
 800b8f8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b8fc:	f100 0001 	add.w	r0, r0, #1
 800b900:	bf08      	it	eq
 800b902:	2020      	moveq	r0, #32
 800b904:	4770      	bx	lr

0800b906 <__lo0bits>:
 800b906:	6803      	ldr	r3, [r0, #0]
 800b908:	4602      	mov	r2, r0
 800b90a:	f013 0007 	ands.w	r0, r3, #7
 800b90e:	d00b      	beq.n	800b928 <__lo0bits+0x22>
 800b910:	07d9      	lsls	r1, r3, #31
 800b912:	d421      	bmi.n	800b958 <__lo0bits+0x52>
 800b914:	0798      	lsls	r0, r3, #30
 800b916:	bf49      	itett	mi
 800b918:	085b      	lsrmi	r3, r3, #1
 800b91a:	089b      	lsrpl	r3, r3, #2
 800b91c:	2001      	movmi	r0, #1
 800b91e:	6013      	strmi	r3, [r2, #0]
 800b920:	bf5c      	itt	pl
 800b922:	6013      	strpl	r3, [r2, #0]
 800b924:	2002      	movpl	r0, #2
 800b926:	4770      	bx	lr
 800b928:	b299      	uxth	r1, r3
 800b92a:	b909      	cbnz	r1, 800b930 <__lo0bits+0x2a>
 800b92c:	0c1b      	lsrs	r3, r3, #16
 800b92e:	2010      	movs	r0, #16
 800b930:	b2d9      	uxtb	r1, r3
 800b932:	b909      	cbnz	r1, 800b938 <__lo0bits+0x32>
 800b934:	3008      	adds	r0, #8
 800b936:	0a1b      	lsrs	r3, r3, #8
 800b938:	0719      	lsls	r1, r3, #28
 800b93a:	bf04      	itt	eq
 800b93c:	091b      	lsreq	r3, r3, #4
 800b93e:	3004      	addeq	r0, #4
 800b940:	0799      	lsls	r1, r3, #30
 800b942:	bf04      	itt	eq
 800b944:	089b      	lsreq	r3, r3, #2
 800b946:	3002      	addeq	r0, #2
 800b948:	07d9      	lsls	r1, r3, #31
 800b94a:	d403      	bmi.n	800b954 <__lo0bits+0x4e>
 800b94c:	085b      	lsrs	r3, r3, #1
 800b94e:	f100 0001 	add.w	r0, r0, #1
 800b952:	d003      	beq.n	800b95c <__lo0bits+0x56>
 800b954:	6013      	str	r3, [r2, #0]
 800b956:	4770      	bx	lr
 800b958:	2000      	movs	r0, #0
 800b95a:	4770      	bx	lr
 800b95c:	2020      	movs	r0, #32
 800b95e:	4770      	bx	lr

0800b960 <__i2b>:
 800b960:	b510      	push	{r4, lr}
 800b962:	460c      	mov	r4, r1
 800b964:	2101      	movs	r1, #1
 800b966:	f7ff febd 	bl	800b6e4 <_Balloc>
 800b96a:	4602      	mov	r2, r0
 800b96c:	b928      	cbnz	r0, 800b97a <__i2b+0x1a>
 800b96e:	4b05      	ldr	r3, [pc, #20]	@ (800b984 <__i2b+0x24>)
 800b970:	4805      	ldr	r0, [pc, #20]	@ (800b988 <__i2b+0x28>)
 800b972:	f240 1145 	movw	r1, #325	@ 0x145
 800b976:	f7ff fa4b 	bl	800ae10 <__assert_func>
 800b97a:	2301      	movs	r3, #1
 800b97c:	6144      	str	r4, [r0, #20]
 800b97e:	6103      	str	r3, [r0, #16]
 800b980:	bd10      	pop	{r4, pc}
 800b982:	bf00      	nop
 800b984:	0800cffd 	.word	0x0800cffd
 800b988:	0800d06e 	.word	0x0800d06e

0800b98c <__multiply>:
 800b98c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b990:	4614      	mov	r4, r2
 800b992:	690a      	ldr	r2, [r1, #16]
 800b994:	6923      	ldr	r3, [r4, #16]
 800b996:	429a      	cmp	r2, r3
 800b998:	bfa8      	it	ge
 800b99a:	4623      	movge	r3, r4
 800b99c:	460f      	mov	r7, r1
 800b99e:	bfa4      	itt	ge
 800b9a0:	460c      	movge	r4, r1
 800b9a2:	461f      	movge	r7, r3
 800b9a4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b9a8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b9ac:	68a3      	ldr	r3, [r4, #8]
 800b9ae:	6861      	ldr	r1, [r4, #4]
 800b9b0:	eb0a 0609 	add.w	r6, sl, r9
 800b9b4:	42b3      	cmp	r3, r6
 800b9b6:	b085      	sub	sp, #20
 800b9b8:	bfb8      	it	lt
 800b9ba:	3101      	addlt	r1, #1
 800b9bc:	f7ff fe92 	bl	800b6e4 <_Balloc>
 800b9c0:	b930      	cbnz	r0, 800b9d0 <__multiply+0x44>
 800b9c2:	4602      	mov	r2, r0
 800b9c4:	4b44      	ldr	r3, [pc, #272]	@ (800bad8 <__multiply+0x14c>)
 800b9c6:	4845      	ldr	r0, [pc, #276]	@ (800badc <__multiply+0x150>)
 800b9c8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b9cc:	f7ff fa20 	bl	800ae10 <__assert_func>
 800b9d0:	f100 0514 	add.w	r5, r0, #20
 800b9d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b9d8:	462b      	mov	r3, r5
 800b9da:	2200      	movs	r2, #0
 800b9dc:	4543      	cmp	r3, r8
 800b9de:	d321      	bcc.n	800ba24 <__multiply+0x98>
 800b9e0:	f107 0114 	add.w	r1, r7, #20
 800b9e4:	f104 0214 	add.w	r2, r4, #20
 800b9e8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b9ec:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b9f0:	9302      	str	r3, [sp, #8]
 800b9f2:	1b13      	subs	r3, r2, r4
 800b9f4:	3b15      	subs	r3, #21
 800b9f6:	f023 0303 	bic.w	r3, r3, #3
 800b9fa:	3304      	adds	r3, #4
 800b9fc:	f104 0715 	add.w	r7, r4, #21
 800ba00:	42ba      	cmp	r2, r7
 800ba02:	bf38      	it	cc
 800ba04:	2304      	movcc	r3, #4
 800ba06:	9301      	str	r3, [sp, #4]
 800ba08:	9b02      	ldr	r3, [sp, #8]
 800ba0a:	9103      	str	r1, [sp, #12]
 800ba0c:	428b      	cmp	r3, r1
 800ba0e:	d80c      	bhi.n	800ba2a <__multiply+0x9e>
 800ba10:	2e00      	cmp	r6, #0
 800ba12:	dd03      	ble.n	800ba1c <__multiply+0x90>
 800ba14:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d05b      	beq.n	800bad4 <__multiply+0x148>
 800ba1c:	6106      	str	r6, [r0, #16]
 800ba1e:	b005      	add	sp, #20
 800ba20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba24:	f843 2b04 	str.w	r2, [r3], #4
 800ba28:	e7d8      	b.n	800b9dc <__multiply+0x50>
 800ba2a:	f8b1 a000 	ldrh.w	sl, [r1]
 800ba2e:	f1ba 0f00 	cmp.w	sl, #0
 800ba32:	d024      	beq.n	800ba7e <__multiply+0xf2>
 800ba34:	f104 0e14 	add.w	lr, r4, #20
 800ba38:	46a9      	mov	r9, r5
 800ba3a:	f04f 0c00 	mov.w	ip, #0
 800ba3e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ba42:	f8d9 3000 	ldr.w	r3, [r9]
 800ba46:	fa1f fb87 	uxth.w	fp, r7
 800ba4a:	b29b      	uxth	r3, r3
 800ba4c:	fb0a 330b 	mla	r3, sl, fp, r3
 800ba50:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ba54:	f8d9 7000 	ldr.w	r7, [r9]
 800ba58:	4463      	add	r3, ip
 800ba5a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ba5e:	fb0a c70b 	mla	r7, sl, fp, ip
 800ba62:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ba66:	b29b      	uxth	r3, r3
 800ba68:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ba6c:	4572      	cmp	r2, lr
 800ba6e:	f849 3b04 	str.w	r3, [r9], #4
 800ba72:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ba76:	d8e2      	bhi.n	800ba3e <__multiply+0xb2>
 800ba78:	9b01      	ldr	r3, [sp, #4]
 800ba7a:	f845 c003 	str.w	ip, [r5, r3]
 800ba7e:	9b03      	ldr	r3, [sp, #12]
 800ba80:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ba84:	3104      	adds	r1, #4
 800ba86:	f1b9 0f00 	cmp.w	r9, #0
 800ba8a:	d021      	beq.n	800bad0 <__multiply+0x144>
 800ba8c:	682b      	ldr	r3, [r5, #0]
 800ba8e:	f104 0c14 	add.w	ip, r4, #20
 800ba92:	46ae      	mov	lr, r5
 800ba94:	f04f 0a00 	mov.w	sl, #0
 800ba98:	f8bc b000 	ldrh.w	fp, [ip]
 800ba9c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800baa0:	fb09 770b 	mla	r7, r9, fp, r7
 800baa4:	4457      	add	r7, sl
 800baa6:	b29b      	uxth	r3, r3
 800baa8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800baac:	f84e 3b04 	str.w	r3, [lr], #4
 800bab0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bab4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bab8:	f8be 3000 	ldrh.w	r3, [lr]
 800babc:	fb09 330a 	mla	r3, r9, sl, r3
 800bac0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800bac4:	4562      	cmp	r2, ip
 800bac6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800baca:	d8e5      	bhi.n	800ba98 <__multiply+0x10c>
 800bacc:	9f01      	ldr	r7, [sp, #4]
 800bace:	51eb      	str	r3, [r5, r7]
 800bad0:	3504      	adds	r5, #4
 800bad2:	e799      	b.n	800ba08 <__multiply+0x7c>
 800bad4:	3e01      	subs	r6, #1
 800bad6:	e79b      	b.n	800ba10 <__multiply+0x84>
 800bad8:	0800cffd 	.word	0x0800cffd
 800badc:	0800d06e 	.word	0x0800d06e

0800bae0 <__pow5mult>:
 800bae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bae4:	4615      	mov	r5, r2
 800bae6:	f012 0203 	ands.w	r2, r2, #3
 800baea:	4607      	mov	r7, r0
 800baec:	460e      	mov	r6, r1
 800baee:	d007      	beq.n	800bb00 <__pow5mult+0x20>
 800baf0:	4c25      	ldr	r4, [pc, #148]	@ (800bb88 <__pow5mult+0xa8>)
 800baf2:	3a01      	subs	r2, #1
 800baf4:	2300      	movs	r3, #0
 800baf6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bafa:	f7ff fe55 	bl	800b7a8 <__multadd>
 800bafe:	4606      	mov	r6, r0
 800bb00:	10ad      	asrs	r5, r5, #2
 800bb02:	d03d      	beq.n	800bb80 <__pow5mult+0xa0>
 800bb04:	69fc      	ldr	r4, [r7, #28]
 800bb06:	b97c      	cbnz	r4, 800bb28 <__pow5mult+0x48>
 800bb08:	2010      	movs	r0, #16
 800bb0a:	f7ff fd23 	bl	800b554 <malloc>
 800bb0e:	4602      	mov	r2, r0
 800bb10:	61f8      	str	r0, [r7, #28]
 800bb12:	b928      	cbnz	r0, 800bb20 <__pow5mult+0x40>
 800bb14:	4b1d      	ldr	r3, [pc, #116]	@ (800bb8c <__pow5mult+0xac>)
 800bb16:	481e      	ldr	r0, [pc, #120]	@ (800bb90 <__pow5mult+0xb0>)
 800bb18:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bb1c:	f7ff f978 	bl	800ae10 <__assert_func>
 800bb20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bb24:	6004      	str	r4, [r0, #0]
 800bb26:	60c4      	str	r4, [r0, #12]
 800bb28:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bb2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bb30:	b94c      	cbnz	r4, 800bb46 <__pow5mult+0x66>
 800bb32:	f240 2171 	movw	r1, #625	@ 0x271
 800bb36:	4638      	mov	r0, r7
 800bb38:	f7ff ff12 	bl	800b960 <__i2b>
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	f8c8 0008 	str.w	r0, [r8, #8]
 800bb42:	4604      	mov	r4, r0
 800bb44:	6003      	str	r3, [r0, #0]
 800bb46:	f04f 0900 	mov.w	r9, #0
 800bb4a:	07eb      	lsls	r3, r5, #31
 800bb4c:	d50a      	bpl.n	800bb64 <__pow5mult+0x84>
 800bb4e:	4631      	mov	r1, r6
 800bb50:	4622      	mov	r2, r4
 800bb52:	4638      	mov	r0, r7
 800bb54:	f7ff ff1a 	bl	800b98c <__multiply>
 800bb58:	4631      	mov	r1, r6
 800bb5a:	4680      	mov	r8, r0
 800bb5c:	4638      	mov	r0, r7
 800bb5e:	f7ff fe01 	bl	800b764 <_Bfree>
 800bb62:	4646      	mov	r6, r8
 800bb64:	106d      	asrs	r5, r5, #1
 800bb66:	d00b      	beq.n	800bb80 <__pow5mult+0xa0>
 800bb68:	6820      	ldr	r0, [r4, #0]
 800bb6a:	b938      	cbnz	r0, 800bb7c <__pow5mult+0x9c>
 800bb6c:	4622      	mov	r2, r4
 800bb6e:	4621      	mov	r1, r4
 800bb70:	4638      	mov	r0, r7
 800bb72:	f7ff ff0b 	bl	800b98c <__multiply>
 800bb76:	6020      	str	r0, [r4, #0]
 800bb78:	f8c0 9000 	str.w	r9, [r0]
 800bb7c:	4604      	mov	r4, r0
 800bb7e:	e7e4      	b.n	800bb4a <__pow5mult+0x6a>
 800bb80:	4630      	mov	r0, r6
 800bb82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb86:	bf00      	nop
 800bb88:	0800d0c8 	.word	0x0800d0c8
 800bb8c:	0800cf48 	.word	0x0800cf48
 800bb90:	0800d06e 	.word	0x0800d06e

0800bb94 <__lshift>:
 800bb94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb98:	460c      	mov	r4, r1
 800bb9a:	6849      	ldr	r1, [r1, #4]
 800bb9c:	6923      	ldr	r3, [r4, #16]
 800bb9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bba2:	68a3      	ldr	r3, [r4, #8]
 800bba4:	4607      	mov	r7, r0
 800bba6:	4691      	mov	r9, r2
 800bba8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bbac:	f108 0601 	add.w	r6, r8, #1
 800bbb0:	42b3      	cmp	r3, r6
 800bbb2:	db0b      	blt.n	800bbcc <__lshift+0x38>
 800bbb4:	4638      	mov	r0, r7
 800bbb6:	f7ff fd95 	bl	800b6e4 <_Balloc>
 800bbba:	4605      	mov	r5, r0
 800bbbc:	b948      	cbnz	r0, 800bbd2 <__lshift+0x3e>
 800bbbe:	4602      	mov	r2, r0
 800bbc0:	4b28      	ldr	r3, [pc, #160]	@ (800bc64 <__lshift+0xd0>)
 800bbc2:	4829      	ldr	r0, [pc, #164]	@ (800bc68 <__lshift+0xd4>)
 800bbc4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bbc8:	f7ff f922 	bl	800ae10 <__assert_func>
 800bbcc:	3101      	adds	r1, #1
 800bbce:	005b      	lsls	r3, r3, #1
 800bbd0:	e7ee      	b.n	800bbb0 <__lshift+0x1c>
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	f100 0114 	add.w	r1, r0, #20
 800bbd8:	f100 0210 	add.w	r2, r0, #16
 800bbdc:	4618      	mov	r0, r3
 800bbde:	4553      	cmp	r3, sl
 800bbe0:	db33      	blt.n	800bc4a <__lshift+0xb6>
 800bbe2:	6920      	ldr	r0, [r4, #16]
 800bbe4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bbe8:	f104 0314 	add.w	r3, r4, #20
 800bbec:	f019 091f 	ands.w	r9, r9, #31
 800bbf0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bbf4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bbf8:	d02b      	beq.n	800bc52 <__lshift+0xbe>
 800bbfa:	f1c9 0e20 	rsb	lr, r9, #32
 800bbfe:	468a      	mov	sl, r1
 800bc00:	2200      	movs	r2, #0
 800bc02:	6818      	ldr	r0, [r3, #0]
 800bc04:	fa00 f009 	lsl.w	r0, r0, r9
 800bc08:	4310      	orrs	r0, r2
 800bc0a:	f84a 0b04 	str.w	r0, [sl], #4
 800bc0e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc12:	459c      	cmp	ip, r3
 800bc14:	fa22 f20e 	lsr.w	r2, r2, lr
 800bc18:	d8f3      	bhi.n	800bc02 <__lshift+0x6e>
 800bc1a:	ebac 0304 	sub.w	r3, ip, r4
 800bc1e:	3b15      	subs	r3, #21
 800bc20:	f023 0303 	bic.w	r3, r3, #3
 800bc24:	3304      	adds	r3, #4
 800bc26:	f104 0015 	add.w	r0, r4, #21
 800bc2a:	4584      	cmp	ip, r0
 800bc2c:	bf38      	it	cc
 800bc2e:	2304      	movcc	r3, #4
 800bc30:	50ca      	str	r2, [r1, r3]
 800bc32:	b10a      	cbz	r2, 800bc38 <__lshift+0xa4>
 800bc34:	f108 0602 	add.w	r6, r8, #2
 800bc38:	3e01      	subs	r6, #1
 800bc3a:	4638      	mov	r0, r7
 800bc3c:	612e      	str	r6, [r5, #16]
 800bc3e:	4621      	mov	r1, r4
 800bc40:	f7ff fd90 	bl	800b764 <_Bfree>
 800bc44:	4628      	mov	r0, r5
 800bc46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc4a:	f842 0f04 	str.w	r0, [r2, #4]!
 800bc4e:	3301      	adds	r3, #1
 800bc50:	e7c5      	b.n	800bbde <__lshift+0x4a>
 800bc52:	3904      	subs	r1, #4
 800bc54:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc58:	f841 2f04 	str.w	r2, [r1, #4]!
 800bc5c:	459c      	cmp	ip, r3
 800bc5e:	d8f9      	bhi.n	800bc54 <__lshift+0xc0>
 800bc60:	e7ea      	b.n	800bc38 <__lshift+0xa4>
 800bc62:	bf00      	nop
 800bc64:	0800cffd 	.word	0x0800cffd
 800bc68:	0800d06e 	.word	0x0800d06e

0800bc6c <__mcmp>:
 800bc6c:	690a      	ldr	r2, [r1, #16]
 800bc6e:	4603      	mov	r3, r0
 800bc70:	6900      	ldr	r0, [r0, #16]
 800bc72:	1a80      	subs	r0, r0, r2
 800bc74:	b530      	push	{r4, r5, lr}
 800bc76:	d10e      	bne.n	800bc96 <__mcmp+0x2a>
 800bc78:	3314      	adds	r3, #20
 800bc7a:	3114      	adds	r1, #20
 800bc7c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bc80:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bc84:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bc88:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bc8c:	4295      	cmp	r5, r2
 800bc8e:	d003      	beq.n	800bc98 <__mcmp+0x2c>
 800bc90:	d205      	bcs.n	800bc9e <__mcmp+0x32>
 800bc92:	f04f 30ff 	mov.w	r0, #4294967295
 800bc96:	bd30      	pop	{r4, r5, pc}
 800bc98:	42a3      	cmp	r3, r4
 800bc9a:	d3f3      	bcc.n	800bc84 <__mcmp+0x18>
 800bc9c:	e7fb      	b.n	800bc96 <__mcmp+0x2a>
 800bc9e:	2001      	movs	r0, #1
 800bca0:	e7f9      	b.n	800bc96 <__mcmp+0x2a>
	...

0800bca4 <__mdiff>:
 800bca4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bca8:	4689      	mov	r9, r1
 800bcaa:	4606      	mov	r6, r0
 800bcac:	4611      	mov	r1, r2
 800bcae:	4648      	mov	r0, r9
 800bcb0:	4614      	mov	r4, r2
 800bcb2:	f7ff ffdb 	bl	800bc6c <__mcmp>
 800bcb6:	1e05      	subs	r5, r0, #0
 800bcb8:	d112      	bne.n	800bce0 <__mdiff+0x3c>
 800bcba:	4629      	mov	r1, r5
 800bcbc:	4630      	mov	r0, r6
 800bcbe:	f7ff fd11 	bl	800b6e4 <_Balloc>
 800bcc2:	4602      	mov	r2, r0
 800bcc4:	b928      	cbnz	r0, 800bcd2 <__mdiff+0x2e>
 800bcc6:	4b3f      	ldr	r3, [pc, #252]	@ (800bdc4 <__mdiff+0x120>)
 800bcc8:	f240 2137 	movw	r1, #567	@ 0x237
 800bccc:	483e      	ldr	r0, [pc, #248]	@ (800bdc8 <__mdiff+0x124>)
 800bcce:	f7ff f89f 	bl	800ae10 <__assert_func>
 800bcd2:	2301      	movs	r3, #1
 800bcd4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bcd8:	4610      	mov	r0, r2
 800bcda:	b003      	add	sp, #12
 800bcdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bce0:	bfbc      	itt	lt
 800bce2:	464b      	movlt	r3, r9
 800bce4:	46a1      	movlt	r9, r4
 800bce6:	4630      	mov	r0, r6
 800bce8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bcec:	bfba      	itte	lt
 800bcee:	461c      	movlt	r4, r3
 800bcf0:	2501      	movlt	r5, #1
 800bcf2:	2500      	movge	r5, #0
 800bcf4:	f7ff fcf6 	bl	800b6e4 <_Balloc>
 800bcf8:	4602      	mov	r2, r0
 800bcfa:	b918      	cbnz	r0, 800bd04 <__mdiff+0x60>
 800bcfc:	4b31      	ldr	r3, [pc, #196]	@ (800bdc4 <__mdiff+0x120>)
 800bcfe:	f240 2145 	movw	r1, #581	@ 0x245
 800bd02:	e7e3      	b.n	800bccc <__mdiff+0x28>
 800bd04:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bd08:	6926      	ldr	r6, [r4, #16]
 800bd0a:	60c5      	str	r5, [r0, #12]
 800bd0c:	f109 0310 	add.w	r3, r9, #16
 800bd10:	f109 0514 	add.w	r5, r9, #20
 800bd14:	f104 0e14 	add.w	lr, r4, #20
 800bd18:	f100 0b14 	add.w	fp, r0, #20
 800bd1c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bd20:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bd24:	9301      	str	r3, [sp, #4]
 800bd26:	46d9      	mov	r9, fp
 800bd28:	f04f 0c00 	mov.w	ip, #0
 800bd2c:	9b01      	ldr	r3, [sp, #4]
 800bd2e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bd32:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bd36:	9301      	str	r3, [sp, #4]
 800bd38:	fa1f f38a 	uxth.w	r3, sl
 800bd3c:	4619      	mov	r1, r3
 800bd3e:	b283      	uxth	r3, r0
 800bd40:	1acb      	subs	r3, r1, r3
 800bd42:	0c00      	lsrs	r0, r0, #16
 800bd44:	4463      	add	r3, ip
 800bd46:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bd4a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bd4e:	b29b      	uxth	r3, r3
 800bd50:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bd54:	4576      	cmp	r6, lr
 800bd56:	f849 3b04 	str.w	r3, [r9], #4
 800bd5a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bd5e:	d8e5      	bhi.n	800bd2c <__mdiff+0x88>
 800bd60:	1b33      	subs	r3, r6, r4
 800bd62:	3b15      	subs	r3, #21
 800bd64:	f023 0303 	bic.w	r3, r3, #3
 800bd68:	3415      	adds	r4, #21
 800bd6a:	3304      	adds	r3, #4
 800bd6c:	42a6      	cmp	r6, r4
 800bd6e:	bf38      	it	cc
 800bd70:	2304      	movcc	r3, #4
 800bd72:	441d      	add	r5, r3
 800bd74:	445b      	add	r3, fp
 800bd76:	461e      	mov	r6, r3
 800bd78:	462c      	mov	r4, r5
 800bd7a:	4544      	cmp	r4, r8
 800bd7c:	d30e      	bcc.n	800bd9c <__mdiff+0xf8>
 800bd7e:	f108 0103 	add.w	r1, r8, #3
 800bd82:	1b49      	subs	r1, r1, r5
 800bd84:	f021 0103 	bic.w	r1, r1, #3
 800bd88:	3d03      	subs	r5, #3
 800bd8a:	45a8      	cmp	r8, r5
 800bd8c:	bf38      	it	cc
 800bd8e:	2100      	movcc	r1, #0
 800bd90:	440b      	add	r3, r1
 800bd92:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bd96:	b191      	cbz	r1, 800bdbe <__mdiff+0x11a>
 800bd98:	6117      	str	r7, [r2, #16]
 800bd9a:	e79d      	b.n	800bcd8 <__mdiff+0x34>
 800bd9c:	f854 1b04 	ldr.w	r1, [r4], #4
 800bda0:	46e6      	mov	lr, ip
 800bda2:	0c08      	lsrs	r0, r1, #16
 800bda4:	fa1c fc81 	uxtah	ip, ip, r1
 800bda8:	4471      	add	r1, lr
 800bdaa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bdae:	b289      	uxth	r1, r1
 800bdb0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bdb4:	f846 1b04 	str.w	r1, [r6], #4
 800bdb8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bdbc:	e7dd      	b.n	800bd7a <__mdiff+0xd6>
 800bdbe:	3f01      	subs	r7, #1
 800bdc0:	e7e7      	b.n	800bd92 <__mdiff+0xee>
 800bdc2:	bf00      	nop
 800bdc4:	0800cffd 	.word	0x0800cffd
 800bdc8:	0800d06e 	.word	0x0800d06e

0800bdcc <__ulp>:
 800bdcc:	b082      	sub	sp, #8
 800bdce:	ed8d 0b00 	vstr	d0, [sp]
 800bdd2:	9a01      	ldr	r2, [sp, #4]
 800bdd4:	4b0f      	ldr	r3, [pc, #60]	@ (800be14 <__ulp+0x48>)
 800bdd6:	4013      	ands	r3, r2
 800bdd8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	dc08      	bgt.n	800bdf2 <__ulp+0x26>
 800bde0:	425b      	negs	r3, r3
 800bde2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800bde6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bdea:	da04      	bge.n	800bdf6 <__ulp+0x2a>
 800bdec:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800bdf0:	4113      	asrs	r3, r2
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	e008      	b.n	800be08 <__ulp+0x3c>
 800bdf6:	f1a2 0314 	sub.w	r3, r2, #20
 800bdfa:	2b1e      	cmp	r3, #30
 800bdfc:	bfda      	itte	le
 800bdfe:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800be02:	40da      	lsrle	r2, r3
 800be04:	2201      	movgt	r2, #1
 800be06:	2300      	movs	r3, #0
 800be08:	4619      	mov	r1, r3
 800be0a:	4610      	mov	r0, r2
 800be0c:	ec41 0b10 	vmov	d0, r0, r1
 800be10:	b002      	add	sp, #8
 800be12:	4770      	bx	lr
 800be14:	7ff00000 	.word	0x7ff00000

0800be18 <__b2d>:
 800be18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be1c:	6906      	ldr	r6, [r0, #16]
 800be1e:	f100 0814 	add.w	r8, r0, #20
 800be22:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800be26:	1f37      	subs	r7, r6, #4
 800be28:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800be2c:	4610      	mov	r0, r2
 800be2e:	f7ff fd4b 	bl	800b8c8 <__hi0bits>
 800be32:	f1c0 0320 	rsb	r3, r0, #32
 800be36:	280a      	cmp	r0, #10
 800be38:	600b      	str	r3, [r1, #0]
 800be3a:	491b      	ldr	r1, [pc, #108]	@ (800bea8 <__b2d+0x90>)
 800be3c:	dc15      	bgt.n	800be6a <__b2d+0x52>
 800be3e:	f1c0 0c0b 	rsb	ip, r0, #11
 800be42:	fa22 f30c 	lsr.w	r3, r2, ip
 800be46:	45b8      	cmp	r8, r7
 800be48:	ea43 0501 	orr.w	r5, r3, r1
 800be4c:	bf34      	ite	cc
 800be4e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800be52:	2300      	movcs	r3, #0
 800be54:	3015      	adds	r0, #21
 800be56:	fa02 f000 	lsl.w	r0, r2, r0
 800be5a:	fa23 f30c 	lsr.w	r3, r3, ip
 800be5e:	4303      	orrs	r3, r0
 800be60:	461c      	mov	r4, r3
 800be62:	ec45 4b10 	vmov	d0, r4, r5
 800be66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be6a:	45b8      	cmp	r8, r7
 800be6c:	bf3a      	itte	cc
 800be6e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800be72:	f1a6 0708 	subcc.w	r7, r6, #8
 800be76:	2300      	movcs	r3, #0
 800be78:	380b      	subs	r0, #11
 800be7a:	d012      	beq.n	800bea2 <__b2d+0x8a>
 800be7c:	f1c0 0120 	rsb	r1, r0, #32
 800be80:	fa23 f401 	lsr.w	r4, r3, r1
 800be84:	4082      	lsls	r2, r0
 800be86:	4322      	orrs	r2, r4
 800be88:	4547      	cmp	r7, r8
 800be8a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800be8e:	bf8c      	ite	hi
 800be90:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800be94:	2200      	movls	r2, #0
 800be96:	4083      	lsls	r3, r0
 800be98:	40ca      	lsrs	r2, r1
 800be9a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800be9e:	4313      	orrs	r3, r2
 800bea0:	e7de      	b.n	800be60 <__b2d+0x48>
 800bea2:	ea42 0501 	orr.w	r5, r2, r1
 800bea6:	e7db      	b.n	800be60 <__b2d+0x48>
 800bea8:	3ff00000 	.word	0x3ff00000

0800beac <__d2b>:
 800beac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800beb0:	460f      	mov	r7, r1
 800beb2:	2101      	movs	r1, #1
 800beb4:	ec59 8b10 	vmov	r8, r9, d0
 800beb8:	4616      	mov	r6, r2
 800beba:	f7ff fc13 	bl	800b6e4 <_Balloc>
 800bebe:	4604      	mov	r4, r0
 800bec0:	b930      	cbnz	r0, 800bed0 <__d2b+0x24>
 800bec2:	4602      	mov	r2, r0
 800bec4:	4b23      	ldr	r3, [pc, #140]	@ (800bf54 <__d2b+0xa8>)
 800bec6:	4824      	ldr	r0, [pc, #144]	@ (800bf58 <__d2b+0xac>)
 800bec8:	f240 310f 	movw	r1, #783	@ 0x30f
 800becc:	f7fe ffa0 	bl	800ae10 <__assert_func>
 800bed0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bed4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bed8:	b10d      	cbz	r5, 800bede <__d2b+0x32>
 800beda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bede:	9301      	str	r3, [sp, #4]
 800bee0:	f1b8 0300 	subs.w	r3, r8, #0
 800bee4:	d023      	beq.n	800bf2e <__d2b+0x82>
 800bee6:	4668      	mov	r0, sp
 800bee8:	9300      	str	r3, [sp, #0]
 800beea:	f7ff fd0c 	bl	800b906 <__lo0bits>
 800beee:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bef2:	b1d0      	cbz	r0, 800bf2a <__d2b+0x7e>
 800bef4:	f1c0 0320 	rsb	r3, r0, #32
 800bef8:	fa02 f303 	lsl.w	r3, r2, r3
 800befc:	430b      	orrs	r3, r1
 800befe:	40c2      	lsrs	r2, r0
 800bf00:	6163      	str	r3, [r4, #20]
 800bf02:	9201      	str	r2, [sp, #4]
 800bf04:	9b01      	ldr	r3, [sp, #4]
 800bf06:	61a3      	str	r3, [r4, #24]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	bf0c      	ite	eq
 800bf0c:	2201      	moveq	r2, #1
 800bf0e:	2202      	movne	r2, #2
 800bf10:	6122      	str	r2, [r4, #16]
 800bf12:	b1a5      	cbz	r5, 800bf3e <__d2b+0x92>
 800bf14:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bf18:	4405      	add	r5, r0
 800bf1a:	603d      	str	r5, [r7, #0]
 800bf1c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bf20:	6030      	str	r0, [r6, #0]
 800bf22:	4620      	mov	r0, r4
 800bf24:	b003      	add	sp, #12
 800bf26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf2a:	6161      	str	r1, [r4, #20]
 800bf2c:	e7ea      	b.n	800bf04 <__d2b+0x58>
 800bf2e:	a801      	add	r0, sp, #4
 800bf30:	f7ff fce9 	bl	800b906 <__lo0bits>
 800bf34:	9b01      	ldr	r3, [sp, #4]
 800bf36:	6163      	str	r3, [r4, #20]
 800bf38:	3020      	adds	r0, #32
 800bf3a:	2201      	movs	r2, #1
 800bf3c:	e7e8      	b.n	800bf10 <__d2b+0x64>
 800bf3e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bf42:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bf46:	6038      	str	r0, [r7, #0]
 800bf48:	6918      	ldr	r0, [r3, #16]
 800bf4a:	f7ff fcbd 	bl	800b8c8 <__hi0bits>
 800bf4e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bf52:	e7e5      	b.n	800bf20 <__d2b+0x74>
 800bf54:	0800cffd 	.word	0x0800cffd
 800bf58:	0800d06e 	.word	0x0800d06e

0800bf5c <__ratio>:
 800bf5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf60:	b085      	sub	sp, #20
 800bf62:	e9cd 1000 	strd	r1, r0, [sp]
 800bf66:	a902      	add	r1, sp, #8
 800bf68:	f7ff ff56 	bl	800be18 <__b2d>
 800bf6c:	9800      	ldr	r0, [sp, #0]
 800bf6e:	a903      	add	r1, sp, #12
 800bf70:	ec55 4b10 	vmov	r4, r5, d0
 800bf74:	f7ff ff50 	bl	800be18 <__b2d>
 800bf78:	9b01      	ldr	r3, [sp, #4]
 800bf7a:	6919      	ldr	r1, [r3, #16]
 800bf7c:	9b00      	ldr	r3, [sp, #0]
 800bf7e:	691b      	ldr	r3, [r3, #16]
 800bf80:	1ac9      	subs	r1, r1, r3
 800bf82:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800bf86:	1a9b      	subs	r3, r3, r2
 800bf88:	ec5b ab10 	vmov	sl, fp, d0
 800bf8c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	bfce      	itee	gt
 800bf94:	462a      	movgt	r2, r5
 800bf96:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bf9a:	465a      	movle	r2, fp
 800bf9c:	462f      	mov	r7, r5
 800bf9e:	46d9      	mov	r9, fp
 800bfa0:	bfcc      	ite	gt
 800bfa2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800bfa6:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800bfaa:	464b      	mov	r3, r9
 800bfac:	4652      	mov	r2, sl
 800bfae:	4620      	mov	r0, r4
 800bfb0:	4639      	mov	r1, r7
 800bfb2:	f7f4 fc7b 	bl	80008ac <__aeabi_ddiv>
 800bfb6:	ec41 0b10 	vmov	d0, r0, r1
 800bfba:	b005      	add	sp, #20
 800bfbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bfc0 <__copybits>:
 800bfc0:	3901      	subs	r1, #1
 800bfc2:	b570      	push	{r4, r5, r6, lr}
 800bfc4:	1149      	asrs	r1, r1, #5
 800bfc6:	6914      	ldr	r4, [r2, #16]
 800bfc8:	3101      	adds	r1, #1
 800bfca:	f102 0314 	add.w	r3, r2, #20
 800bfce:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bfd2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bfd6:	1f05      	subs	r5, r0, #4
 800bfd8:	42a3      	cmp	r3, r4
 800bfda:	d30c      	bcc.n	800bff6 <__copybits+0x36>
 800bfdc:	1aa3      	subs	r3, r4, r2
 800bfde:	3b11      	subs	r3, #17
 800bfe0:	f023 0303 	bic.w	r3, r3, #3
 800bfe4:	3211      	adds	r2, #17
 800bfe6:	42a2      	cmp	r2, r4
 800bfe8:	bf88      	it	hi
 800bfea:	2300      	movhi	r3, #0
 800bfec:	4418      	add	r0, r3
 800bfee:	2300      	movs	r3, #0
 800bff0:	4288      	cmp	r0, r1
 800bff2:	d305      	bcc.n	800c000 <__copybits+0x40>
 800bff4:	bd70      	pop	{r4, r5, r6, pc}
 800bff6:	f853 6b04 	ldr.w	r6, [r3], #4
 800bffa:	f845 6f04 	str.w	r6, [r5, #4]!
 800bffe:	e7eb      	b.n	800bfd8 <__copybits+0x18>
 800c000:	f840 3b04 	str.w	r3, [r0], #4
 800c004:	e7f4      	b.n	800bff0 <__copybits+0x30>

0800c006 <__any_on>:
 800c006:	f100 0214 	add.w	r2, r0, #20
 800c00a:	6900      	ldr	r0, [r0, #16]
 800c00c:	114b      	asrs	r3, r1, #5
 800c00e:	4298      	cmp	r0, r3
 800c010:	b510      	push	{r4, lr}
 800c012:	db11      	blt.n	800c038 <__any_on+0x32>
 800c014:	dd0a      	ble.n	800c02c <__any_on+0x26>
 800c016:	f011 011f 	ands.w	r1, r1, #31
 800c01a:	d007      	beq.n	800c02c <__any_on+0x26>
 800c01c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c020:	fa24 f001 	lsr.w	r0, r4, r1
 800c024:	fa00 f101 	lsl.w	r1, r0, r1
 800c028:	428c      	cmp	r4, r1
 800c02a:	d10b      	bne.n	800c044 <__any_on+0x3e>
 800c02c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c030:	4293      	cmp	r3, r2
 800c032:	d803      	bhi.n	800c03c <__any_on+0x36>
 800c034:	2000      	movs	r0, #0
 800c036:	bd10      	pop	{r4, pc}
 800c038:	4603      	mov	r3, r0
 800c03a:	e7f7      	b.n	800c02c <__any_on+0x26>
 800c03c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c040:	2900      	cmp	r1, #0
 800c042:	d0f5      	beq.n	800c030 <__any_on+0x2a>
 800c044:	2001      	movs	r0, #1
 800c046:	e7f6      	b.n	800c036 <__any_on+0x30>

0800c048 <__ascii_wctomb>:
 800c048:	4603      	mov	r3, r0
 800c04a:	4608      	mov	r0, r1
 800c04c:	b141      	cbz	r1, 800c060 <__ascii_wctomb+0x18>
 800c04e:	2aff      	cmp	r2, #255	@ 0xff
 800c050:	d904      	bls.n	800c05c <__ascii_wctomb+0x14>
 800c052:	228a      	movs	r2, #138	@ 0x8a
 800c054:	601a      	str	r2, [r3, #0]
 800c056:	f04f 30ff 	mov.w	r0, #4294967295
 800c05a:	4770      	bx	lr
 800c05c:	700a      	strb	r2, [r1, #0]
 800c05e:	2001      	movs	r0, #1
 800c060:	4770      	bx	lr

0800c062 <__ssputs_r>:
 800c062:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c066:	688e      	ldr	r6, [r1, #8]
 800c068:	461f      	mov	r7, r3
 800c06a:	42be      	cmp	r6, r7
 800c06c:	680b      	ldr	r3, [r1, #0]
 800c06e:	4682      	mov	sl, r0
 800c070:	460c      	mov	r4, r1
 800c072:	4690      	mov	r8, r2
 800c074:	d82d      	bhi.n	800c0d2 <__ssputs_r+0x70>
 800c076:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c07a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c07e:	d026      	beq.n	800c0ce <__ssputs_r+0x6c>
 800c080:	6965      	ldr	r5, [r4, #20]
 800c082:	6909      	ldr	r1, [r1, #16]
 800c084:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c088:	eba3 0901 	sub.w	r9, r3, r1
 800c08c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c090:	1c7b      	adds	r3, r7, #1
 800c092:	444b      	add	r3, r9
 800c094:	106d      	asrs	r5, r5, #1
 800c096:	429d      	cmp	r5, r3
 800c098:	bf38      	it	cc
 800c09a:	461d      	movcc	r5, r3
 800c09c:	0553      	lsls	r3, r2, #21
 800c09e:	d527      	bpl.n	800c0f0 <__ssputs_r+0x8e>
 800c0a0:	4629      	mov	r1, r5
 800c0a2:	f7ff fa81 	bl	800b5a8 <_malloc_r>
 800c0a6:	4606      	mov	r6, r0
 800c0a8:	b360      	cbz	r0, 800c104 <__ssputs_r+0xa2>
 800c0aa:	6921      	ldr	r1, [r4, #16]
 800c0ac:	464a      	mov	r2, r9
 800c0ae:	f7fe fe96 	bl	800adde <memcpy>
 800c0b2:	89a3      	ldrh	r3, [r4, #12]
 800c0b4:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c0b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c0bc:	81a3      	strh	r3, [r4, #12]
 800c0be:	6126      	str	r6, [r4, #16]
 800c0c0:	6165      	str	r5, [r4, #20]
 800c0c2:	444e      	add	r6, r9
 800c0c4:	eba5 0509 	sub.w	r5, r5, r9
 800c0c8:	6026      	str	r6, [r4, #0]
 800c0ca:	60a5      	str	r5, [r4, #8]
 800c0cc:	463e      	mov	r6, r7
 800c0ce:	42be      	cmp	r6, r7
 800c0d0:	d900      	bls.n	800c0d4 <__ssputs_r+0x72>
 800c0d2:	463e      	mov	r6, r7
 800c0d4:	6820      	ldr	r0, [r4, #0]
 800c0d6:	4632      	mov	r2, r6
 800c0d8:	4641      	mov	r1, r8
 800c0da:	f000 fb65 	bl	800c7a8 <memmove>
 800c0de:	68a3      	ldr	r3, [r4, #8]
 800c0e0:	1b9b      	subs	r3, r3, r6
 800c0e2:	60a3      	str	r3, [r4, #8]
 800c0e4:	6823      	ldr	r3, [r4, #0]
 800c0e6:	4433      	add	r3, r6
 800c0e8:	6023      	str	r3, [r4, #0]
 800c0ea:	2000      	movs	r0, #0
 800c0ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0f0:	462a      	mov	r2, r5
 800c0f2:	f000 fb9e 	bl	800c832 <_realloc_r>
 800c0f6:	4606      	mov	r6, r0
 800c0f8:	2800      	cmp	r0, #0
 800c0fa:	d1e0      	bne.n	800c0be <__ssputs_r+0x5c>
 800c0fc:	6921      	ldr	r1, [r4, #16]
 800c0fe:	4650      	mov	r0, sl
 800c100:	f7fe fea4 	bl	800ae4c <_free_r>
 800c104:	230c      	movs	r3, #12
 800c106:	f8ca 3000 	str.w	r3, [sl]
 800c10a:	89a3      	ldrh	r3, [r4, #12]
 800c10c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c110:	81a3      	strh	r3, [r4, #12]
 800c112:	f04f 30ff 	mov.w	r0, #4294967295
 800c116:	e7e9      	b.n	800c0ec <__ssputs_r+0x8a>

0800c118 <_svfiprintf_r>:
 800c118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c11c:	4698      	mov	r8, r3
 800c11e:	898b      	ldrh	r3, [r1, #12]
 800c120:	061b      	lsls	r3, r3, #24
 800c122:	b09d      	sub	sp, #116	@ 0x74
 800c124:	4607      	mov	r7, r0
 800c126:	460d      	mov	r5, r1
 800c128:	4614      	mov	r4, r2
 800c12a:	d510      	bpl.n	800c14e <_svfiprintf_r+0x36>
 800c12c:	690b      	ldr	r3, [r1, #16]
 800c12e:	b973      	cbnz	r3, 800c14e <_svfiprintf_r+0x36>
 800c130:	2140      	movs	r1, #64	@ 0x40
 800c132:	f7ff fa39 	bl	800b5a8 <_malloc_r>
 800c136:	6028      	str	r0, [r5, #0]
 800c138:	6128      	str	r0, [r5, #16]
 800c13a:	b930      	cbnz	r0, 800c14a <_svfiprintf_r+0x32>
 800c13c:	230c      	movs	r3, #12
 800c13e:	603b      	str	r3, [r7, #0]
 800c140:	f04f 30ff 	mov.w	r0, #4294967295
 800c144:	b01d      	add	sp, #116	@ 0x74
 800c146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c14a:	2340      	movs	r3, #64	@ 0x40
 800c14c:	616b      	str	r3, [r5, #20]
 800c14e:	2300      	movs	r3, #0
 800c150:	9309      	str	r3, [sp, #36]	@ 0x24
 800c152:	2320      	movs	r3, #32
 800c154:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c158:	f8cd 800c 	str.w	r8, [sp, #12]
 800c15c:	2330      	movs	r3, #48	@ 0x30
 800c15e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c2fc <_svfiprintf_r+0x1e4>
 800c162:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c166:	f04f 0901 	mov.w	r9, #1
 800c16a:	4623      	mov	r3, r4
 800c16c:	469a      	mov	sl, r3
 800c16e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c172:	b10a      	cbz	r2, 800c178 <_svfiprintf_r+0x60>
 800c174:	2a25      	cmp	r2, #37	@ 0x25
 800c176:	d1f9      	bne.n	800c16c <_svfiprintf_r+0x54>
 800c178:	ebba 0b04 	subs.w	fp, sl, r4
 800c17c:	d00b      	beq.n	800c196 <_svfiprintf_r+0x7e>
 800c17e:	465b      	mov	r3, fp
 800c180:	4622      	mov	r2, r4
 800c182:	4629      	mov	r1, r5
 800c184:	4638      	mov	r0, r7
 800c186:	f7ff ff6c 	bl	800c062 <__ssputs_r>
 800c18a:	3001      	adds	r0, #1
 800c18c:	f000 80a7 	beq.w	800c2de <_svfiprintf_r+0x1c6>
 800c190:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c192:	445a      	add	r2, fp
 800c194:	9209      	str	r2, [sp, #36]	@ 0x24
 800c196:	f89a 3000 	ldrb.w	r3, [sl]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	f000 809f 	beq.w	800c2de <_svfiprintf_r+0x1c6>
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	f04f 32ff 	mov.w	r2, #4294967295
 800c1a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c1aa:	f10a 0a01 	add.w	sl, sl, #1
 800c1ae:	9304      	str	r3, [sp, #16]
 800c1b0:	9307      	str	r3, [sp, #28]
 800c1b2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c1b6:	931a      	str	r3, [sp, #104]	@ 0x68
 800c1b8:	4654      	mov	r4, sl
 800c1ba:	2205      	movs	r2, #5
 800c1bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1c0:	484e      	ldr	r0, [pc, #312]	@ (800c2fc <_svfiprintf_r+0x1e4>)
 800c1c2:	f7f4 f83d 	bl	8000240 <memchr>
 800c1c6:	9a04      	ldr	r2, [sp, #16]
 800c1c8:	b9d8      	cbnz	r0, 800c202 <_svfiprintf_r+0xea>
 800c1ca:	06d0      	lsls	r0, r2, #27
 800c1cc:	bf44      	itt	mi
 800c1ce:	2320      	movmi	r3, #32
 800c1d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c1d4:	0711      	lsls	r1, r2, #28
 800c1d6:	bf44      	itt	mi
 800c1d8:	232b      	movmi	r3, #43	@ 0x2b
 800c1da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c1de:	f89a 3000 	ldrb.w	r3, [sl]
 800c1e2:	2b2a      	cmp	r3, #42	@ 0x2a
 800c1e4:	d015      	beq.n	800c212 <_svfiprintf_r+0xfa>
 800c1e6:	9a07      	ldr	r2, [sp, #28]
 800c1e8:	4654      	mov	r4, sl
 800c1ea:	2000      	movs	r0, #0
 800c1ec:	f04f 0c0a 	mov.w	ip, #10
 800c1f0:	4621      	mov	r1, r4
 800c1f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c1f6:	3b30      	subs	r3, #48	@ 0x30
 800c1f8:	2b09      	cmp	r3, #9
 800c1fa:	d94b      	bls.n	800c294 <_svfiprintf_r+0x17c>
 800c1fc:	b1b0      	cbz	r0, 800c22c <_svfiprintf_r+0x114>
 800c1fe:	9207      	str	r2, [sp, #28]
 800c200:	e014      	b.n	800c22c <_svfiprintf_r+0x114>
 800c202:	eba0 0308 	sub.w	r3, r0, r8
 800c206:	fa09 f303 	lsl.w	r3, r9, r3
 800c20a:	4313      	orrs	r3, r2
 800c20c:	9304      	str	r3, [sp, #16]
 800c20e:	46a2      	mov	sl, r4
 800c210:	e7d2      	b.n	800c1b8 <_svfiprintf_r+0xa0>
 800c212:	9b03      	ldr	r3, [sp, #12]
 800c214:	1d19      	adds	r1, r3, #4
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	9103      	str	r1, [sp, #12]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	bfbb      	ittet	lt
 800c21e:	425b      	neglt	r3, r3
 800c220:	f042 0202 	orrlt.w	r2, r2, #2
 800c224:	9307      	strge	r3, [sp, #28]
 800c226:	9307      	strlt	r3, [sp, #28]
 800c228:	bfb8      	it	lt
 800c22a:	9204      	strlt	r2, [sp, #16]
 800c22c:	7823      	ldrb	r3, [r4, #0]
 800c22e:	2b2e      	cmp	r3, #46	@ 0x2e
 800c230:	d10a      	bne.n	800c248 <_svfiprintf_r+0x130>
 800c232:	7863      	ldrb	r3, [r4, #1]
 800c234:	2b2a      	cmp	r3, #42	@ 0x2a
 800c236:	d132      	bne.n	800c29e <_svfiprintf_r+0x186>
 800c238:	9b03      	ldr	r3, [sp, #12]
 800c23a:	1d1a      	adds	r2, r3, #4
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	9203      	str	r2, [sp, #12]
 800c240:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c244:	3402      	adds	r4, #2
 800c246:	9305      	str	r3, [sp, #20]
 800c248:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c30c <_svfiprintf_r+0x1f4>
 800c24c:	7821      	ldrb	r1, [r4, #0]
 800c24e:	2203      	movs	r2, #3
 800c250:	4650      	mov	r0, sl
 800c252:	f7f3 fff5 	bl	8000240 <memchr>
 800c256:	b138      	cbz	r0, 800c268 <_svfiprintf_r+0x150>
 800c258:	9b04      	ldr	r3, [sp, #16]
 800c25a:	eba0 000a 	sub.w	r0, r0, sl
 800c25e:	2240      	movs	r2, #64	@ 0x40
 800c260:	4082      	lsls	r2, r0
 800c262:	4313      	orrs	r3, r2
 800c264:	3401      	adds	r4, #1
 800c266:	9304      	str	r3, [sp, #16]
 800c268:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c26c:	4824      	ldr	r0, [pc, #144]	@ (800c300 <_svfiprintf_r+0x1e8>)
 800c26e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c272:	2206      	movs	r2, #6
 800c274:	f7f3 ffe4 	bl	8000240 <memchr>
 800c278:	2800      	cmp	r0, #0
 800c27a:	d036      	beq.n	800c2ea <_svfiprintf_r+0x1d2>
 800c27c:	4b21      	ldr	r3, [pc, #132]	@ (800c304 <_svfiprintf_r+0x1ec>)
 800c27e:	bb1b      	cbnz	r3, 800c2c8 <_svfiprintf_r+0x1b0>
 800c280:	9b03      	ldr	r3, [sp, #12]
 800c282:	3307      	adds	r3, #7
 800c284:	f023 0307 	bic.w	r3, r3, #7
 800c288:	3308      	adds	r3, #8
 800c28a:	9303      	str	r3, [sp, #12]
 800c28c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c28e:	4433      	add	r3, r6
 800c290:	9309      	str	r3, [sp, #36]	@ 0x24
 800c292:	e76a      	b.n	800c16a <_svfiprintf_r+0x52>
 800c294:	fb0c 3202 	mla	r2, ip, r2, r3
 800c298:	460c      	mov	r4, r1
 800c29a:	2001      	movs	r0, #1
 800c29c:	e7a8      	b.n	800c1f0 <_svfiprintf_r+0xd8>
 800c29e:	2300      	movs	r3, #0
 800c2a0:	3401      	adds	r4, #1
 800c2a2:	9305      	str	r3, [sp, #20]
 800c2a4:	4619      	mov	r1, r3
 800c2a6:	f04f 0c0a 	mov.w	ip, #10
 800c2aa:	4620      	mov	r0, r4
 800c2ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c2b0:	3a30      	subs	r2, #48	@ 0x30
 800c2b2:	2a09      	cmp	r2, #9
 800c2b4:	d903      	bls.n	800c2be <_svfiprintf_r+0x1a6>
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d0c6      	beq.n	800c248 <_svfiprintf_r+0x130>
 800c2ba:	9105      	str	r1, [sp, #20]
 800c2bc:	e7c4      	b.n	800c248 <_svfiprintf_r+0x130>
 800c2be:	fb0c 2101 	mla	r1, ip, r1, r2
 800c2c2:	4604      	mov	r4, r0
 800c2c4:	2301      	movs	r3, #1
 800c2c6:	e7f0      	b.n	800c2aa <_svfiprintf_r+0x192>
 800c2c8:	ab03      	add	r3, sp, #12
 800c2ca:	9300      	str	r3, [sp, #0]
 800c2cc:	462a      	mov	r2, r5
 800c2ce:	4b0e      	ldr	r3, [pc, #56]	@ (800c308 <_svfiprintf_r+0x1f0>)
 800c2d0:	a904      	add	r1, sp, #16
 800c2d2:	4638      	mov	r0, r7
 800c2d4:	f3af 8000 	nop.w
 800c2d8:	1c42      	adds	r2, r0, #1
 800c2da:	4606      	mov	r6, r0
 800c2dc:	d1d6      	bne.n	800c28c <_svfiprintf_r+0x174>
 800c2de:	89ab      	ldrh	r3, [r5, #12]
 800c2e0:	065b      	lsls	r3, r3, #25
 800c2e2:	f53f af2d 	bmi.w	800c140 <_svfiprintf_r+0x28>
 800c2e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c2e8:	e72c      	b.n	800c144 <_svfiprintf_r+0x2c>
 800c2ea:	ab03      	add	r3, sp, #12
 800c2ec:	9300      	str	r3, [sp, #0]
 800c2ee:	462a      	mov	r2, r5
 800c2f0:	4b05      	ldr	r3, [pc, #20]	@ (800c308 <_svfiprintf_r+0x1f0>)
 800c2f2:	a904      	add	r1, sp, #16
 800c2f4:	4638      	mov	r0, r7
 800c2f6:	f000 f879 	bl	800c3ec <_printf_i>
 800c2fa:	e7ed      	b.n	800c2d8 <_svfiprintf_r+0x1c0>
 800c2fc:	0800d2c9 	.word	0x0800d2c9
 800c300:	0800d2d3 	.word	0x0800d2d3
 800c304:	00000000 	.word	0x00000000
 800c308:	0800c063 	.word	0x0800c063
 800c30c:	0800d2cf 	.word	0x0800d2cf

0800c310 <_printf_common>:
 800c310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c314:	4616      	mov	r6, r2
 800c316:	4698      	mov	r8, r3
 800c318:	688a      	ldr	r2, [r1, #8]
 800c31a:	690b      	ldr	r3, [r1, #16]
 800c31c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c320:	4293      	cmp	r3, r2
 800c322:	bfb8      	it	lt
 800c324:	4613      	movlt	r3, r2
 800c326:	6033      	str	r3, [r6, #0]
 800c328:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c32c:	4607      	mov	r7, r0
 800c32e:	460c      	mov	r4, r1
 800c330:	b10a      	cbz	r2, 800c336 <_printf_common+0x26>
 800c332:	3301      	adds	r3, #1
 800c334:	6033      	str	r3, [r6, #0]
 800c336:	6823      	ldr	r3, [r4, #0]
 800c338:	0699      	lsls	r1, r3, #26
 800c33a:	bf42      	ittt	mi
 800c33c:	6833      	ldrmi	r3, [r6, #0]
 800c33e:	3302      	addmi	r3, #2
 800c340:	6033      	strmi	r3, [r6, #0]
 800c342:	6825      	ldr	r5, [r4, #0]
 800c344:	f015 0506 	ands.w	r5, r5, #6
 800c348:	d106      	bne.n	800c358 <_printf_common+0x48>
 800c34a:	f104 0a19 	add.w	sl, r4, #25
 800c34e:	68e3      	ldr	r3, [r4, #12]
 800c350:	6832      	ldr	r2, [r6, #0]
 800c352:	1a9b      	subs	r3, r3, r2
 800c354:	42ab      	cmp	r3, r5
 800c356:	dc26      	bgt.n	800c3a6 <_printf_common+0x96>
 800c358:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c35c:	6822      	ldr	r2, [r4, #0]
 800c35e:	3b00      	subs	r3, #0
 800c360:	bf18      	it	ne
 800c362:	2301      	movne	r3, #1
 800c364:	0692      	lsls	r2, r2, #26
 800c366:	d42b      	bmi.n	800c3c0 <_printf_common+0xb0>
 800c368:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c36c:	4641      	mov	r1, r8
 800c36e:	4638      	mov	r0, r7
 800c370:	47c8      	blx	r9
 800c372:	3001      	adds	r0, #1
 800c374:	d01e      	beq.n	800c3b4 <_printf_common+0xa4>
 800c376:	6823      	ldr	r3, [r4, #0]
 800c378:	6922      	ldr	r2, [r4, #16]
 800c37a:	f003 0306 	and.w	r3, r3, #6
 800c37e:	2b04      	cmp	r3, #4
 800c380:	bf02      	ittt	eq
 800c382:	68e5      	ldreq	r5, [r4, #12]
 800c384:	6833      	ldreq	r3, [r6, #0]
 800c386:	1aed      	subeq	r5, r5, r3
 800c388:	68a3      	ldr	r3, [r4, #8]
 800c38a:	bf0c      	ite	eq
 800c38c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c390:	2500      	movne	r5, #0
 800c392:	4293      	cmp	r3, r2
 800c394:	bfc4      	itt	gt
 800c396:	1a9b      	subgt	r3, r3, r2
 800c398:	18ed      	addgt	r5, r5, r3
 800c39a:	2600      	movs	r6, #0
 800c39c:	341a      	adds	r4, #26
 800c39e:	42b5      	cmp	r5, r6
 800c3a0:	d11a      	bne.n	800c3d8 <_printf_common+0xc8>
 800c3a2:	2000      	movs	r0, #0
 800c3a4:	e008      	b.n	800c3b8 <_printf_common+0xa8>
 800c3a6:	2301      	movs	r3, #1
 800c3a8:	4652      	mov	r2, sl
 800c3aa:	4641      	mov	r1, r8
 800c3ac:	4638      	mov	r0, r7
 800c3ae:	47c8      	blx	r9
 800c3b0:	3001      	adds	r0, #1
 800c3b2:	d103      	bne.n	800c3bc <_printf_common+0xac>
 800c3b4:	f04f 30ff 	mov.w	r0, #4294967295
 800c3b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3bc:	3501      	adds	r5, #1
 800c3be:	e7c6      	b.n	800c34e <_printf_common+0x3e>
 800c3c0:	18e1      	adds	r1, r4, r3
 800c3c2:	1c5a      	adds	r2, r3, #1
 800c3c4:	2030      	movs	r0, #48	@ 0x30
 800c3c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c3ca:	4422      	add	r2, r4
 800c3cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c3d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c3d4:	3302      	adds	r3, #2
 800c3d6:	e7c7      	b.n	800c368 <_printf_common+0x58>
 800c3d8:	2301      	movs	r3, #1
 800c3da:	4622      	mov	r2, r4
 800c3dc:	4641      	mov	r1, r8
 800c3de:	4638      	mov	r0, r7
 800c3e0:	47c8      	blx	r9
 800c3e2:	3001      	adds	r0, #1
 800c3e4:	d0e6      	beq.n	800c3b4 <_printf_common+0xa4>
 800c3e6:	3601      	adds	r6, #1
 800c3e8:	e7d9      	b.n	800c39e <_printf_common+0x8e>
	...

0800c3ec <_printf_i>:
 800c3ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c3f0:	7e0f      	ldrb	r7, [r1, #24]
 800c3f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c3f4:	2f78      	cmp	r7, #120	@ 0x78
 800c3f6:	4691      	mov	r9, r2
 800c3f8:	4680      	mov	r8, r0
 800c3fa:	460c      	mov	r4, r1
 800c3fc:	469a      	mov	sl, r3
 800c3fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c402:	d807      	bhi.n	800c414 <_printf_i+0x28>
 800c404:	2f62      	cmp	r7, #98	@ 0x62
 800c406:	d80a      	bhi.n	800c41e <_printf_i+0x32>
 800c408:	2f00      	cmp	r7, #0
 800c40a:	f000 80d2 	beq.w	800c5b2 <_printf_i+0x1c6>
 800c40e:	2f58      	cmp	r7, #88	@ 0x58
 800c410:	f000 80b9 	beq.w	800c586 <_printf_i+0x19a>
 800c414:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c418:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c41c:	e03a      	b.n	800c494 <_printf_i+0xa8>
 800c41e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c422:	2b15      	cmp	r3, #21
 800c424:	d8f6      	bhi.n	800c414 <_printf_i+0x28>
 800c426:	a101      	add	r1, pc, #4	@ (adr r1, 800c42c <_printf_i+0x40>)
 800c428:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c42c:	0800c485 	.word	0x0800c485
 800c430:	0800c499 	.word	0x0800c499
 800c434:	0800c415 	.word	0x0800c415
 800c438:	0800c415 	.word	0x0800c415
 800c43c:	0800c415 	.word	0x0800c415
 800c440:	0800c415 	.word	0x0800c415
 800c444:	0800c499 	.word	0x0800c499
 800c448:	0800c415 	.word	0x0800c415
 800c44c:	0800c415 	.word	0x0800c415
 800c450:	0800c415 	.word	0x0800c415
 800c454:	0800c415 	.word	0x0800c415
 800c458:	0800c599 	.word	0x0800c599
 800c45c:	0800c4c3 	.word	0x0800c4c3
 800c460:	0800c553 	.word	0x0800c553
 800c464:	0800c415 	.word	0x0800c415
 800c468:	0800c415 	.word	0x0800c415
 800c46c:	0800c5bb 	.word	0x0800c5bb
 800c470:	0800c415 	.word	0x0800c415
 800c474:	0800c4c3 	.word	0x0800c4c3
 800c478:	0800c415 	.word	0x0800c415
 800c47c:	0800c415 	.word	0x0800c415
 800c480:	0800c55b 	.word	0x0800c55b
 800c484:	6833      	ldr	r3, [r6, #0]
 800c486:	1d1a      	adds	r2, r3, #4
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	6032      	str	r2, [r6, #0]
 800c48c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c490:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c494:	2301      	movs	r3, #1
 800c496:	e09d      	b.n	800c5d4 <_printf_i+0x1e8>
 800c498:	6833      	ldr	r3, [r6, #0]
 800c49a:	6820      	ldr	r0, [r4, #0]
 800c49c:	1d19      	adds	r1, r3, #4
 800c49e:	6031      	str	r1, [r6, #0]
 800c4a0:	0606      	lsls	r6, r0, #24
 800c4a2:	d501      	bpl.n	800c4a8 <_printf_i+0xbc>
 800c4a4:	681d      	ldr	r5, [r3, #0]
 800c4a6:	e003      	b.n	800c4b0 <_printf_i+0xc4>
 800c4a8:	0645      	lsls	r5, r0, #25
 800c4aa:	d5fb      	bpl.n	800c4a4 <_printf_i+0xb8>
 800c4ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c4b0:	2d00      	cmp	r5, #0
 800c4b2:	da03      	bge.n	800c4bc <_printf_i+0xd0>
 800c4b4:	232d      	movs	r3, #45	@ 0x2d
 800c4b6:	426d      	negs	r5, r5
 800c4b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c4bc:	4859      	ldr	r0, [pc, #356]	@ (800c624 <_printf_i+0x238>)
 800c4be:	230a      	movs	r3, #10
 800c4c0:	e011      	b.n	800c4e6 <_printf_i+0xfa>
 800c4c2:	6821      	ldr	r1, [r4, #0]
 800c4c4:	6833      	ldr	r3, [r6, #0]
 800c4c6:	0608      	lsls	r0, r1, #24
 800c4c8:	f853 5b04 	ldr.w	r5, [r3], #4
 800c4cc:	d402      	bmi.n	800c4d4 <_printf_i+0xe8>
 800c4ce:	0649      	lsls	r1, r1, #25
 800c4d0:	bf48      	it	mi
 800c4d2:	b2ad      	uxthmi	r5, r5
 800c4d4:	2f6f      	cmp	r7, #111	@ 0x6f
 800c4d6:	4853      	ldr	r0, [pc, #332]	@ (800c624 <_printf_i+0x238>)
 800c4d8:	6033      	str	r3, [r6, #0]
 800c4da:	bf14      	ite	ne
 800c4dc:	230a      	movne	r3, #10
 800c4de:	2308      	moveq	r3, #8
 800c4e0:	2100      	movs	r1, #0
 800c4e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c4e6:	6866      	ldr	r6, [r4, #4]
 800c4e8:	60a6      	str	r6, [r4, #8]
 800c4ea:	2e00      	cmp	r6, #0
 800c4ec:	bfa2      	ittt	ge
 800c4ee:	6821      	ldrge	r1, [r4, #0]
 800c4f0:	f021 0104 	bicge.w	r1, r1, #4
 800c4f4:	6021      	strge	r1, [r4, #0]
 800c4f6:	b90d      	cbnz	r5, 800c4fc <_printf_i+0x110>
 800c4f8:	2e00      	cmp	r6, #0
 800c4fa:	d04b      	beq.n	800c594 <_printf_i+0x1a8>
 800c4fc:	4616      	mov	r6, r2
 800c4fe:	fbb5 f1f3 	udiv	r1, r5, r3
 800c502:	fb03 5711 	mls	r7, r3, r1, r5
 800c506:	5dc7      	ldrb	r7, [r0, r7]
 800c508:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c50c:	462f      	mov	r7, r5
 800c50e:	42bb      	cmp	r3, r7
 800c510:	460d      	mov	r5, r1
 800c512:	d9f4      	bls.n	800c4fe <_printf_i+0x112>
 800c514:	2b08      	cmp	r3, #8
 800c516:	d10b      	bne.n	800c530 <_printf_i+0x144>
 800c518:	6823      	ldr	r3, [r4, #0]
 800c51a:	07df      	lsls	r7, r3, #31
 800c51c:	d508      	bpl.n	800c530 <_printf_i+0x144>
 800c51e:	6923      	ldr	r3, [r4, #16]
 800c520:	6861      	ldr	r1, [r4, #4]
 800c522:	4299      	cmp	r1, r3
 800c524:	bfde      	ittt	le
 800c526:	2330      	movle	r3, #48	@ 0x30
 800c528:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c52c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c530:	1b92      	subs	r2, r2, r6
 800c532:	6122      	str	r2, [r4, #16]
 800c534:	f8cd a000 	str.w	sl, [sp]
 800c538:	464b      	mov	r3, r9
 800c53a:	aa03      	add	r2, sp, #12
 800c53c:	4621      	mov	r1, r4
 800c53e:	4640      	mov	r0, r8
 800c540:	f7ff fee6 	bl	800c310 <_printf_common>
 800c544:	3001      	adds	r0, #1
 800c546:	d14a      	bne.n	800c5de <_printf_i+0x1f2>
 800c548:	f04f 30ff 	mov.w	r0, #4294967295
 800c54c:	b004      	add	sp, #16
 800c54e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c552:	6823      	ldr	r3, [r4, #0]
 800c554:	f043 0320 	orr.w	r3, r3, #32
 800c558:	6023      	str	r3, [r4, #0]
 800c55a:	4833      	ldr	r0, [pc, #204]	@ (800c628 <_printf_i+0x23c>)
 800c55c:	2778      	movs	r7, #120	@ 0x78
 800c55e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c562:	6823      	ldr	r3, [r4, #0]
 800c564:	6831      	ldr	r1, [r6, #0]
 800c566:	061f      	lsls	r7, r3, #24
 800c568:	f851 5b04 	ldr.w	r5, [r1], #4
 800c56c:	d402      	bmi.n	800c574 <_printf_i+0x188>
 800c56e:	065f      	lsls	r7, r3, #25
 800c570:	bf48      	it	mi
 800c572:	b2ad      	uxthmi	r5, r5
 800c574:	6031      	str	r1, [r6, #0]
 800c576:	07d9      	lsls	r1, r3, #31
 800c578:	bf44      	itt	mi
 800c57a:	f043 0320 	orrmi.w	r3, r3, #32
 800c57e:	6023      	strmi	r3, [r4, #0]
 800c580:	b11d      	cbz	r5, 800c58a <_printf_i+0x19e>
 800c582:	2310      	movs	r3, #16
 800c584:	e7ac      	b.n	800c4e0 <_printf_i+0xf4>
 800c586:	4827      	ldr	r0, [pc, #156]	@ (800c624 <_printf_i+0x238>)
 800c588:	e7e9      	b.n	800c55e <_printf_i+0x172>
 800c58a:	6823      	ldr	r3, [r4, #0]
 800c58c:	f023 0320 	bic.w	r3, r3, #32
 800c590:	6023      	str	r3, [r4, #0]
 800c592:	e7f6      	b.n	800c582 <_printf_i+0x196>
 800c594:	4616      	mov	r6, r2
 800c596:	e7bd      	b.n	800c514 <_printf_i+0x128>
 800c598:	6833      	ldr	r3, [r6, #0]
 800c59a:	6825      	ldr	r5, [r4, #0]
 800c59c:	6961      	ldr	r1, [r4, #20]
 800c59e:	1d18      	adds	r0, r3, #4
 800c5a0:	6030      	str	r0, [r6, #0]
 800c5a2:	062e      	lsls	r6, r5, #24
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	d501      	bpl.n	800c5ac <_printf_i+0x1c0>
 800c5a8:	6019      	str	r1, [r3, #0]
 800c5aa:	e002      	b.n	800c5b2 <_printf_i+0x1c6>
 800c5ac:	0668      	lsls	r0, r5, #25
 800c5ae:	d5fb      	bpl.n	800c5a8 <_printf_i+0x1bc>
 800c5b0:	8019      	strh	r1, [r3, #0]
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	6123      	str	r3, [r4, #16]
 800c5b6:	4616      	mov	r6, r2
 800c5b8:	e7bc      	b.n	800c534 <_printf_i+0x148>
 800c5ba:	6833      	ldr	r3, [r6, #0]
 800c5bc:	1d1a      	adds	r2, r3, #4
 800c5be:	6032      	str	r2, [r6, #0]
 800c5c0:	681e      	ldr	r6, [r3, #0]
 800c5c2:	6862      	ldr	r2, [r4, #4]
 800c5c4:	2100      	movs	r1, #0
 800c5c6:	4630      	mov	r0, r6
 800c5c8:	f7f3 fe3a 	bl	8000240 <memchr>
 800c5cc:	b108      	cbz	r0, 800c5d2 <_printf_i+0x1e6>
 800c5ce:	1b80      	subs	r0, r0, r6
 800c5d0:	6060      	str	r0, [r4, #4]
 800c5d2:	6863      	ldr	r3, [r4, #4]
 800c5d4:	6123      	str	r3, [r4, #16]
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c5dc:	e7aa      	b.n	800c534 <_printf_i+0x148>
 800c5de:	6923      	ldr	r3, [r4, #16]
 800c5e0:	4632      	mov	r2, r6
 800c5e2:	4649      	mov	r1, r9
 800c5e4:	4640      	mov	r0, r8
 800c5e6:	47d0      	blx	sl
 800c5e8:	3001      	adds	r0, #1
 800c5ea:	d0ad      	beq.n	800c548 <_printf_i+0x15c>
 800c5ec:	6823      	ldr	r3, [r4, #0]
 800c5ee:	079b      	lsls	r3, r3, #30
 800c5f0:	d413      	bmi.n	800c61a <_printf_i+0x22e>
 800c5f2:	68e0      	ldr	r0, [r4, #12]
 800c5f4:	9b03      	ldr	r3, [sp, #12]
 800c5f6:	4298      	cmp	r0, r3
 800c5f8:	bfb8      	it	lt
 800c5fa:	4618      	movlt	r0, r3
 800c5fc:	e7a6      	b.n	800c54c <_printf_i+0x160>
 800c5fe:	2301      	movs	r3, #1
 800c600:	4632      	mov	r2, r6
 800c602:	4649      	mov	r1, r9
 800c604:	4640      	mov	r0, r8
 800c606:	47d0      	blx	sl
 800c608:	3001      	adds	r0, #1
 800c60a:	d09d      	beq.n	800c548 <_printf_i+0x15c>
 800c60c:	3501      	adds	r5, #1
 800c60e:	68e3      	ldr	r3, [r4, #12]
 800c610:	9903      	ldr	r1, [sp, #12]
 800c612:	1a5b      	subs	r3, r3, r1
 800c614:	42ab      	cmp	r3, r5
 800c616:	dcf2      	bgt.n	800c5fe <_printf_i+0x212>
 800c618:	e7eb      	b.n	800c5f2 <_printf_i+0x206>
 800c61a:	2500      	movs	r5, #0
 800c61c:	f104 0619 	add.w	r6, r4, #25
 800c620:	e7f5      	b.n	800c60e <_printf_i+0x222>
 800c622:	bf00      	nop
 800c624:	0800d2da 	.word	0x0800d2da
 800c628:	0800d2eb 	.word	0x0800d2eb

0800c62c <__sflush_r>:
 800c62c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c634:	0716      	lsls	r6, r2, #28
 800c636:	4605      	mov	r5, r0
 800c638:	460c      	mov	r4, r1
 800c63a:	d454      	bmi.n	800c6e6 <__sflush_r+0xba>
 800c63c:	684b      	ldr	r3, [r1, #4]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	dc02      	bgt.n	800c648 <__sflush_r+0x1c>
 800c642:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c644:	2b00      	cmp	r3, #0
 800c646:	dd48      	ble.n	800c6da <__sflush_r+0xae>
 800c648:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c64a:	2e00      	cmp	r6, #0
 800c64c:	d045      	beq.n	800c6da <__sflush_r+0xae>
 800c64e:	2300      	movs	r3, #0
 800c650:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c654:	682f      	ldr	r7, [r5, #0]
 800c656:	6a21      	ldr	r1, [r4, #32]
 800c658:	602b      	str	r3, [r5, #0]
 800c65a:	d030      	beq.n	800c6be <__sflush_r+0x92>
 800c65c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c65e:	89a3      	ldrh	r3, [r4, #12]
 800c660:	0759      	lsls	r1, r3, #29
 800c662:	d505      	bpl.n	800c670 <__sflush_r+0x44>
 800c664:	6863      	ldr	r3, [r4, #4]
 800c666:	1ad2      	subs	r2, r2, r3
 800c668:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c66a:	b10b      	cbz	r3, 800c670 <__sflush_r+0x44>
 800c66c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c66e:	1ad2      	subs	r2, r2, r3
 800c670:	2300      	movs	r3, #0
 800c672:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c674:	6a21      	ldr	r1, [r4, #32]
 800c676:	4628      	mov	r0, r5
 800c678:	47b0      	blx	r6
 800c67a:	1c43      	adds	r3, r0, #1
 800c67c:	89a3      	ldrh	r3, [r4, #12]
 800c67e:	d106      	bne.n	800c68e <__sflush_r+0x62>
 800c680:	6829      	ldr	r1, [r5, #0]
 800c682:	291d      	cmp	r1, #29
 800c684:	d82b      	bhi.n	800c6de <__sflush_r+0xb2>
 800c686:	4a2a      	ldr	r2, [pc, #168]	@ (800c730 <__sflush_r+0x104>)
 800c688:	410a      	asrs	r2, r1
 800c68a:	07d6      	lsls	r6, r2, #31
 800c68c:	d427      	bmi.n	800c6de <__sflush_r+0xb2>
 800c68e:	2200      	movs	r2, #0
 800c690:	6062      	str	r2, [r4, #4]
 800c692:	04d9      	lsls	r1, r3, #19
 800c694:	6922      	ldr	r2, [r4, #16]
 800c696:	6022      	str	r2, [r4, #0]
 800c698:	d504      	bpl.n	800c6a4 <__sflush_r+0x78>
 800c69a:	1c42      	adds	r2, r0, #1
 800c69c:	d101      	bne.n	800c6a2 <__sflush_r+0x76>
 800c69e:	682b      	ldr	r3, [r5, #0]
 800c6a0:	b903      	cbnz	r3, 800c6a4 <__sflush_r+0x78>
 800c6a2:	6560      	str	r0, [r4, #84]	@ 0x54
 800c6a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c6a6:	602f      	str	r7, [r5, #0]
 800c6a8:	b1b9      	cbz	r1, 800c6da <__sflush_r+0xae>
 800c6aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c6ae:	4299      	cmp	r1, r3
 800c6b0:	d002      	beq.n	800c6b8 <__sflush_r+0x8c>
 800c6b2:	4628      	mov	r0, r5
 800c6b4:	f7fe fbca 	bl	800ae4c <_free_r>
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	6363      	str	r3, [r4, #52]	@ 0x34
 800c6bc:	e00d      	b.n	800c6da <__sflush_r+0xae>
 800c6be:	2301      	movs	r3, #1
 800c6c0:	4628      	mov	r0, r5
 800c6c2:	47b0      	blx	r6
 800c6c4:	4602      	mov	r2, r0
 800c6c6:	1c50      	adds	r0, r2, #1
 800c6c8:	d1c9      	bne.n	800c65e <__sflush_r+0x32>
 800c6ca:	682b      	ldr	r3, [r5, #0]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d0c6      	beq.n	800c65e <__sflush_r+0x32>
 800c6d0:	2b1d      	cmp	r3, #29
 800c6d2:	d001      	beq.n	800c6d8 <__sflush_r+0xac>
 800c6d4:	2b16      	cmp	r3, #22
 800c6d6:	d11e      	bne.n	800c716 <__sflush_r+0xea>
 800c6d8:	602f      	str	r7, [r5, #0]
 800c6da:	2000      	movs	r0, #0
 800c6dc:	e022      	b.n	800c724 <__sflush_r+0xf8>
 800c6de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c6e2:	b21b      	sxth	r3, r3
 800c6e4:	e01b      	b.n	800c71e <__sflush_r+0xf2>
 800c6e6:	690f      	ldr	r7, [r1, #16]
 800c6e8:	2f00      	cmp	r7, #0
 800c6ea:	d0f6      	beq.n	800c6da <__sflush_r+0xae>
 800c6ec:	0793      	lsls	r3, r2, #30
 800c6ee:	680e      	ldr	r6, [r1, #0]
 800c6f0:	bf08      	it	eq
 800c6f2:	694b      	ldreq	r3, [r1, #20]
 800c6f4:	600f      	str	r7, [r1, #0]
 800c6f6:	bf18      	it	ne
 800c6f8:	2300      	movne	r3, #0
 800c6fa:	eba6 0807 	sub.w	r8, r6, r7
 800c6fe:	608b      	str	r3, [r1, #8]
 800c700:	f1b8 0f00 	cmp.w	r8, #0
 800c704:	dde9      	ble.n	800c6da <__sflush_r+0xae>
 800c706:	6a21      	ldr	r1, [r4, #32]
 800c708:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c70a:	4643      	mov	r3, r8
 800c70c:	463a      	mov	r2, r7
 800c70e:	4628      	mov	r0, r5
 800c710:	47b0      	blx	r6
 800c712:	2800      	cmp	r0, #0
 800c714:	dc08      	bgt.n	800c728 <__sflush_r+0xfc>
 800c716:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c71a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c71e:	81a3      	strh	r3, [r4, #12]
 800c720:	f04f 30ff 	mov.w	r0, #4294967295
 800c724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c728:	4407      	add	r7, r0
 800c72a:	eba8 0800 	sub.w	r8, r8, r0
 800c72e:	e7e7      	b.n	800c700 <__sflush_r+0xd4>
 800c730:	dfbffffe 	.word	0xdfbffffe

0800c734 <_fflush_r>:
 800c734:	b538      	push	{r3, r4, r5, lr}
 800c736:	690b      	ldr	r3, [r1, #16]
 800c738:	4605      	mov	r5, r0
 800c73a:	460c      	mov	r4, r1
 800c73c:	b913      	cbnz	r3, 800c744 <_fflush_r+0x10>
 800c73e:	2500      	movs	r5, #0
 800c740:	4628      	mov	r0, r5
 800c742:	bd38      	pop	{r3, r4, r5, pc}
 800c744:	b118      	cbz	r0, 800c74e <_fflush_r+0x1a>
 800c746:	6a03      	ldr	r3, [r0, #32]
 800c748:	b90b      	cbnz	r3, 800c74e <_fflush_r+0x1a>
 800c74a:	f7fe f9b5 	bl	800aab8 <__sinit>
 800c74e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d0f3      	beq.n	800c73e <_fflush_r+0xa>
 800c756:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c758:	07d0      	lsls	r0, r2, #31
 800c75a:	d404      	bmi.n	800c766 <_fflush_r+0x32>
 800c75c:	0599      	lsls	r1, r3, #22
 800c75e:	d402      	bmi.n	800c766 <_fflush_r+0x32>
 800c760:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c762:	f7fe fb3a 	bl	800adda <__retarget_lock_acquire_recursive>
 800c766:	4628      	mov	r0, r5
 800c768:	4621      	mov	r1, r4
 800c76a:	f7ff ff5f 	bl	800c62c <__sflush_r>
 800c76e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c770:	07da      	lsls	r2, r3, #31
 800c772:	4605      	mov	r5, r0
 800c774:	d4e4      	bmi.n	800c740 <_fflush_r+0xc>
 800c776:	89a3      	ldrh	r3, [r4, #12]
 800c778:	059b      	lsls	r3, r3, #22
 800c77a:	d4e1      	bmi.n	800c740 <_fflush_r+0xc>
 800c77c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c77e:	f7fe fb2d 	bl	800addc <__retarget_lock_release_recursive>
 800c782:	e7dd      	b.n	800c740 <_fflush_r+0xc>

0800c784 <fiprintf>:
 800c784:	b40e      	push	{r1, r2, r3}
 800c786:	b503      	push	{r0, r1, lr}
 800c788:	4601      	mov	r1, r0
 800c78a:	ab03      	add	r3, sp, #12
 800c78c:	4805      	ldr	r0, [pc, #20]	@ (800c7a4 <fiprintf+0x20>)
 800c78e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c792:	6800      	ldr	r0, [r0, #0]
 800c794:	9301      	str	r3, [sp, #4]
 800c796:	f000 f8a3 	bl	800c8e0 <_vfiprintf_r>
 800c79a:	b002      	add	sp, #8
 800c79c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c7a0:	b003      	add	sp, #12
 800c7a2:	4770      	bx	lr
 800c7a4:	20000188 	.word	0x20000188

0800c7a8 <memmove>:
 800c7a8:	4288      	cmp	r0, r1
 800c7aa:	b510      	push	{r4, lr}
 800c7ac:	eb01 0402 	add.w	r4, r1, r2
 800c7b0:	d902      	bls.n	800c7b8 <memmove+0x10>
 800c7b2:	4284      	cmp	r4, r0
 800c7b4:	4623      	mov	r3, r4
 800c7b6:	d807      	bhi.n	800c7c8 <memmove+0x20>
 800c7b8:	1e43      	subs	r3, r0, #1
 800c7ba:	42a1      	cmp	r1, r4
 800c7bc:	d008      	beq.n	800c7d0 <memmove+0x28>
 800c7be:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c7c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c7c6:	e7f8      	b.n	800c7ba <memmove+0x12>
 800c7c8:	4402      	add	r2, r0
 800c7ca:	4601      	mov	r1, r0
 800c7cc:	428a      	cmp	r2, r1
 800c7ce:	d100      	bne.n	800c7d2 <memmove+0x2a>
 800c7d0:	bd10      	pop	{r4, pc}
 800c7d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c7d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c7da:	e7f7      	b.n	800c7cc <memmove+0x24>

0800c7dc <_sbrk_r>:
 800c7dc:	b538      	push	{r3, r4, r5, lr}
 800c7de:	4d06      	ldr	r5, [pc, #24]	@ (800c7f8 <_sbrk_r+0x1c>)
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	4604      	mov	r4, r0
 800c7e4:	4608      	mov	r0, r1
 800c7e6:	602b      	str	r3, [r5, #0]
 800c7e8:	f7f4 fe72 	bl	80014d0 <_sbrk>
 800c7ec:	1c43      	adds	r3, r0, #1
 800c7ee:	d102      	bne.n	800c7f6 <_sbrk_r+0x1a>
 800c7f0:	682b      	ldr	r3, [r5, #0]
 800c7f2:	b103      	cbz	r3, 800c7f6 <_sbrk_r+0x1a>
 800c7f4:	6023      	str	r3, [r4, #0]
 800c7f6:	bd38      	pop	{r3, r4, r5, pc}
 800c7f8:	200020f0 	.word	0x200020f0

0800c7fc <abort>:
 800c7fc:	b508      	push	{r3, lr}
 800c7fe:	2006      	movs	r0, #6
 800c800:	f000 fa42 	bl	800cc88 <raise>
 800c804:	2001      	movs	r0, #1
 800c806:	f7f4 fdeb 	bl	80013e0 <_exit>

0800c80a <_calloc_r>:
 800c80a:	b570      	push	{r4, r5, r6, lr}
 800c80c:	fba1 5402 	umull	r5, r4, r1, r2
 800c810:	b93c      	cbnz	r4, 800c822 <_calloc_r+0x18>
 800c812:	4629      	mov	r1, r5
 800c814:	f7fe fec8 	bl	800b5a8 <_malloc_r>
 800c818:	4606      	mov	r6, r0
 800c81a:	b928      	cbnz	r0, 800c828 <_calloc_r+0x1e>
 800c81c:	2600      	movs	r6, #0
 800c81e:	4630      	mov	r0, r6
 800c820:	bd70      	pop	{r4, r5, r6, pc}
 800c822:	220c      	movs	r2, #12
 800c824:	6002      	str	r2, [r0, #0]
 800c826:	e7f9      	b.n	800c81c <_calloc_r+0x12>
 800c828:	462a      	mov	r2, r5
 800c82a:	4621      	mov	r1, r4
 800c82c:	f7fe f9ed 	bl	800ac0a <memset>
 800c830:	e7f5      	b.n	800c81e <_calloc_r+0x14>

0800c832 <_realloc_r>:
 800c832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c836:	4680      	mov	r8, r0
 800c838:	4615      	mov	r5, r2
 800c83a:	460c      	mov	r4, r1
 800c83c:	b921      	cbnz	r1, 800c848 <_realloc_r+0x16>
 800c83e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c842:	4611      	mov	r1, r2
 800c844:	f7fe beb0 	b.w	800b5a8 <_malloc_r>
 800c848:	b92a      	cbnz	r2, 800c856 <_realloc_r+0x24>
 800c84a:	f7fe faff 	bl	800ae4c <_free_r>
 800c84e:	2400      	movs	r4, #0
 800c850:	4620      	mov	r0, r4
 800c852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c856:	f000 fa33 	bl	800ccc0 <_malloc_usable_size_r>
 800c85a:	4285      	cmp	r5, r0
 800c85c:	4606      	mov	r6, r0
 800c85e:	d802      	bhi.n	800c866 <_realloc_r+0x34>
 800c860:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c864:	d8f4      	bhi.n	800c850 <_realloc_r+0x1e>
 800c866:	4629      	mov	r1, r5
 800c868:	4640      	mov	r0, r8
 800c86a:	f7fe fe9d 	bl	800b5a8 <_malloc_r>
 800c86e:	4607      	mov	r7, r0
 800c870:	2800      	cmp	r0, #0
 800c872:	d0ec      	beq.n	800c84e <_realloc_r+0x1c>
 800c874:	42b5      	cmp	r5, r6
 800c876:	462a      	mov	r2, r5
 800c878:	4621      	mov	r1, r4
 800c87a:	bf28      	it	cs
 800c87c:	4632      	movcs	r2, r6
 800c87e:	f7fe faae 	bl	800adde <memcpy>
 800c882:	4621      	mov	r1, r4
 800c884:	4640      	mov	r0, r8
 800c886:	f7fe fae1 	bl	800ae4c <_free_r>
 800c88a:	463c      	mov	r4, r7
 800c88c:	e7e0      	b.n	800c850 <_realloc_r+0x1e>

0800c88e <__sfputc_r>:
 800c88e:	6893      	ldr	r3, [r2, #8]
 800c890:	3b01      	subs	r3, #1
 800c892:	2b00      	cmp	r3, #0
 800c894:	b410      	push	{r4}
 800c896:	6093      	str	r3, [r2, #8]
 800c898:	da08      	bge.n	800c8ac <__sfputc_r+0x1e>
 800c89a:	6994      	ldr	r4, [r2, #24]
 800c89c:	42a3      	cmp	r3, r4
 800c89e:	db01      	blt.n	800c8a4 <__sfputc_r+0x16>
 800c8a0:	290a      	cmp	r1, #10
 800c8a2:	d103      	bne.n	800c8ac <__sfputc_r+0x1e>
 800c8a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c8a8:	f000 b932 	b.w	800cb10 <__swbuf_r>
 800c8ac:	6813      	ldr	r3, [r2, #0]
 800c8ae:	1c58      	adds	r0, r3, #1
 800c8b0:	6010      	str	r0, [r2, #0]
 800c8b2:	7019      	strb	r1, [r3, #0]
 800c8b4:	4608      	mov	r0, r1
 800c8b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c8ba:	4770      	bx	lr

0800c8bc <__sfputs_r>:
 800c8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8be:	4606      	mov	r6, r0
 800c8c0:	460f      	mov	r7, r1
 800c8c2:	4614      	mov	r4, r2
 800c8c4:	18d5      	adds	r5, r2, r3
 800c8c6:	42ac      	cmp	r4, r5
 800c8c8:	d101      	bne.n	800c8ce <__sfputs_r+0x12>
 800c8ca:	2000      	movs	r0, #0
 800c8cc:	e007      	b.n	800c8de <__sfputs_r+0x22>
 800c8ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8d2:	463a      	mov	r2, r7
 800c8d4:	4630      	mov	r0, r6
 800c8d6:	f7ff ffda 	bl	800c88e <__sfputc_r>
 800c8da:	1c43      	adds	r3, r0, #1
 800c8dc:	d1f3      	bne.n	800c8c6 <__sfputs_r+0xa>
 800c8de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c8e0 <_vfiprintf_r>:
 800c8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8e4:	460d      	mov	r5, r1
 800c8e6:	b09d      	sub	sp, #116	@ 0x74
 800c8e8:	4614      	mov	r4, r2
 800c8ea:	4698      	mov	r8, r3
 800c8ec:	4606      	mov	r6, r0
 800c8ee:	b118      	cbz	r0, 800c8f8 <_vfiprintf_r+0x18>
 800c8f0:	6a03      	ldr	r3, [r0, #32]
 800c8f2:	b90b      	cbnz	r3, 800c8f8 <_vfiprintf_r+0x18>
 800c8f4:	f7fe f8e0 	bl	800aab8 <__sinit>
 800c8f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c8fa:	07d9      	lsls	r1, r3, #31
 800c8fc:	d405      	bmi.n	800c90a <_vfiprintf_r+0x2a>
 800c8fe:	89ab      	ldrh	r3, [r5, #12]
 800c900:	059a      	lsls	r2, r3, #22
 800c902:	d402      	bmi.n	800c90a <_vfiprintf_r+0x2a>
 800c904:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c906:	f7fe fa68 	bl	800adda <__retarget_lock_acquire_recursive>
 800c90a:	89ab      	ldrh	r3, [r5, #12]
 800c90c:	071b      	lsls	r3, r3, #28
 800c90e:	d501      	bpl.n	800c914 <_vfiprintf_r+0x34>
 800c910:	692b      	ldr	r3, [r5, #16]
 800c912:	b99b      	cbnz	r3, 800c93c <_vfiprintf_r+0x5c>
 800c914:	4629      	mov	r1, r5
 800c916:	4630      	mov	r0, r6
 800c918:	f000 f938 	bl	800cb8c <__swsetup_r>
 800c91c:	b170      	cbz	r0, 800c93c <_vfiprintf_r+0x5c>
 800c91e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c920:	07dc      	lsls	r4, r3, #31
 800c922:	d504      	bpl.n	800c92e <_vfiprintf_r+0x4e>
 800c924:	f04f 30ff 	mov.w	r0, #4294967295
 800c928:	b01d      	add	sp, #116	@ 0x74
 800c92a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c92e:	89ab      	ldrh	r3, [r5, #12]
 800c930:	0598      	lsls	r0, r3, #22
 800c932:	d4f7      	bmi.n	800c924 <_vfiprintf_r+0x44>
 800c934:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c936:	f7fe fa51 	bl	800addc <__retarget_lock_release_recursive>
 800c93a:	e7f3      	b.n	800c924 <_vfiprintf_r+0x44>
 800c93c:	2300      	movs	r3, #0
 800c93e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c940:	2320      	movs	r3, #32
 800c942:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c946:	f8cd 800c 	str.w	r8, [sp, #12]
 800c94a:	2330      	movs	r3, #48	@ 0x30
 800c94c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cafc <_vfiprintf_r+0x21c>
 800c950:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c954:	f04f 0901 	mov.w	r9, #1
 800c958:	4623      	mov	r3, r4
 800c95a:	469a      	mov	sl, r3
 800c95c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c960:	b10a      	cbz	r2, 800c966 <_vfiprintf_r+0x86>
 800c962:	2a25      	cmp	r2, #37	@ 0x25
 800c964:	d1f9      	bne.n	800c95a <_vfiprintf_r+0x7a>
 800c966:	ebba 0b04 	subs.w	fp, sl, r4
 800c96a:	d00b      	beq.n	800c984 <_vfiprintf_r+0xa4>
 800c96c:	465b      	mov	r3, fp
 800c96e:	4622      	mov	r2, r4
 800c970:	4629      	mov	r1, r5
 800c972:	4630      	mov	r0, r6
 800c974:	f7ff ffa2 	bl	800c8bc <__sfputs_r>
 800c978:	3001      	adds	r0, #1
 800c97a:	f000 80a7 	beq.w	800cacc <_vfiprintf_r+0x1ec>
 800c97e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c980:	445a      	add	r2, fp
 800c982:	9209      	str	r2, [sp, #36]	@ 0x24
 800c984:	f89a 3000 	ldrb.w	r3, [sl]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	f000 809f 	beq.w	800cacc <_vfiprintf_r+0x1ec>
 800c98e:	2300      	movs	r3, #0
 800c990:	f04f 32ff 	mov.w	r2, #4294967295
 800c994:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c998:	f10a 0a01 	add.w	sl, sl, #1
 800c99c:	9304      	str	r3, [sp, #16]
 800c99e:	9307      	str	r3, [sp, #28]
 800c9a0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c9a4:	931a      	str	r3, [sp, #104]	@ 0x68
 800c9a6:	4654      	mov	r4, sl
 800c9a8:	2205      	movs	r2, #5
 800c9aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9ae:	4853      	ldr	r0, [pc, #332]	@ (800cafc <_vfiprintf_r+0x21c>)
 800c9b0:	f7f3 fc46 	bl	8000240 <memchr>
 800c9b4:	9a04      	ldr	r2, [sp, #16]
 800c9b6:	b9d8      	cbnz	r0, 800c9f0 <_vfiprintf_r+0x110>
 800c9b8:	06d1      	lsls	r1, r2, #27
 800c9ba:	bf44      	itt	mi
 800c9bc:	2320      	movmi	r3, #32
 800c9be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c9c2:	0713      	lsls	r3, r2, #28
 800c9c4:	bf44      	itt	mi
 800c9c6:	232b      	movmi	r3, #43	@ 0x2b
 800c9c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c9cc:	f89a 3000 	ldrb.w	r3, [sl]
 800c9d0:	2b2a      	cmp	r3, #42	@ 0x2a
 800c9d2:	d015      	beq.n	800ca00 <_vfiprintf_r+0x120>
 800c9d4:	9a07      	ldr	r2, [sp, #28]
 800c9d6:	4654      	mov	r4, sl
 800c9d8:	2000      	movs	r0, #0
 800c9da:	f04f 0c0a 	mov.w	ip, #10
 800c9de:	4621      	mov	r1, r4
 800c9e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c9e4:	3b30      	subs	r3, #48	@ 0x30
 800c9e6:	2b09      	cmp	r3, #9
 800c9e8:	d94b      	bls.n	800ca82 <_vfiprintf_r+0x1a2>
 800c9ea:	b1b0      	cbz	r0, 800ca1a <_vfiprintf_r+0x13a>
 800c9ec:	9207      	str	r2, [sp, #28]
 800c9ee:	e014      	b.n	800ca1a <_vfiprintf_r+0x13a>
 800c9f0:	eba0 0308 	sub.w	r3, r0, r8
 800c9f4:	fa09 f303 	lsl.w	r3, r9, r3
 800c9f8:	4313      	orrs	r3, r2
 800c9fa:	9304      	str	r3, [sp, #16]
 800c9fc:	46a2      	mov	sl, r4
 800c9fe:	e7d2      	b.n	800c9a6 <_vfiprintf_r+0xc6>
 800ca00:	9b03      	ldr	r3, [sp, #12]
 800ca02:	1d19      	adds	r1, r3, #4
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	9103      	str	r1, [sp, #12]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	bfbb      	ittet	lt
 800ca0c:	425b      	neglt	r3, r3
 800ca0e:	f042 0202 	orrlt.w	r2, r2, #2
 800ca12:	9307      	strge	r3, [sp, #28]
 800ca14:	9307      	strlt	r3, [sp, #28]
 800ca16:	bfb8      	it	lt
 800ca18:	9204      	strlt	r2, [sp, #16]
 800ca1a:	7823      	ldrb	r3, [r4, #0]
 800ca1c:	2b2e      	cmp	r3, #46	@ 0x2e
 800ca1e:	d10a      	bne.n	800ca36 <_vfiprintf_r+0x156>
 800ca20:	7863      	ldrb	r3, [r4, #1]
 800ca22:	2b2a      	cmp	r3, #42	@ 0x2a
 800ca24:	d132      	bne.n	800ca8c <_vfiprintf_r+0x1ac>
 800ca26:	9b03      	ldr	r3, [sp, #12]
 800ca28:	1d1a      	adds	r2, r3, #4
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	9203      	str	r2, [sp, #12]
 800ca2e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ca32:	3402      	adds	r4, #2
 800ca34:	9305      	str	r3, [sp, #20]
 800ca36:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cb0c <_vfiprintf_r+0x22c>
 800ca3a:	7821      	ldrb	r1, [r4, #0]
 800ca3c:	2203      	movs	r2, #3
 800ca3e:	4650      	mov	r0, sl
 800ca40:	f7f3 fbfe 	bl	8000240 <memchr>
 800ca44:	b138      	cbz	r0, 800ca56 <_vfiprintf_r+0x176>
 800ca46:	9b04      	ldr	r3, [sp, #16]
 800ca48:	eba0 000a 	sub.w	r0, r0, sl
 800ca4c:	2240      	movs	r2, #64	@ 0x40
 800ca4e:	4082      	lsls	r2, r0
 800ca50:	4313      	orrs	r3, r2
 800ca52:	3401      	adds	r4, #1
 800ca54:	9304      	str	r3, [sp, #16]
 800ca56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca5a:	4829      	ldr	r0, [pc, #164]	@ (800cb00 <_vfiprintf_r+0x220>)
 800ca5c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ca60:	2206      	movs	r2, #6
 800ca62:	f7f3 fbed 	bl	8000240 <memchr>
 800ca66:	2800      	cmp	r0, #0
 800ca68:	d03f      	beq.n	800caea <_vfiprintf_r+0x20a>
 800ca6a:	4b26      	ldr	r3, [pc, #152]	@ (800cb04 <_vfiprintf_r+0x224>)
 800ca6c:	bb1b      	cbnz	r3, 800cab6 <_vfiprintf_r+0x1d6>
 800ca6e:	9b03      	ldr	r3, [sp, #12]
 800ca70:	3307      	adds	r3, #7
 800ca72:	f023 0307 	bic.w	r3, r3, #7
 800ca76:	3308      	adds	r3, #8
 800ca78:	9303      	str	r3, [sp, #12]
 800ca7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca7c:	443b      	add	r3, r7
 800ca7e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ca80:	e76a      	b.n	800c958 <_vfiprintf_r+0x78>
 800ca82:	fb0c 3202 	mla	r2, ip, r2, r3
 800ca86:	460c      	mov	r4, r1
 800ca88:	2001      	movs	r0, #1
 800ca8a:	e7a8      	b.n	800c9de <_vfiprintf_r+0xfe>
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	3401      	adds	r4, #1
 800ca90:	9305      	str	r3, [sp, #20]
 800ca92:	4619      	mov	r1, r3
 800ca94:	f04f 0c0a 	mov.w	ip, #10
 800ca98:	4620      	mov	r0, r4
 800ca9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca9e:	3a30      	subs	r2, #48	@ 0x30
 800caa0:	2a09      	cmp	r2, #9
 800caa2:	d903      	bls.n	800caac <_vfiprintf_r+0x1cc>
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d0c6      	beq.n	800ca36 <_vfiprintf_r+0x156>
 800caa8:	9105      	str	r1, [sp, #20]
 800caaa:	e7c4      	b.n	800ca36 <_vfiprintf_r+0x156>
 800caac:	fb0c 2101 	mla	r1, ip, r1, r2
 800cab0:	4604      	mov	r4, r0
 800cab2:	2301      	movs	r3, #1
 800cab4:	e7f0      	b.n	800ca98 <_vfiprintf_r+0x1b8>
 800cab6:	ab03      	add	r3, sp, #12
 800cab8:	9300      	str	r3, [sp, #0]
 800caba:	462a      	mov	r2, r5
 800cabc:	4b12      	ldr	r3, [pc, #72]	@ (800cb08 <_vfiprintf_r+0x228>)
 800cabe:	a904      	add	r1, sp, #16
 800cac0:	4630      	mov	r0, r6
 800cac2:	f3af 8000 	nop.w
 800cac6:	4607      	mov	r7, r0
 800cac8:	1c78      	adds	r0, r7, #1
 800caca:	d1d6      	bne.n	800ca7a <_vfiprintf_r+0x19a>
 800cacc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cace:	07d9      	lsls	r1, r3, #31
 800cad0:	d405      	bmi.n	800cade <_vfiprintf_r+0x1fe>
 800cad2:	89ab      	ldrh	r3, [r5, #12]
 800cad4:	059a      	lsls	r2, r3, #22
 800cad6:	d402      	bmi.n	800cade <_vfiprintf_r+0x1fe>
 800cad8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cada:	f7fe f97f 	bl	800addc <__retarget_lock_release_recursive>
 800cade:	89ab      	ldrh	r3, [r5, #12]
 800cae0:	065b      	lsls	r3, r3, #25
 800cae2:	f53f af1f 	bmi.w	800c924 <_vfiprintf_r+0x44>
 800cae6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cae8:	e71e      	b.n	800c928 <_vfiprintf_r+0x48>
 800caea:	ab03      	add	r3, sp, #12
 800caec:	9300      	str	r3, [sp, #0]
 800caee:	462a      	mov	r2, r5
 800caf0:	4b05      	ldr	r3, [pc, #20]	@ (800cb08 <_vfiprintf_r+0x228>)
 800caf2:	a904      	add	r1, sp, #16
 800caf4:	4630      	mov	r0, r6
 800caf6:	f7ff fc79 	bl	800c3ec <_printf_i>
 800cafa:	e7e4      	b.n	800cac6 <_vfiprintf_r+0x1e6>
 800cafc:	0800d2c9 	.word	0x0800d2c9
 800cb00:	0800d2d3 	.word	0x0800d2d3
 800cb04:	00000000 	.word	0x00000000
 800cb08:	0800c8bd 	.word	0x0800c8bd
 800cb0c:	0800d2cf 	.word	0x0800d2cf

0800cb10 <__swbuf_r>:
 800cb10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb12:	460e      	mov	r6, r1
 800cb14:	4614      	mov	r4, r2
 800cb16:	4605      	mov	r5, r0
 800cb18:	b118      	cbz	r0, 800cb22 <__swbuf_r+0x12>
 800cb1a:	6a03      	ldr	r3, [r0, #32]
 800cb1c:	b90b      	cbnz	r3, 800cb22 <__swbuf_r+0x12>
 800cb1e:	f7fd ffcb 	bl	800aab8 <__sinit>
 800cb22:	69a3      	ldr	r3, [r4, #24]
 800cb24:	60a3      	str	r3, [r4, #8]
 800cb26:	89a3      	ldrh	r3, [r4, #12]
 800cb28:	071a      	lsls	r2, r3, #28
 800cb2a:	d501      	bpl.n	800cb30 <__swbuf_r+0x20>
 800cb2c:	6923      	ldr	r3, [r4, #16]
 800cb2e:	b943      	cbnz	r3, 800cb42 <__swbuf_r+0x32>
 800cb30:	4621      	mov	r1, r4
 800cb32:	4628      	mov	r0, r5
 800cb34:	f000 f82a 	bl	800cb8c <__swsetup_r>
 800cb38:	b118      	cbz	r0, 800cb42 <__swbuf_r+0x32>
 800cb3a:	f04f 37ff 	mov.w	r7, #4294967295
 800cb3e:	4638      	mov	r0, r7
 800cb40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb42:	6823      	ldr	r3, [r4, #0]
 800cb44:	6922      	ldr	r2, [r4, #16]
 800cb46:	1a98      	subs	r0, r3, r2
 800cb48:	6963      	ldr	r3, [r4, #20]
 800cb4a:	b2f6      	uxtb	r6, r6
 800cb4c:	4283      	cmp	r3, r0
 800cb4e:	4637      	mov	r7, r6
 800cb50:	dc05      	bgt.n	800cb5e <__swbuf_r+0x4e>
 800cb52:	4621      	mov	r1, r4
 800cb54:	4628      	mov	r0, r5
 800cb56:	f7ff fded 	bl	800c734 <_fflush_r>
 800cb5a:	2800      	cmp	r0, #0
 800cb5c:	d1ed      	bne.n	800cb3a <__swbuf_r+0x2a>
 800cb5e:	68a3      	ldr	r3, [r4, #8]
 800cb60:	3b01      	subs	r3, #1
 800cb62:	60a3      	str	r3, [r4, #8]
 800cb64:	6823      	ldr	r3, [r4, #0]
 800cb66:	1c5a      	adds	r2, r3, #1
 800cb68:	6022      	str	r2, [r4, #0]
 800cb6a:	701e      	strb	r6, [r3, #0]
 800cb6c:	6962      	ldr	r2, [r4, #20]
 800cb6e:	1c43      	adds	r3, r0, #1
 800cb70:	429a      	cmp	r2, r3
 800cb72:	d004      	beq.n	800cb7e <__swbuf_r+0x6e>
 800cb74:	89a3      	ldrh	r3, [r4, #12]
 800cb76:	07db      	lsls	r3, r3, #31
 800cb78:	d5e1      	bpl.n	800cb3e <__swbuf_r+0x2e>
 800cb7a:	2e0a      	cmp	r6, #10
 800cb7c:	d1df      	bne.n	800cb3e <__swbuf_r+0x2e>
 800cb7e:	4621      	mov	r1, r4
 800cb80:	4628      	mov	r0, r5
 800cb82:	f7ff fdd7 	bl	800c734 <_fflush_r>
 800cb86:	2800      	cmp	r0, #0
 800cb88:	d0d9      	beq.n	800cb3e <__swbuf_r+0x2e>
 800cb8a:	e7d6      	b.n	800cb3a <__swbuf_r+0x2a>

0800cb8c <__swsetup_r>:
 800cb8c:	b538      	push	{r3, r4, r5, lr}
 800cb8e:	4b29      	ldr	r3, [pc, #164]	@ (800cc34 <__swsetup_r+0xa8>)
 800cb90:	4605      	mov	r5, r0
 800cb92:	6818      	ldr	r0, [r3, #0]
 800cb94:	460c      	mov	r4, r1
 800cb96:	b118      	cbz	r0, 800cba0 <__swsetup_r+0x14>
 800cb98:	6a03      	ldr	r3, [r0, #32]
 800cb9a:	b90b      	cbnz	r3, 800cba0 <__swsetup_r+0x14>
 800cb9c:	f7fd ff8c 	bl	800aab8 <__sinit>
 800cba0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cba4:	0719      	lsls	r1, r3, #28
 800cba6:	d422      	bmi.n	800cbee <__swsetup_r+0x62>
 800cba8:	06da      	lsls	r2, r3, #27
 800cbaa:	d407      	bmi.n	800cbbc <__swsetup_r+0x30>
 800cbac:	2209      	movs	r2, #9
 800cbae:	602a      	str	r2, [r5, #0]
 800cbb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cbb4:	81a3      	strh	r3, [r4, #12]
 800cbb6:	f04f 30ff 	mov.w	r0, #4294967295
 800cbba:	e033      	b.n	800cc24 <__swsetup_r+0x98>
 800cbbc:	0758      	lsls	r0, r3, #29
 800cbbe:	d512      	bpl.n	800cbe6 <__swsetup_r+0x5a>
 800cbc0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cbc2:	b141      	cbz	r1, 800cbd6 <__swsetup_r+0x4a>
 800cbc4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cbc8:	4299      	cmp	r1, r3
 800cbca:	d002      	beq.n	800cbd2 <__swsetup_r+0x46>
 800cbcc:	4628      	mov	r0, r5
 800cbce:	f7fe f93d 	bl	800ae4c <_free_r>
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	6363      	str	r3, [r4, #52]	@ 0x34
 800cbd6:	89a3      	ldrh	r3, [r4, #12]
 800cbd8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cbdc:	81a3      	strh	r3, [r4, #12]
 800cbde:	2300      	movs	r3, #0
 800cbe0:	6063      	str	r3, [r4, #4]
 800cbe2:	6923      	ldr	r3, [r4, #16]
 800cbe4:	6023      	str	r3, [r4, #0]
 800cbe6:	89a3      	ldrh	r3, [r4, #12]
 800cbe8:	f043 0308 	orr.w	r3, r3, #8
 800cbec:	81a3      	strh	r3, [r4, #12]
 800cbee:	6923      	ldr	r3, [r4, #16]
 800cbf0:	b94b      	cbnz	r3, 800cc06 <__swsetup_r+0x7a>
 800cbf2:	89a3      	ldrh	r3, [r4, #12]
 800cbf4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cbf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cbfc:	d003      	beq.n	800cc06 <__swsetup_r+0x7a>
 800cbfe:	4621      	mov	r1, r4
 800cc00:	4628      	mov	r0, r5
 800cc02:	f000 f88b 	bl	800cd1c <__smakebuf_r>
 800cc06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc0a:	f013 0201 	ands.w	r2, r3, #1
 800cc0e:	d00a      	beq.n	800cc26 <__swsetup_r+0x9a>
 800cc10:	2200      	movs	r2, #0
 800cc12:	60a2      	str	r2, [r4, #8]
 800cc14:	6962      	ldr	r2, [r4, #20]
 800cc16:	4252      	negs	r2, r2
 800cc18:	61a2      	str	r2, [r4, #24]
 800cc1a:	6922      	ldr	r2, [r4, #16]
 800cc1c:	b942      	cbnz	r2, 800cc30 <__swsetup_r+0xa4>
 800cc1e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cc22:	d1c5      	bne.n	800cbb0 <__swsetup_r+0x24>
 800cc24:	bd38      	pop	{r3, r4, r5, pc}
 800cc26:	0799      	lsls	r1, r3, #30
 800cc28:	bf58      	it	pl
 800cc2a:	6962      	ldrpl	r2, [r4, #20]
 800cc2c:	60a2      	str	r2, [r4, #8]
 800cc2e:	e7f4      	b.n	800cc1a <__swsetup_r+0x8e>
 800cc30:	2000      	movs	r0, #0
 800cc32:	e7f7      	b.n	800cc24 <__swsetup_r+0x98>
 800cc34:	20000188 	.word	0x20000188

0800cc38 <_raise_r>:
 800cc38:	291f      	cmp	r1, #31
 800cc3a:	b538      	push	{r3, r4, r5, lr}
 800cc3c:	4605      	mov	r5, r0
 800cc3e:	460c      	mov	r4, r1
 800cc40:	d904      	bls.n	800cc4c <_raise_r+0x14>
 800cc42:	2316      	movs	r3, #22
 800cc44:	6003      	str	r3, [r0, #0]
 800cc46:	f04f 30ff 	mov.w	r0, #4294967295
 800cc4a:	bd38      	pop	{r3, r4, r5, pc}
 800cc4c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cc4e:	b112      	cbz	r2, 800cc56 <_raise_r+0x1e>
 800cc50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cc54:	b94b      	cbnz	r3, 800cc6a <_raise_r+0x32>
 800cc56:	4628      	mov	r0, r5
 800cc58:	f000 f830 	bl	800ccbc <_getpid_r>
 800cc5c:	4622      	mov	r2, r4
 800cc5e:	4601      	mov	r1, r0
 800cc60:	4628      	mov	r0, r5
 800cc62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc66:	f000 b817 	b.w	800cc98 <_kill_r>
 800cc6a:	2b01      	cmp	r3, #1
 800cc6c:	d00a      	beq.n	800cc84 <_raise_r+0x4c>
 800cc6e:	1c59      	adds	r1, r3, #1
 800cc70:	d103      	bne.n	800cc7a <_raise_r+0x42>
 800cc72:	2316      	movs	r3, #22
 800cc74:	6003      	str	r3, [r0, #0]
 800cc76:	2001      	movs	r0, #1
 800cc78:	e7e7      	b.n	800cc4a <_raise_r+0x12>
 800cc7a:	2100      	movs	r1, #0
 800cc7c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cc80:	4620      	mov	r0, r4
 800cc82:	4798      	blx	r3
 800cc84:	2000      	movs	r0, #0
 800cc86:	e7e0      	b.n	800cc4a <_raise_r+0x12>

0800cc88 <raise>:
 800cc88:	4b02      	ldr	r3, [pc, #8]	@ (800cc94 <raise+0xc>)
 800cc8a:	4601      	mov	r1, r0
 800cc8c:	6818      	ldr	r0, [r3, #0]
 800cc8e:	f7ff bfd3 	b.w	800cc38 <_raise_r>
 800cc92:	bf00      	nop
 800cc94:	20000188 	.word	0x20000188

0800cc98 <_kill_r>:
 800cc98:	b538      	push	{r3, r4, r5, lr}
 800cc9a:	4d07      	ldr	r5, [pc, #28]	@ (800ccb8 <_kill_r+0x20>)
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	4604      	mov	r4, r0
 800cca0:	4608      	mov	r0, r1
 800cca2:	4611      	mov	r1, r2
 800cca4:	602b      	str	r3, [r5, #0]
 800cca6:	f7f4 fb8b 	bl	80013c0 <_kill>
 800ccaa:	1c43      	adds	r3, r0, #1
 800ccac:	d102      	bne.n	800ccb4 <_kill_r+0x1c>
 800ccae:	682b      	ldr	r3, [r5, #0]
 800ccb0:	b103      	cbz	r3, 800ccb4 <_kill_r+0x1c>
 800ccb2:	6023      	str	r3, [r4, #0]
 800ccb4:	bd38      	pop	{r3, r4, r5, pc}
 800ccb6:	bf00      	nop
 800ccb8:	200020f0 	.word	0x200020f0

0800ccbc <_getpid_r>:
 800ccbc:	f7f4 bb78 	b.w	80013b0 <_getpid>

0800ccc0 <_malloc_usable_size_r>:
 800ccc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ccc4:	1f18      	subs	r0, r3, #4
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	bfbc      	itt	lt
 800ccca:	580b      	ldrlt	r3, [r1, r0]
 800cccc:	18c0      	addlt	r0, r0, r3
 800ccce:	4770      	bx	lr

0800ccd0 <__swhatbuf_r>:
 800ccd0:	b570      	push	{r4, r5, r6, lr}
 800ccd2:	460c      	mov	r4, r1
 800ccd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccd8:	2900      	cmp	r1, #0
 800ccda:	b096      	sub	sp, #88	@ 0x58
 800ccdc:	4615      	mov	r5, r2
 800ccde:	461e      	mov	r6, r3
 800cce0:	da0d      	bge.n	800ccfe <__swhatbuf_r+0x2e>
 800cce2:	89a3      	ldrh	r3, [r4, #12]
 800cce4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cce8:	f04f 0100 	mov.w	r1, #0
 800ccec:	bf14      	ite	ne
 800ccee:	2340      	movne	r3, #64	@ 0x40
 800ccf0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ccf4:	2000      	movs	r0, #0
 800ccf6:	6031      	str	r1, [r6, #0]
 800ccf8:	602b      	str	r3, [r5, #0]
 800ccfa:	b016      	add	sp, #88	@ 0x58
 800ccfc:	bd70      	pop	{r4, r5, r6, pc}
 800ccfe:	466a      	mov	r2, sp
 800cd00:	f000 f848 	bl	800cd94 <_fstat_r>
 800cd04:	2800      	cmp	r0, #0
 800cd06:	dbec      	blt.n	800cce2 <__swhatbuf_r+0x12>
 800cd08:	9901      	ldr	r1, [sp, #4]
 800cd0a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cd0e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cd12:	4259      	negs	r1, r3
 800cd14:	4159      	adcs	r1, r3
 800cd16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cd1a:	e7eb      	b.n	800ccf4 <__swhatbuf_r+0x24>

0800cd1c <__smakebuf_r>:
 800cd1c:	898b      	ldrh	r3, [r1, #12]
 800cd1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cd20:	079d      	lsls	r5, r3, #30
 800cd22:	4606      	mov	r6, r0
 800cd24:	460c      	mov	r4, r1
 800cd26:	d507      	bpl.n	800cd38 <__smakebuf_r+0x1c>
 800cd28:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cd2c:	6023      	str	r3, [r4, #0]
 800cd2e:	6123      	str	r3, [r4, #16]
 800cd30:	2301      	movs	r3, #1
 800cd32:	6163      	str	r3, [r4, #20]
 800cd34:	b003      	add	sp, #12
 800cd36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd38:	ab01      	add	r3, sp, #4
 800cd3a:	466a      	mov	r2, sp
 800cd3c:	f7ff ffc8 	bl	800ccd0 <__swhatbuf_r>
 800cd40:	9f00      	ldr	r7, [sp, #0]
 800cd42:	4605      	mov	r5, r0
 800cd44:	4639      	mov	r1, r7
 800cd46:	4630      	mov	r0, r6
 800cd48:	f7fe fc2e 	bl	800b5a8 <_malloc_r>
 800cd4c:	b948      	cbnz	r0, 800cd62 <__smakebuf_r+0x46>
 800cd4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd52:	059a      	lsls	r2, r3, #22
 800cd54:	d4ee      	bmi.n	800cd34 <__smakebuf_r+0x18>
 800cd56:	f023 0303 	bic.w	r3, r3, #3
 800cd5a:	f043 0302 	orr.w	r3, r3, #2
 800cd5e:	81a3      	strh	r3, [r4, #12]
 800cd60:	e7e2      	b.n	800cd28 <__smakebuf_r+0xc>
 800cd62:	89a3      	ldrh	r3, [r4, #12]
 800cd64:	6020      	str	r0, [r4, #0]
 800cd66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd6a:	81a3      	strh	r3, [r4, #12]
 800cd6c:	9b01      	ldr	r3, [sp, #4]
 800cd6e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cd72:	b15b      	cbz	r3, 800cd8c <__smakebuf_r+0x70>
 800cd74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd78:	4630      	mov	r0, r6
 800cd7a:	f000 f81d 	bl	800cdb8 <_isatty_r>
 800cd7e:	b128      	cbz	r0, 800cd8c <__smakebuf_r+0x70>
 800cd80:	89a3      	ldrh	r3, [r4, #12]
 800cd82:	f023 0303 	bic.w	r3, r3, #3
 800cd86:	f043 0301 	orr.w	r3, r3, #1
 800cd8a:	81a3      	strh	r3, [r4, #12]
 800cd8c:	89a3      	ldrh	r3, [r4, #12]
 800cd8e:	431d      	orrs	r5, r3
 800cd90:	81a5      	strh	r5, [r4, #12]
 800cd92:	e7cf      	b.n	800cd34 <__smakebuf_r+0x18>

0800cd94 <_fstat_r>:
 800cd94:	b538      	push	{r3, r4, r5, lr}
 800cd96:	4d07      	ldr	r5, [pc, #28]	@ (800cdb4 <_fstat_r+0x20>)
 800cd98:	2300      	movs	r3, #0
 800cd9a:	4604      	mov	r4, r0
 800cd9c:	4608      	mov	r0, r1
 800cd9e:	4611      	mov	r1, r2
 800cda0:	602b      	str	r3, [r5, #0]
 800cda2:	f7f4 fb6d 	bl	8001480 <_fstat>
 800cda6:	1c43      	adds	r3, r0, #1
 800cda8:	d102      	bne.n	800cdb0 <_fstat_r+0x1c>
 800cdaa:	682b      	ldr	r3, [r5, #0]
 800cdac:	b103      	cbz	r3, 800cdb0 <_fstat_r+0x1c>
 800cdae:	6023      	str	r3, [r4, #0]
 800cdb0:	bd38      	pop	{r3, r4, r5, pc}
 800cdb2:	bf00      	nop
 800cdb4:	200020f0 	.word	0x200020f0

0800cdb8 <_isatty_r>:
 800cdb8:	b538      	push	{r3, r4, r5, lr}
 800cdba:	4d06      	ldr	r5, [pc, #24]	@ (800cdd4 <_isatty_r+0x1c>)
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	4604      	mov	r4, r0
 800cdc0:	4608      	mov	r0, r1
 800cdc2:	602b      	str	r3, [r5, #0]
 800cdc4:	f7f4 fb6c 	bl	80014a0 <_isatty>
 800cdc8:	1c43      	adds	r3, r0, #1
 800cdca:	d102      	bne.n	800cdd2 <_isatty_r+0x1a>
 800cdcc:	682b      	ldr	r3, [r5, #0]
 800cdce:	b103      	cbz	r3, 800cdd2 <_isatty_r+0x1a>
 800cdd0:	6023      	str	r3, [r4, #0]
 800cdd2:	bd38      	pop	{r3, r4, r5, pc}
 800cdd4:	200020f0 	.word	0x200020f0

0800cdd8 <_init>:
 800cdd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdda:	bf00      	nop
 800cddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdde:	bc08      	pop	{r3}
 800cde0:	469e      	mov	lr, r3
 800cde2:	4770      	bx	lr

0800cde4 <_fini>:
 800cde4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cde6:	bf00      	nop
 800cde8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdea:	bc08      	pop	{r3}
 800cdec:	469e      	mov	lr, r3
 800cdee:	4770      	bx	lr
