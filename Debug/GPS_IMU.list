
GPS_IMU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd10  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000052c  0800cef0  0800cef0  0000def0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d41c  0800d41c  0000f1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d41c  0800d41c  0000e41c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d424  0800d424  0000f1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d424  0800d424  0000e424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d428  0800d428  0000e428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800d42c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f28  200001d8  0800d604  0000f1d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002100  0800d604  00010100  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034a7b  00000000  00000000  0000f208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004943  00000000  00000000  00043c83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000046e8  00000000  00000000  000485c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000360d  00000000  00000000  0004ccb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b515  00000000  00000000  000502bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00032859  00000000  00000000  0007b7d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011a8e5  00000000  00000000  000ae02b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001c8910  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000151d8  00000000  00000000  001c8954  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  001ddb2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800ced8 	.word	0x0800ced8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001dc 	.word	0x200001dc
 800021c:	0800ced8 	.word	0x0800ced8

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2uiz>:
 8000b8c:	004a      	lsls	r2, r1, #1
 8000b8e:	d211      	bcs.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b94:	d211      	bcs.n	8000bba <__aeabi_d2uiz+0x2e>
 8000b96:	d50d      	bpl.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b98:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d40e      	bmi.n	8000bc0 <__aeabi_d2uiz+0x34>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bbe:	d102      	bne.n	8000bc6 <__aeabi_d2uiz+0x3a>
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	4770      	bx	lr
 8000bc6:	f04f 0000 	mov.w	r0, #0
 8000bca:	4770      	bx	lr

08000bcc <__aeabi_uldivmod>:
 8000bcc:	b953      	cbnz	r3, 8000be4 <__aeabi_uldivmod+0x18>
 8000bce:	b94a      	cbnz	r2, 8000be4 <__aeabi_uldivmod+0x18>
 8000bd0:	2900      	cmp	r1, #0
 8000bd2:	bf08      	it	eq
 8000bd4:	2800      	cmpeq	r0, #0
 8000bd6:	bf1c      	itt	ne
 8000bd8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bdc:	f04f 30ff 	movne.w	r0, #4294967295
 8000be0:	f000 b9a0 	b.w	8000f24 <__aeabi_idiv0>
 8000be4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bec:	f000 f83c 	bl	8000c68 <__udivmoddi4>
 8000bf0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf8:	b004      	add	sp, #16
 8000bfa:	4770      	bx	lr

08000bfc <__aeabi_d2lz>:
 8000bfc:	b538      	push	{r3, r4, r5, lr}
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2300      	movs	r3, #0
 8000c02:	4604      	mov	r4, r0
 8000c04:	460d      	mov	r5, r1
 8000c06:	f7ff ff99 	bl	8000b3c <__aeabi_dcmplt>
 8000c0a:	b928      	cbnz	r0, 8000c18 <__aeabi_d2lz+0x1c>
 8000c0c:	4620      	mov	r0, r4
 8000c0e:	4629      	mov	r1, r5
 8000c10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c14:	f000 b80a 	b.w	8000c2c <__aeabi_d2ulz>
 8000c18:	4620      	mov	r0, r4
 8000c1a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c1e:	f000 f805 	bl	8000c2c <__aeabi_d2ulz>
 8000c22:	4240      	negs	r0, r0
 8000c24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c28:	bd38      	pop	{r3, r4, r5, pc}
 8000c2a:	bf00      	nop

08000c2c <__aeabi_d2ulz>:
 8000c2c:	b5d0      	push	{r4, r6, r7, lr}
 8000c2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c60 <__aeabi_d2ulz+0x34>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	4606      	mov	r6, r0
 8000c34:	460f      	mov	r7, r1
 8000c36:	f7ff fd0f 	bl	8000658 <__aeabi_dmul>
 8000c3a:	f7ff ffa7 	bl	8000b8c <__aeabi_d2uiz>
 8000c3e:	4604      	mov	r4, r0
 8000c40:	f7ff fc90 	bl	8000564 <__aeabi_ui2d>
 8000c44:	4b07      	ldr	r3, [pc, #28]	@ (8000c64 <__aeabi_d2ulz+0x38>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	f7ff fd06 	bl	8000658 <__aeabi_dmul>
 8000c4c:	4602      	mov	r2, r0
 8000c4e:	460b      	mov	r3, r1
 8000c50:	4630      	mov	r0, r6
 8000c52:	4639      	mov	r1, r7
 8000c54:	f7ff fb48 	bl	80002e8 <__aeabi_dsub>
 8000c58:	f7ff ff98 	bl	8000b8c <__aeabi_d2uiz>
 8000c5c:	4621      	mov	r1, r4
 8000c5e:	bdd0      	pop	{r4, r6, r7, pc}
 8000c60:	3df00000 	.word	0x3df00000
 8000c64:	41f00000 	.word	0x41f00000

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9d08      	ldr	r5, [sp, #32]
 8000c6e:	460c      	mov	r4, r1
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d14e      	bne.n	8000d12 <__udivmoddi4+0xaa>
 8000c74:	4694      	mov	ip, r2
 8000c76:	458c      	cmp	ip, r1
 8000c78:	4686      	mov	lr, r0
 8000c7a:	fab2 f282 	clz	r2, r2
 8000c7e:	d962      	bls.n	8000d46 <__udivmoddi4+0xde>
 8000c80:	b14a      	cbz	r2, 8000c96 <__udivmoddi4+0x2e>
 8000c82:	f1c2 0320 	rsb	r3, r2, #32
 8000c86:	4091      	lsls	r1, r2
 8000c88:	fa20 f303 	lsr.w	r3, r0, r3
 8000c8c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c90:	4319      	orrs	r1, r3
 8000c92:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c9a:	fa1f f68c 	uxth.w	r6, ip
 8000c9e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ca2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ca6:	fb07 1114 	mls	r1, r7, r4, r1
 8000caa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cae:	fb04 f106 	mul.w	r1, r4, r6
 8000cb2:	4299      	cmp	r1, r3
 8000cb4:	d90a      	bls.n	8000ccc <__udivmoddi4+0x64>
 8000cb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cba:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cbe:	f080 8112 	bcs.w	8000ee6 <__udivmoddi4+0x27e>
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	f240 810f 	bls.w	8000ee6 <__udivmoddi4+0x27e>
 8000cc8:	3c02      	subs	r4, #2
 8000cca:	4463      	add	r3, ip
 8000ccc:	1a59      	subs	r1, r3, r1
 8000cce:	fa1f f38e 	uxth.w	r3, lr
 8000cd2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cd6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cde:	fb00 f606 	mul.w	r6, r0, r6
 8000ce2:	429e      	cmp	r6, r3
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x94>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cee:	f080 80fc 	bcs.w	8000eea <__udivmoddi4+0x282>
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	f240 80f9 	bls.w	8000eea <__udivmoddi4+0x282>
 8000cf8:	4463      	add	r3, ip
 8000cfa:	3802      	subs	r0, #2
 8000cfc:	1b9b      	subs	r3, r3, r6
 8000cfe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d02:	2100      	movs	r1, #0
 8000d04:	b11d      	cbz	r5, 8000d0e <__udivmoddi4+0xa6>
 8000d06:	40d3      	lsrs	r3, r2
 8000d08:	2200      	movs	r2, #0
 8000d0a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d905      	bls.n	8000d22 <__udivmoddi4+0xba>
 8000d16:	b10d      	cbz	r5, 8000d1c <__udivmoddi4+0xb4>
 8000d18:	e9c5 0100 	strd	r0, r1, [r5]
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4608      	mov	r0, r1
 8000d20:	e7f5      	b.n	8000d0e <__udivmoddi4+0xa6>
 8000d22:	fab3 f183 	clz	r1, r3
 8000d26:	2900      	cmp	r1, #0
 8000d28:	d146      	bne.n	8000db8 <__udivmoddi4+0x150>
 8000d2a:	42a3      	cmp	r3, r4
 8000d2c:	d302      	bcc.n	8000d34 <__udivmoddi4+0xcc>
 8000d2e:	4290      	cmp	r0, r2
 8000d30:	f0c0 80f0 	bcc.w	8000f14 <__udivmoddi4+0x2ac>
 8000d34:	1a86      	subs	r6, r0, r2
 8000d36:	eb64 0303 	sbc.w	r3, r4, r3
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	2d00      	cmp	r5, #0
 8000d3e:	d0e6      	beq.n	8000d0e <__udivmoddi4+0xa6>
 8000d40:	e9c5 6300 	strd	r6, r3, [r5]
 8000d44:	e7e3      	b.n	8000d0e <__udivmoddi4+0xa6>
 8000d46:	2a00      	cmp	r2, #0
 8000d48:	f040 8090 	bne.w	8000e6c <__udivmoddi4+0x204>
 8000d4c:	eba1 040c 	sub.w	r4, r1, ip
 8000d50:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d54:	fa1f f78c 	uxth.w	r7, ip
 8000d58:	2101      	movs	r1, #1
 8000d5a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb08 4416 	mls	r4, r8, r6, r4
 8000d66:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d6a:	fb07 f006 	mul.w	r0, r7, r6
 8000d6e:	4298      	cmp	r0, r3
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0x11c>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x11a>
 8000d7c:	4298      	cmp	r0, r3
 8000d7e:	f200 80cd 	bhi.w	8000f1c <__udivmoddi4+0x2b4>
 8000d82:	4626      	mov	r6, r4
 8000d84:	1a1c      	subs	r4, r3, r0
 8000d86:	fa1f f38e 	uxth.w	r3, lr
 8000d8a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d8e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d96:	fb00 f707 	mul.w	r7, r0, r7
 8000d9a:	429f      	cmp	r7, r3
 8000d9c:	d908      	bls.n	8000db0 <__udivmoddi4+0x148>
 8000d9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000da2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000da6:	d202      	bcs.n	8000dae <__udivmoddi4+0x146>
 8000da8:	429f      	cmp	r7, r3
 8000daa:	f200 80b0 	bhi.w	8000f0e <__udivmoddi4+0x2a6>
 8000dae:	4620      	mov	r0, r4
 8000db0:	1bdb      	subs	r3, r3, r7
 8000db2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db6:	e7a5      	b.n	8000d04 <__udivmoddi4+0x9c>
 8000db8:	f1c1 0620 	rsb	r6, r1, #32
 8000dbc:	408b      	lsls	r3, r1
 8000dbe:	fa22 f706 	lsr.w	r7, r2, r6
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dc8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dcc:	ea43 030c 	orr.w	r3, r3, ip
 8000dd0:	40f4      	lsrs	r4, r6
 8000dd2:	fa00 f801 	lsl.w	r8, r0, r1
 8000dd6:	0c38      	lsrs	r0, r7, #16
 8000dd8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ddc:	fbb4 fef0 	udiv	lr, r4, r0
 8000de0:	fa1f fc87 	uxth.w	ip, r7
 8000de4:	fb00 441e 	mls	r4, r0, lr, r4
 8000de8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dec:	fb0e f90c 	mul.w	r9, lr, ip
 8000df0:	45a1      	cmp	r9, r4
 8000df2:	fa02 f201 	lsl.w	r2, r2, r1
 8000df6:	d90a      	bls.n	8000e0e <__udivmoddi4+0x1a6>
 8000df8:	193c      	adds	r4, r7, r4
 8000dfa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dfe:	f080 8084 	bcs.w	8000f0a <__udivmoddi4+0x2a2>
 8000e02:	45a1      	cmp	r9, r4
 8000e04:	f240 8081 	bls.w	8000f0a <__udivmoddi4+0x2a2>
 8000e08:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e0c:	443c      	add	r4, r7
 8000e0e:	eba4 0409 	sub.w	r4, r4, r9
 8000e12:	fa1f f983 	uxth.w	r9, r3
 8000e16:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e1a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e1e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e22:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e26:	45a4      	cmp	ip, r4
 8000e28:	d907      	bls.n	8000e3a <__udivmoddi4+0x1d2>
 8000e2a:	193c      	adds	r4, r7, r4
 8000e2c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e30:	d267      	bcs.n	8000f02 <__udivmoddi4+0x29a>
 8000e32:	45a4      	cmp	ip, r4
 8000e34:	d965      	bls.n	8000f02 <__udivmoddi4+0x29a>
 8000e36:	3b02      	subs	r3, #2
 8000e38:	443c      	add	r4, r7
 8000e3a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e3e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e42:	eba4 040c 	sub.w	r4, r4, ip
 8000e46:	429c      	cmp	r4, r3
 8000e48:	46ce      	mov	lr, r9
 8000e4a:	469c      	mov	ip, r3
 8000e4c:	d351      	bcc.n	8000ef2 <__udivmoddi4+0x28a>
 8000e4e:	d04e      	beq.n	8000eee <__udivmoddi4+0x286>
 8000e50:	b155      	cbz	r5, 8000e68 <__udivmoddi4+0x200>
 8000e52:	ebb8 030e 	subs.w	r3, r8, lr
 8000e56:	eb64 040c 	sbc.w	r4, r4, ip
 8000e5a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e5e:	40cb      	lsrs	r3, r1
 8000e60:	431e      	orrs	r6, r3
 8000e62:	40cc      	lsrs	r4, r1
 8000e64:	e9c5 6400 	strd	r6, r4, [r5]
 8000e68:	2100      	movs	r1, #0
 8000e6a:	e750      	b.n	8000d0e <__udivmoddi4+0xa6>
 8000e6c:	f1c2 0320 	rsb	r3, r2, #32
 8000e70:	fa20 f103 	lsr.w	r1, r0, r3
 8000e74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e78:	fa24 f303 	lsr.w	r3, r4, r3
 8000e7c:	4094      	lsls	r4, r2
 8000e7e:	430c      	orrs	r4, r1
 8000e80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e84:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e88:	fa1f f78c 	uxth.w	r7, ip
 8000e8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e90:	fb08 3110 	mls	r1, r8, r0, r3
 8000e94:	0c23      	lsrs	r3, r4, #16
 8000e96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e9a:	fb00 f107 	mul.w	r1, r0, r7
 8000e9e:	4299      	cmp	r1, r3
 8000ea0:	d908      	bls.n	8000eb4 <__udivmoddi4+0x24c>
 8000ea2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ea6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eaa:	d22c      	bcs.n	8000f06 <__udivmoddi4+0x29e>
 8000eac:	4299      	cmp	r1, r3
 8000eae:	d92a      	bls.n	8000f06 <__udivmoddi4+0x29e>
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	4463      	add	r3, ip
 8000eb4:	1a5b      	subs	r3, r3, r1
 8000eb6:	b2a4      	uxth	r4, r4
 8000eb8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ebc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ec0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ec4:	fb01 f307 	mul.w	r3, r1, r7
 8000ec8:	42a3      	cmp	r3, r4
 8000eca:	d908      	bls.n	8000ede <__udivmoddi4+0x276>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ed4:	d213      	bcs.n	8000efe <__udivmoddi4+0x296>
 8000ed6:	42a3      	cmp	r3, r4
 8000ed8:	d911      	bls.n	8000efe <__udivmoddi4+0x296>
 8000eda:	3902      	subs	r1, #2
 8000edc:	4464      	add	r4, ip
 8000ede:	1ae4      	subs	r4, r4, r3
 8000ee0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ee4:	e739      	b.n	8000d5a <__udivmoddi4+0xf2>
 8000ee6:	4604      	mov	r4, r0
 8000ee8:	e6f0      	b.n	8000ccc <__udivmoddi4+0x64>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e706      	b.n	8000cfc <__udivmoddi4+0x94>
 8000eee:	45c8      	cmp	r8, r9
 8000ef0:	d2ae      	bcs.n	8000e50 <__udivmoddi4+0x1e8>
 8000ef2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ef6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000efa:	3801      	subs	r0, #1
 8000efc:	e7a8      	b.n	8000e50 <__udivmoddi4+0x1e8>
 8000efe:	4631      	mov	r1, r6
 8000f00:	e7ed      	b.n	8000ede <__udivmoddi4+0x276>
 8000f02:	4603      	mov	r3, r0
 8000f04:	e799      	b.n	8000e3a <__udivmoddi4+0x1d2>
 8000f06:	4630      	mov	r0, r6
 8000f08:	e7d4      	b.n	8000eb4 <__udivmoddi4+0x24c>
 8000f0a:	46d6      	mov	lr, sl
 8000f0c:	e77f      	b.n	8000e0e <__udivmoddi4+0x1a6>
 8000f0e:	4463      	add	r3, ip
 8000f10:	3802      	subs	r0, #2
 8000f12:	e74d      	b.n	8000db0 <__udivmoddi4+0x148>
 8000f14:	4606      	mov	r6, r0
 8000f16:	4623      	mov	r3, r4
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e70f      	b.n	8000d3c <__udivmoddi4+0xd4>
 8000f1c:	3e02      	subs	r6, #2
 8000f1e:	4463      	add	r3, ip
 8000f20:	e730      	b.n	8000d84 <__udivmoddi4+0x11c>
 8000f22:	bf00      	nop

08000f24 <__aeabi_idiv0>:
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop

08000f28 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
    RTOS_Init();
 8000f2c:	f000 fc70 	bl	8001810 <RTOS_Init>
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000f30:	4a04      	ldr	r2, [pc, #16]	@ (8000f44 <MX_FREERTOS_Init+0x1c>)
 8000f32:	2100      	movs	r1, #0
 8000f34:	4804      	ldr	r0, [pc, #16]	@ (8000f48 <MX_FREERTOS_Init+0x20>)
 8000f36:	f005 fd17 	bl	8006968 <osThreadNew>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	4a03      	ldr	r2, [pc, #12]	@ (8000f4c <MX_FREERTOS_Init+0x24>)
 8000f3e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	0800cf5c 	.word	0x0800cf5c
 8000f48:	08000f51 	.word	0x08000f51
 8000f4c:	200001f4 	.word	0x200001f4

08000f50 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f58:	2001      	movs	r0, #1
 8000f5a:	f005 fd97 	bl	8006a8c <osDelay>
 8000f5e:	e7fb      	b.n	8000f58 <StartDefaultTask+0x8>

08000f60 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000f64:	4b20      	ldr	r3, [pc, #128]	@ (8000fe8 <MX_FDCAN1_Init+0x88>)
 8000f66:	4a21      	ldr	r2, [pc, #132]	@ (8000fec <MX_FDCAN1_Init+0x8c>)
 8000f68:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000f6a:	4b1f      	ldr	r3, [pc, #124]	@ (8000fe8 <MX_FDCAN1_Init+0x88>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8000f70:	4b1d      	ldr	r3, [pc, #116]	@ (8000fe8 <MX_FDCAN1_Init+0x88>)
 8000f72:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000f76:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000f78:	4b1b      	ldr	r3, [pc, #108]	@ (8000fe8 <MX_FDCAN1_Init+0x88>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000f7e:	4b1a      	ldr	r3, [pc, #104]	@ (8000fe8 <MX_FDCAN1_Init+0x88>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000f84:	4b18      	ldr	r3, [pc, #96]	@ (8000fe8 <MX_FDCAN1_Init+0x88>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000f8a:	4b17      	ldr	r3, [pc, #92]	@ (8000fe8 <MX_FDCAN1_Init+0x88>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 8000f90:	4b15      	ldr	r3, [pc, #84]	@ (8000fe8 <MX_FDCAN1_Init+0x88>)
 8000f92:	2202      	movs	r2, #2
 8000f94:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 8000f96:	4b14      	ldr	r3, [pc, #80]	@ (8000fe8 <MX_FDCAN1_Init+0x88>)
 8000f98:	2202      	movs	r2, #2
 8000f9a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 31;
 8000f9c:	4b12      	ldr	r3, [pc, #72]	@ (8000fe8 <MX_FDCAN1_Init+0x88>)
 8000f9e:	221f      	movs	r2, #31
 8000fa0:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 8;
 8000fa2:	4b11      	ldr	r3, [pc, #68]	@ (8000fe8 <MX_FDCAN1_Init+0x88>)
 8000fa4:	2208      	movs	r2, #8
 8000fa6:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 2;
 8000fa8:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe8 <MX_FDCAN1_Init+0x88>)
 8000faa:	2202      	movs	r2, #2
 8000fac:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000fae:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe8 <MX_FDCAN1_Init+0x88>)
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe8 <MX_FDCAN1_Init+0x88>)
 8000fb6:	2205      	movs	r2, #5
 8000fb8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 8000fba:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe8 <MX_FDCAN1_Init+0x88>)
 8000fbc:	2202      	movs	r2, #2
 8000fbe:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 8000fc0:	4b09      	ldr	r3, [pc, #36]	@ (8000fe8 <MX_FDCAN1_Init+0x88>)
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000fc6:	4b08      	ldr	r3, [pc, #32]	@ (8000fe8 <MX_FDCAN1_Init+0x88>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000fcc:	4b06      	ldr	r3, [pc, #24]	@ (8000fe8 <MX_FDCAN1_Init+0x88>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000fd2:	4805      	ldr	r0, [pc, #20]	@ (8000fe8 <MX_FDCAN1_Init+0x88>)
 8000fd4:	f001 fb30 	bl	8002638 <HAL_FDCAN_Init>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8000fde:	f000 f90f 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	200001f8 	.word	0x200001f8
 8000fec:	40006400 	.word	0x40006400

08000ff0 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b09e      	sub	sp, #120	@ 0x78
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]
 8001006:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001008:	f107 0310 	add.w	r3, r7, #16
 800100c:	2254      	movs	r2, #84	@ 0x54
 800100e:	2100      	movs	r1, #0
 8001010:	4618      	mov	r0, r3
 8001012:	f009 fe7a 	bl	800ad0a <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a20      	ldr	r2, [pc, #128]	@ (800109c <HAL_FDCAN_MspInit+0xac>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d139      	bne.n	8001094 <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001020:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001024:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001026:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800102a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800102c:	f107 0310 	add.w	r3, r7, #16
 8001030:	4618      	mov	r0, r3
 8001032:	f002 fd45 	bl	8003ac0 <HAL_RCCEx_PeriphCLKConfig>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 800103c:	f000 f8e0 	bl	8001200 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001040:	4b17      	ldr	r3, [pc, #92]	@ (80010a0 <HAL_FDCAN_MspInit+0xb0>)
 8001042:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001044:	4a16      	ldr	r2, [pc, #88]	@ (80010a0 <HAL_FDCAN_MspInit+0xb0>)
 8001046:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800104a:	6593      	str	r3, [r2, #88]	@ 0x58
 800104c:	4b14      	ldr	r3, [pc, #80]	@ (80010a0 <HAL_FDCAN_MspInit+0xb0>)
 800104e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001050:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001058:	4b11      	ldr	r3, [pc, #68]	@ (80010a0 <HAL_FDCAN_MspInit+0xb0>)
 800105a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800105c:	4a10      	ldr	r2, [pc, #64]	@ (80010a0 <HAL_FDCAN_MspInit+0xb0>)
 800105e:	f043 0301 	orr.w	r3, r3, #1
 8001062:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001064:	4b0e      	ldr	r3, [pc, #56]	@ (80010a0 <HAL_FDCAN_MspInit+0xb0>)
 8001066:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001068:	f003 0301 	and.w	r3, r3, #1
 800106c:	60bb      	str	r3, [r7, #8]
 800106e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001070:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001074:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001076:	2302      	movs	r3, #2
 8001078:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107e:	2300      	movs	r3, #0
 8001080:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001082:	2309      	movs	r3, #9
 8001084:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001086:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800108a:	4619      	mov	r1, r3
 800108c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001090:	f001 fd80 	bl	8002b94 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8001094:	bf00      	nop
 8001096:	3778      	adds	r7, #120	@ 0x78
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40006400 	.word	0x40006400
 80010a0:	40021000 	.word	0x40021000

080010a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001118 <MX_GPIO_Init+0x74>)
 80010ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ae:	4a1a      	ldr	r2, [pc, #104]	@ (8001118 <MX_GPIO_Init+0x74>)
 80010b0:	f043 0320 	orr.w	r3, r3, #32
 80010b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010b6:	4b18      	ldr	r3, [pc, #96]	@ (8001118 <MX_GPIO_Init+0x74>)
 80010b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ba:	f003 0320 	and.w	r3, r3, #32
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c2:	4b15      	ldr	r3, [pc, #84]	@ (8001118 <MX_GPIO_Init+0x74>)
 80010c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c6:	4a14      	ldr	r2, [pc, #80]	@ (8001118 <MX_GPIO_Init+0x74>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ce:	4b12      	ldr	r3, [pc, #72]	@ (8001118 <MX_GPIO_Init+0x74>)
 80010d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	60bb      	str	r3, [r7, #8]
 80010d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010da:	4b0f      	ldr	r3, [pc, #60]	@ (8001118 <MX_GPIO_Init+0x74>)
 80010dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010de:	4a0e      	ldr	r2, [pc, #56]	@ (8001118 <MX_GPIO_Init+0x74>)
 80010e0:	f043 0304 	orr.w	r3, r3, #4
 80010e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001118 <MX_GPIO_Init+0x74>)
 80010e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ea:	f003 0304 	and.w	r3, r3, #4
 80010ee:	607b      	str	r3, [r7, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f2:	4b09      	ldr	r3, [pc, #36]	@ (8001118 <MX_GPIO_Init+0x74>)
 80010f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f6:	4a08      	ldr	r2, [pc, #32]	@ (8001118 <MX_GPIO_Init+0x74>)
 80010f8:	f043 0302 	orr.w	r3, r3, #2
 80010fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010fe:	4b06      	ldr	r3, [pc, #24]	@ (8001118 <MX_GPIO_Init+0x74>)
 8001100:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001102:	f003 0302 	and.w	r3, r3, #2
 8001106:	603b      	str	r3, [r7, #0]
 8001108:	683b      	ldr	r3, [r7, #0]

}
 800110a:	bf00      	nop
 800110c:	3714      	adds	r7, #20
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	40021000 	.word	0x40021000

0800111c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001120:	f001 f8b4 	bl	800228c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001124:	f000 f810 	bl	8001148 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001128:	f7ff ffbc 	bl	80010a4 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 800112c:	f7ff ff18 	bl	8000f60 <MX_FDCAN1_Init>
  MX_USART1_UART_Init();
 8001130:	f000 fa0c 	bl	800154c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001134:	f000 fa56 	bl	80015e4 <MX_USART2_UART_Init>
  // LOG_BESTPOS command

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001138:	f005 fbcc 	bl	80068d4 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800113c:	f7ff fef4 	bl	8000f28 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001140:	f005 fbec 	bl	800691c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001144:	bf00      	nop
 8001146:	e7fd      	b.n	8001144 <main+0x28>

08001148 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b094      	sub	sp, #80	@ 0x50
 800114c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800114e:	f107 0318 	add.w	r3, r7, #24
 8001152:	2238      	movs	r2, #56	@ 0x38
 8001154:	2100      	movs	r1, #0
 8001156:	4618      	mov	r0, r3
 8001158:	f009 fdd7 	bl	800ad0a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800115c:	1d3b      	adds	r3, r7, #4
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]
 8001166:	60da      	str	r2, [r3, #12]
 8001168:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800116a:	2000      	movs	r0, #0
 800116c:	f001 fe94 	bl	8002e98 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001170:	2301      	movs	r3, #1
 8001172:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001174:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001178:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800117a:	2302      	movs	r3, #2
 800117c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800117e:	2303      	movs	r3, #3
 8001180:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV3;
 8001182:	2303      	movs	r3, #3
 8001184:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001186:	2328      	movs	r3, #40	@ 0x28
 8001188:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800118a:	2302      	movs	r3, #2
 800118c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800118e:	2302      	movs	r3, #2
 8001190:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001192:	2302      	movs	r3, #2
 8001194:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001196:	f107 0318 	add.w	r3, r7, #24
 800119a:	4618      	mov	r0, r3
 800119c:	f001 ff30 	bl	8003000 <HAL_RCC_OscConfig>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <SystemClock_Config+0x62>
  {
    Error_Handler();
 80011a6:	f000 f82b 	bl	8001200 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011aa:	230f      	movs	r3, #15
 80011ac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ae:	2303      	movs	r3, #3
 80011b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011b2:	2300      	movs	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011c0:	1d3b      	adds	r3, r7, #4
 80011c2:	2104      	movs	r1, #4
 80011c4:	4618      	mov	r0, r3
 80011c6:	f002 fa2d 	bl	8003624 <HAL_RCC_ClockConfig>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80011d0:	f000 f816 	bl	8001200 <Error_Handler>
  }
}
 80011d4:	bf00      	nop
 80011d6:	3750      	adds	r7, #80	@ 0x50
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a04      	ldr	r2, [pc, #16]	@ (80011fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d101      	bne.n	80011f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80011ee:	f001 f865 	bl	80022bc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40001000 	.word	0x40001000

08001200 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001204:	b672      	cpsid	i
}
 8001206:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001208:	bf00      	nop
 800120a:	e7fd      	b.n	8001208 <Error_Handler+0x8>

0800120c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001212:	4b12      	ldr	r3, [pc, #72]	@ (800125c <HAL_MspInit+0x50>)
 8001214:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001216:	4a11      	ldr	r2, [pc, #68]	@ (800125c <HAL_MspInit+0x50>)
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	6613      	str	r3, [r2, #96]	@ 0x60
 800121e:	4b0f      	ldr	r3, [pc, #60]	@ (800125c <HAL_MspInit+0x50>)
 8001220:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	607b      	str	r3, [r7, #4]
 8001228:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800122a:	4b0c      	ldr	r3, [pc, #48]	@ (800125c <HAL_MspInit+0x50>)
 800122c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800122e:	4a0b      	ldr	r2, [pc, #44]	@ (800125c <HAL_MspInit+0x50>)
 8001230:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001234:	6593      	str	r3, [r2, #88]	@ 0x58
 8001236:	4b09      	ldr	r3, [pc, #36]	@ (800125c <HAL_MspInit+0x50>)
 8001238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800123a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800123e:	603b      	str	r3, [r7, #0]
 8001240:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001242:	2200      	movs	r2, #0
 8001244:	210f      	movs	r1, #15
 8001246:	f06f 0001 	mvn.w	r0, #1
 800124a:	f001 f90d 	bl	8002468 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800124e:	f001 fec7 	bl	8002fe0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40021000 	.word	0x40021000

08001260 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b08c      	sub	sp, #48	@ 0x30
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001268:	2300      	movs	r3, #0
 800126a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 800126c:	2300      	movs	r3, #0
 800126e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001270:	4b2d      	ldr	r3, [pc, #180]	@ (8001328 <HAL_InitTick+0xc8>)
 8001272:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001274:	4a2c      	ldr	r2, [pc, #176]	@ (8001328 <HAL_InitTick+0xc8>)
 8001276:	f043 0310 	orr.w	r3, r3, #16
 800127a:	6593      	str	r3, [r2, #88]	@ 0x58
 800127c:	4b2a      	ldr	r3, [pc, #168]	@ (8001328 <HAL_InitTick+0xc8>)
 800127e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001280:	f003 0310 	and.w	r3, r3, #16
 8001284:	60bb      	str	r3, [r7, #8]
 8001286:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001288:	f107 020c 	add.w	r2, r7, #12
 800128c:	f107 0310 	add.w	r3, r7, #16
 8001290:	4611      	mov	r1, r2
 8001292:	4618      	mov	r0, r3
 8001294:	f002 fb9c 	bl	80039d0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001298:	f002 fb6e 	bl	8003978 <HAL_RCC_GetPCLK1Freq>
 800129c:	4603      	mov	r3, r0
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012a4:	4a21      	ldr	r2, [pc, #132]	@ (800132c <HAL_InitTick+0xcc>)
 80012a6:	fba2 2303 	umull	r2, r3, r2, r3
 80012aa:	0c9b      	lsrs	r3, r3, #18
 80012ac:	3b01      	subs	r3, #1
 80012ae:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80012b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001330 <HAL_InitTick+0xd0>)
 80012b2:	4a20      	ldr	r2, [pc, #128]	@ (8001334 <HAL_InitTick+0xd4>)
 80012b4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80012b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001330 <HAL_InitTick+0xd0>)
 80012b8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80012bc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80012be:	4a1c      	ldr	r2, [pc, #112]	@ (8001330 <HAL_InitTick+0xd0>)
 80012c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012c2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80012c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001330 <HAL_InitTick+0xd0>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ca:	4b19      	ldr	r3, [pc, #100]	@ (8001330 <HAL_InitTick+0xd0>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80012d0:	4817      	ldr	r0, [pc, #92]	@ (8001330 <HAL_InitTick+0xd0>)
 80012d2:	f002 fe43 	bl	8003f5c <HAL_TIM_Base_Init>
 80012d6:	4603      	mov	r3, r0
 80012d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80012dc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d11b      	bne.n	800131c <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80012e4:	4812      	ldr	r0, [pc, #72]	@ (8001330 <HAL_InitTick+0xd0>)
 80012e6:	f002 fe9b 	bl	8004020 <HAL_TIM_Base_Start_IT>
 80012ea:	4603      	mov	r3, r0
 80012ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80012f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d111      	bne.n	800131c <HAL_InitTick+0xbc>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80012f8:	2036      	movs	r0, #54	@ 0x36
 80012fa:	f001 f8cf 	bl	800249c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2b0f      	cmp	r3, #15
 8001302:	d808      	bhi.n	8001316 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001304:	2200      	movs	r2, #0
 8001306:	6879      	ldr	r1, [r7, #4]
 8001308:	2036      	movs	r0, #54	@ 0x36
 800130a:	f001 f8ad 	bl	8002468 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800130e:	4a0a      	ldr	r2, [pc, #40]	@ (8001338 <HAL_InitTick+0xd8>)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6013      	str	r3, [r2, #0]
 8001314:	e002      	b.n	800131c <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800131c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001320:	4618      	mov	r0, r3
 8001322:	3730      	adds	r7, #48	@ 0x30
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	40021000 	.word	0x40021000
 800132c:	431bde83 	.word	0x431bde83
 8001330:	2000025c 	.word	0x2000025c
 8001334:	40001000 	.word	0x40001000
 8001338:	20000004 	.word	0x20000004

0800133c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001340:	bf00      	nop
 8001342:	e7fd      	b.n	8001340 <NMI_Handler+0x4>

08001344 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001348:	bf00      	nop
 800134a:	e7fd      	b.n	8001348 <HardFault_Handler+0x4>

0800134c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001350:	bf00      	nop
 8001352:	e7fd      	b.n	8001350 <MemManage_Handler+0x4>

08001354 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001358:	bf00      	nop
 800135a:	e7fd      	b.n	8001358 <BusFault_Handler+0x4>

0800135c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001360:	bf00      	nop
 8001362:	e7fd      	b.n	8001360 <UsageFault_Handler+0x4>

08001364 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
	...

08001374 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001378:	4802      	ldr	r0, [pc, #8]	@ (8001384 <USART1_IRQHandler+0x10>)
 800137a:	f003 fa65 	bl	8004848 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	200002ac 	.word	0x200002ac

08001388 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800138c:	4802      	ldr	r0, [pc, #8]	@ (8001398 <TIM6_DAC_IRQHandler+0x10>)
 800138e:	f002 febf 	bl	8004110 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	2000025c 	.word	0x2000025c

0800139c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  return 1;
 80013a0:	2301      	movs	r3, #1
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <_kill>:

int _kill(int pid, int sig)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80013b6:	f009 fd65 	bl	800ae84 <__errno>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2216      	movs	r2, #22
 80013be:	601a      	str	r2, [r3, #0]
  return -1;
 80013c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <_exit>:

void _exit (int status)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80013d4:	f04f 31ff 	mov.w	r1, #4294967295
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f7ff ffe7 	bl	80013ac <_kill>
  while (1) {}    /* Make sure we hang here */
 80013de:	bf00      	nop
 80013e0:	e7fd      	b.n	80013de <_exit+0x12>

080013e2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b086      	sub	sp, #24
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	60f8      	str	r0, [r7, #12]
 80013ea:	60b9      	str	r1, [r7, #8]
 80013ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ee:	2300      	movs	r3, #0
 80013f0:	617b      	str	r3, [r7, #20]
 80013f2:	e00a      	b.n	800140a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013f4:	f3af 8000 	nop.w
 80013f8:	4601      	mov	r1, r0
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	1c5a      	adds	r2, r3, #1
 80013fe:	60ba      	str	r2, [r7, #8]
 8001400:	b2ca      	uxtb	r2, r1
 8001402:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	3301      	adds	r3, #1
 8001408:	617b      	str	r3, [r7, #20]
 800140a:	697a      	ldr	r2, [r7, #20]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	429a      	cmp	r2, r3
 8001410:	dbf0      	blt.n	80013f4 <_read+0x12>
  }

  return len;
 8001412:	687b      	ldr	r3, [r7, #4]
}
 8001414:	4618      	mov	r0, r3
 8001416:	3718      	adds	r7, #24
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]
 800142c:	e009      	b.n	8001442 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	1c5a      	adds	r2, r3, #1
 8001432:	60ba      	str	r2, [r7, #8]
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	4618      	mov	r0, r3
 8001438:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	3301      	adds	r3, #1
 8001440:	617b      	str	r3, [r7, #20]
 8001442:	697a      	ldr	r2, [r7, #20]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	429a      	cmp	r2, r3
 8001448:	dbf1      	blt.n	800142e <_write+0x12>
  }
  return len;
 800144a:	687b      	ldr	r3, [r7, #4]
}
 800144c:	4618      	mov	r0, r3
 800144e:	3718      	adds	r7, #24
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <_close>:

int _close(int file)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800145c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001460:	4618      	mov	r0, r3
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800147c:	605a      	str	r2, [r3, #4]
  return 0;
 800147e:	2300      	movs	r3, #0
}
 8001480:	4618      	mov	r0, r3
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <_isatty>:

int _isatty(int file)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001494:	2301      	movs	r3, #1
}
 8001496:	4618      	mov	r0, r3
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr

080014a2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014a2:	b480      	push	{r7}
 80014a4:	b085      	sub	sp, #20
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	60f8      	str	r0, [r7, #12]
 80014aa:	60b9      	str	r1, [r7, #8]
 80014ac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014ae:	2300      	movs	r3, #0
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3714      	adds	r7, #20
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014c4:	4a14      	ldr	r2, [pc, #80]	@ (8001518 <_sbrk+0x5c>)
 80014c6:	4b15      	ldr	r3, [pc, #84]	@ (800151c <_sbrk+0x60>)
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014d0:	4b13      	ldr	r3, [pc, #76]	@ (8001520 <_sbrk+0x64>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d102      	bne.n	80014de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014d8:	4b11      	ldr	r3, [pc, #68]	@ (8001520 <_sbrk+0x64>)
 80014da:	4a12      	ldr	r2, [pc, #72]	@ (8001524 <_sbrk+0x68>)
 80014dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014de:	4b10      	ldr	r3, [pc, #64]	@ (8001520 <_sbrk+0x64>)
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4413      	add	r3, r2
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d207      	bcs.n	80014fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014ec:	f009 fcca 	bl	800ae84 <__errno>
 80014f0:	4603      	mov	r3, r0
 80014f2:	220c      	movs	r2, #12
 80014f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014f6:	f04f 33ff 	mov.w	r3, #4294967295
 80014fa:	e009      	b.n	8001510 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014fc:	4b08      	ldr	r3, [pc, #32]	@ (8001520 <_sbrk+0x64>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001502:	4b07      	ldr	r3, [pc, #28]	@ (8001520 <_sbrk+0x64>)
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4413      	add	r3, r2
 800150a:	4a05      	ldr	r2, [pc, #20]	@ (8001520 <_sbrk+0x64>)
 800150c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800150e:	68fb      	ldr	r3, [r7, #12]
}
 8001510:	4618      	mov	r0, r3
 8001512:	3718      	adds	r7, #24
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	20020000 	.word	0x20020000
 800151c:	00000400 	.word	0x00000400
 8001520:	200002a8 	.word	0x200002a8
 8001524:	20002100 	.word	0x20002100

08001528 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800152c:	4b06      	ldr	r3, [pc, #24]	@ (8001548 <SystemInit+0x20>)
 800152e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001532:	4a05      	ldr	r2, [pc, #20]	@ (8001548 <SystemInit+0x20>)
 8001534:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001538:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800153c:	bf00      	nop
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	e000ed00 	.word	0xe000ed00

0800154c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001550:	4b22      	ldr	r3, [pc, #136]	@ (80015dc <MX_USART1_UART_Init+0x90>)
 8001552:	4a23      	ldr	r2, [pc, #140]	@ (80015e0 <MX_USART1_UART_Init+0x94>)
 8001554:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8001556:	4b21      	ldr	r3, [pc, #132]	@ (80015dc <MX_USART1_UART_Init+0x90>)
 8001558:	f44f 22e1 	mov.w	r2, #460800	@ 0x70800
 800155c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800155e:	4b1f      	ldr	r3, [pc, #124]	@ (80015dc <MX_USART1_UART_Init+0x90>)
 8001560:	2200      	movs	r2, #0
 8001562:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001564:	4b1d      	ldr	r3, [pc, #116]	@ (80015dc <MX_USART1_UART_Init+0x90>)
 8001566:	2200      	movs	r2, #0
 8001568:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800156a:	4b1c      	ldr	r3, [pc, #112]	@ (80015dc <MX_USART1_UART_Init+0x90>)
 800156c:	2200      	movs	r2, #0
 800156e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001570:	4b1a      	ldr	r3, [pc, #104]	@ (80015dc <MX_USART1_UART_Init+0x90>)
 8001572:	220c      	movs	r2, #12
 8001574:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001576:	4b19      	ldr	r3, [pc, #100]	@ (80015dc <MX_USART1_UART_Init+0x90>)
 8001578:	2200      	movs	r2, #0
 800157a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800157c:	4b17      	ldr	r3, [pc, #92]	@ (80015dc <MX_USART1_UART_Init+0x90>)
 800157e:	2200      	movs	r2, #0
 8001580:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001582:	4b16      	ldr	r3, [pc, #88]	@ (80015dc <MX_USART1_UART_Init+0x90>)
 8001584:	2200      	movs	r2, #0
 8001586:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001588:	4b14      	ldr	r3, [pc, #80]	@ (80015dc <MX_USART1_UART_Init+0x90>)
 800158a:	2200      	movs	r2, #0
 800158c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800158e:	4b13      	ldr	r3, [pc, #76]	@ (80015dc <MX_USART1_UART_Init+0x90>)
 8001590:	2200      	movs	r2, #0
 8001592:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001594:	4811      	ldr	r0, [pc, #68]	@ (80015dc <MX_USART1_UART_Init+0x90>)
 8001596:	f003 f82d 	bl	80045f4 <HAL_UART_Init>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80015a0:	f7ff fe2e 	bl	8001200 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015a4:	2100      	movs	r1, #0
 80015a6:	480d      	ldr	r0, [pc, #52]	@ (80015dc <MX_USART1_UART_Init+0x90>)
 80015a8:	f005 f885 	bl	80066b6 <HAL_UARTEx_SetTxFifoThreshold>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80015b2:	f7ff fe25 	bl	8001200 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015b6:	2100      	movs	r1, #0
 80015b8:	4808      	ldr	r0, [pc, #32]	@ (80015dc <MX_USART1_UART_Init+0x90>)
 80015ba:	f005 f8ba 	bl	8006732 <HAL_UARTEx_SetRxFifoThreshold>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80015c4:	f7ff fe1c 	bl	8001200 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80015c8:	4804      	ldr	r0, [pc, #16]	@ (80015dc <MX_USART1_UART_Init+0x90>)
 80015ca:	f005 f83b 	bl	8006644 <HAL_UARTEx_DisableFifoMode>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80015d4:	f7ff fe14 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015d8:	bf00      	nop
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	200002ac 	.word	0x200002ac
 80015e0:	40013800 	.word	0x40013800

080015e4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015e8:	4b22      	ldr	r3, [pc, #136]	@ (8001674 <MX_USART2_UART_Init+0x90>)
 80015ea:	4a23      	ldr	r2, [pc, #140]	@ (8001678 <MX_USART2_UART_Init+0x94>)
 80015ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015ee:	4b21      	ldr	r3, [pc, #132]	@ (8001674 <MX_USART2_UART_Init+0x90>)
 80015f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001674 <MX_USART2_UART_Init+0x90>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001674 <MX_USART2_UART_Init+0x90>)
 80015fe:	2200      	movs	r2, #0
 8001600:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001602:	4b1c      	ldr	r3, [pc, #112]	@ (8001674 <MX_USART2_UART_Init+0x90>)
 8001604:	2200      	movs	r2, #0
 8001606:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001608:	4b1a      	ldr	r3, [pc, #104]	@ (8001674 <MX_USART2_UART_Init+0x90>)
 800160a:	220c      	movs	r2, #12
 800160c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800160e:	4b19      	ldr	r3, [pc, #100]	@ (8001674 <MX_USART2_UART_Init+0x90>)
 8001610:	2200      	movs	r2, #0
 8001612:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001614:	4b17      	ldr	r3, [pc, #92]	@ (8001674 <MX_USART2_UART_Init+0x90>)
 8001616:	2200      	movs	r2, #0
 8001618:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800161a:	4b16      	ldr	r3, [pc, #88]	@ (8001674 <MX_USART2_UART_Init+0x90>)
 800161c:	2200      	movs	r2, #0
 800161e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001620:	4b14      	ldr	r3, [pc, #80]	@ (8001674 <MX_USART2_UART_Init+0x90>)
 8001622:	2200      	movs	r2, #0
 8001624:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001626:	4b13      	ldr	r3, [pc, #76]	@ (8001674 <MX_USART2_UART_Init+0x90>)
 8001628:	2200      	movs	r2, #0
 800162a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800162c:	4811      	ldr	r0, [pc, #68]	@ (8001674 <MX_USART2_UART_Init+0x90>)
 800162e:	f002 ffe1 	bl	80045f4 <HAL_UART_Init>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001638:	f7ff fde2 	bl	8001200 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800163c:	2100      	movs	r1, #0
 800163e:	480d      	ldr	r0, [pc, #52]	@ (8001674 <MX_USART2_UART_Init+0x90>)
 8001640:	f005 f839 	bl	80066b6 <HAL_UARTEx_SetTxFifoThreshold>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800164a:	f7ff fdd9 	bl	8001200 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800164e:	2100      	movs	r1, #0
 8001650:	4808      	ldr	r0, [pc, #32]	@ (8001674 <MX_USART2_UART_Init+0x90>)
 8001652:	f005 f86e 	bl	8006732 <HAL_UARTEx_SetRxFifoThreshold>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800165c:	f7ff fdd0 	bl	8001200 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001660:	4804      	ldr	r0, [pc, #16]	@ (8001674 <MX_USART2_UART_Init+0x90>)
 8001662:	f004 ffef 	bl	8006644 <HAL_UARTEx_DisableFifoMode>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800166c:	f7ff fdc8 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001670:	bf00      	nop
 8001672:	bd80      	pop	{r7, pc}
 8001674:	20000340 	.word	0x20000340
 8001678:	40004400 	.word	0x40004400

0800167c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b0a0      	sub	sp, #128	@ 0x80
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001684:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	60da      	str	r2, [r3, #12]
 8001692:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001694:	f107 0318 	add.w	r3, r7, #24
 8001698:	2254      	movs	r2, #84	@ 0x54
 800169a:	2100      	movs	r1, #0
 800169c:	4618      	mov	r0, r3
 800169e:	f009 fb34 	bl	800ad0a <memset>
  if(uartHandle->Instance==USART1)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a41      	ldr	r2, [pc, #260]	@ (80017ac <HAL_UART_MspInit+0x130>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d13e      	bne.n	800172a <HAL_UART_MspInit+0xae>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80016ac:	2301      	movs	r3, #1
 80016ae:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80016b0:	2300      	movs	r3, #0
 80016b2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016b4:	f107 0318 	add.w	r3, r7, #24
 80016b8:	4618      	mov	r0, r3
 80016ba:	f002 fa01 	bl	8003ac0 <HAL_RCCEx_PeriphCLKConfig>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80016c4:	f7ff fd9c 	bl	8001200 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016c8:	4b39      	ldr	r3, [pc, #228]	@ (80017b0 <HAL_UART_MspInit+0x134>)
 80016ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016cc:	4a38      	ldr	r2, [pc, #224]	@ (80017b0 <HAL_UART_MspInit+0x134>)
 80016ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016d2:	6613      	str	r3, [r2, #96]	@ 0x60
 80016d4:	4b36      	ldr	r3, [pc, #216]	@ (80017b0 <HAL_UART_MspInit+0x134>)
 80016d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016dc:	617b      	str	r3, [r7, #20]
 80016de:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016e0:	4b33      	ldr	r3, [pc, #204]	@ (80017b0 <HAL_UART_MspInit+0x134>)
 80016e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016e4:	4a32      	ldr	r2, [pc, #200]	@ (80017b0 <HAL_UART_MspInit+0x134>)
 80016e6:	f043 0304 	orr.w	r3, r3, #4
 80016ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016ec:	4b30      	ldr	r3, [pc, #192]	@ (80017b0 <HAL_UART_MspInit+0x134>)
 80016ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016f0:	f003 0304 	and.w	r3, r3, #4
 80016f4:	613b      	str	r3, [r7, #16]
 80016f6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80016f8:	2330      	movs	r3, #48	@ 0x30
 80016fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fc:	2302      	movs	r3, #2
 80016fe:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001704:	2300      	movs	r3, #0
 8001706:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001708:	2307      	movs	r3, #7
 800170a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800170c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001710:	4619      	mov	r1, r3
 8001712:	4828      	ldr	r0, [pc, #160]	@ (80017b4 <HAL_UART_MspInit+0x138>)
 8001714:	f001 fa3e 	bl	8002b94 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001718:	2200      	movs	r2, #0
 800171a:	2105      	movs	r1, #5
 800171c:	2025      	movs	r0, #37	@ 0x25
 800171e:	f000 fea3 	bl	8002468 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001722:	2025      	movs	r0, #37	@ 0x25
 8001724:	f000 feba 	bl	800249c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001728:	e03b      	b.n	80017a2 <HAL_UART_MspInit+0x126>
  else if(uartHandle->Instance==USART2)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a22      	ldr	r2, [pc, #136]	@ (80017b8 <HAL_UART_MspInit+0x13c>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d136      	bne.n	80017a2 <HAL_UART_MspInit+0x126>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001734:	2302      	movs	r3, #2
 8001736:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001738:	2300      	movs	r3, #0
 800173a:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800173c:	f107 0318 	add.w	r3, r7, #24
 8001740:	4618      	mov	r0, r3
 8001742:	f002 f9bd 	bl	8003ac0 <HAL_RCCEx_PeriphCLKConfig>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 800174c:	f7ff fd58 	bl	8001200 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001750:	4b17      	ldr	r3, [pc, #92]	@ (80017b0 <HAL_UART_MspInit+0x134>)
 8001752:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001754:	4a16      	ldr	r2, [pc, #88]	@ (80017b0 <HAL_UART_MspInit+0x134>)
 8001756:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800175a:	6593      	str	r3, [r2, #88]	@ 0x58
 800175c:	4b14      	ldr	r3, [pc, #80]	@ (80017b0 <HAL_UART_MspInit+0x134>)
 800175e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001760:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001768:	4b11      	ldr	r3, [pc, #68]	@ (80017b0 <HAL_UART_MspInit+0x134>)
 800176a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800176c:	4a10      	ldr	r2, [pc, #64]	@ (80017b0 <HAL_UART_MspInit+0x134>)
 800176e:	f043 0301 	orr.w	r3, r3, #1
 8001772:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001774:	4b0e      	ldr	r3, [pc, #56]	@ (80017b0 <HAL_UART_MspInit+0x134>)
 8001776:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001778:	f003 0301 	and.w	r3, r3, #1
 800177c:	60bb      	str	r3, [r7, #8]
 800177e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001780:	230c      	movs	r3, #12
 8001782:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001784:	2302      	movs	r3, #2
 8001786:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178c:	2300      	movs	r3, #0
 800178e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001790:	2307      	movs	r3, #7
 8001792:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001794:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001798:	4619      	mov	r1, r3
 800179a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800179e:	f001 f9f9 	bl	8002b94 <HAL_GPIO_Init>
}
 80017a2:	bf00      	nop
 80017a4:	3780      	adds	r7, #128	@ 0x80
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40013800 	.word	0x40013800
 80017b0:	40021000 	.word	0x40021000
 80017b4:	48000800 	.word	0x48000800
 80017b8:	40004400 	.word	0x40004400

080017bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80017bc:	480d      	ldr	r0, [pc, #52]	@ (80017f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80017be:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017c0:	f7ff feb2 	bl	8001528 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017c4:	480c      	ldr	r0, [pc, #48]	@ (80017f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80017c6:	490d      	ldr	r1, [pc, #52]	@ (80017fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80017c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001800 <LoopForever+0xe>)
  movs r3, #0
 80017ca:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80017cc:	e002      	b.n	80017d4 <LoopCopyDataInit>

080017ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017d2:	3304      	adds	r3, #4

080017d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017d8:	d3f9      	bcc.n	80017ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017da:	4a0a      	ldr	r2, [pc, #40]	@ (8001804 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017dc:	4c0a      	ldr	r4, [pc, #40]	@ (8001808 <LoopForever+0x16>)
  movs r3, #0
 80017de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017e0:	e001      	b.n	80017e6 <LoopFillZerobss>

080017e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017e4:	3204      	adds	r2, #4

080017e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017e8:	d3fb      	bcc.n	80017e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017ea:	f009 fb51 	bl	800ae90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017ee:	f7ff fc95 	bl	800111c <main>

080017f2 <LoopForever>:

LoopForever:
    b LoopForever
 80017f2:	e7fe      	b.n	80017f2 <LoopForever>
  ldr   r0, =_estack
 80017f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017fc:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001800:	0800d42c 	.word	0x0800d42c
  ldr r2, =_sbss
 8001804:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001808:	20002100 	.word	0x20002100

0800180c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800180c:	e7fe      	b.n	800180c <ADC1_2_IRQHandler>
	...

08001810 <RTOS_Init>:
extern uint8_t temp[];
extern char FinalData[];

struct ucr_01_gps_best_pos_t gpsData;

void RTOS_Init(void){
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
    gpsTaskHandle = osThreadNew(StartGPS, NULL, &gpsTask_attributes);
 8001814:	4a08      	ldr	r2, [pc, #32]	@ (8001838 <RTOS_Init+0x28>)
 8001816:	2100      	movs	r1, #0
 8001818:	4808      	ldr	r0, [pc, #32]	@ (800183c <RTOS_Init+0x2c>)
 800181a:	f005 f8a5 	bl	8006968 <osThreadNew>
 800181e:	4603      	mov	r3, r0
 8001820:	4a07      	ldr	r2, [pc, #28]	@ (8001840 <RTOS_Init+0x30>)
 8001822:	6013      	str	r3, [r2, #0]

    gpsSemaphoreHandle = osSemaphoreNew(1, 0, &gpsSemaphore_attributes);
 8001824:	4a07      	ldr	r2, [pc, #28]	@ (8001844 <RTOS_Init+0x34>)
 8001826:	2100      	movs	r1, #0
 8001828:	2001      	movs	r0, #1
 800182a:	f005 f94a 	bl	8006ac2 <osSemaphoreNew>
 800182e:	4603      	mov	r3, r0
 8001830:	4a05      	ldr	r2, [pc, #20]	@ (8001848 <RTOS_Init+0x38>)
 8001832:	6013      	str	r3, [r2, #0]
}
 8001834:	bf00      	nop
 8001836:	bd80      	pop	{r7, pc}
 8001838:	0800cf98 	.word	0x0800cf98
 800183c:	0800184d 	.word	0x0800184d
 8001840:	200003d4 	.word	0x200003d4
 8001844:	0800cfbc 	.word	0x0800cfbc
 8001848:	200003d8 	.word	0x200003d8

0800184c <StartGPS>:

void StartGPS(void *argument){
 800184c:	b5b0      	push	{r4, r5, r7, lr}
 800184e:	b0d6      	sub	sp, #344	@ 0x158
 8001850:	af00      	add	r7, sp, #0
 8001852:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001856:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800185a:	6018      	str	r0, [r3, #0]
    char statusMessage[] = "PPP";
 800185c:	4b80      	ldr	r3, [pc, #512]	@ (8001a60 <StartGPS+0x214>)
 800185e:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
//    uint8_t gpsStatus = 1;
    HAL_FDCAN_Start(&hfdcan1);
 8001862:	4880      	ldr	r0, [pc, #512]	@ (8001a64 <StartGPS+0x218>)
 8001864:	f001 f842 	bl	80028ec <HAL_FDCAN_Start>
    unsigned char start[] = "log bestposa ontime 0.1\r\n";
 8001868:	4b7f      	ldr	r3, [pc, #508]	@ (8001a68 <StartGPS+0x21c>)
 800186a:	f507 7498 	add.w	r4, r7, #304	@ 0x130
 800186e:	461d      	mov	r5, r3
 8001870:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001872:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001874:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001878:	c403      	stmia	r4!, {r0, r1}
 800187a:	8022      	strh	r2, [r4, #0]
//    osDelay(10000);
    HAL_UART_Transmit (&huart1, start, sizeof(start), 10);
 800187c:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 8001880:	230a      	movs	r3, #10
 8001882:	221a      	movs	r2, #26
 8001884:	4879      	ldr	r0, [pc, #484]	@ (8001a6c <StartGPS+0x220>)
 8001886:	f002 ff05 	bl	8004694 <HAL_UART_Transmit>
    HAL_UART_Receive_IT(&huart1, temp, 1);
 800188a:	2201      	movs	r2, #1
 800188c:	4978      	ldr	r1, [pc, #480]	@ (8001a70 <StartGPS+0x224>)
 800188e:	4877      	ldr	r0, [pc, #476]	@ (8001a6c <StartGPS+0x220>)
 8001890:	f002 ff8e 	bl	80047b0 <HAL_UART_Receive_IT>
    FDCAN_TxHeaderTypeDef TxHeader;
    TxHeader.Identifier = UCR_01_GPS_BEST_POS_FRAME_ID;
 8001894:	2350      	movs	r3, #80	@ 0x50
 8001896:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    TxHeader.IdType = FDCAN_STANDARD_ID;
 800189a:	2300      	movs	r3, #0
 800189c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80018a0:	2300      	movs	r3, #0
 80018a2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    TxHeader.DataLength = FDCAN_DLC_BYTES_64;
 80018a6:	230f      	movs	r3, #15
 80018a8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80018ac:	2300      	movs	r3, #0
 80018ae:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 80018b2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80018b6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    TxHeader.FDFormat = FDCAN_FD_CAN;
 80018ba:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80018be:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80018c2:	2300      	movs	r3, #0
 80018c4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    TxHeader.MessageMarker = 0;
 80018c8:	2300      	movs	r3, #0
 80018ca:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

    while(1){
        osSemaphoreAcquire(gpsSemaphoreHandle, osWaitForever);
 80018ce:	4b69      	ldr	r3, [pc, #420]	@ (8001a74 <StartGPS+0x228>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f04f 31ff 	mov.w	r1, #4294967295
 80018d6:	4618      	mov	r0, r3
 80018d8:	f005 f97c 	bl	8006bd4 <osSemaphoreAcquire>
        char tempMsg[UARTBUFFERLENGTH];
        sprintf(tempMsg, strtok(FinalData, "#"));
 80018dc:	4966      	ldr	r1, [pc, #408]	@ (8001a78 <StartGPS+0x22c>)
 80018de:	4867      	ldr	r0, [pc, #412]	@ (8001a7c <StartGPS+0x230>)
 80018e0:	f009 fa2e 	bl	800ad40 <strtok>
 80018e4:	4602      	mov	r2, r0
 80018e6:	f107 030c 	add.w	r3, r7, #12
 80018ea:	4611      	mov	r1, r2
 80018ec:	4618      	mov	r0, r3
 80018ee:	f009 f999 	bl	800ac24 <siprintf>
        if(memcmp("BESTPOSA", tempMsg, 8) == 0){
 80018f2:	f107 030c 	add.w	r3, r7, #12
 80018f6:	2208      	movs	r2, #8
 80018f8:	4619      	mov	r1, r3
 80018fa:	4861      	ldr	r0, [pc, #388]	@ (8001a80 <StartGPS+0x234>)
 80018fc:	f009 f9f5 	bl	800acea <memcmp>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1e3      	bne.n	80018ce <StartGPS+0x82>
    //      sprintf(gpsData, tempMsg);
            char *token = strtok(tempMsg, ",");
 8001906:	f107 030c 	add.w	r3, r7, #12
 800190a:	495e      	ldr	r1, [pc, #376]	@ (8001a84 <StartGPS+0x238>)
 800190c:	4618      	mov	r0, r3
 800190e:	f009 fa17 	bl	800ad40 <strtok>
 8001912:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154
            int index = 0;
 8001916:	2300      	movs	r3, #0
 8001918:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
            while(token != NULL){
 800191c:	e08c      	b.n	8001a38 <StartGPS+0x1ec>
                token = strtok(NULL, ",");
 800191e:	4959      	ldr	r1, [pc, #356]	@ (8001a84 <StartGPS+0x238>)
 8001920:	2000      	movs	r0, #0
 8001922:	f009 fa0d 	bl	800ad40 <strtok>
 8001926:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154
                switch(index){
 800192a:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800192e:	3b03      	subs	r3, #3
 8001930:	2b0f      	cmp	r3, #15
 8001932:	d878      	bhi.n	8001a26 <StartGPS+0x1da>
 8001934:	a201      	add	r2, pc, #4	@ (adr r2, 800193c <StartGPS+0xf0>)
 8001936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800193a:	bf00      	nop
 800193c:	08001a27 	.word	0x08001a27
 8001940:	08001a27 	.word	0x08001a27
 8001944:	08001a27 	.word	0x08001a27
 8001948:	08001a27 	.word	0x08001a27
 800194c:	08001a27 	.word	0x08001a27
 8001950:	08001a27 	.word	0x08001a27
 8001954:	0800197d 	.word	0x0800197d
 8001958:	08001997 	.word	0x08001997
 800195c:	080019af 	.word	0x080019af
 8001960:	080019c7 	.word	0x080019c7
 8001964:	08001a27 	.word	0x08001a27
 8001968:	08001a27 	.word	0x08001a27
 800196c:	080019df 	.word	0x080019df
 8001970:	080019f7 	.word	0x080019f7
 8001974:	08001a0f 	.word	0x08001a0f
 8001978:	08001a27 	.word	0x08001a27
                        break;
                    case 8:
                        //separate by ; and get sol stat
                        break;
                    case 9:
                        gpsData.gps_status = strcmp(token, statusMessage);
 800197c:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 8001980:	4619      	mov	r1, r3
 8001982:	f8d7 0154 	ldr.w	r0, [r7, #340]	@ 0x154
 8001986:	f7fe fc4b 	bl	8000220 <strcmp>
 800198a:	4603      	mov	r3, r0
 800198c:	b2da      	uxtb	r2, r3
 800198e:	4b3e      	ldr	r3, [pc, #248]	@ (8001a88 <StartGPS+0x23c>)
 8001990:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
                        break;
 8001994:	e047      	b.n	8001a26 <StartGPS+0x1da>
                    case 10:
                        gpsData.latitude = atof(token);
 8001996:	f8d7 0154 	ldr.w	r0, [r7, #340]	@ 0x154
 800199a:	f008 fa6d 	bl	8009e78 <atof>
 800199e:	eeb0 7a40 	vmov.f32	s14, s0
 80019a2:	eef0 7a60 	vmov.f32	s15, s1
 80019a6:	4b38      	ldr	r3, [pc, #224]	@ (8001a88 <StartGPS+0x23c>)
 80019a8:	ed83 7b00 	vstr	d7, [r3]
                        break;
 80019ac:	e03b      	b.n	8001a26 <StartGPS+0x1da>
                    case 11:
                        gpsData.longitude = atof(token);
 80019ae:	f8d7 0154 	ldr.w	r0, [r7, #340]	@ 0x154
 80019b2:	f008 fa61 	bl	8009e78 <atof>
 80019b6:	eeb0 7a40 	vmov.f32	s14, s0
 80019ba:	eef0 7a60 	vmov.f32	s15, s1
 80019be:	4b32      	ldr	r3, [pc, #200]	@ (8001a88 <StartGPS+0x23c>)
 80019c0:	ed83 7b02 	vstr	d7, [r3, #8]
                        break;
 80019c4:	e02f      	b.n	8001a26 <StartGPS+0x1da>
                    case 12:
                        gpsData.altitude = atof(token);
 80019c6:	f8d7 0154 	ldr.w	r0, [r7, #340]	@ 0x154
 80019ca:	f008 fa55 	bl	8009e78 <atof>
 80019ce:	eeb0 7a40 	vmov.f32	s14, s0
 80019d2:	eef0 7a60 	vmov.f32	s15, s1
 80019d6:	4b2c      	ldr	r3, [pc, #176]	@ (8001a88 <StartGPS+0x23c>)
 80019d8:	ed83 7b04 	vstr	d7, [r3, #16]
                        break;
 80019dc:	e023      	b.n	8001a26 <StartGPS+0x1da>
                    case 15:
                        gpsData.std_latitude = atof(token);
 80019de:	f8d7 0154 	ldr.w	r0, [r7, #340]	@ 0x154
 80019e2:	f008 fa49 	bl	8009e78 <atof>
 80019e6:	eeb0 7a40 	vmov.f32	s14, s0
 80019ea:	eef0 7a60 	vmov.f32	s15, s1
 80019ee:	4b26      	ldr	r3, [pc, #152]	@ (8001a88 <StartGPS+0x23c>)
 80019f0:	ed83 7b06 	vstr	d7, [r3, #24]
                        break;
 80019f4:	e017      	b.n	8001a26 <StartGPS+0x1da>
                    case 16:
                        gpsData.std_longitude = atof(token);
 80019f6:	f8d7 0154 	ldr.w	r0, [r7, #340]	@ 0x154
 80019fa:	f008 fa3d 	bl	8009e78 <atof>
 80019fe:	eeb0 7a40 	vmov.f32	s14, s0
 8001a02:	eef0 7a60 	vmov.f32	s15, s1
 8001a06:	4b20      	ldr	r3, [pc, #128]	@ (8001a88 <StartGPS+0x23c>)
 8001a08:	ed83 7b08 	vstr	d7, [r3, #32]
                        break;
 8001a0c:	e00b      	b.n	8001a26 <StartGPS+0x1da>
                    case 17:
                        gpsData.std_altitude = atof(token);
 8001a0e:	f8d7 0154 	ldr.w	r0, [r7, #340]	@ 0x154
 8001a12:	f008 fa31 	bl	8009e78 <atof>
 8001a16:	eeb0 7a40 	vmov.f32	s14, s0
 8001a1a:	eef0 7a60 	vmov.f32	s15, s1
 8001a1e:	4b1a      	ldr	r3, [pc, #104]	@ (8001a88 <StartGPS+0x23c>)
 8001a20:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
                        break;
 8001a24:	bf00      	nop
                    case 18:
                        // base station id
                        break;
                }
                index ++;
 8001a26:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
                if(index == 18){
 8001a30:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001a34:	2b12      	cmp	r3, #18
 8001a36:	d005      	beq.n	8001a44 <StartGPS+0x1f8>
            while(token != NULL){
 8001a38:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	f47f af6e 	bne.w	800191e <StartGPS+0xd2>
 8001a42:	e000      	b.n	8001a46 <StartGPS+0x1fa>
                    break;
 8001a44:	bf00      	nop
                }

            }
            ucr_01_gps_best_pos_pack(canTxData, &gpsData, UCR_01_GPS_BEST_POS_LENGTH);
 8001a46:	2240      	movs	r2, #64	@ 0x40
 8001a48:	490f      	ldr	r1, [pc, #60]	@ (8001a88 <StartGPS+0x23c>)
 8001a4a:	4810      	ldr	r0, [pc, #64]	@ (8001a8c <StartGPS+0x240>)
 8001a4c:	f000 f8bd 	bl	8001bca <ucr_01_gps_best_pos_pack>
            if(HAL_OK != HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, canTxData)){
 8001a50:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001a54:	4a0d      	ldr	r2, [pc, #52]	@ (8001a8c <StartGPS+0x240>)
 8001a56:	4619      	mov	r1, r3
 8001a58:	4802      	ldr	r0, [pc, #8]	@ (8001a64 <StartGPS+0x218>)
 8001a5a:	f000 ff6f 	bl	800293c <HAL_FDCAN_AddMessageToTxFifoQ>
    while(1){
 8001a5e:	e736      	b.n	80018ce <StartGPS+0x82>
 8001a60:	00505050 	.word	0x00505050
 8001a64:	200001f8 	.word	0x200001f8
 8001a68:	0800cf28 	.word	0x0800cf28
 8001a6c:	200002ac 	.word	0x200002ac
 8001a70:	2000045c 	.word	0x2000045c
 8001a74:	200003d8 	.word	0x200003d8
 8001a78:	0800cf14 	.word	0x0800cf14
 8001a7c:	20000560 	.word	0x20000560
 8001a80:	0800cf18 	.word	0x0800cf18
 8001a84:	0800cf24 	.word	0x0800cf24
 8001a88:	20000420 	.word	0x20000420
 8001a8c:	200003dc 	.word	0x200003dc

08001a90 <HAL_UART_RxCpltCallback>:
//    gpsData[Size] = '\0';
//    gpsData[0] = '\0';
//    HAL_UARTEx_ReceiveToIdle_IT(&huart1, gpsData, UARTBUFFERLENGTH);
//}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
    if(temp[0] == '\n'){
 8001a98:	4b15      	ldr	r3, [pc, #84]	@ (8001af0 <HAL_UART_RxCpltCallback+0x60>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	2b0a      	cmp	r3, #10
 8001a9e:	d10f      	bne.n	8001ac0 <HAL_UART_RxCpltCallback+0x30>
        memcpy(FinalData, RxData, pos);
 8001aa0:	4b14      	ldr	r3, [pc, #80]	@ (8001af4 <HAL_UART_RxCpltCallback+0x64>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	4914      	ldr	r1, [pc, #80]	@ (8001af8 <HAL_UART_RxCpltCallback+0x68>)
 8001aa8:	4814      	ldr	r0, [pc, #80]	@ (8001afc <HAL_UART_RxCpltCallback+0x6c>)
 8001aaa:	f009 fa18 	bl	800aede <memcpy>
        pos = 0;
 8001aae:	4b11      	ldr	r3, [pc, #68]	@ (8001af4 <HAL_UART_RxCpltCallback+0x64>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	701a      	strb	r2, [r3, #0]
        osSemaphoreRelease(gpsSemaphoreHandle);
 8001ab4:	4b12      	ldr	r3, [pc, #72]	@ (8001b00 <HAL_UART_RxCpltCallback+0x70>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f005 f8dd 	bl	8006c78 <osSemaphoreRelease>
 8001abe:	e00d      	b.n	8001adc <HAL_UART_RxCpltCallback+0x4c>
    }else{
        memcpy(RxData + pos, temp, 1);
 8001ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8001af4 <HAL_UART_RxCpltCallback+0x64>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	4b0c      	ldr	r3, [pc, #48]	@ (8001af8 <HAL_UART_RxCpltCallback+0x68>)
 8001ac8:	4413      	add	r3, r2
 8001aca:	4a09      	ldr	r2, [pc, #36]	@ (8001af0 <HAL_UART_RxCpltCallback+0x60>)
 8001acc:	7812      	ldrb	r2, [r2, #0]
 8001ace:	701a      	strb	r2, [r3, #0]
        pos++;
 8001ad0:	4b08      	ldr	r3, [pc, #32]	@ (8001af4 <HAL_UART_RxCpltCallback+0x64>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	b2da      	uxtb	r2, r3
 8001ad8:	4b06      	ldr	r3, [pc, #24]	@ (8001af4 <HAL_UART_RxCpltCallback+0x64>)
 8001ada:	701a      	strb	r2, [r3, #0]
    }
    HAL_UART_Receive_IT(&huart1, temp, 1);
 8001adc:	2201      	movs	r2, #1
 8001ade:	4904      	ldr	r1, [pc, #16]	@ (8001af0 <HAL_UART_RxCpltCallback+0x60>)
 8001ae0:	4808      	ldr	r0, [pc, #32]	@ (8001b04 <HAL_UART_RxCpltCallback+0x74>)
 8001ae2:	f002 fe65 	bl	80047b0 <HAL_UART_Receive_IT>
}
 8001ae6:	bf00      	nop
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	2000045c 	.word	0x2000045c
 8001af4:	20000458 	.word	0x20000458
 8001af8:	20000460 	.word	0x20000460
 8001afc:	20000560 	.word	0x20000560
 8001b00:	200003d8 	.word	0x200003d8
 8001b04:	200002ac 	.word	0x200002ac

08001b08 <pack_left_shift_u8>:

static inline uint8_t pack_left_shift_u8(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	71fb      	strb	r3, [r7, #7]
 8001b12:	460b      	mov	r3, r1
 8001b14:	71bb      	strb	r3, [r7, #6]
 8001b16:	4613      	mov	r3, r2
 8001b18:	717b      	strb	r3, [r7, #5]
    return (uint8_t)((uint8_t)(value << shift) & mask);
 8001b1a:	79fa      	ldrb	r2, [r7, #7]
 8001b1c:	79bb      	ldrb	r3, [r7, #6]
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	b2da      	uxtb	r2, r3
 8001b24:	797b      	ldrb	r3, [r7, #5]
 8001b26:	4013      	ands	r3, r2
 8001b28:	b2db      	uxtb	r3, r3
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr

08001b36 <pack_left_shift_u64>:

static inline uint8_t pack_left_shift_u64(
    uint64_t value,
    uint8_t shift,
    uint8_t mask)
{
 8001b36:	b4f0      	push	{r4, r5, r6, r7}
 8001b38:	b084      	sub	sp, #16
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001b40:	4611      	mov	r1, r2
 8001b42:	461a      	mov	r2, r3
 8001b44:	460b      	mov	r3, r1
 8001b46:	71fb      	strb	r3, [r7, #7]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	71bb      	strb	r3, [r7, #6]
    return (uint8_t)((uint8_t)(value << shift) & mask);
 8001b4c:	79f9      	ldrb	r1, [r7, #7]
 8001b4e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b52:	f1a1 0620 	sub.w	r6, r1, #32
 8001b56:	f1c1 0020 	rsb	r0, r1, #32
 8001b5a:	fa03 f501 	lsl.w	r5, r3, r1
 8001b5e:	fa02 f606 	lsl.w	r6, r2, r6
 8001b62:	4335      	orrs	r5, r6
 8001b64:	fa22 f000 	lsr.w	r0, r2, r0
 8001b68:	4305      	orrs	r5, r0
 8001b6a:	fa02 f401 	lsl.w	r4, r2, r1
 8001b6e:	b2e2      	uxtb	r2, r4
 8001b70:	79bb      	ldrb	r3, [r7, #6]
 8001b72:	4013      	ands	r3, r2
 8001b74:	b2db      	uxtb	r3, r3
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bcf0      	pop	{r4, r5, r6, r7}
 8001b7e:	4770      	bx	lr

08001b80 <pack_right_shift_u64>:

static inline uint8_t pack_right_shift_u64(
    uint64_t value,
    uint8_t shift,
    uint8_t mask)
{
 8001b80:	b4f0      	push	{r4, r5, r6, r7}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001b8a:	4611      	mov	r1, r2
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	460b      	mov	r3, r1
 8001b90:	71fb      	strb	r3, [r7, #7]
 8001b92:	4613      	mov	r3, r2
 8001b94:	71bb      	strb	r3, [r7, #6]
    return (uint8_t)((uint8_t)(value >> shift) & mask);
 8001b96:	79f9      	ldrb	r1, [r7, #7]
 8001b98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b9c:	f1c1 0620 	rsb	r6, r1, #32
 8001ba0:	f1a1 0020 	sub.w	r0, r1, #32
 8001ba4:	fa22 f401 	lsr.w	r4, r2, r1
 8001ba8:	fa03 f606 	lsl.w	r6, r3, r6
 8001bac:	4334      	orrs	r4, r6
 8001bae:	fa23 f000 	lsr.w	r0, r3, r0
 8001bb2:	4304      	orrs	r4, r0
 8001bb4:	fa23 f501 	lsr.w	r5, r3, r1
 8001bb8:	b2e2      	uxtb	r2, r4
 8001bba:	79bb      	ldrb	r3, [r7, #6]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	b2db      	uxtb	r3, r3
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3710      	adds	r7, #16
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bcf0      	pop	{r4, r5, r6, r7}
 8001bc8:	4770      	bx	lr

08001bca <ucr_01_gps_best_pos_pack>:

int ucr_01_gps_best_pos_pack(
    uint8_t *dst_p,
    const struct ucr_01_gps_best_pos_t *src_p,
    size_t size)
{
 8001bca:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bce:	b096      	sub	sp, #88	@ 0x58
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6278      	str	r0, [r7, #36]	@ 0x24
 8001bd4:	6239      	str	r1, [r7, #32]
 8001bd6:	61fa      	str	r2, [r7, #28]
    uint64_t longitude;
    uint64_t std_altitude;
    uint64_t std_latitude;
    uint64_t std_longitude;

    if (size < 64u) {
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	2b3f      	cmp	r3, #63	@ 0x3f
 8001bdc:	d802      	bhi.n	8001be4 <ucr_01_gps_best_pos_pack+0x1a>
        return (-EINVAL);
 8001bde:	f06f 0315 	mvn.w	r3, #21
 8001be2:	e34e      	b.n	8002282 <ucr_01_gps_best_pos_pack+0x6b8>
    }

    memset(&dst_p[0], 0, 64);
 8001be4:	2240      	movs	r2, #64	@ 0x40
 8001be6:	2100      	movs	r1, #0
 8001be8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001bea:	f009 f88e 	bl	800ad0a <memset>

    memcpy(&latitude, &src_p->latitude, sizeof(latitude));
 8001bee:	6a3b      	ldr	r3, [r7, #32]
 8001bf0:	681c      	ldr	r4, [r3, #0]
 8001bf2:	685d      	ldr	r5, [r3, #4]
 8001bf4:	4622      	mov	r2, r4
 8001bf6:	462b      	mov	r3, r5
 8001bf8:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    dst_p[0] |= pack_left_shift_u64(latitude, 0u, 0xffu);
 8001bfc:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001c00:	23ff      	movs	r3, #255	@ 0xff
 8001c02:	2200      	movs	r2, #0
 8001c04:	f7ff ff97 	bl	8001b36 <pack_left_shift_u64>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	b2da      	uxtb	r2, r3
 8001c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c16:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_right_shift_u64(latitude, 8u, 0xffu);
 8001c18:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001c1c:	23ff      	movs	r3, #255	@ 0xff
 8001c1e:	2208      	movs	r2, #8
 8001c20:	f7ff ffae 	bl	8001b80 <pack_right_shift_u64>
 8001c24:	4603      	mov	r3, r0
 8001c26:	4619      	mov	r1, r3
 8001c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	781a      	ldrb	r2, [r3, #0]
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c30:	3301      	adds	r3, #1
 8001c32:	430a      	orrs	r2, r1
 8001c34:	b2d2      	uxtb	r2, r2
 8001c36:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_right_shift_u64(latitude, 16u, 0xffu);
 8001c38:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001c3c:	23ff      	movs	r3, #255	@ 0xff
 8001c3e:	2210      	movs	r2, #16
 8001c40:	f7ff ff9e 	bl	8001b80 <pack_right_shift_u64>
 8001c44:	4603      	mov	r3, r0
 8001c46:	4619      	mov	r1, r3
 8001c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c4a:	3302      	adds	r3, #2
 8001c4c:	781a      	ldrb	r2, [r3, #0]
 8001c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c50:	3302      	adds	r3, #2
 8001c52:	430a      	orrs	r2, r1
 8001c54:	b2d2      	uxtb	r2, r2
 8001c56:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_right_shift_u64(latitude, 24u, 0xffu);
 8001c58:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001c5c:	23ff      	movs	r3, #255	@ 0xff
 8001c5e:	2218      	movs	r2, #24
 8001c60:	f7ff ff8e 	bl	8001b80 <pack_right_shift_u64>
 8001c64:	4603      	mov	r3, r0
 8001c66:	4619      	mov	r1, r3
 8001c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c6a:	3303      	adds	r3, #3
 8001c6c:	781a      	ldrb	r2, [r3, #0]
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c70:	3303      	adds	r3, #3
 8001c72:	430a      	orrs	r2, r1
 8001c74:	b2d2      	uxtb	r2, r2
 8001c76:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_right_shift_u64(latitude, 32u, 0xffu);
 8001c78:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001c7c:	23ff      	movs	r3, #255	@ 0xff
 8001c7e:	2220      	movs	r2, #32
 8001c80:	f7ff ff7e 	bl	8001b80 <pack_right_shift_u64>
 8001c84:	4603      	mov	r3, r0
 8001c86:	4619      	mov	r1, r3
 8001c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c8a:	3304      	adds	r3, #4
 8001c8c:	781a      	ldrb	r2, [r3, #0]
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c90:	3304      	adds	r3, #4
 8001c92:	430a      	orrs	r2, r1
 8001c94:	b2d2      	uxtb	r2, r2
 8001c96:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_right_shift_u64(latitude, 40u, 0xffu);
 8001c98:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001c9c:	23ff      	movs	r3, #255	@ 0xff
 8001c9e:	2228      	movs	r2, #40	@ 0x28
 8001ca0:	f7ff ff6e 	bl	8001b80 <pack_right_shift_u64>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001caa:	3305      	adds	r3, #5
 8001cac:	781a      	ldrb	r2, [r3, #0]
 8001cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb0:	3305      	adds	r3, #5
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	b2d2      	uxtb	r2, r2
 8001cb6:	701a      	strb	r2, [r3, #0]
    dst_p[6] |= pack_right_shift_u64(latitude, 48u, 0xffu);
 8001cb8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001cbc:	23ff      	movs	r3, #255	@ 0xff
 8001cbe:	2230      	movs	r2, #48	@ 0x30
 8001cc0:	f7ff ff5e 	bl	8001b80 <pack_right_shift_u64>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cca:	3306      	adds	r3, #6
 8001ccc:	781a      	ldrb	r2, [r3, #0]
 8001cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd0:	3306      	adds	r3, #6
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	b2d2      	uxtb	r2, r2
 8001cd6:	701a      	strb	r2, [r3, #0]
    dst_p[7] |= pack_right_shift_u64(latitude, 56u, 0xffu);
 8001cd8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001cdc:	23ff      	movs	r3, #255	@ 0xff
 8001cde:	2238      	movs	r2, #56	@ 0x38
 8001ce0:	f7ff ff4e 	bl	8001b80 <pack_right_shift_u64>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cea:	3307      	adds	r3, #7
 8001cec:	781a      	ldrb	r2, [r3, #0]
 8001cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf0:	3307      	adds	r3, #7
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	b2d2      	uxtb	r2, r2
 8001cf6:	701a      	strb	r2, [r3, #0]
    memcpy(&longitude, &src_p->longitude, sizeof(longitude));
 8001cf8:	6a3b      	ldr	r3, [r7, #32]
 8001cfa:	3308      	adds	r3, #8
 8001cfc:	f8d3 8000 	ldr.w	r8, [r3]
 8001d00:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8001d04:	4642      	mov	r2, r8
 8001d06:	464b      	mov	r3, r9
 8001d08:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    dst_p[8] |= pack_left_shift_u64(longitude, 0u, 0xffu);
 8001d0c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001d10:	23ff      	movs	r3, #255	@ 0xff
 8001d12:	2200      	movs	r2, #0
 8001d14:	f7ff ff0f 	bl	8001b36 <pack_left_shift_u64>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d1e:	3308      	adds	r3, #8
 8001d20:	781a      	ldrb	r2, [r3, #0]
 8001d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d24:	3308      	adds	r3, #8
 8001d26:	430a      	orrs	r2, r1
 8001d28:	b2d2      	uxtb	r2, r2
 8001d2a:	701a      	strb	r2, [r3, #0]
    dst_p[9] |= pack_right_shift_u64(longitude, 8u, 0xffu);
 8001d2c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001d30:	23ff      	movs	r3, #255	@ 0xff
 8001d32:	2208      	movs	r2, #8
 8001d34:	f7ff ff24 	bl	8001b80 <pack_right_shift_u64>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d3e:	3309      	adds	r3, #9
 8001d40:	781a      	ldrb	r2, [r3, #0]
 8001d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d44:	3309      	adds	r3, #9
 8001d46:	430a      	orrs	r2, r1
 8001d48:	b2d2      	uxtb	r2, r2
 8001d4a:	701a      	strb	r2, [r3, #0]
    dst_p[10] |= pack_right_shift_u64(longitude, 16u, 0xffu);
 8001d4c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001d50:	23ff      	movs	r3, #255	@ 0xff
 8001d52:	2210      	movs	r2, #16
 8001d54:	f7ff ff14 	bl	8001b80 <pack_right_shift_u64>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5e:	330a      	adds	r3, #10
 8001d60:	781a      	ldrb	r2, [r3, #0]
 8001d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d64:	330a      	adds	r3, #10
 8001d66:	430a      	orrs	r2, r1
 8001d68:	b2d2      	uxtb	r2, r2
 8001d6a:	701a      	strb	r2, [r3, #0]
    dst_p[11] |= pack_right_shift_u64(longitude, 24u, 0xffu);
 8001d6c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001d70:	23ff      	movs	r3, #255	@ 0xff
 8001d72:	2218      	movs	r2, #24
 8001d74:	f7ff ff04 	bl	8001b80 <pack_right_shift_u64>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d7e:	330b      	adds	r3, #11
 8001d80:	781a      	ldrb	r2, [r3, #0]
 8001d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d84:	330b      	adds	r3, #11
 8001d86:	430a      	orrs	r2, r1
 8001d88:	b2d2      	uxtb	r2, r2
 8001d8a:	701a      	strb	r2, [r3, #0]
    dst_p[12] |= pack_right_shift_u64(longitude, 32u, 0xffu);
 8001d8c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001d90:	23ff      	movs	r3, #255	@ 0xff
 8001d92:	2220      	movs	r2, #32
 8001d94:	f7ff fef4 	bl	8001b80 <pack_right_shift_u64>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d9e:	330c      	adds	r3, #12
 8001da0:	781a      	ldrb	r2, [r3, #0]
 8001da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da4:	330c      	adds	r3, #12
 8001da6:	430a      	orrs	r2, r1
 8001da8:	b2d2      	uxtb	r2, r2
 8001daa:	701a      	strb	r2, [r3, #0]
    dst_p[13] |= pack_right_shift_u64(longitude, 40u, 0xffu);
 8001dac:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001db0:	23ff      	movs	r3, #255	@ 0xff
 8001db2:	2228      	movs	r2, #40	@ 0x28
 8001db4:	f7ff fee4 	bl	8001b80 <pack_right_shift_u64>
 8001db8:	4603      	mov	r3, r0
 8001dba:	4619      	mov	r1, r3
 8001dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dbe:	330d      	adds	r3, #13
 8001dc0:	781a      	ldrb	r2, [r3, #0]
 8001dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc4:	330d      	adds	r3, #13
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	b2d2      	uxtb	r2, r2
 8001dca:	701a      	strb	r2, [r3, #0]
    dst_p[14] |= pack_right_shift_u64(longitude, 48u, 0xffu);
 8001dcc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001dd0:	23ff      	movs	r3, #255	@ 0xff
 8001dd2:	2230      	movs	r2, #48	@ 0x30
 8001dd4:	f7ff fed4 	bl	8001b80 <pack_right_shift_u64>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	4619      	mov	r1, r3
 8001ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dde:	330e      	adds	r3, #14
 8001de0:	781a      	ldrb	r2, [r3, #0]
 8001de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de4:	330e      	adds	r3, #14
 8001de6:	430a      	orrs	r2, r1
 8001de8:	b2d2      	uxtb	r2, r2
 8001dea:	701a      	strb	r2, [r3, #0]
    dst_p[15] |= pack_right_shift_u64(longitude, 56u, 0xffu);
 8001dec:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001df0:	23ff      	movs	r3, #255	@ 0xff
 8001df2:	2238      	movs	r2, #56	@ 0x38
 8001df4:	f7ff fec4 	bl	8001b80 <pack_right_shift_u64>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dfe:	330f      	adds	r3, #15
 8001e00:	781a      	ldrb	r2, [r3, #0]
 8001e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e04:	330f      	adds	r3, #15
 8001e06:	430a      	orrs	r2, r1
 8001e08:	b2d2      	uxtb	r2, r2
 8001e0a:	701a      	strb	r2, [r3, #0]
    memcpy(&altitude, &src_p->altitude, sizeof(altitude));
 8001e0c:	6a3b      	ldr	r3, [r7, #32]
 8001e0e:	3310      	adds	r3, #16
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	613a      	str	r2, [r7, #16]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	617b      	str	r3, [r7, #20]
 8001e18:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001e1c:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    dst_p[16] |= pack_left_shift_u64(altitude, 0u, 0xffu);
 8001e20:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001e24:	23ff      	movs	r3, #255	@ 0xff
 8001e26:	2200      	movs	r2, #0
 8001e28:	f7ff fe85 	bl	8001b36 <pack_left_shift_u64>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	4619      	mov	r1, r3
 8001e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e32:	3310      	adds	r3, #16
 8001e34:	781a      	ldrb	r2, [r3, #0]
 8001e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e38:	3310      	adds	r3, #16
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	b2d2      	uxtb	r2, r2
 8001e3e:	701a      	strb	r2, [r3, #0]
    dst_p[17] |= pack_right_shift_u64(altitude, 8u, 0xffu);
 8001e40:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001e44:	23ff      	movs	r3, #255	@ 0xff
 8001e46:	2208      	movs	r2, #8
 8001e48:	f7ff fe9a 	bl	8001b80 <pack_right_shift_u64>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	4619      	mov	r1, r3
 8001e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e52:	3311      	adds	r3, #17
 8001e54:	781a      	ldrb	r2, [r3, #0]
 8001e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e58:	3311      	adds	r3, #17
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	b2d2      	uxtb	r2, r2
 8001e5e:	701a      	strb	r2, [r3, #0]
    dst_p[18] |= pack_right_shift_u64(altitude, 16u, 0xffu);
 8001e60:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001e64:	23ff      	movs	r3, #255	@ 0xff
 8001e66:	2210      	movs	r2, #16
 8001e68:	f7ff fe8a 	bl	8001b80 <pack_right_shift_u64>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	4619      	mov	r1, r3
 8001e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e72:	3312      	adds	r3, #18
 8001e74:	781a      	ldrb	r2, [r3, #0]
 8001e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e78:	3312      	adds	r3, #18
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	b2d2      	uxtb	r2, r2
 8001e7e:	701a      	strb	r2, [r3, #0]
    dst_p[19] |= pack_right_shift_u64(altitude, 24u, 0xffu);
 8001e80:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001e84:	23ff      	movs	r3, #255	@ 0xff
 8001e86:	2218      	movs	r2, #24
 8001e88:	f7ff fe7a 	bl	8001b80 <pack_right_shift_u64>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	4619      	mov	r1, r3
 8001e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e92:	3313      	adds	r3, #19
 8001e94:	781a      	ldrb	r2, [r3, #0]
 8001e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e98:	3313      	adds	r3, #19
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	b2d2      	uxtb	r2, r2
 8001e9e:	701a      	strb	r2, [r3, #0]
    dst_p[20] |= pack_right_shift_u64(altitude, 32u, 0xffu);
 8001ea0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001ea4:	23ff      	movs	r3, #255	@ 0xff
 8001ea6:	2220      	movs	r2, #32
 8001ea8:	f7ff fe6a 	bl	8001b80 <pack_right_shift_u64>
 8001eac:	4603      	mov	r3, r0
 8001eae:	4619      	mov	r1, r3
 8001eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb2:	3314      	adds	r3, #20
 8001eb4:	781a      	ldrb	r2, [r3, #0]
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb8:	3314      	adds	r3, #20
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	b2d2      	uxtb	r2, r2
 8001ebe:	701a      	strb	r2, [r3, #0]
    dst_p[21] |= pack_right_shift_u64(altitude, 40u, 0xffu);
 8001ec0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001ec4:	23ff      	movs	r3, #255	@ 0xff
 8001ec6:	2228      	movs	r2, #40	@ 0x28
 8001ec8:	f7ff fe5a 	bl	8001b80 <pack_right_shift_u64>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	4619      	mov	r1, r3
 8001ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed2:	3315      	adds	r3, #21
 8001ed4:	781a      	ldrb	r2, [r3, #0]
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed8:	3315      	adds	r3, #21
 8001eda:	430a      	orrs	r2, r1
 8001edc:	b2d2      	uxtb	r2, r2
 8001ede:	701a      	strb	r2, [r3, #0]
    dst_p[22] |= pack_right_shift_u64(altitude, 48u, 0xffu);
 8001ee0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001ee4:	23ff      	movs	r3, #255	@ 0xff
 8001ee6:	2230      	movs	r2, #48	@ 0x30
 8001ee8:	f7ff fe4a 	bl	8001b80 <pack_right_shift_u64>
 8001eec:	4603      	mov	r3, r0
 8001eee:	4619      	mov	r1, r3
 8001ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef2:	3316      	adds	r3, #22
 8001ef4:	781a      	ldrb	r2, [r3, #0]
 8001ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef8:	3316      	adds	r3, #22
 8001efa:	430a      	orrs	r2, r1
 8001efc:	b2d2      	uxtb	r2, r2
 8001efe:	701a      	strb	r2, [r3, #0]
    dst_p[23] |= pack_right_shift_u64(altitude, 56u, 0xffu);
 8001f00:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001f04:	23ff      	movs	r3, #255	@ 0xff
 8001f06:	2238      	movs	r2, #56	@ 0x38
 8001f08:	f7ff fe3a 	bl	8001b80 <pack_right_shift_u64>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	4619      	mov	r1, r3
 8001f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f12:	3317      	adds	r3, #23
 8001f14:	781a      	ldrb	r2, [r3, #0]
 8001f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f18:	3317      	adds	r3, #23
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	b2d2      	uxtb	r2, r2
 8001f1e:	701a      	strb	r2, [r3, #0]
    memcpy(&std_latitude, &src_p->std_latitude, sizeof(std_latitude));
 8001f20:	6a3b      	ldr	r3, [r7, #32]
 8001f22:	3318      	adds	r3, #24
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	60ba      	str	r2, [r7, #8]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	60fb      	str	r3, [r7, #12]
 8001f2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f30:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    dst_p[24] |= pack_left_shift_u64(std_latitude, 0u, 0xffu);
 8001f34:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001f38:	23ff      	movs	r3, #255	@ 0xff
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f7ff fdfb 	bl	8001b36 <pack_left_shift_u64>
 8001f40:	4603      	mov	r3, r0
 8001f42:	4619      	mov	r1, r3
 8001f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f46:	3318      	adds	r3, #24
 8001f48:	781a      	ldrb	r2, [r3, #0]
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f4c:	3318      	adds	r3, #24
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	b2d2      	uxtb	r2, r2
 8001f52:	701a      	strb	r2, [r3, #0]
    dst_p[25] |= pack_right_shift_u64(std_latitude, 8u, 0xffu);
 8001f54:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001f58:	23ff      	movs	r3, #255	@ 0xff
 8001f5a:	2208      	movs	r2, #8
 8001f5c:	f7ff fe10 	bl	8001b80 <pack_right_shift_u64>
 8001f60:	4603      	mov	r3, r0
 8001f62:	4619      	mov	r1, r3
 8001f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f66:	3319      	adds	r3, #25
 8001f68:	781a      	ldrb	r2, [r3, #0]
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f6c:	3319      	adds	r3, #25
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	b2d2      	uxtb	r2, r2
 8001f72:	701a      	strb	r2, [r3, #0]
    dst_p[26] |= pack_right_shift_u64(std_latitude, 16u, 0xffu);
 8001f74:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001f78:	23ff      	movs	r3, #255	@ 0xff
 8001f7a:	2210      	movs	r2, #16
 8001f7c:	f7ff fe00 	bl	8001b80 <pack_right_shift_u64>
 8001f80:	4603      	mov	r3, r0
 8001f82:	4619      	mov	r1, r3
 8001f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f86:	331a      	adds	r3, #26
 8001f88:	781a      	ldrb	r2, [r3, #0]
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f8c:	331a      	adds	r3, #26
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	b2d2      	uxtb	r2, r2
 8001f92:	701a      	strb	r2, [r3, #0]
    dst_p[27] |= pack_right_shift_u64(std_latitude, 24u, 0xffu);
 8001f94:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001f98:	23ff      	movs	r3, #255	@ 0xff
 8001f9a:	2218      	movs	r2, #24
 8001f9c:	f7ff fdf0 	bl	8001b80 <pack_right_shift_u64>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa6:	331b      	adds	r3, #27
 8001fa8:	781a      	ldrb	r2, [r3, #0]
 8001faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fac:	331b      	adds	r3, #27
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	b2d2      	uxtb	r2, r2
 8001fb2:	701a      	strb	r2, [r3, #0]
    dst_p[28] |= pack_right_shift_u64(std_latitude, 32u, 0xffu);
 8001fb4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001fb8:	23ff      	movs	r3, #255	@ 0xff
 8001fba:	2220      	movs	r2, #32
 8001fbc:	f7ff fde0 	bl	8001b80 <pack_right_shift_u64>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc6:	331c      	adds	r3, #28
 8001fc8:	781a      	ldrb	r2, [r3, #0]
 8001fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fcc:	331c      	adds	r3, #28
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	b2d2      	uxtb	r2, r2
 8001fd2:	701a      	strb	r2, [r3, #0]
    dst_p[29] |= pack_right_shift_u64(std_latitude, 40u, 0xffu);
 8001fd4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001fd8:	23ff      	movs	r3, #255	@ 0xff
 8001fda:	2228      	movs	r2, #40	@ 0x28
 8001fdc:	f7ff fdd0 	bl	8001b80 <pack_right_shift_u64>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe6:	331d      	adds	r3, #29
 8001fe8:	781a      	ldrb	r2, [r3, #0]
 8001fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fec:	331d      	adds	r3, #29
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	b2d2      	uxtb	r2, r2
 8001ff2:	701a      	strb	r2, [r3, #0]
    dst_p[30] |= pack_right_shift_u64(std_latitude, 48u, 0xffu);
 8001ff4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001ff8:	23ff      	movs	r3, #255	@ 0xff
 8001ffa:	2230      	movs	r2, #48	@ 0x30
 8001ffc:	f7ff fdc0 	bl	8001b80 <pack_right_shift_u64>
 8002000:	4603      	mov	r3, r0
 8002002:	4619      	mov	r1, r3
 8002004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002006:	331e      	adds	r3, #30
 8002008:	781a      	ldrb	r2, [r3, #0]
 800200a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800200c:	331e      	adds	r3, #30
 800200e:	430a      	orrs	r2, r1
 8002010:	b2d2      	uxtb	r2, r2
 8002012:	701a      	strb	r2, [r3, #0]
    dst_p[31] |= pack_right_shift_u64(std_latitude, 56u, 0xffu);
 8002014:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002018:	23ff      	movs	r3, #255	@ 0xff
 800201a:	2238      	movs	r2, #56	@ 0x38
 800201c:	f7ff fdb0 	bl	8001b80 <pack_right_shift_u64>
 8002020:	4603      	mov	r3, r0
 8002022:	4619      	mov	r1, r3
 8002024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002026:	331f      	adds	r3, #31
 8002028:	781a      	ldrb	r2, [r3, #0]
 800202a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800202c:	331f      	adds	r3, #31
 800202e:	430a      	orrs	r2, r1
 8002030:	b2d2      	uxtb	r2, r2
 8002032:	701a      	strb	r2, [r3, #0]
    memcpy(&std_longitude, &src_p->std_longitude, sizeof(std_longitude));
 8002034:	6a3b      	ldr	r3, [r7, #32]
 8002036:	3320      	adds	r3, #32
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	603a      	str	r2, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	607b      	str	r3, [r7, #4]
 8002040:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002044:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    dst_p[32] |= pack_left_shift_u64(std_longitude, 0u, 0xffu);
 8002048:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800204c:	23ff      	movs	r3, #255	@ 0xff
 800204e:	2200      	movs	r2, #0
 8002050:	f7ff fd71 	bl	8001b36 <pack_left_shift_u64>
 8002054:	4603      	mov	r3, r0
 8002056:	4619      	mov	r1, r3
 8002058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800205a:	3320      	adds	r3, #32
 800205c:	781a      	ldrb	r2, [r3, #0]
 800205e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002060:	3320      	adds	r3, #32
 8002062:	430a      	orrs	r2, r1
 8002064:	b2d2      	uxtb	r2, r2
 8002066:	701a      	strb	r2, [r3, #0]
    dst_p[33] |= pack_right_shift_u64(std_longitude, 8u, 0xffu);
 8002068:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800206c:	23ff      	movs	r3, #255	@ 0xff
 800206e:	2208      	movs	r2, #8
 8002070:	f7ff fd86 	bl	8001b80 <pack_right_shift_u64>
 8002074:	4603      	mov	r3, r0
 8002076:	4619      	mov	r1, r3
 8002078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800207a:	3321      	adds	r3, #33	@ 0x21
 800207c:	781a      	ldrb	r2, [r3, #0]
 800207e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002080:	3321      	adds	r3, #33	@ 0x21
 8002082:	430a      	orrs	r2, r1
 8002084:	b2d2      	uxtb	r2, r2
 8002086:	701a      	strb	r2, [r3, #0]
    dst_p[34] |= pack_right_shift_u64(std_longitude, 16u, 0xffu);
 8002088:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800208c:	23ff      	movs	r3, #255	@ 0xff
 800208e:	2210      	movs	r2, #16
 8002090:	f7ff fd76 	bl	8001b80 <pack_right_shift_u64>
 8002094:	4603      	mov	r3, r0
 8002096:	4619      	mov	r1, r3
 8002098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800209a:	3322      	adds	r3, #34	@ 0x22
 800209c:	781a      	ldrb	r2, [r3, #0]
 800209e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a0:	3322      	adds	r3, #34	@ 0x22
 80020a2:	430a      	orrs	r2, r1
 80020a4:	b2d2      	uxtb	r2, r2
 80020a6:	701a      	strb	r2, [r3, #0]
    dst_p[35] |= pack_right_shift_u64(std_longitude, 24u, 0xffu);
 80020a8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80020ac:	23ff      	movs	r3, #255	@ 0xff
 80020ae:	2218      	movs	r2, #24
 80020b0:	f7ff fd66 	bl	8001b80 <pack_right_shift_u64>
 80020b4:	4603      	mov	r3, r0
 80020b6:	4619      	mov	r1, r3
 80020b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ba:	3323      	adds	r3, #35	@ 0x23
 80020bc:	781a      	ldrb	r2, [r3, #0]
 80020be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c0:	3323      	adds	r3, #35	@ 0x23
 80020c2:	430a      	orrs	r2, r1
 80020c4:	b2d2      	uxtb	r2, r2
 80020c6:	701a      	strb	r2, [r3, #0]
    dst_p[36] |= pack_right_shift_u64(std_longitude, 32u, 0xffu);
 80020c8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80020cc:	23ff      	movs	r3, #255	@ 0xff
 80020ce:	2220      	movs	r2, #32
 80020d0:	f7ff fd56 	bl	8001b80 <pack_right_shift_u64>
 80020d4:	4603      	mov	r3, r0
 80020d6:	4619      	mov	r1, r3
 80020d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020da:	3324      	adds	r3, #36	@ 0x24
 80020dc:	781a      	ldrb	r2, [r3, #0]
 80020de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e0:	3324      	adds	r3, #36	@ 0x24
 80020e2:	430a      	orrs	r2, r1
 80020e4:	b2d2      	uxtb	r2, r2
 80020e6:	701a      	strb	r2, [r3, #0]
    dst_p[37] |= pack_right_shift_u64(std_longitude, 40u, 0xffu);
 80020e8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80020ec:	23ff      	movs	r3, #255	@ 0xff
 80020ee:	2228      	movs	r2, #40	@ 0x28
 80020f0:	f7ff fd46 	bl	8001b80 <pack_right_shift_u64>
 80020f4:	4603      	mov	r3, r0
 80020f6:	4619      	mov	r1, r3
 80020f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020fa:	3325      	adds	r3, #37	@ 0x25
 80020fc:	781a      	ldrb	r2, [r3, #0]
 80020fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002100:	3325      	adds	r3, #37	@ 0x25
 8002102:	430a      	orrs	r2, r1
 8002104:	b2d2      	uxtb	r2, r2
 8002106:	701a      	strb	r2, [r3, #0]
    dst_p[38] |= pack_right_shift_u64(std_longitude, 48u, 0xffu);
 8002108:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800210c:	23ff      	movs	r3, #255	@ 0xff
 800210e:	2230      	movs	r2, #48	@ 0x30
 8002110:	f7ff fd36 	bl	8001b80 <pack_right_shift_u64>
 8002114:	4603      	mov	r3, r0
 8002116:	4619      	mov	r1, r3
 8002118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800211a:	3326      	adds	r3, #38	@ 0x26
 800211c:	781a      	ldrb	r2, [r3, #0]
 800211e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002120:	3326      	adds	r3, #38	@ 0x26
 8002122:	430a      	orrs	r2, r1
 8002124:	b2d2      	uxtb	r2, r2
 8002126:	701a      	strb	r2, [r3, #0]
    dst_p[39] |= pack_right_shift_u64(std_longitude, 56u, 0xffu);
 8002128:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800212c:	23ff      	movs	r3, #255	@ 0xff
 800212e:	2238      	movs	r2, #56	@ 0x38
 8002130:	f7ff fd26 	bl	8001b80 <pack_right_shift_u64>
 8002134:	4603      	mov	r3, r0
 8002136:	4619      	mov	r1, r3
 8002138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800213a:	3327      	adds	r3, #39	@ 0x27
 800213c:	781a      	ldrb	r2, [r3, #0]
 800213e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002140:	3327      	adds	r3, #39	@ 0x27
 8002142:	430a      	orrs	r2, r1
 8002144:	b2d2      	uxtb	r2, r2
 8002146:	701a      	strb	r2, [r3, #0]
    memcpy(&std_altitude, &src_p->std_altitude, sizeof(std_altitude));
 8002148:	6a3b      	ldr	r3, [r7, #32]
 800214a:	3328      	adds	r3, #40	@ 0x28
 800214c:	f8d3 a000 	ldr.w	sl, [r3]
 8002150:	f8d3 b004 	ldr.w	fp, [r3, #4]
 8002154:	4652      	mov	r2, sl
 8002156:	465b      	mov	r3, fp
 8002158:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    dst_p[40] |= pack_left_shift_u64(std_altitude, 0u, 0xffu);
 800215c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002160:	23ff      	movs	r3, #255	@ 0xff
 8002162:	2200      	movs	r2, #0
 8002164:	f7ff fce7 	bl	8001b36 <pack_left_shift_u64>
 8002168:	4603      	mov	r3, r0
 800216a:	4619      	mov	r1, r3
 800216c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800216e:	3328      	adds	r3, #40	@ 0x28
 8002170:	781a      	ldrb	r2, [r3, #0]
 8002172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002174:	3328      	adds	r3, #40	@ 0x28
 8002176:	430a      	orrs	r2, r1
 8002178:	b2d2      	uxtb	r2, r2
 800217a:	701a      	strb	r2, [r3, #0]
    dst_p[41] |= pack_right_shift_u64(std_altitude, 8u, 0xffu);
 800217c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002180:	23ff      	movs	r3, #255	@ 0xff
 8002182:	2208      	movs	r2, #8
 8002184:	f7ff fcfc 	bl	8001b80 <pack_right_shift_u64>
 8002188:	4603      	mov	r3, r0
 800218a:	4619      	mov	r1, r3
 800218c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800218e:	3329      	adds	r3, #41	@ 0x29
 8002190:	781a      	ldrb	r2, [r3, #0]
 8002192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002194:	3329      	adds	r3, #41	@ 0x29
 8002196:	430a      	orrs	r2, r1
 8002198:	b2d2      	uxtb	r2, r2
 800219a:	701a      	strb	r2, [r3, #0]
    dst_p[42] |= pack_right_shift_u64(std_altitude, 16u, 0xffu);
 800219c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80021a0:	23ff      	movs	r3, #255	@ 0xff
 80021a2:	2210      	movs	r2, #16
 80021a4:	f7ff fcec 	bl	8001b80 <pack_right_shift_u64>
 80021a8:	4603      	mov	r3, r0
 80021aa:	4619      	mov	r1, r3
 80021ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ae:	332a      	adds	r3, #42	@ 0x2a
 80021b0:	781a      	ldrb	r2, [r3, #0]
 80021b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b4:	332a      	adds	r3, #42	@ 0x2a
 80021b6:	430a      	orrs	r2, r1
 80021b8:	b2d2      	uxtb	r2, r2
 80021ba:	701a      	strb	r2, [r3, #0]
    dst_p[43] |= pack_right_shift_u64(std_altitude, 24u, 0xffu);
 80021bc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80021c0:	23ff      	movs	r3, #255	@ 0xff
 80021c2:	2218      	movs	r2, #24
 80021c4:	f7ff fcdc 	bl	8001b80 <pack_right_shift_u64>
 80021c8:	4603      	mov	r3, r0
 80021ca:	4619      	mov	r1, r3
 80021cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ce:	332b      	adds	r3, #43	@ 0x2b
 80021d0:	781a      	ldrb	r2, [r3, #0]
 80021d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d4:	332b      	adds	r3, #43	@ 0x2b
 80021d6:	430a      	orrs	r2, r1
 80021d8:	b2d2      	uxtb	r2, r2
 80021da:	701a      	strb	r2, [r3, #0]
    dst_p[44] |= pack_right_shift_u64(std_altitude, 32u, 0xffu);
 80021dc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80021e0:	23ff      	movs	r3, #255	@ 0xff
 80021e2:	2220      	movs	r2, #32
 80021e4:	f7ff fccc 	bl	8001b80 <pack_right_shift_u64>
 80021e8:	4603      	mov	r3, r0
 80021ea:	4619      	mov	r1, r3
 80021ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ee:	332c      	adds	r3, #44	@ 0x2c
 80021f0:	781a      	ldrb	r2, [r3, #0]
 80021f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f4:	332c      	adds	r3, #44	@ 0x2c
 80021f6:	430a      	orrs	r2, r1
 80021f8:	b2d2      	uxtb	r2, r2
 80021fa:	701a      	strb	r2, [r3, #0]
    dst_p[45] |= pack_right_shift_u64(std_altitude, 40u, 0xffu);
 80021fc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002200:	23ff      	movs	r3, #255	@ 0xff
 8002202:	2228      	movs	r2, #40	@ 0x28
 8002204:	f7ff fcbc 	bl	8001b80 <pack_right_shift_u64>
 8002208:	4603      	mov	r3, r0
 800220a:	4619      	mov	r1, r3
 800220c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800220e:	332d      	adds	r3, #45	@ 0x2d
 8002210:	781a      	ldrb	r2, [r3, #0]
 8002212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002214:	332d      	adds	r3, #45	@ 0x2d
 8002216:	430a      	orrs	r2, r1
 8002218:	b2d2      	uxtb	r2, r2
 800221a:	701a      	strb	r2, [r3, #0]
    dst_p[46] |= pack_right_shift_u64(std_altitude, 48u, 0xffu);
 800221c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002220:	23ff      	movs	r3, #255	@ 0xff
 8002222:	2230      	movs	r2, #48	@ 0x30
 8002224:	f7ff fcac 	bl	8001b80 <pack_right_shift_u64>
 8002228:	4603      	mov	r3, r0
 800222a:	4619      	mov	r1, r3
 800222c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800222e:	332e      	adds	r3, #46	@ 0x2e
 8002230:	781a      	ldrb	r2, [r3, #0]
 8002232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002234:	332e      	adds	r3, #46	@ 0x2e
 8002236:	430a      	orrs	r2, r1
 8002238:	b2d2      	uxtb	r2, r2
 800223a:	701a      	strb	r2, [r3, #0]
    dst_p[47] |= pack_right_shift_u64(std_altitude, 56u, 0xffu);
 800223c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002240:	23ff      	movs	r3, #255	@ 0xff
 8002242:	2238      	movs	r2, #56	@ 0x38
 8002244:	f7ff fc9c 	bl	8001b80 <pack_right_shift_u64>
 8002248:	4603      	mov	r3, r0
 800224a:	4619      	mov	r1, r3
 800224c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800224e:	332f      	adds	r3, #47	@ 0x2f
 8002250:	781a      	ldrb	r2, [r3, #0]
 8002252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002254:	332f      	adds	r3, #47	@ 0x2f
 8002256:	430a      	orrs	r2, r1
 8002258:	b2d2      	uxtb	r2, r2
 800225a:	701a      	strb	r2, [r3, #0]
    dst_p[48] |= pack_left_shift_u8(src_p->gps_status, 0u, 0xffu);
 800225c:	6a3b      	ldr	r3, [r7, #32]
 800225e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002262:	22ff      	movs	r2, #255	@ 0xff
 8002264:	2100      	movs	r1, #0
 8002266:	4618      	mov	r0, r3
 8002268:	f7ff fc4e 	bl	8001b08 <pack_left_shift_u8>
 800226c:	4603      	mov	r3, r0
 800226e:	4619      	mov	r1, r3
 8002270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002272:	3330      	adds	r3, #48	@ 0x30
 8002274:	781a      	ldrb	r2, [r3, #0]
 8002276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002278:	3330      	adds	r3, #48	@ 0x30
 800227a:	430a      	orrs	r2, r1
 800227c:	b2d2      	uxtb	r2, r2
 800227e:	701a      	strb	r2, [r3, #0]

    return (64);
 8002280:	2340      	movs	r3, #64	@ 0x40
}
 8002282:	4618      	mov	r0, r3
 8002284:	3758      	adds	r7, #88	@ 0x58
 8002286:	46bd      	mov	sp, r7
 8002288:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800228c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002292:	2300      	movs	r3, #0
 8002294:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002296:	2003      	movs	r0, #3
 8002298:	f000 f8db 	bl	8002452 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800229c:	200f      	movs	r0, #15
 800229e:	f7fe ffdf 	bl	8001260 <HAL_InitTick>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d002      	beq.n	80022ae <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	71fb      	strb	r3, [r7, #7]
 80022ac:	e001      	b.n	80022b2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80022ae:	f7fe ffad 	bl	800120c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80022b2:	79fb      	ldrb	r3, [r7, #7]

}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022c0:	4b05      	ldr	r3, [pc, #20]	@ (80022d8 <HAL_IncTick+0x1c>)
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	4b05      	ldr	r3, [pc, #20]	@ (80022dc <HAL_IncTick+0x20>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4413      	add	r3, r2
 80022ca:	4a03      	ldr	r2, [pc, #12]	@ (80022d8 <HAL_IncTick+0x1c>)
 80022cc:	6013      	str	r3, [r2, #0]
}
 80022ce:	bf00      	nop
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	20000660 	.word	0x20000660
 80022dc:	20000008 	.word	0x20000008

080022e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  return uwTick;
 80022e4:	4b03      	ldr	r3, [pc, #12]	@ (80022f4 <HAL_GetTick+0x14>)
 80022e6:	681b      	ldr	r3, [r3, #0]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	20000660 	.word	0x20000660

080022f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002308:	4b0c      	ldr	r3, [pc, #48]	@ (800233c <__NVIC_SetPriorityGrouping+0x44>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800230e:	68ba      	ldr	r2, [r7, #8]
 8002310:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002314:	4013      	ands	r3, r2
 8002316:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002320:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002324:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002328:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800232a:	4a04      	ldr	r2, [pc, #16]	@ (800233c <__NVIC_SetPriorityGrouping+0x44>)
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	60d3      	str	r3, [r2, #12]
}
 8002330:	bf00      	nop
 8002332:	3714      	adds	r7, #20
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr
 800233c:	e000ed00 	.word	0xe000ed00

08002340 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002344:	4b04      	ldr	r3, [pc, #16]	@ (8002358 <__NVIC_GetPriorityGrouping+0x18>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	0a1b      	lsrs	r3, r3, #8
 800234a:	f003 0307 	and.w	r3, r3, #7
}
 800234e:	4618      	mov	r0, r3
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr
 8002358:	e000ed00 	.word	0xe000ed00

0800235c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	4603      	mov	r3, r0
 8002364:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236a:	2b00      	cmp	r3, #0
 800236c:	db0b      	blt.n	8002386 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800236e:	79fb      	ldrb	r3, [r7, #7]
 8002370:	f003 021f 	and.w	r2, r3, #31
 8002374:	4907      	ldr	r1, [pc, #28]	@ (8002394 <__NVIC_EnableIRQ+0x38>)
 8002376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237a:	095b      	lsrs	r3, r3, #5
 800237c:	2001      	movs	r0, #1
 800237e:	fa00 f202 	lsl.w	r2, r0, r2
 8002382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002386:	bf00      	nop
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	e000e100 	.word	0xe000e100

08002398 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	4603      	mov	r3, r0
 80023a0:	6039      	str	r1, [r7, #0]
 80023a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	db0a      	blt.n	80023c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	b2da      	uxtb	r2, r3
 80023b0:	490c      	ldr	r1, [pc, #48]	@ (80023e4 <__NVIC_SetPriority+0x4c>)
 80023b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b6:	0112      	lsls	r2, r2, #4
 80023b8:	b2d2      	uxtb	r2, r2
 80023ba:	440b      	add	r3, r1
 80023bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023c0:	e00a      	b.n	80023d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	b2da      	uxtb	r2, r3
 80023c6:	4908      	ldr	r1, [pc, #32]	@ (80023e8 <__NVIC_SetPriority+0x50>)
 80023c8:	79fb      	ldrb	r3, [r7, #7]
 80023ca:	f003 030f 	and.w	r3, r3, #15
 80023ce:	3b04      	subs	r3, #4
 80023d0:	0112      	lsls	r2, r2, #4
 80023d2:	b2d2      	uxtb	r2, r2
 80023d4:	440b      	add	r3, r1
 80023d6:	761a      	strb	r2, [r3, #24]
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	e000e100 	.word	0xe000e100
 80023e8:	e000ed00 	.word	0xe000ed00

080023ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b089      	sub	sp, #36	@ 0x24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f003 0307 	and.w	r3, r3, #7
 80023fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	f1c3 0307 	rsb	r3, r3, #7
 8002406:	2b04      	cmp	r3, #4
 8002408:	bf28      	it	cs
 800240a:	2304      	movcs	r3, #4
 800240c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	3304      	adds	r3, #4
 8002412:	2b06      	cmp	r3, #6
 8002414:	d902      	bls.n	800241c <NVIC_EncodePriority+0x30>
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	3b03      	subs	r3, #3
 800241a:	e000      	b.n	800241e <NVIC_EncodePriority+0x32>
 800241c:	2300      	movs	r3, #0
 800241e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002420:	f04f 32ff 	mov.w	r2, #4294967295
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	fa02 f303 	lsl.w	r3, r2, r3
 800242a:	43da      	mvns	r2, r3
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	401a      	ands	r2, r3
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002434:	f04f 31ff 	mov.w	r1, #4294967295
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	fa01 f303 	lsl.w	r3, r1, r3
 800243e:	43d9      	mvns	r1, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002444:	4313      	orrs	r3, r2
         );
}
 8002446:	4618      	mov	r0, r3
 8002448:	3724      	adds	r7, #36	@ 0x24
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr

08002452 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b082      	sub	sp, #8
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f7ff ff4c 	bl	80022f8 <__NVIC_SetPriorityGrouping>
}
 8002460:	bf00      	nop
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af00      	add	r7, sp, #0
 800246e:	4603      	mov	r3, r0
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	607a      	str	r2, [r7, #4]
 8002474:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002476:	f7ff ff63 	bl	8002340 <__NVIC_GetPriorityGrouping>
 800247a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	68b9      	ldr	r1, [r7, #8]
 8002480:	6978      	ldr	r0, [r7, #20]
 8002482:	f7ff ffb3 	bl	80023ec <NVIC_EncodePriority>
 8002486:	4602      	mov	r2, r0
 8002488:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800248c:	4611      	mov	r1, r2
 800248e:	4618      	mov	r0, r3
 8002490:	f7ff ff82 	bl	8002398 <__NVIC_SetPriority>
}
 8002494:	bf00      	nop
 8002496:	3718      	adds	r7, #24
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	4603      	mov	r3, r0
 80024a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7ff ff56 	bl	800235c <__NVIC_EnableIRQ>
}
 80024b0:	bf00      	nop
 80024b2:	3708      	adds	r7, #8
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b085      	sub	sp, #20
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024c0:	2300      	movs	r3, #0
 80024c2:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d005      	beq.n	80024dc <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2204      	movs	r2, #4
 80024d4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	73fb      	strb	r3, [r7, #15]
 80024da:	e037      	b.n	800254c <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f022 020e 	bic.w	r2, r2, #14
 80024ea:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024f6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80024fa:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f022 0201 	bic.w	r2, r2, #1
 800250a:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002510:	f003 021f 	and.w	r2, r3, #31
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002518:	2101      	movs	r1, #1
 800251a:	fa01 f202 	lsl.w	r2, r1, r2
 800251e:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002528:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00c      	beq.n	800254c <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800253c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002540:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800254a:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800255c:	7bfb      	ldrb	r3, [r7, #15]
}
 800255e:	4618      	mov	r0, r3
 8002560:	3714      	adds	r7, #20
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr

0800256a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b084      	sub	sp, #16
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002572:	2300      	movs	r3, #0
 8002574:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b02      	cmp	r3, #2
 8002580:	d00d      	beq.n	800259e <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2204      	movs	r2, #4
 8002586:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	73fb      	strb	r3, [r7, #15]
 800259c:	e047      	b.n	800262e <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f022 020e 	bic.w	r2, r2, #14
 80025ac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f022 0201 	bic.w	r2, r2, #1
 80025bc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80025cc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025d2:	f003 021f 	and.w	r2, r3, #31
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025da:	2101      	movs	r1, #1
 80025dc:	fa01 f202 	lsl.w	r2, r1, r2
 80025e0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80025ea:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d00c      	beq.n	800260e <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025fe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002602:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800260c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2201      	movs	r2, #1
 8002612:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002622:	2b00      	cmp	r3, #0
 8002624:	d003      	beq.n	800262e <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	4798      	blx	r3
    }
  }
  return status;
 800262e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002630:	4618      	mov	r0, r3
 8002632:	3710      	adds	r7, #16
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d101      	bne.n	800264a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e147      	b.n	80028da <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b00      	cmp	r3, #0
 8002654:	d106      	bne.n	8002664 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f7fe fcc6 	bl	8000ff0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	699a      	ldr	r2, [r3, #24]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f022 0210 	bic.w	r2, r2, #16
 8002672:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002674:	f7ff fe34 	bl	80022e0 <HAL_GetTick>
 8002678:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800267a:	e012      	b.n	80026a2 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800267c:	f7ff fe30 	bl	80022e0 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b0a      	cmp	r3, #10
 8002688:	d90b      	bls.n	80026a2 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800268e:	f043 0201 	orr.w	r2, r3, #1
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2203      	movs	r2, #3
 800269a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e11b      	b.n	80028da <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	f003 0308 	and.w	r3, r3, #8
 80026ac:	2b08      	cmp	r3, #8
 80026ae:	d0e5      	beq.n	800267c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	699a      	ldr	r2, [r3, #24]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f042 0201 	orr.w	r2, r2, #1
 80026be:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026c0:	f7ff fe0e 	bl	80022e0 <HAL_GetTick>
 80026c4:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80026c6:	e012      	b.n	80026ee <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80026c8:	f7ff fe0a 	bl	80022e0 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b0a      	cmp	r3, #10
 80026d4:	d90b      	bls.n	80026ee <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026da:	f043 0201 	orr.w	r2, r3, #1
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2203      	movs	r2, #3
 80026e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e0f5      	b.n	80028da <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	f003 0301 	and.w	r3, r3, #1
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d0e5      	beq.n	80026c8 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	699a      	ldr	r2, [r3, #24]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f042 0202 	orr.w	r2, r2, #2
 800270a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a74      	ldr	r2, [pc, #464]	@ (80028e4 <HAL_FDCAN_Init+0x2ac>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d103      	bne.n	800271e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8002716:	4a74      	ldr	r2, [pc, #464]	@ (80028e8 <HAL_FDCAN_Init+0x2b0>)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	7c1b      	ldrb	r3, [r3, #16]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d108      	bne.n	8002738 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	699a      	ldr	r2, [r3, #24]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002734:	619a      	str	r2, [r3, #24]
 8002736:	e007      	b.n	8002748 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	699a      	ldr	r2, [r3, #24]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002746:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	7c5b      	ldrb	r3, [r3, #17]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d108      	bne.n	8002762 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	699a      	ldr	r2, [r3, #24]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800275e:	619a      	str	r2, [r3, #24]
 8002760:	e007      	b.n	8002772 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	699a      	ldr	r2, [r3, #24]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002770:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	7c9b      	ldrb	r3, [r3, #18]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d108      	bne.n	800278c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	699a      	ldr	r2, [r3, #24]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002788:	619a      	str	r2, [r3, #24]
 800278a:	e007      	b.n	800279c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	699a      	ldr	r2, [r3, #24]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800279a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	689a      	ldr	r2, [r3, #8]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	430a      	orrs	r2, r1
 80027b0:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	699a      	ldr	r2, [r3, #24]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80027c0:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	691a      	ldr	r2, [r3, #16]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f022 0210 	bic.w	r2, r2, #16
 80027d0:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d108      	bne.n	80027ec <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	699a      	ldr	r2, [r3, #24]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f042 0204 	orr.w	r2, r2, #4
 80027e8:	619a      	str	r2, [r3, #24]
 80027ea:	e02c      	b.n	8002846 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d028      	beq.n	8002846 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d01c      	beq.n	8002836 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	699a      	ldr	r2, [r3, #24]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800280a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	691a      	ldr	r2, [r3, #16]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f042 0210 	orr.w	r2, r2, #16
 800281a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	2b03      	cmp	r3, #3
 8002822:	d110      	bne.n	8002846 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	699a      	ldr	r2, [r3, #24]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f042 0220 	orr.w	r2, r2, #32
 8002832:	619a      	str	r2, [r3, #24]
 8002834:	e007      	b.n	8002846 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	699a      	ldr	r2, [r3, #24]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f042 0220 	orr.w	r2, r2, #32
 8002844:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	3b01      	subs	r3, #1
 800284c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	69db      	ldr	r3, [r3, #28]
 8002852:	3b01      	subs	r3, #1
 8002854:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002856:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800285e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	3b01      	subs	r3, #1
 8002868:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800286e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002870:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800287a:	d115      	bne.n	80028a8 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002880:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002886:	3b01      	subs	r3, #1
 8002888:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800288a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002890:	3b01      	subs	r3, #1
 8002892:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002894:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800289c:	3b01      	subs	r3, #1
 800289e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80028a4:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80028a6:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	430a      	orrs	r2, r1
 80028ba:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f000 f880 	bl	80029c4 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	40006400 	.word	0x40006400
 80028e8:	40006500 	.word	0x40006500

080028ec <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d110      	bne.n	8002922 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2202      	movs	r2, #2
 8002904:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	699a      	ldr	r2, [r3, #24]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f022 0201 	bic.w	r2, r2, #1
 8002916:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 800291e:	2300      	movs	r3, #0
 8002920:	e006      	b.n	8002930 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002926:	f043 0204 	orr.w	r2, r3, #4
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
  }
}
 8002930:	4618      	mov	r0, r3
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b086      	sub	sp, #24
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800294e:	b2db      	uxtb	r3, r3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d12c      	bne.n	80029ae <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800295c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d007      	beq.n	8002974 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002968:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e023      	b.n	80029bc <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800297c:	0c1b      	lsrs	r3, r3, #16
 800297e:	f003 0303 	and.w	r3, r3, #3
 8002982:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	68b9      	ldr	r1, [r7, #8]
 800298a:	68f8      	ldr	r0, [r7, #12]
 800298c:	f000 f886 	bl	8002a9c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2101      	movs	r1, #1
 8002996:	697a      	ldr	r2, [r7, #20]
 8002998:	fa01 f202 	lsl.w	r2, r1, r2
 800299c:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80029a0:	2201      	movs	r2, #1
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	409a      	lsls	r2, r3
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 80029aa:	2300      	movs	r3, #0
 80029ac:	e006      	b.n	80029bc <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029b2:	f043 0208 	orr.w	r2, r3, #8
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
  }
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3718      	adds	r7, #24
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80029cc:	4b30      	ldr	r3, [pc, #192]	@ (8002a90 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 80029ce:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a2f      	ldr	r2, [pc, #188]	@ (8002a94 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d103      	bne.n	80029e2 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80029e0:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a2c      	ldr	r2, [pc, #176]	@ (8002a98 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d103      	bne.n	80029f4 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 80029f2:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	68ba      	ldr	r2, [r7, #8]
 80029f8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a02:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a0a:	041a      	lsls	r2, r3, #16
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	430a      	orrs	r2, r1
 8002a12:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a28:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a30:	061a      	lsls	r2, r3, #24
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	430a      	orrs	r2, r1
 8002a38:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	60fb      	str	r3, [r7, #12]
 8002a68:	e005      	b.n	8002a76 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	3304      	adds	r3, #4
 8002a74:	60fb      	str	r3, [r7, #12]
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d3f3      	bcc.n	8002a6a <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8002a82:	bf00      	nop
 8002a84:	bf00      	nop
 8002a86:	3714      	adds	r7, #20
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr
 8002a90:	4000a400 	.word	0x4000a400
 8002a94:	40006800 	.word	0x40006800
 8002a98:	40006c00 	.word	0x40006c00

08002a9c <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b089      	sub	sp, #36	@ 0x24
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	607a      	str	r2, [r7, #4]
 8002aa8:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d10a      	bne.n	8002ac8 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8002aba:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	61fb      	str	r3, [r7, #28]
 8002ac6:	e00a      	b.n	8002ade <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8002ad0:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8002ad6:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002ad8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002adc:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
 8002ae2:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002ae8:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8002aee:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8002af4:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002afc:	4313      	orrs	r3, r2
 8002afe:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002b04:	683a      	ldr	r2, [r7, #0]
 8002b06:	4613      	mov	r3, r2
 8002b08:	00db      	lsls	r3, r3, #3
 8002b0a:	4413      	add	r3, r2
 8002b0c:	00db      	lsls	r3, r3, #3
 8002b0e:	440b      	add	r3, r1
 8002b10:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	69fa      	ldr	r2, [r7, #28]
 8002b16:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	3304      	adds	r3, #4
 8002b1c:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	3304      	adds	r3, #4
 8002b28:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	617b      	str	r3, [r7, #20]
 8002b2e:	e020      	b.n	8002b72 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	3303      	adds	r3, #3
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	4413      	add	r3, r2
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	3302      	adds	r3, #2
 8002b40:	6879      	ldr	r1, [r7, #4]
 8002b42:	440b      	add	r3, r1
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002b48:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	6879      	ldr	r1, [r7, #4]
 8002b50:	440b      	add	r3, r1
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002b56:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8002b58:	6879      	ldr	r1, [r7, #4]
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	440a      	add	r2, r1
 8002b5e:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002b60:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	3304      	adds	r3, #4
 8002b6a:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	3304      	adds	r3, #4
 8002b70:	617b      	str	r3, [r7, #20]
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	4a06      	ldr	r2, [pc, #24]	@ (8002b90 <FDCAN_CopyMessageToRAM+0xf4>)
 8002b78:	5cd3      	ldrb	r3, [r2, r3]
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d3d6      	bcc.n	8002b30 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8002b82:	bf00      	nop
 8002b84:	bf00      	nop
 8002b86:	3724      	adds	r7, #36	@ 0x24
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr
 8002b90:	0800cfcc 	.word	0x0800cfcc

08002b94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b087      	sub	sp, #28
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002ba2:	e15a      	b.n	8002e5a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	2101      	movs	r1, #1
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	f000 814c 	beq.w	8002e54 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f003 0303 	and.w	r3, r3, #3
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d005      	beq.n	8002bd4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d130      	bne.n	8002c36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	2203      	movs	r2, #3
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	43db      	mvns	r3, r3
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	4013      	ands	r3, r2
 8002bea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	68da      	ldr	r2, [r3, #12]
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	693a      	ldr	r2, [r7, #16]
 8002c02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c12:	43db      	mvns	r3, r3
 8002c14:	693a      	ldr	r2, [r7, #16]
 8002c16:	4013      	ands	r3, r2
 8002c18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	091b      	lsrs	r3, r3, #4
 8002c20:	f003 0201 	and.w	r2, r3, #1
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f003 0303 	and.w	r3, r3, #3
 8002c3e:	2b03      	cmp	r3, #3
 8002c40:	d017      	beq.n	8002c72 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	005b      	lsls	r3, r3, #1
 8002c4c:	2203      	movs	r2, #3
 8002c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c52:	43db      	mvns	r3, r3
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	4013      	ands	r3, r2
 8002c58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	689a      	ldr	r2, [r3, #8]
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	005b      	lsls	r3, r3, #1
 8002c62:	fa02 f303 	lsl.w	r3, r2, r3
 8002c66:	693a      	ldr	r2, [r7, #16]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f003 0303 	and.w	r3, r3, #3
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d123      	bne.n	8002cc6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	08da      	lsrs	r2, r3, #3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	3208      	adds	r2, #8
 8002c86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	f003 0307 	and.w	r3, r3, #7
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	220f      	movs	r2, #15
 8002c96:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	691a      	ldr	r2, [r3, #16]
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	f003 0307 	and.w	r3, r3, #7
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb2:	693a      	ldr	r2, [r7, #16]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	08da      	lsrs	r2, r3, #3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	3208      	adds	r2, #8
 8002cc0:	6939      	ldr	r1, [r7, #16]
 8002cc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	005b      	lsls	r3, r3, #1
 8002cd0:	2203      	movs	r2, #3
 8002cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd6:	43db      	mvns	r3, r3
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	4013      	ands	r3, r2
 8002cdc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f003 0203 	and.w	r2, r3, #3
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	fa02 f303 	lsl.w	r3, r2, r3
 8002cee:	693a      	ldr	r2, [r7, #16]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	693a      	ldr	r2, [r7, #16]
 8002cf8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	f000 80a6 	beq.w	8002e54 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d08:	4b5b      	ldr	r3, [pc, #364]	@ (8002e78 <HAL_GPIO_Init+0x2e4>)
 8002d0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d0c:	4a5a      	ldr	r2, [pc, #360]	@ (8002e78 <HAL_GPIO_Init+0x2e4>)
 8002d0e:	f043 0301 	orr.w	r3, r3, #1
 8002d12:	6613      	str	r3, [r2, #96]	@ 0x60
 8002d14:	4b58      	ldr	r3, [pc, #352]	@ (8002e78 <HAL_GPIO_Init+0x2e4>)
 8002d16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d18:	f003 0301 	and.w	r3, r3, #1
 8002d1c:	60bb      	str	r3, [r7, #8]
 8002d1e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d20:	4a56      	ldr	r2, [pc, #344]	@ (8002e7c <HAL_GPIO_Init+0x2e8>)
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	089b      	lsrs	r3, r3, #2
 8002d26:	3302      	adds	r3, #2
 8002d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	f003 0303 	and.w	r3, r3, #3
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	220f      	movs	r2, #15
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	43db      	mvns	r3, r3
 8002d3e:	693a      	ldr	r2, [r7, #16]
 8002d40:	4013      	ands	r3, r2
 8002d42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002d4a:	d01f      	beq.n	8002d8c <HAL_GPIO_Init+0x1f8>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4a4c      	ldr	r2, [pc, #304]	@ (8002e80 <HAL_GPIO_Init+0x2ec>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d019      	beq.n	8002d88 <HAL_GPIO_Init+0x1f4>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4a4b      	ldr	r2, [pc, #300]	@ (8002e84 <HAL_GPIO_Init+0x2f0>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d013      	beq.n	8002d84 <HAL_GPIO_Init+0x1f0>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4a4a      	ldr	r2, [pc, #296]	@ (8002e88 <HAL_GPIO_Init+0x2f4>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d00d      	beq.n	8002d80 <HAL_GPIO_Init+0x1ec>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4a49      	ldr	r2, [pc, #292]	@ (8002e8c <HAL_GPIO_Init+0x2f8>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d007      	beq.n	8002d7c <HAL_GPIO_Init+0x1e8>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a48      	ldr	r2, [pc, #288]	@ (8002e90 <HAL_GPIO_Init+0x2fc>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d101      	bne.n	8002d78 <HAL_GPIO_Init+0x1e4>
 8002d74:	2305      	movs	r3, #5
 8002d76:	e00a      	b.n	8002d8e <HAL_GPIO_Init+0x1fa>
 8002d78:	2306      	movs	r3, #6
 8002d7a:	e008      	b.n	8002d8e <HAL_GPIO_Init+0x1fa>
 8002d7c:	2304      	movs	r3, #4
 8002d7e:	e006      	b.n	8002d8e <HAL_GPIO_Init+0x1fa>
 8002d80:	2303      	movs	r3, #3
 8002d82:	e004      	b.n	8002d8e <HAL_GPIO_Init+0x1fa>
 8002d84:	2302      	movs	r3, #2
 8002d86:	e002      	b.n	8002d8e <HAL_GPIO_Init+0x1fa>
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e000      	b.n	8002d8e <HAL_GPIO_Init+0x1fa>
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	697a      	ldr	r2, [r7, #20]
 8002d90:	f002 0203 	and.w	r2, r2, #3
 8002d94:	0092      	lsls	r2, r2, #2
 8002d96:	4093      	lsls	r3, r2
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d9e:	4937      	ldr	r1, [pc, #220]	@ (8002e7c <HAL_GPIO_Init+0x2e8>)
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	089b      	lsrs	r3, r3, #2
 8002da4:	3302      	adds	r3, #2
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002dac:	4b39      	ldr	r3, [pc, #228]	@ (8002e94 <HAL_GPIO_Init+0x300>)
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	43db      	mvns	r3, r3
 8002db6:	693a      	ldr	r2, [r7, #16]
 8002db8:	4013      	ands	r3, r2
 8002dba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d003      	beq.n	8002dd0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002dc8:	693a      	ldr	r2, [r7, #16]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002dd0:	4a30      	ldr	r2, [pc, #192]	@ (8002e94 <HAL_GPIO_Init+0x300>)
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002dd6:	4b2f      	ldr	r3, [pc, #188]	@ (8002e94 <HAL_GPIO_Init+0x300>)
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	43db      	mvns	r3, r3
 8002de0:	693a      	ldr	r2, [r7, #16]
 8002de2:	4013      	ands	r3, r2
 8002de4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d003      	beq.n	8002dfa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002df2:	693a      	ldr	r2, [r7, #16]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002dfa:	4a26      	ldr	r2, [pc, #152]	@ (8002e94 <HAL_GPIO_Init+0x300>)
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002e00:	4b24      	ldr	r3, [pc, #144]	@ (8002e94 <HAL_GPIO_Init+0x300>)
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	43db      	mvns	r3, r3
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d003      	beq.n	8002e24 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002e24:	4a1b      	ldr	r2, [pc, #108]	@ (8002e94 <HAL_GPIO_Init+0x300>)
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002e2a:	4b1a      	ldr	r3, [pc, #104]	@ (8002e94 <HAL_GPIO_Init+0x300>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	43db      	mvns	r3, r3
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	4013      	ands	r3, r2
 8002e38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d003      	beq.n	8002e4e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002e46:	693a      	ldr	r2, [r7, #16]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002e4e:	4a11      	ldr	r2, [pc, #68]	@ (8002e94 <HAL_GPIO_Init+0x300>)
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	3301      	adds	r3, #1
 8002e58:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	fa22 f303 	lsr.w	r3, r2, r3
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	f47f ae9d 	bne.w	8002ba4 <HAL_GPIO_Init+0x10>
  }
}
 8002e6a:	bf00      	nop
 8002e6c:	bf00      	nop
 8002e6e:	371c      	adds	r7, #28
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr
 8002e78:	40021000 	.word	0x40021000
 8002e7c:	40010000 	.word	0x40010000
 8002e80:	48000400 	.word	0x48000400
 8002e84:	48000800 	.word	0x48000800
 8002e88:	48000c00 	.word	0x48000c00
 8002e8c:	48001000 	.word	0x48001000
 8002e90:	48001400 	.word	0x48001400
 8002e94:	40010400 	.word	0x40010400

08002e98 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d141      	bne.n	8002f2a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ea6:	4b4b      	ldr	r3, [pc, #300]	@ (8002fd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002eae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002eb2:	d131      	bne.n	8002f18 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002eb4:	4b47      	ldr	r3, [pc, #284]	@ (8002fd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002eba:	4a46      	ldr	r2, [pc, #280]	@ (8002fd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ebc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ec0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ec4:	4b43      	ldr	r3, [pc, #268]	@ (8002fd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ecc:	4a41      	ldr	r2, [pc, #260]	@ (8002fd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ece:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ed2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ed4:	4b40      	ldr	r3, [pc, #256]	@ (8002fd8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2232      	movs	r2, #50	@ 0x32
 8002eda:	fb02 f303 	mul.w	r3, r2, r3
 8002ede:	4a3f      	ldr	r2, [pc, #252]	@ (8002fdc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee4:	0c9b      	lsrs	r3, r3, #18
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002eea:	e002      	b.n	8002ef2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ef2:	4b38      	ldr	r3, [pc, #224]	@ (8002fd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002efa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002efe:	d102      	bne.n	8002f06 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1f2      	bne.n	8002eec <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f06:	4b33      	ldr	r3, [pc, #204]	@ (8002fd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f12:	d158      	bne.n	8002fc6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e057      	b.n	8002fc8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f18:	4b2e      	ldr	r3, [pc, #184]	@ (8002fd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f1e:	4a2d      	ldr	r2, [pc, #180]	@ (8002fd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f24:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002f28:	e04d      	b.n	8002fc6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f30:	d141      	bne.n	8002fb6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f32:	4b28      	ldr	r3, [pc, #160]	@ (8002fd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f3e:	d131      	bne.n	8002fa4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f40:	4b24      	ldr	r3, [pc, #144]	@ (8002fd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f46:	4a23      	ldr	r2, [pc, #140]	@ (8002fd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f4c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f50:	4b20      	ldr	r3, [pc, #128]	@ (8002fd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f58:	4a1e      	ldr	r2, [pc, #120]	@ (8002fd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f5e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f60:	4b1d      	ldr	r3, [pc, #116]	@ (8002fd8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2232      	movs	r2, #50	@ 0x32
 8002f66:	fb02 f303 	mul.w	r3, r2, r3
 8002f6a:	4a1c      	ldr	r2, [pc, #112]	@ (8002fdc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f70:	0c9b      	lsrs	r3, r3, #18
 8002f72:	3301      	adds	r3, #1
 8002f74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f76:	e002      	b.n	8002f7e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f7e:	4b15      	ldr	r3, [pc, #84]	@ (8002fd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f8a:	d102      	bne.n	8002f92 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1f2      	bne.n	8002f78 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f92:	4b10      	ldr	r3, [pc, #64]	@ (8002fd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f9e:	d112      	bne.n	8002fc6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e011      	b.n	8002fc8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8002fd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002faa:	4a0a      	ldr	r2, [pc, #40]	@ (8002fd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fb0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002fb4:	e007      	b.n	8002fc6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002fb6:	4b07      	ldr	r3, [pc, #28]	@ (8002fd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002fbe:	4a05      	ldr	r2, [pc, #20]	@ (8002fd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fc0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002fc4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3714      	adds	r7, #20
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr
 8002fd4:	40007000 	.word	0x40007000
 8002fd8:	20000000 	.word	0x20000000
 8002fdc:	431bde83 	.word	0x431bde83

08002fe0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002fe4:	4b05      	ldr	r3, [pc, #20]	@ (8002ffc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	4a04      	ldr	r2, [pc, #16]	@ (8002ffc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002fea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002fee:	6093      	str	r3, [r2, #8]
}
 8002ff0:	bf00      	nop
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	40007000 	.word	0x40007000

08003000 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b088      	sub	sp, #32
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e2fe      	b.n	8003610 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	2b00      	cmp	r3, #0
 800301c:	d075      	beq.n	800310a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800301e:	4b97      	ldr	r3, [pc, #604]	@ (800327c <HAL_RCC_OscConfig+0x27c>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f003 030c 	and.w	r3, r3, #12
 8003026:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003028:	4b94      	ldr	r3, [pc, #592]	@ (800327c <HAL_RCC_OscConfig+0x27c>)
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	f003 0303 	and.w	r3, r3, #3
 8003030:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	2b0c      	cmp	r3, #12
 8003036:	d102      	bne.n	800303e <HAL_RCC_OscConfig+0x3e>
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	2b03      	cmp	r3, #3
 800303c:	d002      	beq.n	8003044 <HAL_RCC_OscConfig+0x44>
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	2b08      	cmp	r3, #8
 8003042:	d10b      	bne.n	800305c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003044:	4b8d      	ldr	r3, [pc, #564]	@ (800327c <HAL_RCC_OscConfig+0x27c>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d05b      	beq.n	8003108 <HAL_RCC_OscConfig+0x108>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d157      	bne.n	8003108 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e2d9      	b.n	8003610 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003064:	d106      	bne.n	8003074 <HAL_RCC_OscConfig+0x74>
 8003066:	4b85      	ldr	r3, [pc, #532]	@ (800327c <HAL_RCC_OscConfig+0x27c>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a84      	ldr	r2, [pc, #528]	@ (800327c <HAL_RCC_OscConfig+0x27c>)
 800306c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003070:	6013      	str	r3, [r2, #0]
 8003072:	e01d      	b.n	80030b0 <HAL_RCC_OscConfig+0xb0>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800307c:	d10c      	bne.n	8003098 <HAL_RCC_OscConfig+0x98>
 800307e:	4b7f      	ldr	r3, [pc, #508]	@ (800327c <HAL_RCC_OscConfig+0x27c>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a7e      	ldr	r2, [pc, #504]	@ (800327c <HAL_RCC_OscConfig+0x27c>)
 8003084:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003088:	6013      	str	r3, [r2, #0]
 800308a:	4b7c      	ldr	r3, [pc, #496]	@ (800327c <HAL_RCC_OscConfig+0x27c>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a7b      	ldr	r2, [pc, #492]	@ (800327c <HAL_RCC_OscConfig+0x27c>)
 8003090:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003094:	6013      	str	r3, [r2, #0]
 8003096:	e00b      	b.n	80030b0 <HAL_RCC_OscConfig+0xb0>
 8003098:	4b78      	ldr	r3, [pc, #480]	@ (800327c <HAL_RCC_OscConfig+0x27c>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a77      	ldr	r2, [pc, #476]	@ (800327c <HAL_RCC_OscConfig+0x27c>)
 800309e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030a2:	6013      	str	r3, [r2, #0]
 80030a4:	4b75      	ldr	r3, [pc, #468]	@ (800327c <HAL_RCC_OscConfig+0x27c>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a74      	ldr	r2, [pc, #464]	@ (800327c <HAL_RCC_OscConfig+0x27c>)
 80030aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d013      	beq.n	80030e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b8:	f7ff f912 	bl	80022e0 <HAL_GetTick>
 80030bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030be:	e008      	b.n	80030d2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030c0:	f7ff f90e 	bl	80022e0 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b64      	cmp	r3, #100	@ 0x64
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e29e      	b.n	8003610 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030d2:	4b6a      	ldr	r3, [pc, #424]	@ (800327c <HAL_RCC_OscConfig+0x27c>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d0f0      	beq.n	80030c0 <HAL_RCC_OscConfig+0xc0>
 80030de:	e014      	b.n	800310a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e0:	f7ff f8fe 	bl	80022e0 <HAL_GetTick>
 80030e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030e8:	f7ff f8fa 	bl	80022e0 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b64      	cmp	r3, #100	@ 0x64
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e28a      	b.n	8003610 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030fa:	4b60      	ldr	r3, [pc, #384]	@ (800327c <HAL_RCC_OscConfig+0x27c>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1f0      	bne.n	80030e8 <HAL_RCC_OscConfig+0xe8>
 8003106:	e000      	b.n	800310a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003108:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d075      	beq.n	8003202 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003116:	4b59      	ldr	r3, [pc, #356]	@ (800327c <HAL_RCC_OscConfig+0x27c>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f003 030c 	and.w	r3, r3, #12
 800311e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003120:	4b56      	ldr	r3, [pc, #344]	@ (800327c <HAL_RCC_OscConfig+0x27c>)
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	f003 0303 	and.w	r3, r3, #3
 8003128:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	2b0c      	cmp	r3, #12
 800312e:	d102      	bne.n	8003136 <HAL_RCC_OscConfig+0x136>
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	2b02      	cmp	r3, #2
 8003134:	d002      	beq.n	800313c <HAL_RCC_OscConfig+0x13c>
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	2b04      	cmp	r3, #4
 800313a:	d11f      	bne.n	800317c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800313c:	4b4f      	ldr	r3, [pc, #316]	@ (800327c <HAL_RCC_OscConfig+0x27c>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003144:	2b00      	cmp	r3, #0
 8003146:	d005      	beq.n	8003154 <HAL_RCC_OscConfig+0x154>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d101      	bne.n	8003154 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e25d      	b.n	8003610 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003154:	4b49      	ldr	r3, [pc, #292]	@ (800327c <HAL_RCC_OscConfig+0x27c>)
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	691b      	ldr	r3, [r3, #16]
 8003160:	061b      	lsls	r3, r3, #24
 8003162:	4946      	ldr	r1, [pc, #280]	@ (800327c <HAL_RCC_OscConfig+0x27c>)
 8003164:	4313      	orrs	r3, r2
 8003166:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003168:	4b45      	ldr	r3, [pc, #276]	@ (8003280 <HAL_RCC_OscConfig+0x280>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4618      	mov	r0, r3
 800316e:	f7fe f877 	bl	8001260 <HAL_InitTick>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d043      	beq.n	8003200 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e249      	b.n	8003610 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d023      	beq.n	80031cc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003184:	4b3d      	ldr	r3, [pc, #244]	@ (800327c <HAL_RCC_OscConfig+0x27c>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a3c      	ldr	r2, [pc, #240]	@ (800327c <HAL_RCC_OscConfig+0x27c>)
 800318a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800318e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003190:	f7ff f8a6 	bl	80022e0 <HAL_GetTick>
 8003194:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003196:	e008      	b.n	80031aa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003198:	f7ff f8a2 	bl	80022e0 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e232      	b.n	8003610 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031aa:	4b34      	ldr	r3, [pc, #208]	@ (800327c <HAL_RCC_OscConfig+0x27c>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d0f0      	beq.n	8003198 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031b6:	4b31      	ldr	r3, [pc, #196]	@ (800327c <HAL_RCC_OscConfig+0x27c>)
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	061b      	lsls	r3, r3, #24
 80031c4:	492d      	ldr	r1, [pc, #180]	@ (800327c <HAL_RCC_OscConfig+0x27c>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	604b      	str	r3, [r1, #4]
 80031ca:	e01a      	b.n	8003202 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031cc:	4b2b      	ldr	r3, [pc, #172]	@ (800327c <HAL_RCC_OscConfig+0x27c>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a2a      	ldr	r2, [pc, #168]	@ (800327c <HAL_RCC_OscConfig+0x27c>)
 80031d2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80031d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d8:	f7ff f882 	bl	80022e0 <HAL_GetTick>
 80031dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031de:	e008      	b.n	80031f2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031e0:	f7ff f87e 	bl	80022e0 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e20e      	b.n	8003610 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031f2:	4b22      	ldr	r3, [pc, #136]	@ (800327c <HAL_RCC_OscConfig+0x27c>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1f0      	bne.n	80031e0 <HAL_RCC_OscConfig+0x1e0>
 80031fe:	e000      	b.n	8003202 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003200:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0308 	and.w	r3, r3, #8
 800320a:	2b00      	cmp	r3, #0
 800320c:	d041      	beq.n	8003292 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d01c      	beq.n	8003250 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003216:	4b19      	ldr	r3, [pc, #100]	@ (800327c <HAL_RCC_OscConfig+0x27c>)
 8003218:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800321c:	4a17      	ldr	r2, [pc, #92]	@ (800327c <HAL_RCC_OscConfig+0x27c>)
 800321e:	f043 0301 	orr.w	r3, r3, #1
 8003222:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003226:	f7ff f85b 	bl	80022e0 <HAL_GetTick>
 800322a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800322c:	e008      	b.n	8003240 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800322e:	f7ff f857 	bl	80022e0 <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	2b02      	cmp	r3, #2
 800323a:	d901      	bls.n	8003240 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e1e7      	b.n	8003610 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003240:	4b0e      	ldr	r3, [pc, #56]	@ (800327c <HAL_RCC_OscConfig+0x27c>)
 8003242:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d0ef      	beq.n	800322e <HAL_RCC_OscConfig+0x22e>
 800324e:	e020      	b.n	8003292 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003250:	4b0a      	ldr	r3, [pc, #40]	@ (800327c <HAL_RCC_OscConfig+0x27c>)
 8003252:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003256:	4a09      	ldr	r2, [pc, #36]	@ (800327c <HAL_RCC_OscConfig+0x27c>)
 8003258:	f023 0301 	bic.w	r3, r3, #1
 800325c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003260:	f7ff f83e 	bl	80022e0 <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003266:	e00d      	b.n	8003284 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003268:	f7ff f83a 	bl	80022e0 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d906      	bls.n	8003284 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e1ca      	b.n	8003610 <HAL_RCC_OscConfig+0x610>
 800327a:	bf00      	nop
 800327c:	40021000 	.word	0x40021000
 8003280:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003284:	4b8c      	ldr	r3, [pc, #560]	@ (80034b8 <HAL_RCC_OscConfig+0x4b8>)
 8003286:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1ea      	bne.n	8003268 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0304 	and.w	r3, r3, #4
 800329a:	2b00      	cmp	r3, #0
 800329c:	f000 80a6 	beq.w	80033ec <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032a0:	2300      	movs	r3, #0
 80032a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80032a4:	4b84      	ldr	r3, [pc, #528]	@ (80034b8 <HAL_RCC_OscConfig+0x4b8>)
 80032a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d101      	bne.n	80032b4 <HAL_RCC_OscConfig+0x2b4>
 80032b0:	2301      	movs	r3, #1
 80032b2:	e000      	b.n	80032b6 <HAL_RCC_OscConfig+0x2b6>
 80032b4:	2300      	movs	r3, #0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d00d      	beq.n	80032d6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032ba:	4b7f      	ldr	r3, [pc, #508]	@ (80034b8 <HAL_RCC_OscConfig+0x4b8>)
 80032bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032be:	4a7e      	ldr	r2, [pc, #504]	@ (80034b8 <HAL_RCC_OscConfig+0x4b8>)
 80032c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80032c6:	4b7c      	ldr	r3, [pc, #496]	@ (80034b8 <HAL_RCC_OscConfig+0x4b8>)
 80032c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032ce:	60fb      	str	r3, [r7, #12]
 80032d0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80032d2:	2301      	movs	r3, #1
 80032d4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032d6:	4b79      	ldr	r3, [pc, #484]	@ (80034bc <HAL_RCC_OscConfig+0x4bc>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d118      	bne.n	8003314 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032e2:	4b76      	ldr	r3, [pc, #472]	@ (80034bc <HAL_RCC_OscConfig+0x4bc>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a75      	ldr	r2, [pc, #468]	@ (80034bc <HAL_RCC_OscConfig+0x4bc>)
 80032e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032ee:	f7fe fff7 	bl	80022e0 <HAL_GetTick>
 80032f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032f4:	e008      	b.n	8003308 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032f6:	f7fe fff3 	bl	80022e0 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d901      	bls.n	8003308 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e183      	b.n	8003610 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003308:	4b6c      	ldr	r3, [pc, #432]	@ (80034bc <HAL_RCC_OscConfig+0x4bc>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003310:	2b00      	cmp	r3, #0
 8003312:	d0f0      	beq.n	80032f6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	2b01      	cmp	r3, #1
 800331a:	d108      	bne.n	800332e <HAL_RCC_OscConfig+0x32e>
 800331c:	4b66      	ldr	r3, [pc, #408]	@ (80034b8 <HAL_RCC_OscConfig+0x4b8>)
 800331e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003322:	4a65      	ldr	r2, [pc, #404]	@ (80034b8 <HAL_RCC_OscConfig+0x4b8>)
 8003324:	f043 0301 	orr.w	r3, r3, #1
 8003328:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800332c:	e024      	b.n	8003378 <HAL_RCC_OscConfig+0x378>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	2b05      	cmp	r3, #5
 8003334:	d110      	bne.n	8003358 <HAL_RCC_OscConfig+0x358>
 8003336:	4b60      	ldr	r3, [pc, #384]	@ (80034b8 <HAL_RCC_OscConfig+0x4b8>)
 8003338:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800333c:	4a5e      	ldr	r2, [pc, #376]	@ (80034b8 <HAL_RCC_OscConfig+0x4b8>)
 800333e:	f043 0304 	orr.w	r3, r3, #4
 8003342:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003346:	4b5c      	ldr	r3, [pc, #368]	@ (80034b8 <HAL_RCC_OscConfig+0x4b8>)
 8003348:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800334c:	4a5a      	ldr	r2, [pc, #360]	@ (80034b8 <HAL_RCC_OscConfig+0x4b8>)
 800334e:	f043 0301 	orr.w	r3, r3, #1
 8003352:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003356:	e00f      	b.n	8003378 <HAL_RCC_OscConfig+0x378>
 8003358:	4b57      	ldr	r3, [pc, #348]	@ (80034b8 <HAL_RCC_OscConfig+0x4b8>)
 800335a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800335e:	4a56      	ldr	r2, [pc, #344]	@ (80034b8 <HAL_RCC_OscConfig+0x4b8>)
 8003360:	f023 0301 	bic.w	r3, r3, #1
 8003364:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003368:	4b53      	ldr	r3, [pc, #332]	@ (80034b8 <HAL_RCC_OscConfig+0x4b8>)
 800336a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800336e:	4a52      	ldr	r2, [pc, #328]	@ (80034b8 <HAL_RCC_OscConfig+0x4b8>)
 8003370:	f023 0304 	bic.w	r3, r3, #4
 8003374:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d016      	beq.n	80033ae <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003380:	f7fe ffae 	bl	80022e0 <HAL_GetTick>
 8003384:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003386:	e00a      	b.n	800339e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003388:	f7fe ffaa 	bl	80022e0 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003396:	4293      	cmp	r3, r2
 8003398:	d901      	bls.n	800339e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e138      	b.n	8003610 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800339e:	4b46      	ldr	r3, [pc, #280]	@ (80034b8 <HAL_RCC_OscConfig+0x4b8>)
 80033a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033a4:	f003 0302 	and.w	r3, r3, #2
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d0ed      	beq.n	8003388 <HAL_RCC_OscConfig+0x388>
 80033ac:	e015      	b.n	80033da <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ae:	f7fe ff97 	bl	80022e0 <HAL_GetTick>
 80033b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033b4:	e00a      	b.n	80033cc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033b6:	f7fe ff93 	bl	80022e0 <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d901      	bls.n	80033cc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e121      	b.n	8003610 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033cc:	4b3a      	ldr	r3, [pc, #232]	@ (80034b8 <HAL_RCC_OscConfig+0x4b8>)
 80033ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1ed      	bne.n	80033b6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80033da:	7ffb      	ldrb	r3, [r7, #31]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d105      	bne.n	80033ec <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033e0:	4b35      	ldr	r3, [pc, #212]	@ (80034b8 <HAL_RCC_OscConfig+0x4b8>)
 80033e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033e4:	4a34      	ldr	r2, [pc, #208]	@ (80034b8 <HAL_RCC_OscConfig+0x4b8>)
 80033e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033ea:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0320 	and.w	r3, r3, #32
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d03c      	beq.n	8003472 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d01c      	beq.n	800343a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003400:	4b2d      	ldr	r3, [pc, #180]	@ (80034b8 <HAL_RCC_OscConfig+0x4b8>)
 8003402:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003406:	4a2c      	ldr	r2, [pc, #176]	@ (80034b8 <HAL_RCC_OscConfig+0x4b8>)
 8003408:	f043 0301 	orr.w	r3, r3, #1
 800340c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003410:	f7fe ff66 	bl	80022e0 <HAL_GetTick>
 8003414:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003416:	e008      	b.n	800342a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003418:	f7fe ff62 	bl	80022e0 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b02      	cmp	r3, #2
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e0f2      	b.n	8003610 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800342a:	4b23      	ldr	r3, [pc, #140]	@ (80034b8 <HAL_RCC_OscConfig+0x4b8>)
 800342c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d0ef      	beq.n	8003418 <HAL_RCC_OscConfig+0x418>
 8003438:	e01b      	b.n	8003472 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800343a:	4b1f      	ldr	r3, [pc, #124]	@ (80034b8 <HAL_RCC_OscConfig+0x4b8>)
 800343c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003440:	4a1d      	ldr	r2, [pc, #116]	@ (80034b8 <HAL_RCC_OscConfig+0x4b8>)
 8003442:	f023 0301 	bic.w	r3, r3, #1
 8003446:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800344a:	f7fe ff49 	bl	80022e0 <HAL_GetTick>
 800344e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003450:	e008      	b.n	8003464 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003452:	f7fe ff45 	bl	80022e0 <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	2b02      	cmp	r3, #2
 800345e:	d901      	bls.n	8003464 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e0d5      	b.n	8003610 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003464:	4b14      	ldr	r3, [pc, #80]	@ (80034b8 <HAL_RCC_OscConfig+0x4b8>)
 8003466:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1ef      	bne.n	8003452 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	69db      	ldr	r3, [r3, #28]
 8003476:	2b00      	cmp	r3, #0
 8003478:	f000 80c9 	beq.w	800360e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800347c:	4b0e      	ldr	r3, [pc, #56]	@ (80034b8 <HAL_RCC_OscConfig+0x4b8>)
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f003 030c 	and.w	r3, r3, #12
 8003484:	2b0c      	cmp	r3, #12
 8003486:	f000 8083 	beq.w	8003590 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	69db      	ldr	r3, [r3, #28]
 800348e:	2b02      	cmp	r3, #2
 8003490:	d15e      	bne.n	8003550 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003492:	4b09      	ldr	r3, [pc, #36]	@ (80034b8 <HAL_RCC_OscConfig+0x4b8>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a08      	ldr	r2, [pc, #32]	@ (80034b8 <HAL_RCC_OscConfig+0x4b8>)
 8003498:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800349c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800349e:	f7fe ff1f 	bl	80022e0 <HAL_GetTick>
 80034a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034a4:	e00c      	b.n	80034c0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034a6:	f7fe ff1b 	bl	80022e0 <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d905      	bls.n	80034c0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e0ab      	b.n	8003610 <HAL_RCC_OscConfig+0x610>
 80034b8:	40021000 	.word	0x40021000
 80034bc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034c0:	4b55      	ldr	r3, [pc, #340]	@ (8003618 <HAL_RCC_OscConfig+0x618>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d1ec      	bne.n	80034a6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034cc:	4b52      	ldr	r3, [pc, #328]	@ (8003618 <HAL_RCC_OscConfig+0x618>)
 80034ce:	68da      	ldr	r2, [r3, #12]
 80034d0:	4b52      	ldr	r3, [pc, #328]	@ (800361c <HAL_RCC_OscConfig+0x61c>)
 80034d2:	4013      	ands	r3, r2
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	6a11      	ldr	r1, [r2, #32]
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80034dc:	3a01      	subs	r2, #1
 80034de:	0112      	lsls	r2, r2, #4
 80034e0:	4311      	orrs	r1, r2
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80034e6:	0212      	lsls	r2, r2, #8
 80034e8:	4311      	orrs	r1, r2
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80034ee:	0852      	lsrs	r2, r2, #1
 80034f0:	3a01      	subs	r2, #1
 80034f2:	0552      	lsls	r2, r2, #21
 80034f4:	4311      	orrs	r1, r2
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80034fa:	0852      	lsrs	r2, r2, #1
 80034fc:	3a01      	subs	r2, #1
 80034fe:	0652      	lsls	r2, r2, #25
 8003500:	4311      	orrs	r1, r2
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003506:	06d2      	lsls	r2, r2, #27
 8003508:	430a      	orrs	r2, r1
 800350a:	4943      	ldr	r1, [pc, #268]	@ (8003618 <HAL_RCC_OscConfig+0x618>)
 800350c:	4313      	orrs	r3, r2
 800350e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003510:	4b41      	ldr	r3, [pc, #260]	@ (8003618 <HAL_RCC_OscConfig+0x618>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a40      	ldr	r2, [pc, #256]	@ (8003618 <HAL_RCC_OscConfig+0x618>)
 8003516:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800351a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800351c:	4b3e      	ldr	r3, [pc, #248]	@ (8003618 <HAL_RCC_OscConfig+0x618>)
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	4a3d      	ldr	r2, [pc, #244]	@ (8003618 <HAL_RCC_OscConfig+0x618>)
 8003522:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003526:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003528:	f7fe feda 	bl	80022e0 <HAL_GetTick>
 800352c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800352e:	e008      	b.n	8003542 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003530:	f7fe fed6 	bl	80022e0 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b02      	cmp	r3, #2
 800353c:	d901      	bls.n	8003542 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e066      	b.n	8003610 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003542:	4b35      	ldr	r3, [pc, #212]	@ (8003618 <HAL_RCC_OscConfig+0x618>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d0f0      	beq.n	8003530 <HAL_RCC_OscConfig+0x530>
 800354e:	e05e      	b.n	800360e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003550:	4b31      	ldr	r3, [pc, #196]	@ (8003618 <HAL_RCC_OscConfig+0x618>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a30      	ldr	r2, [pc, #192]	@ (8003618 <HAL_RCC_OscConfig+0x618>)
 8003556:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800355a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800355c:	f7fe fec0 	bl	80022e0 <HAL_GetTick>
 8003560:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003562:	e008      	b.n	8003576 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003564:	f7fe febc 	bl	80022e0 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b02      	cmp	r3, #2
 8003570:	d901      	bls.n	8003576 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e04c      	b.n	8003610 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003576:	4b28      	ldr	r3, [pc, #160]	@ (8003618 <HAL_RCC_OscConfig+0x618>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1f0      	bne.n	8003564 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003582:	4b25      	ldr	r3, [pc, #148]	@ (8003618 <HAL_RCC_OscConfig+0x618>)
 8003584:	68da      	ldr	r2, [r3, #12]
 8003586:	4924      	ldr	r1, [pc, #144]	@ (8003618 <HAL_RCC_OscConfig+0x618>)
 8003588:	4b25      	ldr	r3, [pc, #148]	@ (8003620 <HAL_RCC_OscConfig+0x620>)
 800358a:	4013      	ands	r3, r2
 800358c:	60cb      	str	r3, [r1, #12]
 800358e:	e03e      	b.n	800360e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	69db      	ldr	r3, [r3, #28]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d101      	bne.n	800359c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e039      	b.n	8003610 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800359c:	4b1e      	ldr	r3, [pc, #120]	@ (8003618 <HAL_RCC_OscConfig+0x618>)
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	f003 0203 	and.w	r2, r3, #3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a1b      	ldr	r3, [r3, #32]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d12c      	bne.n	800360a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ba:	3b01      	subs	r3, #1
 80035bc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035be:	429a      	cmp	r2, r3
 80035c0:	d123      	bne.n	800360a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035cc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d11b      	bne.n	800360a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035dc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80035de:	429a      	cmp	r2, r3
 80035e0:	d113      	bne.n	800360a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ec:	085b      	lsrs	r3, r3, #1
 80035ee:	3b01      	subs	r3, #1
 80035f0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d109      	bne.n	800360a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003600:	085b      	lsrs	r3, r3, #1
 8003602:	3b01      	subs	r3, #1
 8003604:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003606:	429a      	cmp	r2, r3
 8003608:	d001      	beq.n	800360e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e000      	b.n	8003610 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800360e:	2300      	movs	r3, #0
}
 8003610:	4618      	mov	r0, r3
 8003612:	3720      	adds	r7, #32
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	40021000 	.word	0x40021000
 800361c:	019f800c 	.word	0x019f800c
 8003620:	feeefffc 	.word	0xfeeefffc

08003624 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b086      	sub	sp, #24
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800362e:	2300      	movs	r3, #0
 8003630:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d101      	bne.n	800363c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e11e      	b.n	800387a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800363c:	4b91      	ldr	r3, [pc, #580]	@ (8003884 <HAL_RCC_ClockConfig+0x260>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 030f 	and.w	r3, r3, #15
 8003644:	683a      	ldr	r2, [r7, #0]
 8003646:	429a      	cmp	r2, r3
 8003648:	d910      	bls.n	800366c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800364a:	4b8e      	ldr	r3, [pc, #568]	@ (8003884 <HAL_RCC_ClockConfig+0x260>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f023 020f 	bic.w	r2, r3, #15
 8003652:	498c      	ldr	r1, [pc, #560]	@ (8003884 <HAL_RCC_ClockConfig+0x260>)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	4313      	orrs	r3, r2
 8003658:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800365a:	4b8a      	ldr	r3, [pc, #552]	@ (8003884 <HAL_RCC_ClockConfig+0x260>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 030f 	and.w	r3, r3, #15
 8003662:	683a      	ldr	r2, [r7, #0]
 8003664:	429a      	cmp	r2, r3
 8003666:	d001      	beq.n	800366c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e106      	b.n	800387a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0301 	and.w	r3, r3, #1
 8003674:	2b00      	cmp	r3, #0
 8003676:	d073      	beq.n	8003760 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	2b03      	cmp	r3, #3
 800367e:	d129      	bne.n	80036d4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003680:	4b81      	ldr	r3, [pc, #516]	@ (8003888 <HAL_RCC_ClockConfig+0x264>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d101      	bne.n	8003690 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e0f4      	b.n	800387a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003690:	f000 f9d0 	bl	8003a34 <RCC_GetSysClockFreqFromPLLSource>
 8003694:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	4a7c      	ldr	r2, [pc, #496]	@ (800388c <HAL_RCC_ClockConfig+0x268>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d93f      	bls.n	800371e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800369e:	4b7a      	ldr	r3, [pc, #488]	@ (8003888 <HAL_RCC_ClockConfig+0x264>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d009      	beq.n	80036be <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d033      	beq.n	800371e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d12f      	bne.n	800371e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80036be:	4b72      	ldr	r3, [pc, #456]	@ (8003888 <HAL_RCC_ClockConfig+0x264>)
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80036c6:	4a70      	ldr	r2, [pc, #448]	@ (8003888 <HAL_RCC_ClockConfig+0x264>)
 80036c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036cc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80036ce:	2380      	movs	r3, #128	@ 0x80
 80036d0:	617b      	str	r3, [r7, #20]
 80036d2:	e024      	b.n	800371e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d107      	bne.n	80036ec <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036dc:	4b6a      	ldr	r3, [pc, #424]	@ (8003888 <HAL_RCC_ClockConfig+0x264>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d109      	bne.n	80036fc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e0c6      	b.n	800387a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036ec:	4b66      	ldr	r3, [pc, #408]	@ (8003888 <HAL_RCC_ClockConfig+0x264>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d101      	bne.n	80036fc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e0be      	b.n	800387a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80036fc:	f000 f8ce 	bl	800389c <HAL_RCC_GetSysClockFreq>
 8003700:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	4a61      	ldr	r2, [pc, #388]	@ (800388c <HAL_RCC_ClockConfig+0x268>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d909      	bls.n	800371e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800370a:	4b5f      	ldr	r3, [pc, #380]	@ (8003888 <HAL_RCC_ClockConfig+0x264>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003712:	4a5d      	ldr	r2, [pc, #372]	@ (8003888 <HAL_RCC_ClockConfig+0x264>)
 8003714:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003718:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800371a:	2380      	movs	r3, #128	@ 0x80
 800371c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800371e:	4b5a      	ldr	r3, [pc, #360]	@ (8003888 <HAL_RCC_ClockConfig+0x264>)
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f023 0203 	bic.w	r2, r3, #3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	4957      	ldr	r1, [pc, #348]	@ (8003888 <HAL_RCC_ClockConfig+0x264>)
 800372c:	4313      	orrs	r3, r2
 800372e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003730:	f7fe fdd6 	bl	80022e0 <HAL_GetTick>
 8003734:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003736:	e00a      	b.n	800374e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003738:	f7fe fdd2 	bl	80022e0 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003746:	4293      	cmp	r3, r2
 8003748:	d901      	bls.n	800374e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e095      	b.n	800387a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800374e:	4b4e      	ldr	r3, [pc, #312]	@ (8003888 <HAL_RCC_ClockConfig+0x264>)
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f003 020c 	and.w	r2, r3, #12
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	429a      	cmp	r2, r3
 800375e:	d1eb      	bne.n	8003738 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0302 	and.w	r3, r3, #2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d023      	beq.n	80037b4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0304 	and.w	r3, r3, #4
 8003774:	2b00      	cmp	r3, #0
 8003776:	d005      	beq.n	8003784 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003778:	4b43      	ldr	r3, [pc, #268]	@ (8003888 <HAL_RCC_ClockConfig+0x264>)
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	4a42      	ldr	r2, [pc, #264]	@ (8003888 <HAL_RCC_ClockConfig+0x264>)
 800377e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003782:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0308 	and.w	r3, r3, #8
 800378c:	2b00      	cmp	r3, #0
 800378e:	d007      	beq.n	80037a0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003790:	4b3d      	ldr	r3, [pc, #244]	@ (8003888 <HAL_RCC_ClockConfig+0x264>)
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003798:	4a3b      	ldr	r2, [pc, #236]	@ (8003888 <HAL_RCC_ClockConfig+0x264>)
 800379a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800379e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037a0:	4b39      	ldr	r3, [pc, #228]	@ (8003888 <HAL_RCC_ClockConfig+0x264>)
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	4936      	ldr	r1, [pc, #216]	@ (8003888 <HAL_RCC_ClockConfig+0x264>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	608b      	str	r3, [r1, #8]
 80037b2:	e008      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	2b80      	cmp	r3, #128	@ 0x80
 80037b8:	d105      	bne.n	80037c6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80037ba:	4b33      	ldr	r3, [pc, #204]	@ (8003888 <HAL_RCC_ClockConfig+0x264>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	4a32      	ldr	r2, [pc, #200]	@ (8003888 <HAL_RCC_ClockConfig+0x264>)
 80037c0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80037c4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037c6:	4b2f      	ldr	r3, [pc, #188]	@ (8003884 <HAL_RCC_ClockConfig+0x260>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 030f 	and.w	r3, r3, #15
 80037ce:	683a      	ldr	r2, [r7, #0]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d21d      	bcs.n	8003810 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037d4:	4b2b      	ldr	r3, [pc, #172]	@ (8003884 <HAL_RCC_ClockConfig+0x260>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f023 020f 	bic.w	r2, r3, #15
 80037dc:	4929      	ldr	r1, [pc, #164]	@ (8003884 <HAL_RCC_ClockConfig+0x260>)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80037e4:	f7fe fd7c 	bl	80022e0 <HAL_GetTick>
 80037e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ea:	e00a      	b.n	8003802 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037ec:	f7fe fd78 	bl	80022e0 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d901      	bls.n	8003802 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e03b      	b.n	800387a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003802:	4b20      	ldr	r3, [pc, #128]	@ (8003884 <HAL_RCC_ClockConfig+0x260>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 030f 	and.w	r3, r3, #15
 800380a:	683a      	ldr	r2, [r7, #0]
 800380c:	429a      	cmp	r2, r3
 800380e:	d1ed      	bne.n	80037ec <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0304 	and.w	r3, r3, #4
 8003818:	2b00      	cmp	r3, #0
 800381a:	d008      	beq.n	800382e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800381c:	4b1a      	ldr	r3, [pc, #104]	@ (8003888 <HAL_RCC_ClockConfig+0x264>)
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	4917      	ldr	r1, [pc, #92]	@ (8003888 <HAL_RCC_ClockConfig+0x264>)
 800382a:	4313      	orrs	r3, r2
 800382c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0308 	and.w	r3, r3, #8
 8003836:	2b00      	cmp	r3, #0
 8003838:	d009      	beq.n	800384e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800383a:	4b13      	ldr	r3, [pc, #76]	@ (8003888 <HAL_RCC_ClockConfig+0x264>)
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	00db      	lsls	r3, r3, #3
 8003848:	490f      	ldr	r1, [pc, #60]	@ (8003888 <HAL_RCC_ClockConfig+0x264>)
 800384a:	4313      	orrs	r3, r2
 800384c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800384e:	f000 f825 	bl	800389c <HAL_RCC_GetSysClockFreq>
 8003852:	4602      	mov	r2, r0
 8003854:	4b0c      	ldr	r3, [pc, #48]	@ (8003888 <HAL_RCC_ClockConfig+0x264>)
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	091b      	lsrs	r3, r3, #4
 800385a:	f003 030f 	and.w	r3, r3, #15
 800385e:	490c      	ldr	r1, [pc, #48]	@ (8003890 <HAL_RCC_ClockConfig+0x26c>)
 8003860:	5ccb      	ldrb	r3, [r1, r3]
 8003862:	f003 031f 	and.w	r3, r3, #31
 8003866:	fa22 f303 	lsr.w	r3, r2, r3
 800386a:	4a0a      	ldr	r2, [pc, #40]	@ (8003894 <HAL_RCC_ClockConfig+0x270>)
 800386c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800386e:	4b0a      	ldr	r3, [pc, #40]	@ (8003898 <HAL_RCC_ClockConfig+0x274>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4618      	mov	r0, r3
 8003874:	f7fd fcf4 	bl	8001260 <HAL_InitTick>
 8003878:	4603      	mov	r3, r0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3718      	adds	r7, #24
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	40022000 	.word	0x40022000
 8003888:	40021000 	.word	0x40021000
 800388c:	04c4b400 	.word	0x04c4b400
 8003890:	0800cf80 	.word	0x0800cf80
 8003894:	20000000 	.word	0x20000000
 8003898:	20000004 	.word	0x20000004

0800389c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800389c:	b480      	push	{r7}
 800389e:	b087      	sub	sp, #28
 80038a0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80038a2:	4b2c      	ldr	r3, [pc, #176]	@ (8003954 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f003 030c 	and.w	r3, r3, #12
 80038aa:	2b04      	cmp	r3, #4
 80038ac:	d102      	bne.n	80038b4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80038ae:	4b2a      	ldr	r3, [pc, #168]	@ (8003958 <HAL_RCC_GetSysClockFreq+0xbc>)
 80038b0:	613b      	str	r3, [r7, #16]
 80038b2:	e047      	b.n	8003944 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80038b4:	4b27      	ldr	r3, [pc, #156]	@ (8003954 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f003 030c 	and.w	r3, r3, #12
 80038bc:	2b08      	cmp	r3, #8
 80038be:	d102      	bne.n	80038c6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80038c0:	4b26      	ldr	r3, [pc, #152]	@ (800395c <HAL_RCC_GetSysClockFreq+0xc0>)
 80038c2:	613b      	str	r3, [r7, #16]
 80038c4:	e03e      	b.n	8003944 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80038c6:	4b23      	ldr	r3, [pc, #140]	@ (8003954 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f003 030c 	and.w	r3, r3, #12
 80038ce:	2b0c      	cmp	r3, #12
 80038d0:	d136      	bne.n	8003940 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80038d2:	4b20      	ldr	r3, [pc, #128]	@ (8003954 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	f003 0303 	and.w	r3, r3, #3
 80038da:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80038dc:	4b1d      	ldr	r3, [pc, #116]	@ (8003954 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	091b      	lsrs	r3, r3, #4
 80038e2:	f003 030f 	and.w	r3, r3, #15
 80038e6:	3301      	adds	r3, #1
 80038e8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2b03      	cmp	r3, #3
 80038ee:	d10c      	bne.n	800390a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80038f0:	4a1a      	ldr	r2, [pc, #104]	@ (800395c <HAL_RCC_GetSysClockFreq+0xc0>)
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f8:	4a16      	ldr	r2, [pc, #88]	@ (8003954 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038fa:	68d2      	ldr	r2, [r2, #12]
 80038fc:	0a12      	lsrs	r2, r2, #8
 80038fe:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003902:	fb02 f303 	mul.w	r3, r2, r3
 8003906:	617b      	str	r3, [r7, #20]
      break;
 8003908:	e00c      	b.n	8003924 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800390a:	4a13      	ldr	r2, [pc, #76]	@ (8003958 <HAL_RCC_GetSysClockFreq+0xbc>)
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003912:	4a10      	ldr	r2, [pc, #64]	@ (8003954 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003914:	68d2      	ldr	r2, [r2, #12]
 8003916:	0a12      	lsrs	r2, r2, #8
 8003918:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800391c:	fb02 f303 	mul.w	r3, r2, r3
 8003920:	617b      	str	r3, [r7, #20]
      break;
 8003922:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003924:	4b0b      	ldr	r3, [pc, #44]	@ (8003954 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	0e5b      	lsrs	r3, r3, #25
 800392a:	f003 0303 	and.w	r3, r3, #3
 800392e:	3301      	adds	r3, #1
 8003930:	005b      	lsls	r3, r3, #1
 8003932:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003934:	697a      	ldr	r2, [r7, #20]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	fbb2 f3f3 	udiv	r3, r2, r3
 800393c:	613b      	str	r3, [r7, #16]
 800393e:	e001      	b.n	8003944 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003940:	2300      	movs	r3, #0
 8003942:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003944:	693b      	ldr	r3, [r7, #16]
}
 8003946:	4618      	mov	r0, r3
 8003948:	371c      	adds	r7, #28
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	40021000 	.word	0x40021000
 8003958:	00f42400 	.word	0x00f42400
 800395c:	016e3600 	.word	0x016e3600

08003960 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003960:	b480      	push	{r7}
 8003962:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003964:	4b03      	ldr	r3, [pc, #12]	@ (8003974 <HAL_RCC_GetHCLKFreq+0x14>)
 8003966:	681b      	ldr	r3, [r3, #0]
}
 8003968:	4618      	mov	r0, r3
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	20000000 	.word	0x20000000

08003978 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800397c:	f7ff fff0 	bl	8003960 <HAL_RCC_GetHCLKFreq>
 8003980:	4602      	mov	r2, r0
 8003982:	4b06      	ldr	r3, [pc, #24]	@ (800399c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	0a1b      	lsrs	r3, r3, #8
 8003988:	f003 0307 	and.w	r3, r3, #7
 800398c:	4904      	ldr	r1, [pc, #16]	@ (80039a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800398e:	5ccb      	ldrb	r3, [r1, r3]
 8003990:	f003 031f 	and.w	r3, r3, #31
 8003994:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003998:	4618      	mov	r0, r3
 800399a:	bd80      	pop	{r7, pc}
 800399c:	40021000 	.word	0x40021000
 80039a0:	0800cf90 	.word	0x0800cf90

080039a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80039a8:	f7ff ffda 	bl	8003960 <HAL_RCC_GetHCLKFreq>
 80039ac:	4602      	mov	r2, r0
 80039ae:	4b06      	ldr	r3, [pc, #24]	@ (80039c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	0adb      	lsrs	r3, r3, #11
 80039b4:	f003 0307 	and.w	r3, r3, #7
 80039b8:	4904      	ldr	r1, [pc, #16]	@ (80039cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80039ba:	5ccb      	ldrb	r3, [r1, r3]
 80039bc:	f003 031f 	and.w	r3, r3, #31
 80039c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	40021000 	.word	0x40021000
 80039cc:	0800cf90 	.word	0x0800cf90

080039d0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	220f      	movs	r2, #15
 80039de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80039e0:	4b12      	ldr	r3, [pc, #72]	@ (8003a2c <HAL_RCC_GetClockConfig+0x5c>)
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f003 0203 	and.w	r2, r3, #3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80039ec:	4b0f      	ldr	r3, [pc, #60]	@ (8003a2c <HAL_RCC_GetClockConfig+0x5c>)
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80039f8:	4b0c      	ldr	r3, [pc, #48]	@ (8003a2c <HAL_RCC_GetClockConfig+0x5c>)
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003a04:	4b09      	ldr	r3, [pc, #36]	@ (8003a2c <HAL_RCC_GetClockConfig+0x5c>)
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	08db      	lsrs	r3, r3, #3
 8003a0a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003a12:	4b07      	ldr	r3, [pc, #28]	@ (8003a30 <HAL_RCC_GetClockConfig+0x60>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 020f 	and.w	r2, r3, #15
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	601a      	str	r2, [r3, #0]
}
 8003a1e:	bf00      	nop
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	40021000 	.word	0x40021000
 8003a30:	40022000 	.word	0x40022000

08003a34 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b087      	sub	sp, #28
 8003a38:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a3a:	4b1e      	ldr	r3, [pc, #120]	@ (8003ab4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	f003 0303 	and.w	r3, r3, #3
 8003a42:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a44:	4b1b      	ldr	r3, [pc, #108]	@ (8003ab4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	091b      	lsrs	r3, r3, #4
 8003a4a:	f003 030f 	and.w	r3, r3, #15
 8003a4e:	3301      	adds	r3, #1
 8003a50:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	2b03      	cmp	r3, #3
 8003a56:	d10c      	bne.n	8003a72 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a58:	4a17      	ldr	r2, [pc, #92]	@ (8003ab8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a60:	4a14      	ldr	r2, [pc, #80]	@ (8003ab4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a62:	68d2      	ldr	r2, [r2, #12]
 8003a64:	0a12      	lsrs	r2, r2, #8
 8003a66:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003a6a:	fb02 f303 	mul.w	r3, r2, r3
 8003a6e:	617b      	str	r3, [r7, #20]
    break;
 8003a70:	e00c      	b.n	8003a8c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a72:	4a12      	ldr	r2, [pc, #72]	@ (8003abc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a7a:	4a0e      	ldr	r2, [pc, #56]	@ (8003ab4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a7c:	68d2      	ldr	r2, [r2, #12]
 8003a7e:	0a12      	lsrs	r2, r2, #8
 8003a80:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003a84:	fb02 f303 	mul.w	r3, r2, r3
 8003a88:	617b      	str	r3, [r7, #20]
    break;
 8003a8a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a8c:	4b09      	ldr	r3, [pc, #36]	@ (8003ab4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	0e5b      	lsrs	r3, r3, #25
 8003a92:	f003 0303 	and.w	r3, r3, #3
 8003a96:	3301      	adds	r3, #1
 8003a98:	005b      	lsls	r3, r3, #1
 8003a9a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003a9c:	697a      	ldr	r2, [r7, #20]
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003aa6:	687b      	ldr	r3, [r7, #4]
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	371c      	adds	r7, #28
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr
 8003ab4:	40021000 	.word	0x40021000
 8003ab8:	016e3600 	.word	0x016e3600
 8003abc:	00f42400 	.word	0x00f42400

08003ac0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b086      	sub	sp, #24
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ac8:	2300      	movs	r3, #0
 8003aca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003acc:	2300      	movs	r3, #0
 8003ace:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f000 8098 	beq.w	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ae2:	4b43      	ldr	r3, [pc, #268]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ae4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ae6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d10d      	bne.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aee:	4b40      	ldr	r3, [pc, #256]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003af0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003af2:	4a3f      	ldr	r2, [pc, #252]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003af4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003af8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003afa:	4b3d      	ldr	r3, [pc, #244]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003afc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003afe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b02:	60bb      	str	r3, [r7, #8]
 8003b04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b06:	2301      	movs	r3, #1
 8003b08:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b0a:	4b3a      	ldr	r3, [pc, #232]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a39      	ldr	r2, [pc, #228]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b14:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b16:	f7fe fbe3 	bl	80022e0 <HAL_GetTick>
 8003b1a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b1c:	e009      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b1e:	f7fe fbdf 	bl	80022e0 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d902      	bls.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	74fb      	strb	r3, [r7, #19]
        break;
 8003b30:	e005      	b.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b32:	4b30      	ldr	r3, [pc, #192]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d0ef      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003b3e:	7cfb      	ldrb	r3, [r7, #19]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d159      	bne.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b44:	4b2a      	ldr	r3, [pc, #168]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b4e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d01e      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b5a:	697a      	ldr	r2, [r7, #20]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d019      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b60:	4b23      	ldr	r3, [pc, #140]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b6a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b6c:	4b20      	ldr	r3, [pc, #128]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b72:	4a1f      	ldr	r2, [pc, #124]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b7c:	4b1c      	ldr	r3, [pc, #112]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b82:	4a1b      	ldr	r2, [pc, #108]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b8c:	4a18      	ldr	r2, [pc, #96]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	f003 0301 	and.w	r3, r3, #1
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d016      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b9e:	f7fe fb9f 	bl	80022e0 <HAL_GetTick>
 8003ba2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ba4:	e00b      	b.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ba6:	f7fe fb9b 	bl	80022e0 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d902      	bls.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	74fb      	strb	r3, [r7, #19]
            break;
 8003bbc:	e006      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bbe:	4b0c      	ldr	r3, [pc, #48]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bc4:	f003 0302 	and.w	r3, r3, #2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d0ec      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003bcc:	7cfb      	ldrb	r3, [r7, #19]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d10b      	bne.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bd2:	4b07      	ldr	r3, [pc, #28]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bd8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003be0:	4903      	ldr	r1, [pc, #12]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003be8:	e008      	b.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bea:	7cfb      	ldrb	r3, [r7, #19]
 8003bec:	74bb      	strb	r3, [r7, #18]
 8003bee:	e005      	b.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003bf0:	40021000 	.word	0x40021000
 8003bf4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bf8:	7cfb      	ldrb	r3, [r7, #19]
 8003bfa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bfc:	7c7b      	ldrb	r3, [r7, #17]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d105      	bne.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c02:	4ba7      	ldr	r3, [pc, #668]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c06:	4aa6      	ldr	r2, [pc, #664]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c08:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c0c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d00a      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c1a:	4ba1      	ldr	r3, [pc, #644]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c20:	f023 0203 	bic.w	r2, r3, #3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	499d      	ldr	r1, [pc, #628]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0302 	and.w	r3, r3, #2
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d00a      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c3c:	4b98      	ldr	r3, [pc, #608]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c42:	f023 020c 	bic.w	r2, r3, #12
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	4995      	ldr	r1, [pc, #596]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0304 	and.w	r3, r3, #4
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00a      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c5e:	4b90      	ldr	r3, [pc, #576]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c64:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	498c      	ldr	r1, [pc, #560]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0308 	and.w	r3, r3, #8
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00a      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c80:	4b87      	ldr	r3, [pc, #540]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c86:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	4984      	ldr	r1, [pc, #528]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0310 	and.w	r3, r3, #16
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00a      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ca2:	4b7f      	ldr	r3, [pc, #508]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ca8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	695b      	ldr	r3, [r3, #20]
 8003cb0:	497b      	ldr	r1, [pc, #492]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0320 	and.w	r3, r3, #32
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00a      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003cc4:	4b76      	ldr	r3, [pc, #472]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cca:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	4973      	ldr	r1, [pc, #460]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00a      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ce6:	4b6e      	ldr	r3, [pc, #440]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cec:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	69db      	ldr	r3, [r3, #28]
 8003cf4:	496a      	ldr	r1, [pc, #424]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d00a      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d08:	4b65      	ldr	r3, [pc, #404]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d0e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a1b      	ldr	r3, [r3, #32]
 8003d16:	4962      	ldr	r1, [pc, #392]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00a      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d2a:	4b5d      	ldr	r3, [pc, #372]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d30:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d38:	4959      	ldr	r1, [pc, #356]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d00a      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d4c:	4b54      	ldr	r3, [pc, #336]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003d52:	f023 0203 	bic.w	r2, r3, #3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d5a:	4951      	ldr	r1, [pc, #324]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00a      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d6e:	4b4c      	ldr	r3, [pc, #304]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d74:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d7c:	4948      	ldr	r1, [pc, #288]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d015      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d90:	4b43      	ldr	r3, [pc, #268]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d96:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d9e:	4940      	ldr	r1, [pc, #256]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003daa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003dae:	d105      	bne.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003db0:	4b3b      	ldr	r3, [pc, #236]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	4a3a      	ldr	r2, [pc, #232]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003db6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003dba:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d015      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003dc8:	4b35      	ldr	r3, [pc, #212]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dce:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dd6:	4932      	ldr	r1, [pc, #200]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003de2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003de6:	d105      	bne.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003de8:	4b2d      	ldr	r3, [pc, #180]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	4a2c      	ldr	r2, [pc, #176]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003df2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d015      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003e00:	4b27      	ldr	r3, [pc, #156]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e06:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e0e:	4924      	ldr	r1, [pc, #144]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e1a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e1e:	d105      	bne.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e20:	4b1f      	ldr	r3, [pc, #124]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	4a1e      	ldr	r2, [pc, #120]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e2a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d015      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e38:	4b19      	ldr	r3, [pc, #100]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e3e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e46:	4916      	ldr	r1, [pc, #88]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e52:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e56:	d105      	bne.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e58:	4b11      	ldr	r3, [pc, #68]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	4a10      	ldr	r2, [pc, #64]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e62:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d019      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e70:	4b0b      	ldr	r3, [pc, #44]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e76:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e7e:	4908      	ldr	r1, [pc, #32]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e8e:	d109      	bne.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e90:	4b03      	ldr	r3, [pc, #12]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	4a02      	ldr	r2, [pc, #8]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e9a:	60d3      	str	r3, [r2, #12]
 8003e9c:	e002      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003e9e:	bf00      	nop
 8003ea0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d015      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003eb0:	4b29      	ldr	r3, [pc, #164]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eb6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ebe:	4926      	ldr	r1, [pc, #152]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ece:	d105      	bne.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003ed0:	4b21      	ldr	r3, [pc, #132]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	4a20      	ldr	r2, [pc, #128]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ed6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003eda:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d015      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003ee8:	4b1b      	ldr	r3, [pc, #108]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eee:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ef6:	4918      	ldr	r1, [pc, #96]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f06:	d105      	bne.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003f08:	4b13      	ldr	r3, [pc, #76]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	4a12      	ldr	r2, [pc, #72]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f12:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d015      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003f20:	4b0d      	ldr	r3, [pc, #52]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f22:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f26:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f2e:	490a      	ldr	r1, [pc, #40]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f3a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003f3e:	d105      	bne.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f40:	4b05      	ldr	r3, [pc, #20]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	4a04      	ldr	r2, [pc, #16]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f4a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003f4c:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3718      	adds	r7, #24
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	40021000 	.word	0x40021000

08003f5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d101      	bne.n	8003f6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e049      	b.n	8004002 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d106      	bne.n	8003f88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 f841 	bl	800400a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2202      	movs	r2, #2
 8003f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	3304      	adds	r3, #4
 8003f98:	4619      	mov	r1, r3
 8003f9a:	4610      	mov	r0, r2
 8003f9c:	f000 fa30 	bl	8004400 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004000:	2300      	movs	r3, #0
}
 8004002:	4618      	mov	r0, r3
 8004004:	3708      	adds	r7, #8
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}

0800400a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800400a:	b480      	push	{r7}
 800400c:	b083      	sub	sp, #12
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004012:	bf00      	nop
 8004014:	370c      	adds	r7, #12
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
	...

08004020 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004020:	b480      	push	{r7}
 8004022:	b085      	sub	sp, #20
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800402e:	b2db      	uxtb	r3, r3
 8004030:	2b01      	cmp	r3, #1
 8004032:	d001      	beq.n	8004038 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e054      	b.n	80040e2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2202      	movs	r2, #2
 800403c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68da      	ldr	r2, [r3, #12]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f042 0201 	orr.w	r2, r2, #1
 800404e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a26      	ldr	r2, [pc, #152]	@ (80040f0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d022      	beq.n	80040a0 <HAL_TIM_Base_Start_IT+0x80>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004062:	d01d      	beq.n	80040a0 <HAL_TIM_Base_Start_IT+0x80>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a22      	ldr	r2, [pc, #136]	@ (80040f4 <HAL_TIM_Base_Start_IT+0xd4>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d018      	beq.n	80040a0 <HAL_TIM_Base_Start_IT+0x80>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a21      	ldr	r2, [pc, #132]	@ (80040f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d013      	beq.n	80040a0 <HAL_TIM_Base_Start_IT+0x80>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a1f      	ldr	r2, [pc, #124]	@ (80040fc <HAL_TIM_Base_Start_IT+0xdc>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d00e      	beq.n	80040a0 <HAL_TIM_Base_Start_IT+0x80>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a1e      	ldr	r2, [pc, #120]	@ (8004100 <HAL_TIM_Base_Start_IT+0xe0>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d009      	beq.n	80040a0 <HAL_TIM_Base_Start_IT+0x80>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a1c      	ldr	r2, [pc, #112]	@ (8004104 <HAL_TIM_Base_Start_IT+0xe4>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d004      	beq.n	80040a0 <HAL_TIM_Base_Start_IT+0x80>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a1b      	ldr	r2, [pc, #108]	@ (8004108 <HAL_TIM_Base_Start_IT+0xe8>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d115      	bne.n	80040cc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	689a      	ldr	r2, [r3, #8]
 80040a6:	4b19      	ldr	r3, [pc, #100]	@ (800410c <HAL_TIM_Base_Start_IT+0xec>)
 80040a8:	4013      	ands	r3, r2
 80040aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2b06      	cmp	r3, #6
 80040b0:	d015      	beq.n	80040de <HAL_TIM_Base_Start_IT+0xbe>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040b8:	d011      	beq.n	80040de <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f042 0201 	orr.w	r2, r2, #1
 80040c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ca:	e008      	b.n	80040de <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f042 0201 	orr.w	r2, r2, #1
 80040da:	601a      	str	r2, [r3, #0]
 80040dc:	e000      	b.n	80040e0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3714      	adds	r7, #20
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	40012c00 	.word	0x40012c00
 80040f4:	40000400 	.word	0x40000400
 80040f8:	40000800 	.word	0x40000800
 80040fc:	40000c00 	.word	0x40000c00
 8004100:	40013400 	.word	0x40013400
 8004104:	40014000 	.word	0x40014000
 8004108:	40015000 	.word	0x40015000
 800410c:	00010007 	.word	0x00010007

08004110 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	691b      	ldr	r3, [r3, #16]
 8004126:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	f003 0302 	and.w	r3, r3, #2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d020      	beq.n	8004174 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f003 0302 	and.w	r3, r3, #2
 8004138:	2b00      	cmp	r3, #0
 800413a:	d01b      	beq.n	8004174 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f06f 0202 	mvn.w	r2, #2
 8004144:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2201      	movs	r2, #1
 800414a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	699b      	ldr	r3, [r3, #24]
 8004152:	f003 0303 	and.w	r3, r3, #3
 8004156:	2b00      	cmp	r3, #0
 8004158:	d003      	beq.n	8004162 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 f931 	bl	80043c2 <HAL_TIM_IC_CaptureCallback>
 8004160:	e005      	b.n	800416e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 f923 	bl	80043ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f000 f934 	bl	80043d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	f003 0304 	and.w	r3, r3, #4
 800417a:	2b00      	cmp	r3, #0
 800417c:	d020      	beq.n	80041c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f003 0304 	and.w	r3, r3, #4
 8004184:	2b00      	cmp	r3, #0
 8004186:	d01b      	beq.n	80041c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f06f 0204 	mvn.w	r2, #4
 8004190:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2202      	movs	r2, #2
 8004196:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d003      	beq.n	80041ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 f90b 	bl	80043c2 <HAL_TIM_IC_CaptureCallback>
 80041ac:	e005      	b.n	80041ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 f8fd 	bl	80043ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f000 f90e 	bl	80043d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	f003 0308 	and.w	r3, r3, #8
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d020      	beq.n	800420c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f003 0308 	and.w	r3, r3, #8
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d01b      	beq.n	800420c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f06f 0208 	mvn.w	r2, #8
 80041dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2204      	movs	r2, #4
 80041e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	69db      	ldr	r3, [r3, #28]
 80041ea:	f003 0303 	and.w	r3, r3, #3
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d003      	beq.n	80041fa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 f8e5 	bl	80043c2 <HAL_TIM_IC_CaptureCallback>
 80041f8:	e005      	b.n	8004206 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 f8d7 	bl	80043ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f000 f8e8 	bl	80043d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	f003 0310 	and.w	r3, r3, #16
 8004212:	2b00      	cmp	r3, #0
 8004214:	d020      	beq.n	8004258 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f003 0310 	and.w	r3, r3, #16
 800421c:	2b00      	cmp	r3, #0
 800421e:	d01b      	beq.n	8004258 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f06f 0210 	mvn.w	r2, #16
 8004228:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2208      	movs	r2, #8
 800422e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	69db      	ldr	r3, [r3, #28]
 8004236:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800423a:	2b00      	cmp	r3, #0
 800423c:	d003      	beq.n	8004246 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 f8bf 	bl	80043c2 <HAL_TIM_IC_CaptureCallback>
 8004244:	e005      	b.n	8004252 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 f8b1 	bl	80043ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f000 f8c2 	bl	80043d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	2b00      	cmp	r3, #0
 8004260:	d00c      	beq.n	800427c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f003 0301 	and.w	r3, r3, #1
 8004268:	2b00      	cmp	r3, #0
 800426a:	d007      	beq.n	800427c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f06f 0201 	mvn.w	r2, #1
 8004274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f7fc ffb0 	bl	80011dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004282:	2b00      	cmp	r3, #0
 8004284:	d104      	bne.n	8004290 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800428c:	2b00      	cmp	r3, #0
 800428e:	d00c      	beq.n	80042aa <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004296:	2b00      	cmp	r3, #0
 8004298:	d007      	beq.n	80042aa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80042a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f000 f969 	bl	800457c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00c      	beq.n	80042ce <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d007      	beq.n	80042ce <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80042c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f000 f961 	bl	8004590 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d00c      	beq.n	80042f2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d007      	beq.n	80042f2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80042ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f000 f87c 	bl	80043ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	f003 0320 	and.w	r3, r3, #32
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d00c      	beq.n	8004316 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f003 0320 	and.w	r3, r3, #32
 8004302:	2b00      	cmp	r3, #0
 8004304:	d007      	beq.n	8004316 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f06f 0220 	mvn.w	r2, #32
 800430e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f000 f929 	bl	8004568 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00c      	beq.n	800433a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d007      	beq.n	800433a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8004332:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f000 f935 	bl	80045a4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d00c      	beq.n	800435e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d007      	beq.n	800435e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8004356:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f000 f92d 	bl	80045b8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d00c      	beq.n	8004382 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d007      	beq.n	8004382 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800437a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f000 f925 	bl	80045cc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d00c      	beq.n	80043a6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d007      	beq.n	80043a6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800439e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 f91d 	bl	80045e0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043a6:	bf00      	nop
 80043a8:	3710      	adds	r7, #16
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}

080043ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043ae:	b480      	push	{r7}
 80043b0:	b083      	sub	sp, #12
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043b6:	bf00      	nop
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr

080043c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043c2:	b480      	push	{r7}
 80043c4:	b083      	sub	sp, #12
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043ca:	bf00      	nop
 80043cc:	370c      	adds	r7, #12
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr

080043d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043d6:	b480      	push	{r7}
 80043d8:	b083      	sub	sp, #12
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043de:	bf00      	nop
 80043e0:	370c      	adds	r7, #12
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr

080043ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043ea:	b480      	push	{r7}
 80043ec:	b083      	sub	sp, #12
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043f2:	bf00      	nop
 80043f4:	370c      	adds	r7, #12
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
	...

08004400 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004400:	b480      	push	{r7}
 8004402:	b085      	sub	sp, #20
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a4c      	ldr	r2, [pc, #304]	@ (8004544 <TIM_Base_SetConfig+0x144>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d017      	beq.n	8004448 <TIM_Base_SetConfig+0x48>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800441e:	d013      	beq.n	8004448 <TIM_Base_SetConfig+0x48>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4a49      	ldr	r2, [pc, #292]	@ (8004548 <TIM_Base_SetConfig+0x148>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d00f      	beq.n	8004448 <TIM_Base_SetConfig+0x48>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4a48      	ldr	r2, [pc, #288]	@ (800454c <TIM_Base_SetConfig+0x14c>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d00b      	beq.n	8004448 <TIM_Base_SetConfig+0x48>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4a47      	ldr	r2, [pc, #284]	@ (8004550 <TIM_Base_SetConfig+0x150>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d007      	beq.n	8004448 <TIM_Base_SetConfig+0x48>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a46      	ldr	r2, [pc, #280]	@ (8004554 <TIM_Base_SetConfig+0x154>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d003      	beq.n	8004448 <TIM_Base_SetConfig+0x48>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4a45      	ldr	r2, [pc, #276]	@ (8004558 <TIM_Base_SetConfig+0x158>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d108      	bne.n	800445a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800444e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	68fa      	ldr	r2, [r7, #12]
 8004456:	4313      	orrs	r3, r2
 8004458:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a39      	ldr	r2, [pc, #228]	@ (8004544 <TIM_Base_SetConfig+0x144>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d023      	beq.n	80044aa <TIM_Base_SetConfig+0xaa>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004468:	d01f      	beq.n	80044aa <TIM_Base_SetConfig+0xaa>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a36      	ldr	r2, [pc, #216]	@ (8004548 <TIM_Base_SetConfig+0x148>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d01b      	beq.n	80044aa <TIM_Base_SetConfig+0xaa>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a35      	ldr	r2, [pc, #212]	@ (800454c <TIM_Base_SetConfig+0x14c>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d017      	beq.n	80044aa <TIM_Base_SetConfig+0xaa>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a34      	ldr	r2, [pc, #208]	@ (8004550 <TIM_Base_SetConfig+0x150>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d013      	beq.n	80044aa <TIM_Base_SetConfig+0xaa>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a33      	ldr	r2, [pc, #204]	@ (8004554 <TIM_Base_SetConfig+0x154>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d00f      	beq.n	80044aa <TIM_Base_SetConfig+0xaa>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a33      	ldr	r2, [pc, #204]	@ (800455c <TIM_Base_SetConfig+0x15c>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d00b      	beq.n	80044aa <TIM_Base_SetConfig+0xaa>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a32      	ldr	r2, [pc, #200]	@ (8004560 <TIM_Base_SetConfig+0x160>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d007      	beq.n	80044aa <TIM_Base_SetConfig+0xaa>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a31      	ldr	r2, [pc, #196]	@ (8004564 <TIM_Base_SetConfig+0x164>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d003      	beq.n	80044aa <TIM_Base_SetConfig+0xaa>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a2c      	ldr	r2, [pc, #176]	@ (8004558 <TIM_Base_SetConfig+0x158>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d108      	bne.n	80044bc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	689a      	ldr	r2, [r3, #8]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a18      	ldr	r2, [pc, #96]	@ (8004544 <TIM_Base_SetConfig+0x144>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d013      	beq.n	8004510 <TIM_Base_SetConfig+0x110>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a1a      	ldr	r2, [pc, #104]	@ (8004554 <TIM_Base_SetConfig+0x154>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d00f      	beq.n	8004510 <TIM_Base_SetConfig+0x110>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a1a      	ldr	r2, [pc, #104]	@ (800455c <TIM_Base_SetConfig+0x15c>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d00b      	beq.n	8004510 <TIM_Base_SetConfig+0x110>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	4a19      	ldr	r2, [pc, #100]	@ (8004560 <TIM_Base_SetConfig+0x160>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d007      	beq.n	8004510 <TIM_Base_SetConfig+0x110>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4a18      	ldr	r2, [pc, #96]	@ (8004564 <TIM_Base_SetConfig+0x164>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d003      	beq.n	8004510 <TIM_Base_SetConfig+0x110>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a13      	ldr	r2, [pc, #76]	@ (8004558 <TIM_Base_SetConfig+0x158>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d103      	bne.n	8004518 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	691a      	ldr	r2, [r3, #16]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	f003 0301 	and.w	r3, r3, #1
 8004526:	2b01      	cmp	r3, #1
 8004528:	d105      	bne.n	8004536 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	f023 0201 	bic.w	r2, r3, #1
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	611a      	str	r2, [r3, #16]
  }
}
 8004536:	bf00      	nop
 8004538:	3714      	adds	r7, #20
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	40012c00 	.word	0x40012c00
 8004548:	40000400 	.word	0x40000400
 800454c:	40000800 	.word	0x40000800
 8004550:	40000c00 	.word	0x40000c00
 8004554:	40013400 	.word	0x40013400
 8004558:	40015000 	.word	0x40015000
 800455c:	40014000 	.word	0x40014000
 8004560:	40014400 	.word	0x40014400
 8004564:	40014800 	.word	0x40014800

08004568 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004570:	bf00      	nop
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004584:	bf00      	nop
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80045ac:	bf00      	nop
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80045c0:	bf00      	nop
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80045d4:	bf00      	nop
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80045e8:	bf00      	nop
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d101      	bne.n	8004606 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e042      	b.n	800468c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800460c:	2b00      	cmp	r3, #0
 800460e:	d106      	bne.n	800461e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f7fd f82f 	bl	800167c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2224      	movs	r2, #36	@ 0x24
 8004622:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f022 0201 	bic.w	r2, r2, #1
 8004634:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800463a:	2b00      	cmp	r3, #0
 800463c:	d002      	beq.n	8004644 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 ff42 	bl	80054c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f000 fc43 	bl	8004ed0 <UART_SetConfig>
 800464a:	4603      	mov	r3, r0
 800464c:	2b01      	cmp	r3, #1
 800464e:	d101      	bne.n	8004654 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e01b      	b.n	800468c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	685a      	ldr	r2, [r3, #4]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004662:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	689a      	ldr	r2, [r3, #8]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004672:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f042 0201 	orr.w	r2, r2, #1
 8004682:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f000 ffc1 	bl	800560c <UART_CheckIdleState>
 800468a:	4603      	mov	r3, r0
}
 800468c:	4618      	mov	r0, r3
 800468e:	3708      	adds	r7, #8
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b08a      	sub	sp, #40	@ 0x28
 8004698:	af02      	add	r7, sp, #8
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	603b      	str	r3, [r7, #0]
 80046a0:	4613      	mov	r3, r2
 80046a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046aa:	2b20      	cmp	r3, #32
 80046ac:	d17b      	bne.n	80047a6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d002      	beq.n	80046ba <HAL_UART_Transmit+0x26>
 80046b4:	88fb      	ldrh	r3, [r7, #6]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d101      	bne.n	80046be <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e074      	b.n	80047a8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2221      	movs	r2, #33	@ 0x21
 80046ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046ce:	f7fd fe07 	bl	80022e0 <HAL_GetTick>
 80046d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	88fa      	ldrh	r2, [r7, #6]
 80046d8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	88fa      	ldrh	r2, [r7, #6]
 80046e0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046ec:	d108      	bne.n	8004700 <HAL_UART_Transmit+0x6c>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d104      	bne.n	8004700 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80046f6:	2300      	movs	r3, #0
 80046f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	61bb      	str	r3, [r7, #24]
 80046fe:	e003      	b.n	8004708 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004704:	2300      	movs	r3, #0
 8004706:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004708:	e030      	b.n	800476c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	9300      	str	r3, [sp, #0]
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	2200      	movs	r2, #0
 8004712:	2180      	movs	r1, #128	@ 0x80
 8004714:	68f8      	ldr	r0, [r7, #12]
 8004716:	f001 f823 	bl	8005760 <UART_WaitOnFlagUntilTimeout>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d005      	beq.n	800472c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2220      	movs	r2, #32
 8004724:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004728:	2303      	movs	r3, #3
 800472a:	e03d      	b.n	80047a8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d10b      	bne.n	800474a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	881b      	ldrh	r3, [r3, #0]
 8004736:	461a      	mov	r2, r3
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004740:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	3302      	adds	r3, #2
 8004746:	61bb      	str	r3, [r7, #24]
 8004748:	e007      	b.n	800475a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	781a      	ldrb	r2, [r3, #0]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	3301      	adds	r3, #1
 8004758:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004760:	b29b      	uxth	r3, r3
 8004762:	3b01      	subs	r3, #1
 8004764:	b29a      	uxth	r2, r3
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004772:	b29b      	uxth	r3, r3
 8004774:	2b00      	cmp	r3, #0
 8004776:	d1c8      	bne.n	800470a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	9300      	str	r3, [sp, #0]
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	2200      	movs	r2, #0
 8004780:	2140      	movs	r1, #64	@ 0x40
 8004782:	68f8      	ldr	r0, [r7, #12]
 8004784:	f000 ffec 	bl	8005760 <UART_WaitOnFlagUntilTimeout>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d005      	beq.n	800479a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2220      	movs	r2, #32
 8004792:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e006      	b.n	80047a8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2220      	movs	r2, #32
 800479e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80047a2:	2300      	movs	r3, #0
 80047a4:	e000      	b.n	80047a8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80047a6:	2302      	movs	r3, #2
  }
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3720      	adds	r7, #32
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b08a      	sub	sp, #40	@ 0x28
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	4613      	mov	r3, r2
 80047bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047c4:	2b20      	cmp	r3, #32
 80047c6:	d137      	bne.n	8004838 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d002      	beq.n	80047d4 <HAL_UART_Receive_IT+0x24>
 80047ce:	88fb      	ldrh	r3, [r7, #6]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d101      	bne.n	80047d8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e030      	b.n	800483a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2200      	movs	r2, #0
 80047dc:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a18      	ldr	r2, [pc, #96]	@ (8004844 <HAL_UART_Receive_IT+0x94>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d01f      	beq.n	8004828 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d018      	beq.n	8004828 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	e853 3f00 	ldrex	r3, [r3]
 8004802:	613b      	str	r3, [r7, #16]
   return(result);
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800480a:	627b      	str	r3, [r7, #36]	@ 0x24
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	461a      	mov	r2, r3
 8004812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004814:	623b      	str	r3, [r7, #32]
 8004816:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004818:	69f9      	ldr	r1, [r7, #28]
 800481a:	6a3a      	ldr	r2, [r7, #32]
 800481c:	e841 2300 	strex	r3, r2, [r1]
 8004820:	61bb      	str	r3, [r7, #24]
   return(result);
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d1e6      	bne.n	80047f6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004828:	88fb      	ldrh	r3, [r7, #6]
 800482a:	461a      	mov	r2, r3
 800482c:	68b9      	ldr	r1, [r7, #8]
 800482e:	68f8      	ldr	r0, [r7, #12]
 8004830:	f001 f804 	bl	800583c <UART_Start_Receive_IT>
 8004834:	4603      	mov	r3, r0
 8004836:	e000      	b.n	800483a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004838:	2302      	movs	r3, #2
  }
}
 800483a:	4618      	mov	r0, r3
 800483c:	3728      	adds	r7, #40	@ 0x28
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	40008000 	.word	0x40008000

08004848 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b0ba      	sub	sp, #232	@ 0xe8
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	69db      	ldr	r3, [r3, #28]
 8004856:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800486e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004872:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004876:	4013      	ands	r3, r2
 8004878:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800487c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004880:	2b00      	cmp	r3, #0
 8004882:	d11b      	bne.n	80048bc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004884:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004888:	f003 0320 	and.w	r3, r3, #32
 800488c:	2b00      	cmp	r3, #0
 800488e:	d015      	beq.n	80048bc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004890:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004894:	f003 0320 	and.w	r3, r3, #32
 8004898:	2b00      	cmp	r3, #0
 800489a:	d105      	bne.n	80048a8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800489c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d009      	beq.n	80048bc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f000 82e3 	beq.w	8004e78 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	4798      	blx	r3
      }
      return;
 80048ba:	e2dd      	b.n	8004e78 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80048bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f000 8123 	beq.w	8004b0c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80048c6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80048ca:	4b8d      	ldr	r3, [pc, #564]	@ (8004b00 <HAL_UART_IRQHandler+0x2b8>)
 80048cc:	4013      	ands	r3, r2
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d106      	bne.n	80048e0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80048d2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80048d6:	4b8b      	ldr	r3, [pc, #556]	@ (8004b04 <HAL_UART_IRQHandler+0x2bc>)
 80048d8:	4013      	ands	r3, r2
 80048da:	2b00      	cmp	r3, #0
 80048dc:	f000 8116 	beq.w	8004b0c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80048e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048e4:	f003 0301 	and.w	r3, r3, #1
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d011      	beq.n	8004910 <HAL_UART_IRQHandler+0xc8>
 80048ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d00b      	beq.n	8004910 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2201      	movs	r2, #1
 80048fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004906:	f043 0201 	orr.w	r2, r3, #1
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004910:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004914:	f003 0302 	and.w	r3, r3, #2
 8004918:	2b00      	cmp	r3, #0
 800491a:	d011      	beq.n	8004940 <HAL_UART_IRQHandler+0xf8>
 800491c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004920:	f003 0301 	and.w	r3, r3, #1
 8004924:	2b00      	cmp	r3, #0
 8004926:	d00b      	beq.n	8004940 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2202      	movs	r2, #2
 800492e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004936:	f043 0204 	orr.w	r2, r3, #4
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004940:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004944:	f003 0304 	and.w	r3, r3, #4
 8004948:	2b00      	cmp	r3, #0
 800494a:	d011      	beq.n	8004970 <HAL_UART_IRQHandler+0x128>
 800494c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004950:	f003 0301 	and.w	r3, r3, #1
 8004954:	2b00      	cmp	r3, #0
 8004956:	d00b      	beq.n	8004970 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2204      	movs	r2, #4
 800495e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004966:	f043 0202 	orr.w	r2, r3, #2
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004970:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004974:	f003 0308 	and.w	r3, r3, #8
 8004978:	2b00      	cmp	r3, #0
 800497a:	d017      	beq.n	80049ac <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800497c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004980:	f003 0320 	and.w	r3, r3, #32
 8004984:	2b00      	cmp	r3, #0
 8004986:	d105      	bne.n	8004994 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004988:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800498c:	4b5c      	ldr	r3, [pc, #368]	@ (8004b00 <HAL_UART_IRQHandler+0x2b8>)
 800498e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004990:	2b00      	cmp	r3, #0
 8004992:	d00b      	beq.n	80049ac <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2208      	movs	r2, #8
 800499a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049a2:	f043 0208 	orr.w	r2, r3, #8
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80049ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d012      	beq.n	80049de <HAL_UART_IRQHandler+0x196>
 80049b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049bc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d00c      	beq.n	80049de <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80049cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049d4:	f043 0220 	orr.w	r2, r3, #32
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f000 8249 	beq.w	8004e7c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80049ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049ee:	f003 0320 	and.w	r3, r3, #32
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d013      	beq.n	8004a1e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80049f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049fa:	f003 0320 	and.w	r3, r3, #32
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d105      	bne.n	8004a0e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004a02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d007      	beq.n	8004a1e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d003      	beq.n	8004a1e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a24:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a32:	2b40      	cmp	r3, #64	@ 0x40
 8004a34:	d005      	beq.n	8004a42 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004a36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a3a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d054      	beq.n	8004aec <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f001 f81c 	bl	8005a80 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a52:	2b40      	cmp	r3, #64	@ 0x40
 8004a54:	d146      	bne.n	8004ae4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	3308      	adds	r3, #8
 8004a5c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a60:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004a64:	e853 3f00 	ldrex	r3, [r3]
 8004a68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004a6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004a70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	3308      	adds	r3, #8
 8004a7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004a82:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004a86:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004a8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004a92:	e841 2300 	strex	r3, r2, [r1]
 8004a96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004a9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d1d9      	bne.n	8004a56 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d017      	beq.n	8004adc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ab2:	4a15      	ldr	r2, [pc, #84]	@ (8004b08 <HAL_UART_IRQHandler+0x2c0>)
 8004ab4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004abc:	4618      	mov	r0, r3
 8004abe:	f7fd fd54 	bl	800256a <HAL_DMA_Abort_IT>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d019      	beq.n	8004afc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ace:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8004ad6:	4610      	mov	r0, r2
 8004ad8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ada:	e00f      	b.n	8004afc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f000 f9e1 	bl	8004ea4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ae2:	e00b      	b.n	8004afc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 f9dd 	bl	8004ea4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004aea:	e007      	b.n	8004afc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f000 f9d9 	bl	8004ea4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8004afa:	e1bf      	b.n	8004e7c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004afc:	bf00      	nop
    return;
 8004afe:	e1bd      	b.n	8004e7c <HAL_UART_IRQHandler+0x634>
 8004b00:	10000001 	.word	0x10000001
 8004b04:	04000120 	.word	0x04000120
 8004b08:	08005b4d 	.word	0x08005b4d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	f040 8153 	bne.w	8004dbc <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004b16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b1a:	f003 0310 	and.w	r3, r3, #16
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	f000 814c 	beq.w	8004dbc <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004b24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b28:	f003 0310 	and.w	r3, r3, #16
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f000 8145 	beq.w	8004dbc <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2210      	movs	r2, #16
 8004b38:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b44:	2b40      	cmp	r3, #64	@ 0x40
 8004b46:	f040 80bb 	bne.w	8004cc0 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004b58:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f000 818f 	beq.w	8004e80 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004b68:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	f080 8187 	bcs.w	8004e80 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004b78:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0320 	and.w	r3, r3, #32
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	f040 8087 	bne.w	8004c9e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b98:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004b9c:	e853 3f00 	ldrex	r3, [r3]
 8004ba0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004ba4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004ba8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004bac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004bba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004bbe:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004bc6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004bca:	e841 2300 	strex	r3, r2, [r1]
 8004bce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004bd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d1da      	bne.n	8004b90 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	3308      	adds	r3, #8
 8004be0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004be4:	e853 3f00 	ldrex	r3, [r3]
 8004be8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004bea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004bec:	f023 0301 	bic.w	r3, r3, #1
 8004bf0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	3308      	adds	r3, #8
 8004bfa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004bfe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004c02:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c04:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004c06:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004c0a:	e841 2300 	strex	r3, r2, [r1]
 8004c0e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004c10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d1e1      	bne.n	8004bda <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	3308      	adds	r3, #8
 8004c1c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c20:	e853 3f00 	ldrex	r3, [r3]
 8004c24:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004c26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	3308      	adds	r3, #8
 8004c36:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004c3a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004c3c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c3e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004c40:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004c42:	e841 2300 	strex	r3, r2, [r1]
 8004c46:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004c48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d1e3      	bne.n	8004c16 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2220      	movs	r2, #32
 8004c52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c64:	e853 3f00 	ldrex	r3, [r3]
 8004c68:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004c6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c6c:	f023 0310 	bic.w	r3, r3, #16
 8004c70:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	461a      	mov	r2, r3
 8004c7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004c7e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004c80:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c82:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004c84:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004c86:	e841 2300 	strex	r3, r2, [r1]
 8004c8a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004c8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1e4      	bne.n	8004c5c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f7fd fc0d 	bl	80024b8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2202      	movs	r2, #2
 8004ca2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f000 f8fd 	bl	8004eb8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004cbe:	e0df      	b.n	8004e80 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	f000 80d1 	beq.w	8004e84 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8004ce2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	f000 80cc 	beq.w	8004e84 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cf4:	e853 3f00 	ldrex	r3, [r3]
 8004cf8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004cfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cfc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d00:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	461a      	mov	r2, r3
 8004d0a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004d0e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d10:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d12:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004d14:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d16:	e841 2300 	strex	r3, r2, [r1]
 8004d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004d1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d1e4      	bne.n	8004cec <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	3308      	adds	r3, #8
 8004d28:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d2c:	e853 3f00 	ldrex	r3, [r3]
 8004d30:	623b      	str	r3, [r7, #32]
   return(result);
 8004d32:	6a3b      	ldr	r3, [r7, #32]
 8004d34:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d38:	f023 0301 	bic.w	r3, r3, #1
 8004d3c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	3308      	adds	r3, #8
 8004d46:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004d4a:	633a      	str	r2, [r7, #48]	@ 0x30
 8004d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d52:	e841 2300 	strex	r3, r2, [r1]
 8004d56:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d1e1      	bne.n	8004d22 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2220      	movs	r2, #32
 8004d62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	e853 3f00 	ldrex	r3, [r3]
 8004d7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f023 0310 	bic.w	r3, r3, #16
 8004d86:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	461a      	mov	r2, r3
 8004d90:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004d94:	61fb      	str	r3, [r7, #28]
 8004d96:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d98:	69b9      	ldr	r1, [r7, #24]
 8004d9a:	69fa      	ldr	r2, [r7, #28]
 8004d9c:	e841 2300 	strex	r3, r2, [r1]
 8004da0:	617b      	str	r3, [r7, #20]
   return(result);
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d1e4      	bne.n	8004d72 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2202      	movs	r2, #2
 8004dac:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004dae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004db2:	4619      	mov	r1, r3
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f000 f87f 	bl	8004eb8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004dba:	e063      	b.n	8004e84 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004dbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dc0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d00e      	beq.n	8004de6 <HAL_UART_IRQHandler+0x59e>
 8004dc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004dcc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d008      	beq.n	8004de6 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004ddc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f001 fc12 	bl	8006608 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004de4:	e051      	b.n	8004e8a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d014      	beq.n	8004e1c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004df2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004df6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d105      	bne.n	8004e0a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004dfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d008      	beq.n	8004e1c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d03a      	beq.n	8004e88 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	4798      	blx	r3
    }
    return;
 8004e1a:	e035      	b.n	8004e88 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004e1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d009      	beq.n	8004e3c <HAL_UART_IRQHandler+0x5f4>
 8004e28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d003      	beq.n	8004e3c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f000 fe9f 	bl	8005b78 <UART_EndTransmit_IT>
    return;
 8004e3a:	e026      	b.n	8004e8a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004e3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e40:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d009      	beq.n	8004e5c <HAL_UART_IRQHandler+0x614>
 8004e48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e4c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d003      	beq.n	8004e5c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f001 fbeb 	bl	8006630 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004e5a:	e016      	b.n	8004e8a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004e5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e60:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d010      	beq.n	8004e8a <HAL_UART_IRQHandler+0x642>
 8004e68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	da0c      	bge.n	8004e8a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f001 fbd3 	bl	800661c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004e76:	e008      	b.n	8004e8a <HAL_UART_IRQHandler+0x642>
      return;
 8004e78:	bf00      	nop
 8004e7a:	e006      	b.n	8004e8a <HAL_UART_IRQHandler+0x642>
    return;
 8004e7c:	bf00      	nop
 8004e7e:	e004      	b.n	8004e8a <HAL_UART_IRQHandler+0x642>
      return;
 8004e80:	bf00      	nop
 8004e82:	e002      	b.n	8004e8a <HAL_UART_IRQHandler+0x642>
      return;
 8004e84:	bf00      	nop
 8004e86:	e000      	b.n	8004e8a <HAL_UART_IRQHandler+0x642>
    return;
 8004e88:	bf00      	nop
  }
}
 8004e8a:	37e8      	adds	r7, #232	@ 0xe8
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004e98:	bf00      	nop
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004eac:	bf00      	nop
 8004eae:	370c      	adds	r7, #12
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ec4:	bf00      	nop
 8004ec6:	370c      	adds	r7, #12
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ed0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ed4:	b08c      	sub	sp, #48	@ 0x30
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004eda:	2300      	movs	r3, #0
 8004edc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	689a      	ldr	r2, [r3, #8]
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	431a      	orrs	r2, r3
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	695b      	ldr	r3, [r3, #20]
 8004eee:	431a      	orrs	r2, r3
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	69db      	ldr	r3, [r3, #28]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	4baa      	ldr	r3, [pc, #680]	@ (80051a8 <UART_SetConfig+0x2d8>)
 8004f00:	4013      	ands	r3, r2
 8004f02:	697a      	ldr	r2, [r7, #20]
 8004f04:	6812      	ldr	r2, [r2, #0]
 8004f06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f08:	430b      	orrs	r3, r1
 8004f0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	68da      	ldr	r2, [r3, #12]
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	430a      	orrs	r2, r1
 8004f20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	699b      	ldr	r3, [r3, #24]
 8004f26:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a9f      	ldr	r2, [pc, #636]	@ (80051ac <UART_SetConfig+0x2dc>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d004      	beq.n	8004f3c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	6a1b      	ldr	r3, [r3, #32]
 8004f36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004f46:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004f4a:	697a      	ldr	r2, [r7, #20]
 8004f4c:	6812      	ldr	r2, [r2, #0]
 8004f4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f50:	430b      	orrs	r3, r1
 8004f52:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f5a:	f023 010f 	bic.w	r1, r3, #15
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	430a      	orrs	r2, r1
 8004f68:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a90      	ldr	r2, [pc, #576]	@ (80051b0 <UART_SetConfig+0x2e0>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d125      	bne.n	8004fc0 <UART_SetConfig+0xf0>
 8004f74:	4b8f      	ldr	r3, [pc, #572]	@ (80051b4 <UART_SetConfig+0x2e4>)
 8004f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f7a:	f003 0303 	and.w	r3, r3, #3
 8004f7e:	2b03      	cmp	r3, #3
 8004f80:	d81a      	bhi.n	8004fb8 <UART_SetConfig+0xe8>
 8004f82:	a201      	add	r2, pc, #4	@ (adr r2, 8004f88 <UART_SetConfig+0xb8>)
 8004f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f88:	08004f99 	.word	0x08004f99
 8004f8c:	08004fa9 	.word	0x08004fa9
 8004f90:	08004fa1 	.word	0x08004fa1
 8004f94:	08004fb1 	.word	0x08004fb1
 8004f98:	2301      	movs	r3, #1
 8004f9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f9e:	e116      	b.n	80051ce <UART_SetConfig+0x2fe>
 8004fa0:	2302      	movs	r3, #2
 8004fa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fa6:	e112      	b.n	80051ce <UART_SetConfig+0x2fe>
 8004fa8:	2304      	movs	r3, #4
 8004faa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fae:	e10e      	b.n	80051ce <UART_SetConfig+0x2fe>
 8004fb0:	2308      	movs	r3, #8
 8004fb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fb6:	e10a      	b.n	80051ce <UART_SetConfig+0x2fe>
 8004fb8:	2310      	movs	r3, #16
 8004fba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fbe:	e106      	b.n	80051ce <UART_SetConfig+0x2fe>
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a7c      	ldr	r2, [pc, #496]	@ (80051b8 <UART_SetConfig+0x2e8>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d138      	bne.n	800503c <UART_SetConfig+0x16c>
 8004fca:	4b7a      	ldr	r3, [pc, #488]	@ (80051b4 <UART_SetConfig+0x2e4>)
 8004fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fd0:	f003 030c 	and.w	r3, r3, #12
 8004fd4:	2b0c      	cmp	r3, #12
 8004fd6:	d82d      	bhi.n	8005034 <UART_SetConfig+0x164>
 8004fd8:	a201      	add	r2, pc, #4	@ (adr r2, 8004fe0 <UART_SetConfig+0x110>)
 8004fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fde:	bf00      	nop
 8004fe0:	08005015 	.word	0x08005015
 8004fe4:	08005035 	.word	0x08005035
 8004fe8:	08005035 	.word	0x08005035
 8004fec:	08005035 	.word	0x08005035
 8004ff0:	08005025 	.word	0x08005025
 8004ff4:	08005035 	.word	0x08005035
 8004ff8:	08005035 	.word	0x08005035
 8004ffc:	08005035 	.word	0x08005035
 8005000:	0800501d 	.word	0x0800501d
 8005004:	08005035 	.word	0x08005035
 8005008:	08005035 	.word	0x08005035
 800500c:	08005035 	.word	0x08005035
 8005010:	0800502d 	.word	0x0800502d
 8005014:	2300      	movs	r3, #0
 8005016:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800501a:	e0d8      	b.n	80051ce <UART_SetConfig+0x2fe>
 800501c:	2302      	movs	r3, #2
 800501e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005022:	e0d4      	b.n	80051ce <UART_SetConfig+0x2fe>
 8005024:	2304      	movs	r3, #4
 8005026:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800502a:	e0d0      	b.n	80051ce <UART_SetConfig+0x2fe>
 800502c:	2308      	movs	r3, #8
 800502e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005032:	e0cc      	b.n	80051ce <UART_SetConfig+0x2fe>
 8005034:	2310      	movs	r3, #16
 8005036:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800503a:	e0c8      	b.n	80051ce <UART_SetConfig+0x2fe>
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a5e      	ldr	r2, [pc, #376]	@ (80051bc <UART_SetConfig+0x2ec>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d125      	bne.n	8005092 <UART_SetConfig+0x1c2>
 8005046:	4b5b      	ldr	r3, [pc, #364]	@ (80051b4 <UART_SetConfig+0x2e4>)
 8005048:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800504c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005050:	2b30      	cmp	r3, #48	@ 0x30
 8005052:	d016      	beq.n	8005082 <UART_SetConfig+0x1b2>
 8005054:	2b30      	cmp	r3, #48	@ 0x30
 8005056:	d818      	bhi.n	800508a <UART_SetConfig+0x1ba>
 8005058:	2b20      	cmp	r3, #32
 800505a:	d00a      	beq.n	8005072 <UART_SetConfig+0x1a2>
 800505c:	2b20      	cmp	r3, #32
 800505e:	d814      	bhi.n	800508a <UART_SetConfig+0x1ba>
 8005060:	2b00      	cmp	r3, #0
 8005062:	d002      	beq.n	800506a <UART_SetConfig+0x19a>
 8005064:	2b10      	cmp	r3, #16
 8005066:	d008      	beq.n	800507a <UART_SetConfig+0x1aa>
 8005068:	e00f      	b.n	800508a <UART_SetConfig+0x1ba>
 800506a:	2300      	movs	r3, #0
 800506c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005070:	e0ad      	b.n	80051ce <UART_SetConfig+0x2fe>
 8005072:	2302      	movs	r3, #2
 8005074:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005078:	e0a9      	b.n	80051ce <UART_SetConfig+0x2fe>
 800507a:	2304      	movs	r3, #4
 800507c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005080:	e0a5      	b.n	80051ce <UART_SetConfig+0x2fe>
 8005082:	2308      	movs	r3, #8
 8005084:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005088:	e0a1      	b.n	80051ce <UART_SetConfig+0x2fe>
 800508a:	2310      	movs	r3, #16
 800508c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005090:	e09d      	b.n	80051ce <UART_SetConfig+0x2fe>
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a4a      	ldr	r2, [pc, #296]	@ (80051c0 <UART_SetConfig+0x2f0>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d125      	bne.n	80050e8 <UART_SetConfig+0x218>
 800509c:	4b45      	ldr	r3, [pc, #276]	@ (80051b4 <UART_SetConfig+0x2e4>)
 800509e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050a2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80050a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80050a8:	d016      	beq.n	80050d8 <UART_SetConfig+0x208>
 80050aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80050ac:	d818      	bhi.n	80050e0 <UART_SetConfig+0x210>
 80050ae:	2b80      	cmp	r3, #128	@ 0x80
 80050b0:	d00a      	beq.n	80050c8 <UART_SetConfig+0x1f8>
 80050b2:	2b80      	cmp	r3, #128	@ 0x80
 80050b4:	d814      	bhi.n	80050e0 <UART_SetConfig+0x210>
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d002      	beq.n	80050c0 <UART_SetConfig+0x1f0>
 80050ba:	2b40      	cmp	r3, #64	@ 0x40
 80050bc:	d008      	beq.n	80050d0 <UART_SetConfig+0x200>
 80050be:	e00f      	b.n	80050e0 <UART_SetConfig+0x210>
 80050c0:	2300      	movs	r3, #0
 80050c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050c6:	e082      	b.n	80051ce <UART_SetConfig+0x2fe>
 80050c8:	2302      	movs	r3, #2
 80050ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050ce:	e07e      	b.n	80051ce <UART_SetConfig+0x2fe>
 80050d0:	2304      	movs	r3, #4
 80050d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050d6:	e07a      	b.n	80051ce <UART_SetConfig+0x2fe>
 80050d8:	2308      	movs	r3, #8
 80050da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050de:	e076      	b.n	80051ce <UART_SetConfig+0x2fe>
 80050e0:	2310      	movs	r3, #16
 80050e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050e6:	e072      	b.n	80051ce <UART_SetConfig+0x2fe>
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a35      	ldr	r2, [pc, #212]	@ (80051c4 <UART_SetConfig+0x2f4>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d12a      	bne.n	8005148 <UART_SetConfig+0x278>
 80050f2:	4b30      	ldr	r3, [pc, #192]	@ (80051b4 <UART_SetConfig+0x2e4>)
 80050f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005100:	d01a      	beq.n	8005138 <UART_SetConfig+0x268>
 8005102:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005106:	d81b      	bhi.n	8005140 <UART_SetConfig+0x270>
 8005108:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800510c:	d00c      	beq.n	8005128 <UART_SetConfig+0x258>
 800510e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005112:	d815      	bhi.n	8005140 <UART_SetConfig+0x270>
 8005114:	2b00      	cmp	r3, #0
 8005116:	d003      	beq.n	8005120 <UART_SetConfig+0x250>
 8005118:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800511c:	d008      	beq.n	8005130 <UART_SetConfig+0x260>
 800511e:	e00f      	b.n	8005140 <UART_SetConfig+0x270>
 8005120:	2300      	movs	r3, #0
 8005122:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005126:	e052      	b.n	80051ce <UART_SetConfig+0x2fe>
 8005128:	2302      	movs	r3, #2
 800512a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800512e:	e04e      	b.n	80051ce <UART_SetConfig+0x2fe>
 8005130:	2304      	movs	r3, #4
 8005132:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005136:	e04a      	b.n	80051ce <UART_SetConfig+0x2fe>
 8005138:	2308      	movs	r3, #8
 800513a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800513e:	e046      	b.n	80051ce <UART_SetConfig+0x2fe>
 8005140:	2310      	movs	r3, #16
 8005142:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005146:	e042      	b.n	80051ce <UART_SetConfig+0x2fe>
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a17      	ldr	r2, [pc, #92]	@ (80051ac <UART_SetConfig+0x2dc>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d13a      	bne.n	80051c8 <UART_SetConfig+0x2f8>
 8005152:	4b18      	ldr	r3, [pc, #96]	@ (80051b4 <UART_SetConfig+0x2e4>)
 8005154:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005158:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800515c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005160:	d01a      	beq.n	8005198 <UART_SetConfig+0x2c8>
 8005162:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005166:	d81b      	bhi.n	80051a0 <UART_SetConfig+0x2d0>
 8005168:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800516c:	d00c      	beq.n	8005188 <UART_SetConfig+0x2b8>
 800516e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005172:	d815      	bhi.n	80051a0 <UART_SetConfig+0x2d0>
 8005174:	2b00      	cmp	r3, #0
 8005176:	d003      	beq.n	8005180 <UART_SetConfig+0x2b0>
 8005178:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800517c:	d008      	beq.n	8005190 <UART_SetConfig+0x2c0>
 800517e:	e00f      	b.n	80051a0 <UART_SetConfig+0x2d0>
 8005180:	2300      	movs	r3, #0
 8005182:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005186:	e022      	b.n	80051ce <UART_SetConfig+0x2fe>
 8005188:	2302      	movs	r3, #2
 800518a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800518e:	e01e      	b.n	80051ce <UART_SetConfig+0x2fe>
 8005190:	2304      	movs	r3, #4
 8005192:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005196:	e01a      	b.n	80051ce <UART_SetConfig+0x2fe>
 8005198:	2308      	movs	r3, #8
 800519a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800519e:	e016      	b.n	80051ce <UART_SetConfig+0x2fe>
 80051a0:	2310      	movs	r3, #16
 80051a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051a6:	e012      	b.n	80051ce <UART_SetConfig+0x2fe>
 80051a8:	cfff69f3 	.word	0xcfff69f3
 80051ac:	40008000 	.word	0x40008000
 80051b0:	40013800 	.word	0x40013800
 80051b4:	40021000 	.word	0x40021000
 80051b8:	40004400 	.word	0x40004400
 80051bc:	40004800 	.word	0x40004800
 80051c0:	40004c00 	.word	0x40004c00
 80051c4:	40005000 	.word	0x40005000
 80051c8:	2310      	movs	r3, #16
 80051ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4aae      	ldr	r2, [pc, #696]	@ (800548c <UART_SetConfig+0x5bc>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	f040 8097 	bne.w	8005308 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80051da:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80051de:	2b08      	cmp	r3, #8
 80051e0:	d823      	bhi.n	800522a <UART_SetConfig+0x35a>
 80051e2:	a201      	add	r2, pc, #4	@ (adr r2, 80051e8 <UART_SetConfig+0x318>)
 80051e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e8:	0800520d 	.word	0x0800520d
 80051ec:	0800522b 	.word	0x0800522b
 80051f0:	08005215 	.word	0x08005215
 80051f4:	0800522b 	.word	0x0800522b
 80051f8:	0800521b 	.word	0x0800521b
 80051fc:	0800522b 	.word	0x0800522b
 8005200:	0800522b 	.word	0x0800522b
 8005204:	0800522b 	.word	0x0800522b
 8005208:	08005223 	.word	0x08005223
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800520c:	f7fe fbb4 	bl	8003978 <HAL_RCC_GetPCLK1Freq>
 8005210:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005212:	e010      	b.n	8005236 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005214:	4b9e      	ldr	r3, [pc, #632]	@ (8005490 <UART_SetConfig+0x5c0>)
 8005216:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005218:	e00d      	b.n	8005236 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800521a:	f7fe fb3f 	bl	800389c <HAL_RCC_GetSysClockFreq>
 800521e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005220:	e009      	b.n	8005236 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005222:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005226:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005228:	e005      	b.n	8005236 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800522a:	2300      	movs	r3, #0
 800522c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005234:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005238:	2b00      	cmp	r3, #0
 800523a:	f000 8130 	beq.w	800549e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005242:	4a94      	ldr	r2, [pc, #592]	@ (8005494 <UART_SetConfig+0x5c4>)
 8005244:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005248:	461a      	mov	r2, r3
 800524a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800524c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005250:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	685a      	ldr	r2, [r3, #4]
 8005256:	4613      	mov	r3, r2
 8005258:	005b      	lsls	r3, r3, #1
 800525a:	4413      	add	r3, r2
 800525c:	69ba      	ldr	r2, [r7, #24]
 800525e:	429a      	cmp	r2, r3
 8005260:	d305      	bcc.n	800526e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005268:	69ba      	ldr	r2, [r7, #24]
 800526a:	429a      	cmp	r2, r3
 800526c:	d903      	bls.n	8005276 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005274:	e113      	b.n	800549e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005278:	2200      	movs	r2, #0
 800527a:	60bb      	str	r3, [r7, #8]
 800527c:	60fa      	str	r2, [r7, #12]
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005282:	4a84      	ldr	r2, [pc, #528]	@ (8005494 <UART_SetConfig+0x5c4>)
 8005284:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005288:	b29b      	uxth	r3, r3
 800528a:	2200      	movs	r2, #0
 800528c:	603b      	str	r3, [r7, #0]
 800528e:	607a      	str	r2, [r7, #4]
 8005290:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005294:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005298:	f7fb fc98 	bl	8000bcc <__aeabi_uldivmod>
 800529c:	4602      	mov	r2, r0
 800529e:	460b      	mov	r3, r1
 80052a0:	4610      	mov	r0, r2
 80052a2:	4619      	mov	r1, r3
 80052a4:	f04f 0200 	mov.w	r2, #0
 80052a8:	f04f 0300 	mov.w	r3, #0
 80052ac:	020b      	lsls	r3, r1, #8
 80052ae:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80052b2:	0202      	lsls	r2, r0, #8
 80052b4:	6979      	ldr	r1, [r7, #20]
 80052b6:	6849      	ldr	r1, [r1, #4]
 80052b8:	0849      	lsrs	r1, r1, #1
 80052ba:	2000      	movs	r0, #0
 80052bc:	460c      	mov	r4, r1
 80052be:	4605      	mov	r5, r0
 80052c0:	eb12 0804 	adds.w	r8, r2, r4
 80052c4:	eb43 0905 	adc.w	r9, r3, r5
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	469a      	mov	sl, r3
 80052d0:	4693      	mov	fp, r2
 80052d2:	4652      	mov	r2, sl
 80052d4:	465b      	mov	r3, fp
 80052d6:	4640      	mov	r0, r8
 80052d8:	4649      	mov	r1, r9
 80052da:	f7fb fc77 	bl	8000bcc <__aeabi_uldivmod>
 80052de:	4602      	mov	r2, r0
 80052e0:	460b      	mov	r3, r1
 80052e2:	4613      	mov	r3, r2
 80052e4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80052e6:	6a3b      	ldr	r3, [r7, #32]
 80052e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80052ec:	d308      	bcc.n	8005300 <UART_SetConfig+0x430>
 80052ee:	6a3b      	ldr	r3, [r7, #32]
 80052f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80052f4:	d204      	bcs.n	8005300 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	6a3a      	ldr	r2, [r7, #32]
 80052fc:	60da      	str	r2, [r3, #12]
 80052fe:	e0ce      	b.n	800549e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005306:	e0ca      	b.n	800549e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	69db      	ldr	r3, [r3, #28]
 800530c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005310:	d166      	bne.n	80053e0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005312:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005316:	2b08      	cmp	r3, #8
 8005318:	d827      	bhi.n	800536a <UART_SetConfig+0x49a>
 800531a:	a201      	add	r2, pc, #4	@ (adr r2, 8005320 <UART_SetConfig+0x450>)
 800531c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005320:	08005345 	.word	0x08005345
 8005324:	0800534d 	.word	0x0800534d
 8005328:	08005355 	.word	0x08005355
 800532c:	0800536b 	.word	0x0800536b
 8005330:	0800535b 	.word	0x0800535b
 8005334:	0800536b 	.word	0x0800536b
 8005338:	0800536b 	.word	0x0800536b
 800533c:	0800536b 	.word	0x0800536b
 8005340:	08005363 	.word	0x08005363
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005344:	f7fe fb18 	bl	8003978 <HAL_RCC_GetPCLK1Freq>
 8005348:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800534a:	e014      	b.n	8005376 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800534c:	f7fe fb2a 	bl	80039a4 <HAL_RCC_GetPCLK2Freq>
 8005350:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005352:	e010      	b.n	8005376 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005354:	4b4e      	ldr	r3, [pc, #312]	@ (8005490 <UART_SetConfig+0x5c0>)
 8005356:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005358:	e00d      	b.n	8005376 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800535a:	f7fe fa9f 	bl	800389c <HAL_RCC_GetSysClockFreq>
 800535e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005360:	e009      	b.n	8005376 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005362:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005366:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005368:	e005      	b.n	8005376 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800536a:	2300      	movs	r3, #0
 800536c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005374:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005378:	2b00      	cmp	r3, #0
 800537a:	f000 8090 	beq.w	800549e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005382:	4a44      	ldr	r2, [pc, #272]	@ (8005494 <UART_SetConfig+0x5c4>)
 8005384:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005388:	461a      	mov	r2, r3
 800538a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800538c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005390:	005a      	lsls	r2, r3, #1
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	085b      	lsrs	r3, r3, #1
 8005398:	441a      	add	r2, r3
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	fbb2 f3f3 	udiv	r3, r2, r3
 80053a2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053a4:	6a3b      	ldr	r3, [r7, #32]
 80053a6:	2b0f      	cmp	r3, #15
 80053a8:	d916      	bls.n	80053d8 <UART_SetConfig+0x508>
 80053aa:	6a3b      	ldr	r3, [r7, #32]
 80053ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053b0:	d212      	bcs.n	80053d8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80053b2:	6a3b      	ldr	r3, [r7, #32]
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	f023 030f 	bic.w	r3, r3, #15
 80053ba:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80053bc:	6a3b      	ldr	r3, [r7, #32]
 80053be:	085b      	lsrs	r3, r3, #1
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	f003 0307 	and.w	r3, r3, #7
 80053c6:	b29a      	uxth	r2, r3
 80053c8:	8bfb      	ldrh	r3, [r7, #30]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	8bfa      	ldrh	r2, [r7, #30]
 80053d4:	60da      	str	r2, [r3, #12]
 80053d6:	e062      	b.n	800549e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80053de:	e05e      	b.n	800549e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80053e0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80053e4:	2b08      	cmp	r3, #8
 80053e6:	d828      	bhi.n	800543a <UART_SetConfig+0x56a>
 80053e8:	a201      	add	r2, pc, #4	@ (adr r2, 80053f0 <UART_SetConfig+0x520>)
 80053ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ee:	bf00      	nop
 80053f0:	08005415 	.word	0x08005415
 80053f4:	0800541d 	.word	0x0800541d
 80053f8:	08005425 	.word	0x08005425
 80053fc:	0800543b 	.word	0x0800543b
 8005400:	0800542b 	.word	0x0800542b
 8005404:	0800543b 	.word	0x0800543b
 8005408:	0800543b 	.word	0x0800543b
 800540c:	0800543b 	.word	0x0800543b
 8005410:	08005433 	.word	0x08005433
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005414:	f7fe fab0 	bl	8003978 <HAL_RCC_GetPCLK1Freq>
 8005418:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800541a:	e014      	b.n	8005446 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800541c:	f7fe fac2 	bl	80039a4 <HAL_RCC_GetPCLK2Freq>
 8005420:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005422:	e010      	b.n	8005446 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005424:	4b1a      	ldr	r3, [pc, #104]	@ (8005490 <UART_SetConfig+0x5c0>)
 8005426:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005428:	e00d      	b.n	8005446 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800542a:	f7fe fa37 	bl	800389c <HAL_RCC_GetSysClockFreq>
 800542e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005430:	e009      	b.n	8005446 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005432:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005436:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005438:	e005      	b.n	8005446 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800543a:	2300      	movs	r3, #0
 800543c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005444:	bf00      	nop
    }

    if (pclk != 0U)
 8005446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005448:	2b00      	cmp	r3, #0
 800544a:	d028      	beq.n	800549e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005450:	4a10      	ldr	r2, [pc, #64]	@ (8005494 <UART_SetConfig+0x5c4>)
 8005452:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005456:	461a      	mov	r2, r3
 8005458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800545a:	fbb3 f2f2 	udiv	r2, r3, r2
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	085b      	lsrs	r3, r3, #1
 8005464:	441a      	add	r2, r3
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	fbb2 f3f3 	udiv	r3, r2, r3
 800546e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005470:	6a3b      	ldr	r3, [r7, #32]
 8005472:	2b0f      	cmp	r3, #15
 8005474:	d910      	bls.n	8005498 <UART_SetConfig+0x5c8>
 8005476:	6a3b      	ldr	r3, [r7, #32]
 8005478:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800547c:	d20c      	bcs.n	8005498 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800547e:	6a3b      	ldr	r3, [r7, #32]
 8005480:	b29a      	uxth	r2, r3
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	60da      	str	r2, [r3, #12]
 8005488:	e009      	b.n	800549e <UART_SetConfig+0x5ce>
 800548a:	bf00      	nop
 800548c:	40008000 	.word	0x40008000
 8005490:	00f42400 	.word	0x00f42400
 8005494:	0800cfdc 	.word	0x0800cfdc
      }
      else
      {
        ret = HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	2201      	movs	r2, #1
 80054a2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	2201      	movs	r2, #1
 80054aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	2200      	movs	r2, #0
 80054b2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	2200      	movs	r2, #0
 80054b8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80054ba:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3730      	adds	r7, #48	@ 0x30
 80054c2:	46bd      	mov	sp, r7
 80054c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080054c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b083      	sub	sp, #12
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054d4:	f003 0308 	and.w	r3, r3, #8
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d00a      	beq.n	80054f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	430a      	orrs	r2, r1
 80054f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054f6:	f003 0301 	and.w	r3, r3, #1
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d00a      	beq.n	8005514 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	430a      	orrs	r2, r1
 8005512:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005518:	f003 0302 	and.w	r3, r3, #2
 800551c:	2b00      	cmp	r3, #0
 800551e:	d00a      	beq.n	8005536 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	430a      	orrs	r2, r1
 8005534:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800553a:	f003 0304 	and.w	r3, r3, #4
 800553e:	2b00      	cmp	r3, #0
 8005540:	d00a      	beq.n	8005558 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	430a      	orrs	r2, r1
 8005556:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800555c:	f003 0310 	and.w	r3, r3, #16
 8005560:	2b00      	cmp	r3, #0
 8005562:	d00a      	beq.n	800557a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	430a      	orrs	r2, r1
 8005578:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800557e:	f003 0320 	and.w	r3, r3, #32
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00a      	beq.n	800559c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	430a      	orrs	r2, r1
 800559a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d01a      	beq.n	80055de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	430a      	orrs	r2, r1
 80055bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055c6:	d10a      	bne.n	80055de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	430a      	orrs	r2, r1
 80055dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00a      	beq.n	8005600 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	430a      	orrs	r2, r1
 80055fe:	605a      	str	r2, [r3, #4]
  }
}
 8005600:	bf00      	nop
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b098      	sub	sp, #96	@ 0x60
 8005610:	af02      	add	r7, sp, #8
 8005612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800561c:	f7fc fe60 	bl	80022e0 <HAL_GetTick>
 8005620:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0308 	and.w	r3, r3, #8
 800562c:	2b08      	cmp	r3, #8
 800562e:	d12f      	bne.n	8005690 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005630:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005634:	9300      	str	r3, [sp, #0]
 8005636:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005638:	2200      	movs	r2, #0
 800563a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 f88e 	bl	8005760 <UART_WaitOnFlagUntilTimeout>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d022      	beq.n	8005690 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005652:	e853 3f00 	ldrex	r3, [r3]
 8005656:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005658:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800565a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800565e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	461a      	mov	r2, r3
 8005666:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005668:	647b      	str	r3, [r7, #68]	@ 0x44
 800566a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800566c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800566e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005670:	e841 2300 	strex	r3, r2, [r1]
 8005674:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005676:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005678:	2b00      	cmp	r3, #0
 800567a:	d1e6      	bne.n	800564a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2220      	movs	r2, #32
 8005680:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800568c:	2303      	movs	r3, #3
 800568e:	e063      	b.n	8005758 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 0304 	and.w	r3, r3, #4
 800569a:	2b04      	cmp	r3, #4
 800569c:	d149      	bne.n	8005732 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800569e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80056a2:	9300      	str	r3, [sp, #0]
 80056a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056a6:	2200      	movs	r2, #0
 80056a8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f000 f857 	bl	8005760 <UART_WaitOnFlagUntilTimeout>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d03c      	beq.n	8005732 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c0:	e853 3f00 	ldrex	r3, [r3]
 80056c4:	623b      	str	r3, [r7, #32]
   return(result);
 80056c6:	6a3b      	ldr	r3, [r7, #32]
 80056c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	461a      	mov	r2, r3
 80056d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80056d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80056dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056de:	e841 2300 	strex	r3, r2, [r1]
 80056e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80056e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d1e6      	bne.n	80056b8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	3308      	adds	r3, #8
 80056f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	e853 3f00 	ldrex	r3, [r3]
 80056f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f023 0301 	bic.w	r3, r3, #1
 8005700:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	3308      	adds	r3, #8
 8005708:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800570a:	61fa      	str	r2, [r7, #28]
 800570c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800570e:	69b9      	ldr	r1, [r7, #24]
 8005710:	69fa      	ldr	r2, [r7, #28]
 8005712:	e841 2300 	strex	r3, r2, [r1]
 8005716:	617b      	str	r3, [r7, #20]
   return(result);
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d1e5      	bne.n	80056ea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2220      	movs	r2, #32
 8005722:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800572e:	2303      	movs	r3, #3
 8005730:	e012      	b.n	8005758 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2220      	movs	r2, #32
 8005736:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2220      	movs	r2, #32
 800573e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005756:	2300      	movs	r3, #0
}
 8005758:	4618      	mov	r0, r3
 800575a:	3758      	adds	r7, #88	@ 0x58
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}

08005760 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	603b      	str	r3, [r7, #0]
 800576c:	4613      	mov	r3, r2
 800576e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005770:	e04f      	b.n	8005812 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005772:	69bb      	ldr	r3, [r7, #24]
 8005774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005778:	d04b      	beq.n	8005812 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800577a:	f7fc fdb1 	bl	80022e0 <HAL_GetTick>
 800577e:	4602      	mov	r2, r0
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	69ba      	ldr	r2, [r7, #24]
 8005786:	429a      	cmp	r2, r3
 8005788:	d302      	bcc.n	8005790 <UART_WaitOnFlagUntilTimeout+0x30>
 800578a:	69bb      	ldr	r3, [r7, #24]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d101      	bne.n	8005794 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005790:	2303      	movs	r3, #3
 8005792:	e04e      	b.n	8005832 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 0304 	and.w	r3, r3, #4
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d037      	beq.n	8005812 <UART_WaitOnFlagUntilTimeout+0xb2>
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	2b80      	cmp	r3, #128	@ 0x80
 80057a6:	d034      	beq.n	8005812 <UART_WaitOnFlagUntilTimeout+0xb2>
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	2b40      	cmp	r3, #64	@ 0x40
 80057ac:	d031      	beq.n	8005812 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	69db      	ldr	r3, [r3, #28]
 80057b4:	f003 0308 	and.w	r3, r3, #8
 80057b8:	2b08      	cmp	r3, #8
 80057ba:	d110      	bne.n	80057de <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2208      	movs	r2, #8
 80057c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80057c4:	68f8      	ldr	r0, [r7, #12]
 80057c6:	f000 f95b 	bl	8005a80 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2208      	movs	r2, #8
 80057ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e029      	b.n	8005832 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	69db      	ldr	r3, [r3, #28]
 80057e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80057ec:	d111      	bne.n	8005812 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80057f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80057f8:	68f8      	ldr	r0, [r7, #12]
 80057fa:	f000 f941 	bl	8005a80 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2220      	movs	r2, #32
 8005802:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2200      	movs	r2, #0
 800580a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	e00f      	b.n	8005832 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	69da      	ldr	r2, [r3, #28]
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	4013      	ands	r3, r2
 800581c:	68ba      	ldr	r2, [r7, #8]
 800581e:	429a      	cmp	r2, r3
 8005820:	bf0c      	ite	eq
 8005822:	2301      	moveq	r3, #1
 8005824:	2300      	movne	r3, #0
 8005826:	b2db      	uxtb	r3, r3
 8005828:	461a      	mov	r2, r3
 800582a:	79fb      	ldrb	r3, [r7, #7]
 800582c:	429a      	cmp	r2, r3
 800582e:	d0a0      	beq.n	8005772 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	3710      	adds	r7, #16
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
	...

0800583c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800583c:	b480      	push	{r7}
 800583e:	b0a3      	sub	sp, #140	@ 0x8c
 8005840:	af00      	add	r7, sp, #0
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	4613      	mov	r3, r2
 8005848:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	68ba      	ldr	r2, [r7, #8]
 800584e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	88fa      	ldrh	r2, [r7, #6]
 8005854:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	88fa      	ldrh	r2, [r7, #6]
 800585c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2200      	movs	r2, #0
 8005864:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800586e:	d10e      	bne.n	800588e <UART_Start_Receive_IT+0x52>
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	691b      	ldr	r3, [r3, #16]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d105      	bne.n	8005884 <UART_Start_Receive_IT+0x48>
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800587e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005882:	e02d      	b.n	80058e0 <UART_Start_Receive_IT+0xa4>
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	22ff      	movs	r2, #255	@ 0xff
 8005888:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800588c:	e028      	b.n	80058e0 <UART_Start_Receive_IT+0xa4>
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d10d      	bne.n	80058b2 <UART_Start_Receive_IT+0x76>
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d104      	bne.n	80058a8 <UART_Start_Receive_IT+0x6c>
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	22ff      	movs	r2, #255	@ 0xff
 80058a2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80058a6:	e01b      	b.n	80058e0 <UART_Start_Receive_IT+0xa4>
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	227f      	movs	r2, #127	@ 0x7f
 80058ac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80058b0:	e016      	b.n	80058e0 <UART_Start_Receive_IT+0xa4>
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80058ba:	d10d      	bne.n	80058d8 <UART_Start_Receive_IT+0x9c>
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	691b      	ldr	r3, [r3, #16]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d104      	bne.n	80058ce <UART_Start_Receive_IT+0x92>
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	227f      	movs	r2, #127	@ 0x7f
 80058c8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80058cc:	e008      	b.n	80058e0 <UART_Start_Receive_IT+0xa4>
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	223f      	movs	r2, #63	@ 0x3f
 80058d2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80058d6:	e003      	b.n	80058e0 <UART_Start_Receive_IT+0xa4>
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2200      	movs	r2, #0
 80058dc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2222      	movs	r2, #34	@ 0x22
 80058ec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	3308      	adds	r3, #8
 80058f6:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80058fa:	e853 3f00 	ldrex	r3, [r3]
 80058fe:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8005900:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005902:	f043 0301 	orr.w	r3, r3, #1
 8005906:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	3308      	adds	r3, #8
 8005910:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8005914:	673a      	str	r2, [r7, #112]	@ 0x70
 8005916:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005918:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800591a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800591c:	e841 2300 	strex	r3, r2, [r1]
 8005920:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8005922:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005924:	2b00      	cmp	r3, #0
 8005926:	d1e3      	bne.n	80058f0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800592c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005930:	d14f      	bne.n	80059d2 <UART_Start_Receive_IT+0x196>
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005938:	88fa      	ldrh	r2, [r7, #6]
 800593a:	429a      	cmp	r2, r3
 800593c:	d349      	bcc.n	80059d2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005946:	d107      	bne.n	8005958 <UART_Start_Receive_IT+0x11c>
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	691b      	ldr	r3, [r3, #16]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d103      	bne.n	8005958 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	4a47      	ldr	r2, [pc, #284]	@ (8005a70 <UART_Start_Receive_IT+0x234>)
 8005954:	675a      	str	r2, [r3, #116]	@ 0x74
 8005956:	e002      	b.n	800595e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	4a46      	ldr	r2, [pc, #280]	@ (8005a74 <UART_Start_Receive_IT+0x238>)
 800595c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	691b      	ldr	r3, [r3, #16]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d01a      	beq.n	800599c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800596c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800596e:	e853 3f00 	ldrex	r3, [r3]
 8005972:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005974:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005976:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800597a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	461a      	mov	r2, r3
 8005984:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005988:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800598a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800598c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800598e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005990:	e841 2300 	strex	r3, r2, [r1]
 8005994:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8005996:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005998:	2b00      	cmp	r3, #0
 800599a:	d1e4      	bne.n	8005966 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	3308      	adds	r3, #8
 80059a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059a6:	e853 3f00 	ldrex	r3, [r3]
 80059aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80059ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	3308      	adds	r3, #8
 80059ba:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80059bc:	64ba      	str	r2, [r7, #72]	@ 0x48
 80059be:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80059c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80059c4:	e841 2300 	strex	r3, r2, [r1]
 80059c8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80059ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d1e5      	bne.n	800599c <UART_Start_Receive_IT+0x160>
 80059d0:	e046      	b.n	8005a60 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059da:	d107      	bne.n	80059ec <UART_Start_Receive_IT+0x1b0>
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d103      	bne.n	80059ec <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	4a24      	ldr	r2, [pc, #144]	@ (8005a78 <UART_Start_Receive_IT+0x23c>)
 80059e8:	675a      	str	r2, [r3, #116]	@ 0x74
 80059ea:	e002      	b.n	80059f2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	4a23      	ldr	r2, [pc, #140]	@ (8005a7c <UART_Start_Receive_IT+0x240>)
 80059f0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d019      	beq.n	8005a2e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a02:	e853 3f00 	ldrex	r3, [r3]
 8005a06:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a0a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8005a0e:	677b      	str	r3, [r7, #116]	@ 0x74
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	461a      	mov	r2, r3
 8005a16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005a18:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a1a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a1c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005a1e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005a20:	e841 2300 	strex	r3, r2, [r1]
 8005a24:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005a26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d1e6      	bne.n	80059fa <UART_Start_Receive_IT+0x1be>
 8005a2c:	e018      	b.n	8005a60 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	e853 3f00 	ldrex	r3, [r3]
 8005a3a:	613b      	str	r3, [r7, #16]
   return(result);
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	f043 0320 	orr.w	r3, r3, #32
 8005a42:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	461a      	mov	r2, r3
 8005a4a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a4c:	623b      	str	r3, [r7, #32]
 8005a4e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a50:	69f9      	ldr	r1, [r7, #28]
 8005a52:	6a3a      	ldr	r2, [r7, #32]
 8005a54:	e841 2300 	strex	r3, r2, [r1]
 8005a58:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a5a:	69bb      	ldr	r3, [r7, #24]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d1e6      	bne.n	8005a2e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8005a60:	2300      	movs	r3, #0
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	378c      	adds	r7, #140	@ 0x8c
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr
 8005a6e:	bf00      	nop
 8005a70:	080062a1 	.word	0x080062a1
 8005a74:	08005f41 	.word	0x08005f41
 8005a78:	08005d89 	.word	0x08005d89
 8005a7c:	08005bd1 	.word	0x08005bd1

08005a80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b095      	sub	sp, #84	@ 0x54
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a90:	e853 3f00 	ldrex	r3, [r3]
 8005a94:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005aa6:	643b      	str	r3, [r7, #64]	@ 0x40
 8005aa8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aaa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005aac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005aae:	e841 2300 	strex	r3, r2, [r1]
 8005ab2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d1e6      	bne.n	8005a88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	3308      	adds	r3, #8
 8005ac0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac2:	6a3b      	ldr	r3, [r7, #32]
 8005ac4:	e853 3f00 	ldrex	r3, [r3]
 8005ac8:	61fb      	str	r3, [r7, #28]
   return(result);
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ad0:	f023 0301 	bic.w	r3, r3, #1
 8005ad4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	3308      	adds	r3, #8
 8005adc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ade:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ae0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ae4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ae6:	e841 2300 	strex	r3, r2, [r1]
 8005aea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d1e3      	bne.n	8005aba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d118      	bne.n	8005b2c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	e853 3f00 	ldrex	r3, [r3]
 8005b06:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	f023 0310 	bic.w	r3, r3, #16
 8005b0e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	461a      	mov	r2, r3
 8005b16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b18:	61bb      	str	r3, [r7, #24]
 8005b1a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b1c:	6979      	ldr	r1, [r7, #20]
 8005b1e:	69ba      	ldr	r2, [r7, #24]
 8005b20:	e841 2300 	strex	r3, r2, [r1]
 8005b24:	613b      	str	r3, [r7, #16]
   return(result);
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d1e6      	bne.n	8005afa <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2220      	movs	r2, #32
 8005b30:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005b40:	bf00      	nop
 8005b42:	3754      	adds	r7, #84	@ 0x54
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b58:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2200      	movs	r2, #0
 8005b66:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b6a:	68f8      	ldr	r0, [r7, #12]
 8005b6c:	f7ff f99a 	bl	8004ea4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b70:	bf00      	nop
 8005b72:	3710      	adds	r7, #16
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b088      	sub	sp, #32
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	e853 3f00 	ldrex	r3, [r3]
 8005b8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b94:	61fb      	str	r3, [r7, #28]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	61bb      	str	r3, [r7, #24]
 8005ba0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba2:	6979      	ldr	r1, [r7, #20]
 8005ba4:	69ba      	ldr	r2, [r7, #24]
 8005ba6:	e841 2300 	strex	r3, r2, [r1]
 8005baa:	613b      	str	r3, [r7, #16]
   return(result);
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d1e6      	bne.n	8005b80 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2220      	movs	r2, #32
 8005bb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f7ff f965 	bl	8004e90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bc6:	bf00      	nop
 8005bc8:	3720      	adds	r7, #32
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
	...

08005bd0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b09c      	sub	sp, #112	@ 0x70
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005bde:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005be8:	2b22      	cmp	r3, #34	@ 0x22
 8005bea:	f040 80be 	bne.w	8005d6a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bf4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005bf8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005bfc:	b2d9      	uxtb	r1, r3
 8005bfe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005c02:	b2da      	uxtb	r2, r3
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c08:	400a      	ands	r2, r1
 8005c0a:	b2d2      	uxtb	r2, r2
 8005c0c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c12:	1c5a      	adds	r2, r3, #1
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	3b01      	subs	r3, #1
 8005c22:	b29a      	uxth	r2, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	f040 80a1 	bne.w	8005d7a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c40:	e853 3f00 	ldrex	r3, [r3]
 8005c44:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005c46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c48:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c4c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	461a      	mov	r2, r3
 8005c54:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005c56:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005c58:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c5a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005c5c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005c5e:	e841 2300 	strex	r3, r2, [r1]
 8005c62:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005c64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d1e6      	bne.n	8005c38 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	3308      	adds	r3, #8
 8005c70:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c74:	e853 3f00 	ldrex	r3, [r3]
 8005c78:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005c7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c7c:	f023 0301 	bic.w	r3, r3, #1
 8005c80:	667b      	str	r3, [r7, #100]	@ 0x64
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	3308      	adds	r3, #8
 8005c88:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005c8a:	647a      	str	r2, [r7, #68]	@ 0x44
 8005c8c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c8e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005c90:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c92:	e841 2300 	strex	r3, r2, [r1]
 8005c96:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005c98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d1e5      	bne.n	8005c6a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2220      	movs	r2, #32
 8005ca2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a33      	ldr	r2, [pc, #204]	@ (8005d84 <UART_RxISR_8BIT+0x1b4>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d01f      	beq.n	8005cfc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d018      	beq.n	8005cfc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd2:	e853 3f00 	ldrex	r3, [r3]
 8005cd6:	623b      	str	r3, [r7, #32]
   return(result);
 8005cd8:	6a3b      	ldr	r3, [r7, #32]
 8005cda:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005cde:	663b      	str	r3, [r7, #96]	@ 0x60
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005ce8:	633b      	str	r3, [r7, #48]	@ 0x30
 8005cea:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005cee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cf0:	e841 2300 	strex	r3, r2, [r1]
 8005cf4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d1e6      	bne.n	8005cca <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d12e      	bne.n	8005d62 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	e853 3f00 	ldrex	r3, [r3]
 8005d16:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f023 0310 	bic.w	r3, r3, #16
 8005d1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	461a      	mov	r2, r3
 8005d26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005d28:	61fb      	str	r3, [r7, #28]
 8005d2a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d2c:	69b9      	ldr	r1, [r7, #24]
 8005d2e:	69fa      	ldr	r2, [r7, #28]
 8005d30:	e841 2300 	strex	r3, r2, [r1]
 8005d34:	617b      	str	r3, [r7, #20]
   return(result);
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d1e6      	bne.n	8005d0a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	69db      	ldr	r3, [r3, #28]
 8005d42:	f003 0310 	and.w	r3, r3, #16
 8005d46:	2b10      	cmp	r3, #16
 8005d48:	d103      	bne.n	8005d52 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	2210      	movs	r2, #16
 8005d50:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005d58:	4619      	mov	r1, r3
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f7ff f8ac 	bl	8004eb8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005d60:	e00b      	b.n	8005d7a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f7fb fe94 	bl	8001a90 <HAL_UART_RxCpltCallback>
}
 8005d68:	e007      	b.n	8005d7a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	699a      	ldr	r2, [r3, #24]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f042 0208 	orr.w	r2, r2, #8
 8005d78:	619a      	str	r2, [r3, #24]
}
 8005d7a:	bf00      	nop
 8005d7c:	3770      	adds	r7, #112	@ 0x70
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	40008000 	.word	0x40008000

08005d88 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b09c      	sub	sp, #112	@ 0x70
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005d96:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005da0:	2b22      	cmp	r3, #34	@ 0x22
 8005da2:	f040 80be 	bne.w	8005f22 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dac:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005db4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005db6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8005dba:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005dbe:	4013      	ands	r3, r2
 8005dc0:	b29a      	uxth	r2, r3
 8005dc2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005dc4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dca:	1c9a      	adds	r2, r3, #2
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	3b01      	subs	r3, #1
 8005dda:	b29a      	uxth	r2, r3
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	f040 80a1 	bne.w	8005f32 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005df8:	e853 3f00 	ldrex	r3, [r3]
 8005dfc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005dfe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e04:	667b      	str	r3, [r7, #100]	@ 0x64
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005e0e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005e10:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e12:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005e14:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005e16:	e841 2300 	strex	r3, r2, [r1]
 8005e1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005e1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d1e6      	bne.n	8005df0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	3308      	adds	r3, #8
 8005e28:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e2c:	e853 3f00 	ldrex	r3, [r3]
 8005e30:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e34:	f023 0301 	bic.w	r3, r3, #1
 8005e38:	663b      	str	r3, [r7, #96]	@ 0x60
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	3308      	adds	r3, #8
 8005e40:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005e42:	643a      	str	r2, [r7, #64]	@ 0x40
 8005e44:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e46:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005e48:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005e4a:	e841 2300 	strex	r3, r2, [r1]
 8005e4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005e50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d1e5      	bne.n	8005e22 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2220      	movs	r2, #32
 8005e5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a33      	ldr	r2, [pc, #204]	@ (8005f3c <UART_RxISR_16BIT+0x1b4>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d01f      	beq.n	8005eb4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d018      	beq.n	8005eb4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e88:	6a3b      	ldr	r3, [r7, #32]
 8005e8a:	e853 3f00 	ldrex	r3, [r3]
 8005e8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005e96:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ea2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ea6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ea8:	e841 2300 	strex	r3, r2, [r1]
 8005eac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d1e6      	bne.n	8005e82 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d12e      	bne.n	8005f1a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	e853 3f00 	ldrex	r3, [r3]
 8005ece:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	f023 0310 	bic.w	r3, r3, #16
 8005ed6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	461a      	mov	r2, r3
 8005ede:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005ee0:	61bb      	str	r3, [r7, #24]
 8005ee2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee4:	6979      	ldr	r1, [r7, #20]
 8005ee6:	69ba      	ldr	r2, [r7, #24]
 8005ee8:	e841 2300 	strex	r3, r2, [r1]
 8005eec:	613b      	str	r3, [r7, #16]
   return(result);
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d1e6      	bne.n	8005ec2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	69db      	ldr	r3, [r3, #28]
 8005efa:	f003 0310 	and.w	r3, r3, #16
 8005efe:	2b10      	cmp	r3, #16
 8005f00:	d103      	bne.n	8005f0a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	2210      	movs	r2, #16
 8005f08:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005f10:	4619      	mov	r1, r3
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f7fe ffd0 	bl	8004eb8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005f18:	e00b      	b.n	8005f32 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f7fb fdb8 	bl	8001a90 <HAL_UART_RxCpltCallback>
}
 8005f20:	e007      	b.n	8005f32 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	699a      	ldr	r2, [r3, #24]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f042 0208 	orr.w	r2, r2, #8
 8005f30:	619a      	str	r2, [r3, #24]
}
 8005f32:	bf00      	nop
 8005f34:	3770      	adds	r7, #112	@ 0x70
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	40008000 	.word	0x40008000

08005f40 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b0ac      	sub	sp, #176	@ 0xb0
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005f4e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	69db      	ldr	r3, [r3, #28]
 8005f58:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005f76:	2b22      	cmp	r3, #34	@ 0x22
 8005f78:	f040 8182 	bne.w	8006280 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005f82:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005f86:	e125      	b.n	80061d4 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f8e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005f92:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8005f96:	b2d9      	uxtb	r1, r3
 8005f98:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8005f9c:	b2da      	uxtb	r2, r3
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fa2:	400a      	ands	r2, r1
 8005fa4:	b2d2      	uxtb	r2, r2
 8005fa6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fac:	1c5a      	adds	r2, r3, #1
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	3b01      	subs	r3, #1
 8005fbc:	b29a      	uxth	r2, r3
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	69db      	ldr	r3, [r3, #28]
 8005fca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005fce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005fd2:	f003 0307 	and.w	r3, r3, #7
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d053      	beq.n	8006082 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005fda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005fde:	f003 0301 	and.w	r3, r3, #1
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d011      	beq.n	800600a <UART_RxISR_8BIT_FIFOEN+0xca>
 8005fe6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005fea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d00b      	beq.n	800600a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006000:	f043 0201 	orr.w	r2, r3, #1
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800600a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800600e:	f003 0302 	and.w	r3, r3, #2
 8006012:	2b00      	cmp	r3, #0
 8006014:	d011      	beq.n	800603a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006016:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800601a:	f003 0301 	and.w	r3, r3, #1
 800601e:	2b00      	cmp	r3, #0
 8006020:	d00b      	beq.n	800603a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2202      	movs	r2, #2
 8006028:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006030:	f043 0204 	orr.w	r2, r3, #4
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800603a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800603e:	f003 0304 	and.w	r3, r3, #4
 8006042:	2b00      	cmp	r3, #0
 8006044:	d011      	beq.n	800606a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006046:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800604a:	f003 0301 	and.w	r3, r3, #1
 800604e:	2b00      	cmp	r3, #0
 8006050:	d00b      	beq.n	800606a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	2204      	movs	r2, #4
 8006058:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006060:	f043 0202 	orr.w	r2, r3, #2
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006070:	2b00      	cmp	r3, #0
 8006072:	d006      	beq.n	8006082 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f7fe ff15 	bl	8004ea4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006088:	b29b      	uxth	r3, r3
 800608a:	2b00      	cmp	r3, #0
 800608c:	f040 80a2 	bne.w	80061d4 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006096:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006098:	e853 3f00 	ldrex	r3, [r3]
 800609c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800609e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80060a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	461a      	mov	r2, r3
 80060ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80060b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80060b4:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80060b8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80060ba:	e841 2300 	strex	r3, r2, [r1]
 80060be:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80060c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d1e4      	bne.n	8006090 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	3308      	adds	r3, #8
 80060cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80060d0:	e853 3f00 	ldrex	r3, [r3]
 80060d4:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80060d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80060d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80060dc:	f023 0301 	bic.w	r3, r3, #1
 80060e0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	3308      	adds	r3, #8
 80060ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80060ee:	66ba      	str	r2, [r7, #104]	@ 0x68
 80060f0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f2:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80060f4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80060f6:	e841 2300 	strex	r3, r2, [r1]
 80060fa:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80060fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d1e1      	bne.n	80060c6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2220      	movs	r2, #32
 8006106:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2200      	movs	r2, #0
 800610e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a5f      	ldr	r2, [pc, #380]	@ (8006298 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d021      	beq.n	8006164 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800612a:	2b00      	cmp	r3, #0
 800612c:	d01a      	beq.n	8006164 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006134:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006136:	e853 3f00 	ldrex	r3, [r3]
 800613a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800613c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800613e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006142:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	461a      	mov	r2, r3
 800614c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006150:	657b      	str	r3, [r7, #84]	@ 0x54
 8006152:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006154:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006156:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006158:	e841 2300 	strex	r3, r2, [r1]
 800615c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800615e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006160:	2b00      	cmp	r3, #0
 8006162:	d1e4      	bne.n	800612e <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006168:	2b01      	cmp	r3, #1
 800616a:	d130      	bne.n	80061ce <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006178:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800617a:	e853 3f00 	ldrex	r3, [r3]
 800617e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006182:	f023 0310 	bic.w	r3, r3, #16
 8006186:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	461a      	mov	r2, r3
 8006190:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006194:	643b      	str	r3, [r7, #64]	@ 0x40
 8006196:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006198:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800619a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800619c:	e841 2300 	strex	r3, r2, [r1]
 80061a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80061a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d1e4      	bne.n	8006172 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	69db      	ldr	r3, [r3, #28]
 80061ae:	f003 0310 	and.w	r3, r3, #16
 80061b2:	2b10      	cmp	r3, #16
 80061b4:	d103      	bne.n	80061be <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	2210      	movs	r2, #16
 80061bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80061c4:	4619      	mov	r1, r3
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f7fe fe76 	bl	8004eb8 <HAL_UARTEx_RxEventCallback>
 80061cc:	e002      	b.n	80061d4 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f7fb fc5e 	bl	8001a90 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80061d4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d006      	beq.n	80061ea <UART_RxISR_8BIT_FIFOEN+0x2aa>
 80061dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80061e0:	f003 0320 	and.w	r3, r3, #32
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	f47f aecf 	bne.w	8005f88 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80061f0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80061f4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d049      	beq.n	8006290 <UART_RxISR_8BIT_FIFOEN+0x350>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006202:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8006206:	429a      	cmp	r2, r3
 8006208:	d242      	bcs.n	8006290 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	3308      	adds	r3, #8
 8006210:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006212:	6a3b      	ldr	r3, [r7, #32]
 8006214:	e853 3f00 	ldrex	r3, [r3]
 8006218:	61fb      	str	r3, [r7, #28]
   return(result);
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006220:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	3308      	adds	r3, #8
 800622a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800622e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006230:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006232:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006234:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006236:	e841 2300 	strex	r3, r2, [r1]
 800623a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800623c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800623e:	2b00      	cmp	r3, #0
 8006240:	d1e3      	bne.n	800620a <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a15      	ldr	r2, [pc, #84]	@ (800629c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8006246:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	e853 3f00 	ldrex	r3, [r3]
 8006254:	60bb      	str	r3, [r7, #8]
   return(result);
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	f043 0320 	orr.w	r3, r3, #32
 800625c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	461a      	mov	r2, r3
 8006266:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800626a:	61bb      	str	r3, [r7, #24]
 800626c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800626e:	6979      	ldr	r1, [r7, #20]
 8006270:	69ba      	ldr	r2, [r7, #24]
 8006272:	e841 2300 	strex	r3, r2, [r1]
 8006276:	613b      	str	r3, [r7, #16]
   return(result);
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d1e4      	bne.n	8006248 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800627e:	e007      	b.n	8006290 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	699a      	ldr	r2, [r3, #24]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f042 0208 	orr.w	r2, r2, #8
 800628e:	619a      	str	r2, [r3, #24]
}
 8006290:	bf00      	nop
 8006292:	37b0      	adds	r7, #176	@ 0xb0
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}
 8006298:	40008000 	.word	0x40008000
 800629c:	08005bd1 	.word	0x08005bd1

080062a0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b0ae      	sub	sp, #184	@ 0xb8
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80062ae:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	69db      	ldr	r3, [r3, #28]
 80062b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80062d6:	2b22      	cmp	r3, #34	@ 0x22
 80062d8:	f040 8186 	bne.w	80065e8 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80062e2:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80062e6:	e129      	b.n	800653c <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ee:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80062fa:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 80062fe:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8006302:	4013      	ands	r3, r2
 8006304:	b29a      	uxth	r2, r3
 8006306:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800630a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006310:	1c9a      	adds	r2, r3, #2
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800631c:	b29b      	uxth	r3, r3
 800631e:	3b01      	subs	r3, #1
 8006320:	b29a      	uxth	r2, r3
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	69db      	ldr	r3, [r3, #28]
 800632e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006332:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006336:	f003 0307 	and.w	r3, r3, #7
 800633a:	2b00      	cmp	r3, #0
 800633c:	d053      	beq.n	80063e6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800633e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006342:	f003 0301 	and.w	r3, r3, #1
 8006346:	2b00      	cmp	r3, #0
 8006348:	d011      	beq.n	800636e <UART_RxISR_16BIT_FIFOEN+0xce>
 800634a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800634e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006352:	2b00      	cmp	r3, #0
 8006354:	d00b      	beq.n	800636e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	2201      	movs	r2, #1
 800635c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006364:	f043 0201 	orr.w	r2, r3, #1
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800636e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006372:	f003 0302 	and.w	r3, r3, #2
 8006376:	2b00      	cmp	r3, #0
 8006378:	d011      	beq.n	800639e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800637a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800637e:	f003 0301 	and.w	r3, r3, #1
 8006382:	2b00      	cmp	r3, #0
 8006384:	d00b      	beq.n	800639e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	2202      	movs	r2, #2
 800638c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006394:	f043 0204 	orr.w	r2, r3, #4
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800639e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80063a2:	f003 0304 	and.w	r3, r3, #4
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d011      	beq.n	80063ce <UART_RxISR_16BIT_FIFOEN+0x12e>
 80063aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80063ae:	f003 0301 	and.w	r3, r3, #1
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d00b      	beq.n	80063ce <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	2204      	movs	r2, #4
 80063bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063c4:	f043 0202 	orr.w	r2, r3, #2
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d006      	beq.n	80063e6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f7fe fd63 	bl	8004ea4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	f040 80a4 	bne.w	800653c <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80063fc:	e853 3f00 	ldrex	r3, [r3]
 8006400:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006402:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006404:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006408:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	461a      	mov	r2, r3
 8006412:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006416:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800641a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800641c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800641e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006422:	e841 2300 	strex	r3, r2, [r1]
 8006426:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006428:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800642a:	2b00      	cmp	r3, #0
 800642c:	d1e2      	bne.n	80063f4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	3308      	adds	r3, #8
 8006434:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006436:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006438:	e853 3f00 	ldrex	r3, [r3]
 800643c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800643e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006440:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006444:	f023 0301 	bic.w	r3, r3, #1
 8006448:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	3308      	adds	r3, #8
 8006452:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8006456:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006458:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800645a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800645c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800645e:	e841 2300 	strex	r3, r2, [r1]
 8006462:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006464:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006466:	2b00      	cmp	r3, #0
 8006468:	d1e1      	bne.n	800642e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2220      	movs	r2, #32
 800646e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a5f      	ldr	r2, [pc, #380]	@ (8006600 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d021      	beq.n	80064cc <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006492:	2b00      	cmp	r3, #0
 8006494:	d01a      	beq.n	80064cc <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800649c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800649e:	e853 3f00 	ldrex	r3, [r3]
 80064a2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80064a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80064a6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80064aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	461a      	mov	r2, r3
 80064b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80064b8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80064ba:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064bc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80064be:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80064c0:	e841 2300 	strex	r3, r2, [r1]
 80064c4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80064c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d1e4      	bne.n	8006496 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d130      	bne.n	8006536 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064e2:	e853 3f00 	ldrex	r3, [r3]
 80064e6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80064e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064ea:	f023 0310 	bic.w	r3, r3, #16
 80064ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	461a      	mov	r2, r3
 80064f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80064fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80064fe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006500:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006502:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006504:	e841 2300 	strex	r3, r2, [r1]
 8006508:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800650a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800650c:	2b00      	cmp	r3, #0
 800650e:	d1e4      	bne.n	80064da <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	69db      	ldr	r3, [r3, #28]
 8006516:	f003 0310 	and.w	r3, r3, #16
 800651a:	2b10      	cmp	r3, #16
 800651c:	d103      	bne.n	8006526 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	2210      	movs	r2, #16
 8006524:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800652c:	4619      	mov	r1, r3
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f7fe fcc2 	bl	8004eb8 <HAL_UARTEx_RxEventCallback>
 8006534:	e002      	b.n	800653c <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f7fb faaa 	bl	8001a90 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800653c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8006540:	2b00      	cmp	r3, #0
 8006542:	d006      	beq.n	8006552 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8006544:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006548:	f003 0320 	and.w	r3, r3, #32
 800654c:	2b00      	cmp	r3, #0
 800654e:	f47f aecb 	bne.w	80062e8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006558:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800655c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8006560:	2b00      	cmp	r3, #0
 8006562:	d049      	beq.n	80065f8 <UART_RxISR_16BIT_FIFOEN+0x358>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800656a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800656e:	429a      	cmp	r2, r3
 8006570:	d242      	bcs.n	80065f8 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	3308      	adds	r3, #8
 8006578:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800657a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800657c:	e853 3f00 	ldrex	r3, [r3]
 8006580:	623b      	str	r3, [r7, #32]
   return(result);
 8006582:	6a3b      	ldr	r3, [r7, #32]
 8006584:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006588:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	3308      	adds	r3, #8
 8006592:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8006596:	633a      	str	r2, [r7, #48]	@ 0x30
 8006598:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800659a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800659c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800659e:	e841 2300 	strex	r3, r2, [r1]
 80065a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80065a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d1e3      	bne.n	8006572 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	4a15      	ldr	r2, [pc, #84]	@ (8006604 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80065ae:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	e853 3f00 	ldrex	r3, [r3]
 80065bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f043 0320 	orr.w	r3, r3, #32
 80065c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	461a      	mov	r2, r3
 80065ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80065d2:	61fb      	str	r3, [r7, #28]
 80065d4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d6:	69b9      	ldr	r1, [r7, #24]
 80065d8:	69fa      	ldr	r2, [r7, #28]
 80065da:	e841 2300 	strex	r3, r2, [r1]
 80065de:	617b      	str	r3, [r7, #20]
   return(result);
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d1e4      	bne.n	80065b0 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80065e6:	e007      	b.n	80065f8 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	699a      	ldr	r2, [r3, #24]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f042 0208 	orr.w	r2, r2, #8
 80065f6:	619a      	str	r2, [r3, #24]
}
 80065f8:	bf00      	nop
 80065fa:	37b8      	adds	r7, #184	@ 0xb8
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}
 8006600:	40008000 	.word	0x40008000
 8006604:	08005d89 	.word	0x08005d89

08006608 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006610:	bf00      	nop
 8006612:	370c      	adds	r7, #12
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006624:	bf00      	nop
 8006626:	370c      	adds	r7, #12
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006630:	b480      	push	{r7}
 8006632:	b083      	sub	sp, #12
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006638:	bf00      	nop
 800663a:	370c      	adds	r7, #12
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr

08006644 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006644:	b480      	push	{r7}
 8006646:	b085      	sub	sp, #20
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006652:	2b01      	cmp	r3, #1
 8006654:	d101      	bne.n	800665a <HAL_UARTEx_DisableFifoMode+0x16>
 8006656:	2302      	movs	r3, #2
 8006658:	e027      	b.n	80066aa <HAL_UARTEx_DisableFifoMode+0x66>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2201      	movs	r2, #1
 800665e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2224      	movs	r2, #36	@ 0x24
 8006666:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f022 0201 	bic.w	r2, r2, #1
 8006680:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006688:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	68fa      	ldr	r2, [r7, #12]
 8006696:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2220      	movs	r2, #32
 800669c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80066a8:	2300      	movs	r3, #0
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3714      	adds	r7, #20
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr

080066b6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80066b6:	b580      	push	{r7, lr}
 80066b8:	b084      	sub	sp, #16
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
 80066be:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d101      	bne.n	80066ce <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80066ca:	2302      	movs	r3, #2
 80066cc:	e02d      	b.n	800672a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2201      	movs	r2, #1
 80066d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2224      	movs	r2, #36	@ 0x24
 80066da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f022 0201 	bic.w	r2, r2, #1
 80066f4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	683a      	ldr	r2, [r7, #0]
 8006706:	430a      	orrs	r2, r1
 8006708:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 f850 	bl	80067b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	68fa      	ldr	r2, [r7, #12]
 8006716:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2220      	movs	r2, #32
 800671c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006728:	2300      	movs	r3, #0
}
 800672a:	4618      	mov	r0, r3
 800672c:	3710      	adds	r7, #16
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}

08006732 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006732:	b580      	push	{r7, lr}
 8006734:	b084      	sub	sp, #16
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
 800673a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006742:	2b01      	cmp	r3, #1
 8006744:	d101      	bne.n	800674a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006746:	2302      	movs	r3, #2
 8006748:	e02d      	b.n	80067a6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2201      	movs	r2, #1
 800674e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2224      	movs	r2, #36	@ 0x24
 8006756:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f022 0201 	bic.w	r2, r2, #1
 8006770:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	683a      	ldr	r2, [r7, #0]
 8006782:	430a      	orrs	r2, r1
 8006784:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 f812 	bl	80067b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	68fa      	ldr	r2, [r7, #12]
 8006792:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2220      	movs	r2, #32
 8006798:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3710      	adds	r7, #16
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
	...

080067b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b085      	sub	sp, #20
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d108      	bne.n	80067d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2201      	movs	r2, #1
 80067c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2201      	movs	r2, #1
 80067cc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80067d0:	e031      	b.n	8006836 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80067d2:	2308      	movs	r3, #8
 80067d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80067d6:	2308      	movs	r3, #8
 80067d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	0e5b      	lsrs	r3, r3, #25
 80067e2:	b2db      	uxtb	r3, r3
 80067e4:	f003 0307 	and.w	r3, r3, #7
 80067e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	0f5b      	lsrs	r3, r3, #29
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	f003 0307 	and.w	r3, r3, #7
 80067f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80067fa:	7bbb      	ldrb	r3, [r7, #14]
 80067fc:	7b3a      	ldrb	r2, [r7, #12]
 80067fe:	4911      	ldr	r1, [pc, #68]	@ (8006844 <UARTEx_SetNbDataToProcess+0x94>)
 8006800:	5c8a      	ldrb	r2, [r1, r2]
 8006802:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006806:	7b3a      	ldrb	r2, [r7, #12]
 8006808:	490f      	ldr	r1, [pc, #60]	@ (8006848 <UARTEx_SetNbDataToProcess+0x98>)
 800680a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800680c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006810:	b29a      	uxth	r2, r3
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006818:	7bfb      	ldrb	r3, [r7, #15]
 800681a:	7b7a      	ldrb	r2, [r7, #13]
 800681c:	4909      	ldr	r1, [pc, #36]	@ (8006844 <UARTEx_SetNbDataToProcess+0x94>)
 800681e:	5c8a      	ldrb	r2, [r1, r2]
 8006820:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006824:	7b7a      	ldrb	r2, [r7, #13]
 8006826:	4908      	ldr	r1, [pc, #32]	@ (8006848 <UARTEx_SetNbDataToProcess+0x98>)
 8006828:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800682a:	fb93 f3f2 	sdiv	r3, r3, r2
 800682e:	b29a      	uxth	r2, r3
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006836:	bf00      	nop
 8006838:	3714      	adds	r7, #20
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr
 8006842:	bf00      	nop
 8006844:	0800cff4 	.word	0x0800cff4
 8006848:	0800cffc 	.word	0x0800cffc

0800684c <__NVIC_SetPriority>:
{
 800684c:	b480      	push	{r7}
 800684e:	b083      	sub	sp, #12
 8006850:	af00      	add	r7, sp, #0
 8006852:	4603      	mov	r3, r0
 8006854:	6039      	str	r1, [r7, #0]
 8006856:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800685c:	2b00      	cmp	r3, #0
 800685e:	db0a      	blt.n	8006876 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	b2da      	uxtb	r2, r3
 8006864:	490c      	ldr	r1, [pc, #48]	@ (8006898 <__NVIC_SetPriority+0x4c>)
 8006866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800686a:	0112      	lsls	r2, r2, #4
 800686c:	b2d2      	uxtb	r2, r2
 800686e:	440b      	add	r3, r1
 8006870:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006874:	e00a      	b.n	800688c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	b2da      	uxtb	r2, r3
 800687a:	4908      	ldr	r1, [pc, #32]	@ (800689c <__NVIC_SetPriority+0x50>)
 800687c:	79fb      	ldrb	r3, [r7, #7]
 800687e:	f003 030f 	and.w	r3, r3, #15
 8006882:	3b04      	subs	r3, #4
 8006884:	0112      	lsls	r2, r2, #4
 8006886:	b2d2      	uxtb	r2, r2
 8006888:	440b      	add	r3, r1
 800688a:	761a      	strb	r2, [r3, #24]
}
 800688c:	bf00      	nop
 800688e:	370c      	adds	r7, #12
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr
 8006898:	e000e100 	.word	0xe000e100
 800689c:	e000ed00 	.word	0xe000ed00

080068a0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80068a0:	b580      	push	{r7, lr}
 80068a2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80068a4:	4b05      	ldr	r3, [pc, #20]	@ (80068bc <SysTick_Handler+0x1c>)
 80068a6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80068a8:	f002 f968 	bl	8008b7c <xTaskGetSchedulerState>
 80068ac:	4603      	mov	r3, r0
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d001      	beq.n	80068b6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80068b2:	f003 f861 	bl	8009978 <xPortSysTickHandler>
  }
}
 80068b6:	bf00      	nop
 80068b8:	bd80      	pop	{r7, pc}
 80068ba:	bf00      	nop
 80068bc:	e000e010 	.word	0xe000e010

080068c0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80068c0:	b580      	push	{r7, lr}
 80068c2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80068c4:	2100      	movs	r1, #0
 80068c6:	f06f 0004 	mvn.w	r0, #4
 80068ca:	f7ff ffbf 	bl	800684c <__NVIC_SetPriority>
#endif
}
 80068ce:	bf00      	nop
 80068d0:	bd80      	pop	{r7, pc}
	...

080068d4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068da:	f3ef 8305 	mrs	r3, IPSR
 80068de:	603b      	str	r3, [r7, #0]
  return(result);
 80068e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d003      	beq.n	80068ee <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80068e6:	f06f 0305 	mvn.w	r3, #5
 80068ea:	607b      	str	r3, [r7, #4]
 80068ec:	e00c      	b.n	8006908 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80068ee:	4b0a      	ldr	r3, [pc, #40]	@ (8006918 <osKernelInitialize+0x44>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d105      	bne.n	8006902 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80068f6:	4b08      	ldr	r3, [pc, #32]	@ (8006918 <osKernelInitialize+0x44>)
 80068f8:	2201      	movs	r2, #1
 80068fa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80068fc:	2300      	movs	r3, #0
 80068fe:	607b      	str	r3, [r7, #4]
 8006900:	e002      	b.n	8006908 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006902:	f04f 33ff 	mov.w	r3, #4294967295
 8006906:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006908:	687b      	ldr	r3, [r7, #4]
}
 800690a:	4618      	mov	r0, r3
 800690c:	370c      	adds	r7, #12
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr
 8006916:	bf00      	nop
 8006918:	20000664 	.word	0x20000664

0800691c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800691c:	b580      	push	{r7, lr}
 800691e:	b082      	sub	sp, #8
 8006920:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006922:	f3ef 8305 	mrs	r3, IPSR
 8006926:	603b      	str	r3, [r7, #0]
  return(result);
 8006928:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800692a:	2b00      	cmp	r3, #0
 800692c:	d003      	beq.n	8006936 <osKernelStart+0x1a>
    stat = osErrorISR;
 800692e:	f06f 0305 	mvn.w	r3, #5
 8006932:	607b      	str	r3, [r7, #4]
 8006934:	e010      	b.n	8006958 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006936:	4b0b      	ldr	r3, [pc, #44]	@ (8006964 <osKernelStart+0x48>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	2b01      	cmp	r3, #1
 800693c:	d109      	bne.n	8006952 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800693e:	f7ff ffbf 	bl	80068c0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006942:	4b08      	ldr	r3, [pc, #32]	@ (8006964 <osKernelStart+0x48>)
 8006944:	2202      	movs	r2, #2
 8006946:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006948:	f001 fcca 	bl	80082e0 <vTaskStartScheduler>
      stat = osOK;
 800694c:	2300      	movs	r3, #0
 800694e:	607b      	str	r3, [r7, #4]
 8006950:	e002      	b.n	8006958 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006952:	f04f 33ff 	mov.w	r3, #4294967295
 8006956:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006958:	687b      	ldr	r3, [r7, #4]
}
 800695a:	4618      	mov	r0, r3
 800695c:	3708      	adds	r7, #8
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	20000664 	.word	0x20000664

08006968 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006968:	b580      	push	{r7, lr}
 800696a:	b08e      	sub	sp, #56	@ 0x38
 800696c:	af04      	add	r7, sp, #16
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006974:	2300      	movs	r3, #0
 8006976:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006978:	f3ef 8305 	mrs	r3, IPSR
 800697c:	617b      	str	r3, [r7, #20]
  return(result);
 800697e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006980:	2b00      	cmp	r3, #0
 8006982:	d17e      	bne.n	8006a82 <osThreadNew+0x11a>
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d07b      	beq.n	8006a82 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800698a:	2380      	movs	r3, #128	@ 0x80
 800698c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800698e:	2318      	movs	r3, #24
 8006990:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006992:	2300      	movs	r3, #0
 8006994:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006996:	f04f 33ff 	mov.w	r3, #4294967295
 800699a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d045      	beq.n	8006a2e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d002      	beq.n	80069b0 <osThreadNew+0x48>
        name = attr->name;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	699b      	ldr	r3, [r3, #24]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d002      	beq.n	80069be <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	699b      	ldr	r3, [r3, #24]
 80069bc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d008      	beq.n	80069d6 <osThreadNew+0x6e>
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	2b38      	cmp	r3, #56	@ 0x38
 80069c8:	d805      	bhi.n	80069d6 <osThreadNew+0x6e>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	f003 0301 	and.w	r3, r3, #1
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d001      	beq.n	80069da <osThreadNew+0x72>
        return (NULL);
 80069d6:	2300      	movs	r3, #0
 80069d8:	e054      	b.n	8006a84 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	695b      	ldr	r3, [r3, #20]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d003      	beq.n	80069ea <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	695b      	ldr	r3, [r3, #20]
 80069e6:	089b      	lsrs	r3, r3, #2
 80069e8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d00e      	beq.n	8006a10 <osThreadNew+0xa8>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	2b5b      	cmp	r3, #91	@ 0x5b
 80069f8:	d90a      	bls.n	8006a10 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d006      	beq.n	8006a10 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	695b      	ldr	r3, [r3, #20]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d002      	beq.n	8006a10 <osThreadNew+0xa8>
        mem = 1;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	61bb      	str	r3, [r7, #24]
 8006a0e:	e010      	b.n	8006a32 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d10c      	bne.n	8006a32 <osThreadNew+0xca>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d108      	bne.n	8006a32 <osThreadNew+0xca>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	691b      	ldr	r3, [r3, #16]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d104      	bne.n	8006a32 <osThreadNew+0xca>
          mem = 0;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	61bb      	str	r3, [r7, #24]
 8006a2c:	e001      	b.n	8006a32 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006a32:	69bb      	ldr	r3, [r7, #24]
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d110      	bne.n	8006a5a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006a40:	9202      	str	r2, [sp, #8]
 8006a42:	9301      	str	r3, [sp, #4]
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	9300      	str	r3, [sp, #0]
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	6a3a      	ldr	r2, [r7, #32]
 8006a4c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006a4e:	68f8      	ldr	r0, [r7, #12]
 8006a50:	f001 fa6a 	bl	8007f28 <xTaskCreateStatic>
 8006a54:	4603      	mov	r3, r0
 8006a56:	613b      	str	r3, [r7, #16]
 8006a58:	e013      	b.n	8006a82 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006a5a:	69bb      	ldr	r3, [r7, #24]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d110      	bne.n	8006a82 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006a60:	6a3b      	ldr	r3, [r7, #32]
 8006a62:	b29a      	uxth	r2, r3
 8006a64:	f107 0310 	add.w	r3, r7, #16
 8006a68:	9301      	str	r3, [sp, #4]
 8006a6a:	69fb      	ldr	r3, [r7, #28]
 8006a6c:	9300      	str	r3, [sp, #0]
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006a72:	68f8      	ldr	r0, [r7, #12]
 8006a74:	f001 fab8 	bl	8007fe8 <xTaskCreate>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d001      	beq.n	8006a82 <osThreadNew+0x11a>
            hTask = NULL;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006a82:	693b      	ldr	r3, [r7, #16]
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3728      	adds	r7, #40	@ 0x28
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a94:	f3ef 8305 	mrs	r3, IPSR
 8006a98:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a9a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d003      	beq.n	8006aa8 <osDelay+0x1c>
    stat = osErrorISR;
 8006aa0:	f06f 0305 	mvn.w	r3, #5
 8006aa4:	60fb      	str	r3, [r7, #12]
 8006aa6:	e007      	b.n	8006ab8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d002      	beq.n	8006ab8 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f001 fbde 	bl	8008274 <vTaskDelay>
    }
  }

  return (stat);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3710      	adds	r7, #16
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}

08006ac2 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006ac2:	b580      	push	{r7, lr}
 8006ac4:	b08a      	sub	sp, #40	@ 0x28
 8006ac6:	af02      	add	r7, sp, #8
 8006ac8:	60f8      	str	r0, [r7, #12]
 8006aca:	60b9      	str	r1, [r7, #8]
 8006acc:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ad2:	f3ef 8305 	mrs	r3, IPSR
 8006ad6:	613b      	str	r3, [r7, #16]
  return(result);
 8006ad8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d175      	bne.n	8006bca <osSemaphoreNew+0x108>
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d072      	beq.n	8006bca <osSemaphoreNew+0x108>
 8006ae4:	68ba      	ldr	r2, [r7, #8]
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d86e      	bhi.n	8006bca <osSemaphoreNew+0x108>
    mem = -1;
 8006aec:	f04f 33ff 	mov.w	r3, #4294967295
 8006af0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d015      	beq.n	8006b24 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d006      	beq.n	8006b0e <osSemaphoreNew+0x4c>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	68db      	ldr	r3, [r3, #12]
 8006b04:	2b4f      	cmp	r3, #79	@ 0x4f
 8006b06:	d902      	bls.n	8006b0e <osSemaphoreNew+0x4c>
        mem = 1;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	61bb      	str	r3, [r7, #24]
 8006b0c:	e00c      	b.n	8006b28 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d108      	bne.n	8006b28 <osSemaphoreNew+0x66>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	68db      	ldr	r3, [r3, #12]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d104      	bne.n	8006b28 <osSemaphoreNew+0x66>
          mem = 0;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	61bb      	str	r3, [r7, #24]
 8006b22:	e001      	b.n	8006b28 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8006b24:	2300      	movs	r3, #0
 8006b26:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8006b28:	69bb      	ldr	r3, [r7, #24]
 8006b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b2e:	d04c      	beq.n	8006bca <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	d128      	bne.n	8006b88 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8006b36:	69bb      	ldr	r3, [r7, #24]
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d10a      	bne.n	8006b52 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	2203      	movs	r2, #3
 8006b42:	9200      	str	r2, [sp, #0]
 8006b44:	2200      	movs	r2, #0
 8006b46:	2100      	movs	r1, #0
 8006b48:	2001      	movs	r0, #1
 8006b4a:	f000 fa2b 	bl	8006fa4 <xQueueGenericCreateStatic>
 8006b4e:	61f8      	str	r0, [r7, #28]
 8006b50:	e005      	b.n	8006b5e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8006b52:	2203      	movs	r2, #3
 8006b54:	2100      	movs	r1, #0
 8006b56:	2001      	movs	r0, #1
 8006b58:	f000 faa1 	bl	800709e <xQueueGenericCreate>
 8006b5c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d022      	beq.n	8006baa <osSemaphoreNew+0xe8>
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d01f      	beq.n	8006baa <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	2100      	movs	r1, #0
 8006b70:	69f8      	ldr	r0, [r7, #28]
 8006b72:	f000 fb61 	bl	8007238 <xQueueGenericSend>
 8006b76:	4603      	mov	r3, r0
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d016      	beq.n	8006baa <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8006b7c:	69f8      	ldr	r0, [r7, #28]
 8006b7e:	f000 ffff 	bl	8007b80 <vQueueDelete>
            hSemaphore = NULL;
 8006b82:	2300      	movs	r3, #0
 8006b84:	61fb      	str	r3, [r7, #28]
 8006b86:	e010      	b.n	8006baa <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8006b88:	69bb      	ldr	r3, [r7, #24]
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d108      	bne.n	8006ba0 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	461a      	mov	r2, r3
 8006b94:	68b9      	ldr	r1, [r7, #8]
 8006b96:	68f8      	ldr	r0, [r7, #12]
 8006b98:	f000 fadf 	bl	800715a <xQueueCreateCountingSemaphoreStatic>
 8006b9c:	61f8      	str	r0, [r7, #28]
 8006b9e:	e004      	b.n	8006baa <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006ba0:	68b9      	ldr	r1, [r7, #8]
 8006ba2:	68f8      	ldr	r0, [r7, #12]
 8006ba4:	f000 fb12 	bl	80071cc <xQueueCreateCountingSemaphore>
 8006ba8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d00c      	beq.n	8006bca <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d003      	beq.n	8006bbe <osSemaphoreNew+0xfc>
          name = attr->name;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	617b      	str	r3, [r7, #20]
 8006bbc:	e001      	b.n	8006bc2 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8006bc2:	6979      	ldr	r1, [r7, #20]
 8006bc4:	69f8      	ldr	r0, [r7, #28]
 8006bc6:	f001 f927 	bl	8007e18 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8006bca:	69fb      	ldr	r3, [r7, #28]
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3720      	adds	r7, #32
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b086      	sub	sp, #24
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006be2:	2300      	movs	r3, #0
 8006be4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d103      	bne.n	8006bf4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8006bec:	f06f 0303 	mvn.w	r3, #3
 8006bf0:	617b      	str	r3, [r7, #20]
 8006bf2:	e039      	b.n	8006c68 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006bf4:	f3ef 8305 	mrs	r3, IPSR
 8006bf8:	60fb      	str	r3, [r7, #12]
  return(result);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d022      	beq.n	8006c46 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d003      	beq.n	8006c0e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8006c06:	f06f 0303 	mvn.w	r3, #3
 8006c0a:	617b      	str	r3, [r7, #20]
 8006c0c:	e02c      	b.n	8006c68 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006c12:	f107 0308 	add.w	r3, r7, #8
 8006c16:	461a      	mov	r2, r3
 8006c18:	2100      	movs	r1, #0
 8006c1a:	6938      	ldr	r0, [r7, #16]
 8006c1c:	f000 ff2e 	bl	8007a7c <xQueueReceiveFromISR>
 8006c20:	4603      	mov	r3, r0
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d003      	beq.n	8006c2e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8006c26:	f06f 0302 	mvn.w	r3, #2
 8006c2a:	617b      	str	r3, [r7, #20]
 8006c2c:	e01c      	b.n	8006c68 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d019      	beq.n	8006c68 <osSemaphoreAcquire+0x94>
 8006c34:	4b0f      	ldr	r3, [pc, #60]	@ (8006c74 <osSemaphoreAcquire+0xa0>)
 8006c36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c3a:	601a      	str	r2, [r3, #0]
 8006c3c:	f3bf 8f4f 	dsb	sy
 8006c40:	f3bf 8f6f 	isb	sy
 8006c44:	e010      	b.n	8006c68 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8006c46:	6839      	ldr	r1, [r7, #0]
 8006c48:	6938      	ldr	r0, [r7, #16]
 8006c4a:	f000 fe07 	bl	800785c <xQueueSemaphoreTake>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d009      	beq.n	8006c68 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d003      	beq.n	8006c62 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8006c5a:	f06f 0301 	mvn.w	r3, #1
 8006c5e:	617b      	str	r3, [r7, #20]
 8006c60:	e002      	b.n	8006c68 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8006c62:	f06f 0302 	mvn.w	r3, #2
 8006c66:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006c68:	697b      	ldr	r3, [r7, #20]
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3718      	adds	r7, #24
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}
 8006c72:	bf00      	nop
 8006c74:	e000ed04 	.word	0xe000ed04

08006c78 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b086      	sub	sp, #24
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006c84:	2300      	movs	r3, #0
 8006c86:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d103      	bne.n	8006c96 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8006c8e:	f06f 0303 	mvn.w	r3, #3
 8006c92:	617b      	str	r3, [r7, #20]
 8006c94:	e02c      	b.n	8006cf0 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c96:	f3ef 8305 	mrs	r3, IPSR
 8006c9a:	60fb      	str	r3, [r7, #12]
  return(result);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d01a      	beq.n	8006cd8 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006ca6:	f107 0308 	add.w	r3, r7, #8
 8006caa:	4619      	mov	r1, r3
 8006cac:	6938      	ldr	r0, [r7, #16]
 8006cae:	f000 fc63 	bl	8007578 <xQueueGiveFromISR>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d003      	beq.n	8006cc0 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8006cb8:	f06f 0302 	mvn.w	r3, #2
 8006cbc:	617b      	str	r3, [r7, #20]
 8006cbe:	e017      	b.n	8006cf0 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d014      	beq.n	8006cf0 <osSemaphoreRelease+0x78>
 8006cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8006cfc <osSemaphoreRelease+0x84>)
 8006cc8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ccc:	601a      	str	r2, [r3, #0]
 8006cce:	f3bf 8f4f 	dsb	sy
 8006cd2:	f3bf 8f6f 	isb	sy
 8006cd6:	e00b      	b.n	8006cf0 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006cd8:	2300      	movs	r3, #0
 8006cda:	2200      	movs	r2, #0
 8006cdc:	2100      	movs	r1, #0
 8006cde:	6938      	ldr	r0, [r7, #16]
 8006ce0:	f000 faaa 	bl	8007238 <xQueueGenericSend>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d002      	beq.n	8006cf0 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8006cea:	f06f 0302 	mvn.w	r3, #2
 8006cee:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8006cf0:	697b      	ldr	r3, [r7, #20]
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3718      	adds	r7, #24
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
 8006cfa:	bf00      	nop
 8006cfc:	e000ed04 	.word	0xe000ed04

08006d00 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006d00:	b480      	push	{r7}
 8006d02:	b085      	sub	sp, #20
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	60b9      	str	r1, [r7, #8]
 8006d0a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	4a07      	ldr	r2, [pc, #28]	@ (8006d2c <vApplicationGetIdleTaskMemory+0x2c>)
 8006d10:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	4a06      	ldr	r2, [pc, #24]	@ (8006d30 <vApplicationGetIdleTaskMemory+0x30>)
 8006d16:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2280      	movs	r2, #128	@ 0x80
 8006d1c:	601a      	str	r2, [r3, #0]
}
 8006d1e:	bf00      	nop
 8006d20:	3714      	adds	r7, #20
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr
 8006d2a:	bf00      	nop
 8006d2c:	20000668 	.word	0x20000668
 8006d30:	200006c4 	.word	0x200006c4

08006d34 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006d34:	b480      	push	{r7}
 8006d36:	b085      	sub	sp, #20
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	4a07      	ldr	r2, [pc, #28]	@ (8006d60 <vApplicationGetTimerTaskMemory+0x2c>)
 8006d44:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	4a06      	ldr	r2, [pc, #24]	@ (8006d64 <vApplicationGetTimerTaskMemory+0x30>)
 8006d4a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006d52:	601a      	str	r2, [r3, #0]
}
 8006d54:	bf00      	nop
 8006d56:	3714      	adds	r7, #20
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr
 8006d60:	200008c4 	.word	0x200008c4
 8006d64:	20000920 	.word	0x20000920

08006d68 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b083      	sub	sp, #12
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f103 0208 	add.w	r2, r3, #8
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8006d80:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f103 0208 	add.w	r2, r3, #8
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f103 0208 	add.w	r2, r3, #8
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006d9c:	bf00      	nop
 8006d9e:	370c      	adds	r7, #12
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr

08006da8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006db6:	bf00      	nop
 8006db8:	370c      	adds	r7, #12
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr

08006dc2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006dc2:	b480      	push	{r7}
 8006dc4:	b085      	sub	sp, #20
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
 8006dca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	68fa      	ldr	r2, [r7, #12]
 8006dd6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	689a      	ldr	r2, [r3, #8]
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	683a      	ldr	r2, [r7, #0]
 8006de6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	683a      	ldr	r2, [r7, #0]
 8006dec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	1c5a      	adds	r2, r3, #1
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	601a      	str	r2, [r3, #0]
}
 8006dfe:	bf00      	nop
 8006e00:	3714      	adds	r7, #20
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr

08006e0a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006e0a:	b480      	push	{r7}
 8006e0c:	b085      	sub	sp, #20
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	6078      	str	r0, [r7, #4]
 8006e12:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e20:	d103      	bne.n	8006e2a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	691b      	ldr	r3, [r3, #16]
 8006e26:	60fb      	str	r3, [r7, #12]
 8006e28:	e00c      	b.n	8006e44 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	3308      	adds	r3, #8
 8006e2e:	60fb      	str	r3, [r7, #12]
 8006e30:	e002      	b.n	8006e38 <vListInsert+0x2e>
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	60fb      	str	r3, [r7, #12]
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	68ba      	ldr	r2, [r7, #8]
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d2f6      	bcs.n	8006e32 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	685a      	ldr	r2, [r3, #4]
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	683a      	ldr	r2, [r7, #0]
 8006e52:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	68fa      	ldr	r2, [r7, #12]
 8006e58:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	683a      	ldr	r2, [r7, #0]
 8006e5e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	1c5a      	adds	r2, r3, #1
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	601a      	str	r2, [r3, #0]
}
 8006e70:	bf00      	nop
 8006e72:	3714      	adds	r7, #20
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr

08006e7c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b085      	sub	sp, #20
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	691b      	ldr	r3, [r3, #16]
 8006e88:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	6892      	ldr	r2, [r2, #8]
 8006e92:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	6852      	ldr	r2, [r2, #4]
 8006e9c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d103      	bne.n	8006eb0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	689a      	ldr	r2, [r3, #8]
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	1e5a      	subs	r2, r3, #1
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3714      	adds	r7, #20
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr

08006ed0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d10b      	bne.n	8006efc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ee8:	f383 8811 	msr	BASEPRI, r3
 8006eec:	f3bf 8f6f 	isb	sy
 8006ef0:	f3bf 8f4f 	dsb	sy
 8006ef4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006ef6:	bf00      	nop
 8006ef8:	bf00      	nop
 8006efa:	e7fd      	b.n	8006ef8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006efc:	f002 fcac 	bl	8009858 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f08:	68f9      	ldr	r1, [r7, #12]
 8006f0a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006f0c:	fb01 f303 	mul.w	r3, r1, r3
 8006f10:	441a      	add	r2, r3
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f2c:	3b01      	subs	r3, #1
 8006f2e:	68f9      	ldr	r1, [r7, #12]
 8006f30:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006f32:	fb01 f303 	mul.w	r3, r1, r3
 8006f36:	441a      	add	r2, r3
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	22ff      	movs	r2, #255	@ 0xff
 8006f40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	22ff      	movs	r2, #255	@ 0xff
 8006f48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d114      	bne.n	8006f7c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	691b      	ldr	r3, [r3, #16]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d01a      	beq.n	8006f90 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	3310      	adds	r3, #16
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f001 fc4c 	bl	80087fc <xTaskRemoveFromEventList>
 8006f64:	4603      	mov	r3, r0
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d012      	beq.n	8006f90 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8006fa0 <xQueueGenericReset+0xd0>)
 8006f6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f70:	601a      	str	r2, [r3, #0]
 8006f72:	f3bf 8f4f 	dsb	sy
 8006f76:	f3bf 8f6f 	isb	sy
 8006f7a:	e009      	b.n	8006f90 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	3310      	adds	r3, #16
 8006f80:	4618      	mov	r0, r3
 8006f82:	f7ff fef1 	bl	8006d68 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	3324      	adds	r3, #36	@ 0x24
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f7ff feec 	bl	8006d68 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006f90:	f002 fc94 	bl	80098bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006f94:	2301      	movs	r3, #1
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3710      	adds	r7, #16
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	e000ed04 	.word	0xe000ed04

08006fa4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b08e      	sub	sp, #56	@ 0x38
 8006fa8:	af02      	add	r7, sp, #8
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	60b9      	str	r1, [r7, #8]
 8006fae:	607a      	str	r2, [r7, #4]
 8006fb0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d10b      	bne.n	8006fd0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006fb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fbc:	f383 8811 	msr	BASEPRI, r3
 8006fc0:	f3bf 8f6f 	isb	sy
 8006fc4:	f3bf 8f4f 	dsb	sy
 8006fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006fca:	bf00      	nop
 8006fcc:	bf00      	nop
 8006fce:	e7fd      	b.n	8006fcc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d10b      	bne.n	8006fee <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fda:	f383 8811 	msr	BASEPRI, r3
 8006fde:	f3bf 8f6f 	isb	sy
 8006fe2:	f3bf 8f4f 	dsb	sy
 8006fe6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006fe8:	bf00      	nop
 8006fea:	bf00      	nop
 8006fec:	e7fd      	b.n	8006fea <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d002      	beq.n	8006ffa <xQueueGenericCreateStatic+0x56>
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d001      	beq.n	8006ffe <xQueueGenericCreateStatic+0x5a>
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e000      	b.n	8007000 <xQueueGenericCreateStatic+0x5c>
 8006ffe:	2300      	movs	r3, #0
 8007000:	2b00      	cmp	r3, #0
 8007002:	d10b      	bne.n	800701c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007008:	f383 8811 	msr	BASEPRI, r3
 800700c:	f3bf 8f6f 	isb	sy
 8007010:	f3bf 8f4f 	dsb	sy
 8007014:	623b      	str	r3, [r7, #32]
}
 8007016:	bf00      	nop
 8007018:	bf00      	nop
 800701a:	e7fd      	b.n	8007018 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d102      	bne.n	8007028 <xQueueGenericCreateStatic+0x84>
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d101      	bne.n	800702c <xQueueGenericCreateStatic+0x88>
 8007028:	2301      	movs	r3, #1
 800702a:	e000      	b.n	800702e <xQueueGenericCreateStatic+0x8a>
 800702c:	2300      	movs	r3, #0
 800702e:	2b00      	cmp	r3, #0
 8007030:	d10b      	bne.n	800704a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007036:	f383 8811 	msr	BASEPRI, r3
 800703a:	f3bf 8f6f 	isb	sy
 800703e:	f3bf 8f4f 	dsb	sy
 8007042:	61fb      	str	r3, [r7, #28]
}
 8007044:	bf00      	nop
 8007046:	bf00      	nop
 8007048:	e7fd      	b.n	8007046 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800704a:	2350      	movs	r3, #80	@ 0x50
 800704c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	2b50      	cmp	r3, #80	@ 0x50
 8007052:	d00b      	beq.n	800706c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007058:	f383 8811 	msr	BASEPRI, r3
 800705c:	f3bf 8f6f 	isb	sy
 8007060:	f3bf 8f4f 	dsb	sy
 8007064:	61bb      	str	r3, [r7, #24]
}
 8007066:	bf00      	nop
 8007068:	bf00      	nop
 800706a:	e7fd      	b.n	8007068 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800706c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007074:	2b00      	cmp	r3, #0
 8007076:	d00d      	beq.n	8007094 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800707a:	2201      	movs	r2, #1
 800707c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007080:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007086:	9300      	str	r3, [sp, #0]
 8007088:	4613      	mov	r3, r2
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	68b9      	ldr	r1, [r7, #8]
 800708e:	68f8      	ldr	r0, [r7, #12]
 8007090:	f000 f840 	bl	8007114 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007096:	4618      	mov	r0, r3
 8007098:	3730      	adds	r7, #48	@ 0x30
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}

0800709e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800709e:	b580      	push	{r7, lr}
 80070a0:	b08a      	sub	sp, #40	@ 0x28
 80070a2:	af02      	add	r7, sp, #8
 80070a4:	60f8      	str	r0, [r7, #12]
 80070a6:	60b9      	str	r1, [r7, #8]
 80070a8:	4613      	mov	r3, r2
 80070aa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d10b      	bne.n	80070ca <xQueueGenericCreate+0x2c>
	__asm volatile
 80070b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070b6:	f383 8811 	msr	BASEPRI, r3
 80070ba:	f3bf 8f6f 	isb	sy
 80070be:	f3bf 8f4f 	dsb	sy
 80070c2:	613b      	str	r3, [r7, #16]
}
 80070c4:	bf00      	nop
 80070c6:	bf00      	nop
 80070c8:	e7fd      	b.n	80070c6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	68ba      	ldr	r2, [r7, #8]
 80070ce:	fb02 f303 	mul.w	r3, r2, r3
 80070d2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80070d4:	69fb      	ldr	r3, [r7, #28]
 80070d6:	3350      	adds	r3, #80	@ 0x50
 80070d8:	4618      	mov	r0, r3
 80070da:	f002 fcdf 	bl	8009a9c <pvPortMalloc>
 80070de:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80070e0:	69bb      	ldr	r3, [r7, #24]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d011      	beq.n	800710a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80070e6:	69bb      	ldr	r3, [r7, #24]
 80070e8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	3350      	adds	r3, #80	@ 0x50
 80070ee:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80070f0:	69bb      	ldr	r3, [r7, #24]
 80070f2:	2200      	movs	r2, #0
 80070f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80070f8:	79fa      	ldrb	r2, [r7, #7]
 80070fa:	69bb      	ldr	r3, [r7, #24]
 80070fc:	9300      	str	r3, [sp, #0]
 80070fe:	4613      	mov	r3, r2
 8007100:	697a      	ldr	r2, [r7, #20]
 8007102:	68b9      	ldr	r1, [r7, #8]
 8007104:	68f8      	ldr	r0, [r7, #12]
 8007106:	f000 f805 	bl	8007114 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800710a:	69bb      	ldr	r3, [r7, #24]
	}
 800710c:	4618      	mov	r0, r3
 800710e:	3720      	adds	r7, #32
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b084      	sub	sp, #16
 8007118:	af00      	add	r7, sp, #0
 800711a:	60f8      	str	r0, [r7, #12]
 800711c:	60b9      	str	r1, [r7, #8]
 800711e:	607a      	str	r2, [r7, #4]
 8007120:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d103      	bne.n	8007130 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007128:	69bb      	ldr	r3, [r7, #24]
 800712a:	69ba      	ldr	r2, [r7, #24]
 800712c:	601a      	str	r2, [r3, #0]
 800712e:	e002      	b.n	8007136 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007130:	69bb      	ldr	r3, [r7, #24]
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	68fa      	ldr	r2, [r7, #12]
 800713a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800713c:	69bb      	ldr	r3, [r7, #24]
 800713e:	68ba      	ldr	r2, [r7, #8]
 8007140:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007142:	2101      	movs	r1, #1
 8007144:	69b8      	ldr	r0, [r7, #24]
 8007146:	f7ff fec3 	bl	8006ed0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800714a:	69bb      	ldr	r3, [r7, #24]
 800714c:	78fa      	ldrb	r2, [r7, #3]
 800714e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007152:	bf00      	nop
 8007154:	3710      	adds	r7, #16
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}

0800715a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800715a:	b580      	push	{r7, lr}
 800715c:	b08a      	sub	sp, #40	@ 0x28
 800715e:	af02      	add	r7, sp, #8
 8007160:	60f8      	str	r0, [r7, #12]
 8007162:	60b9      	str	r1, [r7, #8]
 8007164:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d10b      	bne.n	8007184 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800716c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007170:	f383 8811 	msr	BASEPRI, r3
 8007174:	f3bf 8f6f 	isb	sy
 8007178:	f3bf 8f4f 	dsb	sy
 800717c:	61bb      	str	r3, [r7, #24]
}
 800717e:	bf00      	nop
 8007180:	bf00      	nop
 8007182:	e7fd      	b.n	8007180 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007184:	68ba      	ldr	r2, [r7, #8]
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	429a      	cmp	r2, r3
 800718a:	d90b      	bls.n	80071a4 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800718c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007190:	f383 8811 	msr	BASEPRI, r3
 8007194:	f3bf 8f6f 	isb	sy
 8007198:	f3bf 8f4f 	dsb	sy
 800719c:	617b      	str	r3, [r7, #20]
}
 800719e:	bf00      	nop
 80071a0:	bf00      	nop
 80071a2:	e7fd      	b.n	80071a0 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80071a4:	2302      	movs	r3, #2
 80071a6:	9300      	str	r3, [sp, #0]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	2100      	movs	r1, #0
 80071ae:	68f8      	ldr	r0, [r7, #12]
 80071b0:	f7ff fef8 	bl	8006fa4 <xQueueGenericCreateStatic>
 80071b4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80071b6:	69fb      	ldr	r3, [r7, #28]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d002      	beq.n	80071c2 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80071bc:	69fb      	ldr	r3, [r7, #28]
 80071be:	68ba      	ldr	r2, [r7, #8]
 80071c0:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80071c2:	69fb      	ldr	r3, [r7, #28]
	}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3720      	adds	r7, #32
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b086      	sub	sp, #24
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d10b      	bne.n	80071f4 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 80071dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071e0:	f383 8811 	msr	BASEPRI, r3
 80071e4:	f3bf 8f6f 	isb	sy
 80071e8:	f3bf 8f4f 	dsb	sy
 80071ec:	613b      	str	r3, [r7, #16]
}
 80071ee:	bf00      	nop
 80071f0:	bf00      	nop
 80071f2:	e7fd      	b.n	80071f0 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80071f4:	683a      	ldr	r2, [r7, #0]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d90b      	bls.n	8007214 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 80071fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007200:	f383 8811 	msr	BASEPRI, r3
 8007204:	f3bf 8f6f 	isb	sy
 8007208:	f3bf 8f4f 	dsb	sy
 800720c:	60fb      	str	r3, [r7, #12]
}
 800720e:	bf00      	nop
 8007210:	bf00      	nop
 8007212:	e7fd      	b.n	8007210 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007214:	2202      	movs	r2, #2
 8007216:	2100      	movs	r1, #0
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f7ff ff40 	bl	800709e <xQueueGenericCreate>
 800721e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d002      	beq.n	800722c <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	683a      	ldr	r2, [r7, #0]
 800722a:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800722c:	697b      	ldr	r3, [r7, #20]
	}
 800722e:	4618      	mov	r0, r3
 8007230:	3718      	adds	r7, #24
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}
	...

08007238 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b08e      	sub	sp, #56	@ 0x38
 800723c:	af00      	add	r7, sp, #0
 800723e:	60f8      	str	r0, [r7, #12]
 8007240:	60b9      	str	r1, [r7, #8]
 8007242:	607a      	str	r2, [r7, #4]
 8007244:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007246:	2300      	movs	r3, #0
 8007248:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800724e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007250:	2b00      	cmp	r3, #0
 8007252:	d10b      	bne.n	800726c <xQueueGenericSend+0x34>
	__asm volatile
 8007254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007258:	f383 8811 	msr	BASEPRI, r3
 800725c:	f3bf 8f6f 	isb	sy
 8007260:	f3bf 8f4f 	dsb	sy
 8007264:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007266:	bf00      	nop
 8007268:	bf00      	nop
 800726a:	e7fd      	b.n	8007268 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d103      	bne.n	800727a <xQueueGenericSend+0x42>
 8007272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007276:	2b00      	cmp	r3, #0
 8007278:	d101      	bne.n	800727e <xQueueGenericSend+0x46>
 800727a:	2301      	movs	r3, #1
 800727c:	e000      	b.n	8007280 <xQueueGenericSend+0x48>
 800727e:	2300      	movs	r3, #0
 8007280:	2b00      	cmp	r3, #0
 8007282:	d10b      	bne.n	800729c <xQueueGenericSend+0x64>
	__asm volatile
 8007284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007288:	f383 8811 	msr	BASEPRI, r3
 800728c:	f3bf 8f6f 	isb	sy
 8007290:	f3bf 8f4f 	dsb	sy
 8007294:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007296:	bf00      	nop
 8007298:	bf00      	nop
 800729a:	e7fd      	b.n	8007298 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	2b02      	cmp	r3, #2
 80072a0:	d103      	bne.n	80072aa <xQueueGenericSend+0x72>
 80072a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d101      	bne.n	80072ae <xQueueGenericSend+0x76>
 80072aa:	2301      	movs	r3, #1
 80072ac:	e000      	b.n	80072b0 <xQueueGenericSend+0x78>
 80072ae:	2300      	movs	r3, #0
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d10b      	bne.n	80072cc <xQueueGenericSend+0x94>
	__asm volatile
 80072b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072b8:	f383 8811 	msr	BASEPRI, r3
 80072bc:	f3bf 8f6f 	isb	sy
 80072c0:	f3bf 8f4f 	dsb	sy
 80072c4:	623b      	str	r3, [r7, #32]
}
 80072c6:	bf00      	nop
 80072c8:	bf00      	nop
 80072ca:	e7fd      	b.n	80072c8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80072cc:	f001 fc56 	bl	8008b7c <xTaskGetSchedulerState>
 80072d0:	4603      	mov	r3, r0
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d102      	bne.n	80072dc <xQueueGenericSend+0xa4>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d101      	bne.n	80072e0 <xQueueGenericSend+0xa8>
 80072dc:	2301      	movs	r3, #1
 80072de:	e000      	b.n	80072e2 <xQueueGenericSend+0xaa>
 80072e0:	2300      	movs	r3, #0
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d10b      	bne.n	80072fe <xQueueGenericSend+0xc6>
	__asm volatile
 80072e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072ea:	f383 8811 	msr	BASEPRI, r3
 80072ee:	f3bf 8f6f 	isb	sy
 80072f2:	f3bf 8f4f 	dsb	sy
 80072f6:	61fb      	str	r3, [r7, #28]
}
 80072f8:	bf00      	nop
 80072fa:	bf00      	nop
 80072fc:	e7fd      	b.n	80072fa <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80072fe:	f002 faab 	bl	8009858 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007304:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007308:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800730a:	429a      	cmp	r2, r3
 800730c:	d302      	bcc.n	8007314 <xQueueGenericSend+0xdc>
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	2b02      	cmp	r3, #2
 8007312:	d129      	bne.n	8007368 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007314:	683a      	ldr	r2, [r7, #0]
 8007316:	68b9      	ldr	r1, [r7, #8]
 8007318:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800731a:	f000 fc6d 	bl	8007bf8 <prvCopyDataToQueue>
 800731e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007324:	2b00      	cmp	r3, #0
 8007326:	d010      	beq.n	800734a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800732a:	3324      	adds	r3, #36	@ 0x24
 800732c:	4618      	mov	r0, r3
 800732e:	f001 fa65 	bl	80087fc <xTaskRemoveFromEventList>
 8007332:	4603      	mov	r3, r0
 8007334:	2b00      	cmp	r3, #0
 8007336:	d013      	beq.n	8007360 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007338:	4b3f      	ldr	r3, [pc, #252]	@ (8007438 <xQueueGenericSend+0x200>)
 800733a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800733e:	601a      	str	r2, [r3, #0]
 8007340:	f3bf 8f4f 	dsb	sy
 8007344:	f3bf 8f6f 	isb	sy
 8007348:	e00a      	b.n	8007360 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800734a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800734c:	2b00      	cmp	r3, #0
 800734e:	d007      	beq.n	8007360 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007350:	4b39      	ldr	r3, [pc, #228]	@ (8007438 <xQueueGenericSend+0x200>)
 8007352:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007356:	601a      	str	r2, [r3, #0]
 8007358:	f3bf 8f4f 	dsb	sy
 800735c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007360:	f002 faac 	bl	80098bc <vPortExitCritical>
				return pdPASS;
 8007364:	2301      	movs	r3, #1
 8007366:	e063      	b.n	8007430 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d103      	bne.n	8007376 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800736e:	f002 faa5 	bl	80098bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007372:	2300      	movs	r3, #0
 8007374:	e05c      	b.n	8007430 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007376:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007378:	2b00      	cmp	r3, #0
 800737a:	d106      	bne.n	800738a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800737c:	f107 0314 	add.w	r3, r7, #20
 8007380:	4618      	mov	r0, r3
 8007382:	f001 fa9f 	bl	80088c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007386:	2301      	movs	r3, #1
 8007388:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800738a:	f002 fa97 	bl	80098bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800738e:	f001 f80f 	bl	80083b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007392:	f002 fa61 	bl	8009858 <vPortEnterCritical>
 8007396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007398:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800739c:	b25b      	sxtb	r3, r3
 800739e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073a2:	d103      	bne.n	80073ac <xQueueGenericSend+0x174>
 80073a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073a6:	2200      	movs	r2, #0
 80073a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80073ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80073b2:	b25b      	sxtb	r3, r3
 80073b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073b8:	d103      	bne.n	80073c2 <xQueueGenericSend+0x18a>
 80073ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073bc:	2200      	movs	r2, #0
 80073be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80073c2:	f002 fa7b 	bl	80098bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80073c6:	1d3a      	adds	r2, r7, #4
 80073c8:	f107 0314 	add.w	r3, r7, #20
 80073cc:	4611      	mov	r1, r2
 80073ce:	4618      	mov	r0, r3
 80073d0:	f001 fa8e 	bl	80088f0 <xTaskCheckForTimeOut>
 80073d4:	4603      	mov	r3, r0
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d124      	bne.n	8007424 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80073da:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80073dc:	f000 fd04 	bl	8007de8 <prvIsQueueFull>
 80073e0:	4603      	mov	r3, r0
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d018      	beq.n	8007418 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80073e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073e8:	3310      	adds	r3, #16
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	4611      	mov	r1, r2
 80073ee:	4618      	mov	r0, r3
 80073f0:	f001 f9b2 	bl	8008758 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80073f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80073f6:	f000 fc8f 	bl	8007d18 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80073fa:	f000 ffe7 	bl	80083cc <xTaskResumeAll>
 80073fe:	4603      	mov	r3, r0
 8007400:	2b00      	cmp	r3, #0
 8007402:	f47f af7c 	bne.w	80072fe <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007406:	4b0c      	ldr	r3, [pc, #48]	@ (8007438 <xQueueGenericSend+0x200>)
 8007408:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800740c:	601a      	str	r2, [r3, #0]
 800740e:	f3bf 8f4f 	dsb	sy
 8007412:	f3bf 8f6f 	isb	sy
 8007416:	e772      	b.n	80072fe <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007418:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800741a:	f000 fc7d 	bl	8007d18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800741e:	f000 ffd5 	bl	80083cc <xTaskResumeAll>
 8007422:	e76c      	b.n	80072fe <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007424:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007426:	f000 fc77 	bl	8007d18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800742a:	f000 ffcf 	bl	80083cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800742e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007430:	4618      	mov	r0, r3
 8007432:	3738      	adds	r7, #56	@ 0x38
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}
 8007438:	e000ed04 	.word	0xe000ed04

0800743c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b090      	sub	sp, #64	@ 0x40
 8007440:	af00      	add	r7, sp, #0
 8007442:	60f8      	str	r0, [r7, #12]
 8007444:	60b9      	str	r1, [r7, #8]
 8007446:	607a      	str	r2, [r7, #4]
 8007448:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800744e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007450:	2b00      	cmp	r3, #0
 8007452:	d10b      	bne.n	800746c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007458:	f383 8811 	msr	BASEPRI, r3
 800745c:	f3bf 8f6f 	isb	sy
 8007460:	f3bf 8f4f 	dsb	sy
 8007464:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007466:	bf00      	nop
 8007468:	bf00      	nop
 800746a:	e7fd      	b.n	8007468 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d103      	bne.n	800747a <xQueueGenericSendFromISR+0x3e>
 8007472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007476:	2b00      	cmp	r3, #0
 8007478:	d101      	bne.n	800747e <xQueueGenericSendFromISR+0x42>
 800747a:	2301      	movs	r3, #1
 800747c:	e000      	b.n	8007480 <xQueueGenericSendFromISR+0x44>
 800747e:	2300      	movs	r3, #0
 8007480:	2b00      	cmp	r3, #0
 8007482:	d10b      	bne.n	800749c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007488:	f383 8811 	msr	BASEPRI, r3
 800748c:	f3bf 8f6f 	isb	sy
 8007490:	f3bf 8f4f 	dsb	sy
 8007494:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007496:	bf00      	nop
 8007498:	bf00      	nop
 800749a:	e7fd      	b.n	8007498 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	2b02      	cmp	r3, #2
 80074a0:	d103      	bne.n	80074aa <xQueueGenericSendFromISR+0x6e>
 80074a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074a6:	2b01      	cmp	r3, #1
 80074a8:	d101      	bne.n	80074ae <xQueueGenericSendFromISR+0x72>
 80074aa:	2301      	movs	r3, #1
 80074ac:	e000      	b.n	80074b0 <xQueueGenericSendFromISR+0x74>
 80074ae:	2300      	movs	r3, #0
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d10b      	bne.n	80074cc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80074b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074b8:	f383 8811 	msr	BASEPRI, r3
 80074bc:	f3bf 8f6f 	isb	sy
 80074c0:	f3bf 8f4f 	dsb	sy
 80074c4:	623b      	str	r3, [r7, #32]
}
 80074c6:	bf00      	nop
 80074c8:	bf00      	nop
 80074ca:	e7fd      	b.n	80074c8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80074cc:	f002 faa4 	bl	8009a18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80074d0:	f3ef 8211 	mrs	r2, BASEPRI
 80074d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074d8:	f383 8811 	msr	BASEPRI, r3
 80074dc:	f3bf 8f6f 	isb	sy
 80074e0:	f3bf 8f4f 	dsb	sy
 80074e4:	61fa      	str	r2, [r7, #28]
 80074e6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80074e8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80074ea:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80074ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80074f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d302      	bcc.n	80074fe <xQueueGenericSendFromISR+0xc2>
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	2b02      	cmp	r3, #2
 80074fc:	d12f      	bne.n	800755e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80074fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007500:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007504:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800750a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800750c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800750e:	683a      	ldr	r2, [r7, #0]
 8007510:	68b9      	ldr	r1, [r7, #8]
 8007512:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007514:	f000 fb70 	bl	8007bf8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007518:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800751c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007520:	d112      	bne.n	8007548 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007526:	2b00      	cmp	r3, #0
 8007528:	d016      	beq.n	8007558 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800752a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800752c:	3324      	adds	r3, #36	@ 0x24
 800752e:	4618      	mov	r0, r3
 8007530:	f001 f964 	bl	80087fc <xTaskRemoveFromEventList>
 8007534:	4603      	mov	r3, r0
 8007536:	2b00      	cmp	r3, #0
 8007538:	d00e      	beq.n	8007558 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d00b      	beq.n	8007558 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2201      	movs	r2, #1
 8007544:	601a      	str	r2, [r3, #0]
 8007546:	e007      	b.n	8007558 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007548:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800754c:	3301      	adds	r3, #1
 800754e:	b2db      	uxtb	r3, r3
 8007550:	b25a      	sxtb	r2, r3
 8007552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007554:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007558:	2301      	movs	r3, #1
 800755a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800755c:	e001      	b.n	8007562 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800755e:	2300      	movs	r3, #0
 8007560:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007562:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007564:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800756c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800756e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007570:	4618      	mov	r0, r3
 8007572:	3740      	adds	r7, #64	@ 0x40
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b08e      	sub	sp, #56	@ 0x38
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007588:	2b00      	cmp	r3, #0
 800758a:	d10b      	bne.n	80075a4 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800758c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007590:	f383 8811 	msr	BASEPRI, r3
 8007594:	f3bf 8f6f 	isb	sy
 8007598:	f3bf 8f4f 	dsb	sy
 800759c:	623b      	str	r3, [r7, #32]
}
 800759e:	bf00      	nop
 80075a0:	bf00      	nop
 80075a2:	e7fd      	b.n	80075a0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80075a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d00b      	beq.n	80075c4 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80075ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075b0:	f383 8811 	msr	BASEPRI, r3
 80075b4:	f3bf 8f6f 	isb	sy
 80075b8:	f3bf 8f4f 	dsb	sy
 80075bc:	61fb      	str	r3, [r7, #28]
}
 80075be:	bf00      	nop
 80075c0:	bf00      	nop
 80075c2:	e7fd      	b.n	80075c0 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80075c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d103      	bne.n	80075d4 <xQueueGiveFromISR+0x5c>
 80075cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d101      	bne.n	80075d8 <xQueueGiveFromISR+0x60>
 80075d4:	2301      	movs	r3, #1
 80075d6:	e000      	b.n	80075da <xQueueGiveFromISR+0x62>
 80075d8:	2300      	movs	r3, #0
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d10b      	bne.n	80075f6 <xQueueGiveFromISR+0x7e>
	__asm volatile
 80075de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075e2:	f383 8811 	msr	BASEPRI, r3
 80075e6:	f3bf 8f6f 	isb	sy
 80075ea:	f3bf 8f4f 	dsb	sy
 80075ee:	61bb      	str	r3, [r7, #24]
}
 80075f0:	bf00      	nop
 80075f2:	bf00      	nop
 80075f4:	e7fd      	b.n	80075f2 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80075f6:	f002 fa0f 	bl	8009a18 <vPortValidateInterruptPriority>
	__asm volatile
 80075fa:	f3ef 8211 	mrs	r2, BASEPRI
 80075fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007602:	f383 8811 	msr	BASEPRI, r3
 8007606:	f3bf 8f6f 	isb	sy
 800760a:	f3bf 8f4f 	dsb	sy
 800760e:	617a      	str	r2, [r7, #20]
 8007610:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007612:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007614:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800761a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800761c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800761e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007620:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007622:	429a      	cmp	r2, r3
 8007624:	d22b      	bcs.n	800767e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007628:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800762c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007632:	1c5a      	adds	r2, r3, #1
 8007634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007636:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007638:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800763c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007640:	d112      	bne.n	8007668 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007646:	2b00      	cmp	r3, #0
 8007648:	d016      	beq.n	8007678 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800764a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800764c:	3324      	adds	r3, #36	@ 0x24
 800764e:	4618      	mov	r0, r3
 8007650:	f001 f8d4 	bl	80087fc <xTaskRemoveFromEventList>
 8007654:	4603      	mov	r3, r0
 8007656:	2b00      	cmp	r3, #0
 8007658:	d00e      	beq.n	8007678 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d00b      	beq.n	8007678 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	2201      	movs	r2, #1
 8007664:	601a      	str	r2, [r3, #0]
 8007666:	e007      	b.n	8007678 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007668:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800766c:	3301      	adds	r3, #1
 800766e:	b2db      	uxtb	r3, r3
 8007670:	b25a      	sxtb	r2, r3
 8007672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007674:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007678:	2301      	movs	r3, #1
 800767a:	637b      	str	r3, [r7, #52]	@ 0x34
 800767c:	e001      	b.n	8007682 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800767e:	2300      	movs	r3, #0
 8007680:	637b      	str	r3, [r7, #52]	@ 0x34
 8007682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007684:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	f383 8811 	msr	BASEPRI, r3
}
 800768c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800768e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007690:	4618      	mov	r0, r3
 8007692:	3738      	adds	r7, #56	@ 0x38
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}

08007698 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b08c      	sub	sp, #48	@ 0x30
 800769c:	af00      	add	r7, sp, #0
 800769e:	60f8      	str	r0, [r7, #12]
 80076a0:	60b9      	str	r1, [r7, #8]
 80076a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80076a4:	2300      	movs	r3, #0
 80076a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80076ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d10b      	bne.n	80076ca <xQueueReceive+0x32>
	__asm volatile
 80076b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076b6:	f383 8811 	msr	BASEPRI, r3
 80076ba:	f3bf 8f6f 	isb	sy
 80076be:	f3bf 8f4f 	dsb	sy
 80076c2:	623b      	str	r3, [r7, #32]
}
 80076c4:	bf00      	nop
 80076c6:	bf00      	nop
 80076c8:	e7fd      	b.n	80076c6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d103      	bne.n	80076d8 <xQueueReceive+0x40>
 80076d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d101      	bne.n	80076dc <xQueueReceive+0x44>
 80076d8:	2301      	movs	r3, #1
 80076da:	e000      	b.n	80076de <xQueueReceive+0x46>
 80076dc:	2300      	movs	r3, #0
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d10b      	bne.n	80076fa <xQueueReceive+0x62>
	__asm volatile
 80076e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076e6:	f383 8811 	msr	BASEPRI, r3
 80076ea:	f3bf 8f6f 	isb	sy
 80076ee:	f3bf 8f4f 	dsb	sy
 80076f2:	61fb      	str	r3, [r7, #28]
}
 80076f4:	bf00      	nop
 80076f6:	bf00      	nop
 80076f8:	e7fd      	b.n	80076f6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80076fa:	f001 fa3f 	bl	8008b7c <xTaskGetSchedulerState>
 80076fe:	4603      	mov	r3, r0
 8007700:	2b00      	cmp	r3, #0
 8007702:	d102      	bne.n	800770a <xQueueReceive+0x72>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d101      	bne.n	800770e <xQueueReceive+0x76>
 800770a:	2301      	movs	r3, #1
 800770c:	e000      	b.n	8007710 <xQueueReceive+0x78>
 800770e:	2300      	movs	r3, #0
 8007710:	2b00      	cmp	r3, #0
 8007712:	d10b      	bne.n	800772c <xQueueReceive+0x94>
	__asm volatile
 8007714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007718:	f383 8811 	msr	BASEPRI, r3
 800771c:	f3bf 8f6f 	isb	sy
 8007720:	f3bf 8f4f 	dsb	sy
 8007724:	61bb      	str	r3, [r7, #24]
}
 8007726:	bf00      	nop
 8007728:	bf00      	nop
 800772a:	e7fd      	b.n	8007728 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800772c:	f002 f894 	bl	8009858 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007734:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007738:	2b00      	cmp	r3, #0
 800773a:	d01f      	beq.n	800777c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800773c:	68b9      	ldr	r1, [r7, #8]
 800773e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007740:	f000 fac4 	bl	8007ccc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007746:	1e5a      	subs	r2, r3, #1
 8007748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800774a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800774c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800774e:	691b      	ldr	r3, [r3, #16]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d00f      	beq.n	8007774 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007756:	3310      	adds	r3, #16
 8007758:	4618      	mov	r0, r3
 800775a:	f001 f84f 	bl	80087fc <xTaskRemoveFromEventList>
 800775e:	4603      	mov	r3, r0
 8007760:	2b00      	cmp	r3, #0
 8007762:	d007      	beq.n	8007774 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007764:	4b3c      	ldr	r3, [pc, #240]	@ (8007858 <xQueueReceive+0x1c0>)
 8007766:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800776a:	601a      	str	r2, [r3, #0]
 800776c:	f3bf 8f4f 	dsb	sy
 8007770:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007774:	f002 f8a2 	bl	80098bc <vPortExitCritical>
				return pdPASS;
 8007778:	2301      	movs	r3, #1
 800777a:	e069      	b.n	8007850 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d103      	bne.n	800778a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007782:	f002 f89b 	bl	80098bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007786:	2300      	movs	r3, #0
 8007788:	e062      	b.n	8007850 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800778a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800778c:	2b00      	cmp	r3, #0
 800778e:	d106      	bne.n	800779e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007790:	f107 0310 	add.w	r3, r7, #16
 8007794:	4618      	mov	r0, r3
 8007796:	f001 f895 	bl	80088c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800779a:	2301      	movs	r3, #1
 800779c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800779e:	f002 f88d 	bl	80098bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80077a2:	f000 fe05 	bl	80083b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80077a6:	f002 f857 	bl	8009858 <vPortEnterCritical>
 80077aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80077b0:	b25b      	sxtb	r3, r3
 80077b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077b6:	d103      	bne.n	80077c0 <xQueueReceive+0x128>
 80077b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077ba:	2200      	movs	r2, #0
 80077bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80077c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077c2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80077c6:	b25b      	sxtb	r3, r3
 80077c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077cc:	d103      	bne.n	80077d6 <xQueueReceive+0x13e>
 80077ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077d0:	2200      	movs	r2, #0
 80077d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80077d6:	f002 f871 	bl	80098bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80077da:	1d3a      	adds	r2, r7, #4
 80077dc:	f107 0310 	add.w	r3, r7, #16
 80077e0:	4611      	mov	r1, r2
 80077e2:	4618      	mov	r0, r3
 80077e4:	f001 f884 	bl	80088f0 <xTaskCheckForTimeOut>
 80077e8:	4603      	mov	r3, r0
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d123      	bne.n	8007836 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80077ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80077f0:	f000 fae4 	bl	8007dbc <prvIsQueueEmpty>
 80077f4:	4603      	mov	r3, r0
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d017      	beq.n	800782a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80077fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077fc:	3324      	adds	r3, #36	@ 0x24
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	4611      	mov	r1, r2
 8007802:	4618      	mov	r0, r3
 8007804:	f000 ffa8 	bl	8008758 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007808:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800780a:	f000 fa85 	bl	8007d18 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800780e:	f000 fddd 	bl	80083cc <xTaskResumeAll>
 8007812:	4603      	mov	r3, r0
 8007814:	2b00      	cmp	r3, #0
 8007816:	d189      	bne.n	800772c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007818:	4b0f      	ldr	r3, [pc, #60]	@ (8007858 <xQueueReceive+0x1c0>)
 800781a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800781e:	601a      	str	r2, [r3, #0]
 8007820:	f3bf 8f4f 	dsb	sy
 8007824:	f3bf 8f6f 	isb	sy
 8007828:	e780      	b.n	800772c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800782a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800782c:	f000 fa74 	bl	8007d18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007830:	f000 fdcc 	bl	80083cc <xTaskResumeAll>
 8007834:	e77a      	b.n	800772c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007836:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007838:	f000 fa6e 	bl	8007d18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800783c:	f000 fdc6 	bl	80083cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007840:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007842:	f000 fabb 	bl	8007dbc <prvIsQueueEmpty>
 8007846:	4603      	mov	r3, r0
 8007848:	2b00      	cmp	r3, #0
 800784a:	f43f af6f 	beq.w	800772c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800784e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007850:	4618      	mov	r0, r3
 8007852:	3730      	adds	r7, #48	@ 0x30
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}
 8007858:	e000ed04 	.word	0xe000ed04

0800785c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b08e      	sub	sp, #56	@ 0x38
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007866:	2300      	movs	r3, #0
 8007868:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800786e:	2300      	movs	r3, #0
 8007870:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007874:	2b00      	cmp	r3, #0
 8007876:	d10b      	bne.n	8007890 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8007878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800787c:	f383 8811 	msr	BASEPRI, r3
 8007880:	f3bf 8f6f 	isb	sy
 8007884:	f3bf 8f4f 	dsb	sy
 8007888:	623b      	str	r3, [r7, #32]
}
 800788a:	bf00      	nop
 800788c:	bf00      	nop
 800788e:	e7fd      	b.n	800788c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007894:	2b00      	cmp	r3, #0
 8007896:	d00b      	beq.n	80078b0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8007898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800789c:	f383 8811 	msr	BASEPRI, r3
 80078a0:	f3bf 8f6f 	isb	sy
 80078a4:	f3bf 8f4f 	dsb	sy
 80078a8:	61fb      	str	r3, [r7, #28]
}
 80078aa:	bf00      	nop
 80078ac:	bf00      	nop
 80078ae:	e7fd      	b.n	80078ac <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80078b0:	f001 f964 	bl	8008b7c <xTaskGetSchedulerState>
 80078b4:	4603      	mov	r3, r0
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d102      	bne.n	80078c0 <xQueueSemaphoreTake+0x64>
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d101      	bne.n	80078c4 <xQueueSemaphoreTake+0x68>
 80078c0:	2301      	movs	r3, #1
 80078c2:	e000      	b.n	80078c6 <xQueueSemaphoreTake+0x6a>
 80078c4:	2300      	movs	r3, #0
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d10b      	bne.n	80078e2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 80078ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078ce:	f383 8811 	msr	BASEPRI, r3
 80078d2:	f3bf 8f6f 	isb	sy
 80078d6:	f3bf 8f4f 	dsb	sy
 80078da:	61bb      	str	r3, [r7, #24]
}
 80078dc:	bf00      	nop
 80078de:	bf00      	nop
 80078e0:	e7fd      	b.n	80078de <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80078e2:	f001 ffb9 	bl	8009858 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80078e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078ea:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80078ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d024      	beq.n	800793c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80078f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078f4:	1e5a      	subs	r2, r3, #1
 80078f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078f8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80078fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d104      	bne.n	800790c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007902:	f001 fab5 	bl	8008e70 <pvTaskIncrementMutexHeldCount>
 8007906:	4602      	mov	r2, r0
 8007908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800790a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800790c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800790e:	691b      	ldr	r3, [r3, #16]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d00f      	beq.n	8007934 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007916:	3310      	adds	r3, #16
 8007918:	4618      	mov	r0, r3
 800791a:	f000 ff6f 	bl	80087fc <xTaskRemoveFromEventList>
 800791e:	4603      	mov	r3, r0
 8007920:	2b00      	cmp	r3, #0
 8007922:	d007      	beq.n	8007934 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007924:	4b54      	ldr	r3, [pc, #336]	@ (8007a78 <xQueueSemaphoreTake+0x21c>)
 8007926:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800792a:	601a      	str	r2, [r3, #0]
 800792c:	f3bf 8f4f 	dsb	sy
 8007930:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007934:	f001 ffc2 	bl	80098bc <vPortExitCritical>
				return pdPASS;
 8007938:	2301      	movs	r3, #1
 800793a:	e098      	b.n	8007a6e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d112      	bne.n	8007968 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007944:	2b00      	cmp	r3, #0
 8007946:	d00b      	beq.n	8007960 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8007948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800794c:	f383 8811 	msr	BASEPRI, r3
 8007950:	f3bf 8f6f 	isb	sy
 8007954:	f3bf 8f4f 	dsb	sy
 8007958:	617b      	str	r3, [r7, #20]
}
 800795a:	bf00      	nop
 800795c:	bf00      	nop
 800795e:	e7fd      	b.n	800795c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007960:	f001 ffac 	bl	80098bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007964:	2300      	movs	r3, #0
 8007966:	e082      	b.n	8007a6e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007968:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800796a:	2b00      	cmp	r3, #0
 800796c:	d106      	bne.n	800797c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800796e:	f107 030c 	add.w	r3, r7, #12
 8007972:	4618      	mov	r0, r3
 8007974:	f000 ffa6 	bl	80088c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007978:	2301      	movs	r3, #1
 800797a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800797c:	f001 ff9e 	bl	80098bc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007980:	f000 fd16 	bl	80083b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007984:	f001 ff68 	bl	8009858 <vPortEnterCritical>
 8007988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800798a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800798e:	b25b      	sxtb	r3, r3
 8007990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007994:	d103      	bne.n	800799e <xQueueSemaphoreTake+0x142>
 8007996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007998:	2200      	movs	r2, #0
 800799a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800799e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80079a4:	b25b      	sxtb	r3, r3
 80079a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079aa:	d103      	bne.n	80079b4 <xQueueSemaphoreTake+0x158>
 80079ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079ae:	2200      	movs	r2, #0
 80079b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80079b4:	f001 ff82 	bl	80098bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80079b8:	463a      	mov	r2, r7
 80079ba:	f107 030c 	add.w	r3, r7, #12
 80079be:	4611      	mov	r1, r2
 80079c0:	4618      	mov	r0, r3
 80079c2:	f000 ff95 	bl	80088f0 <xTaskCheckForTimeOut>
 80079c6:	4603      	mov	r3, r0
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d132      	bne.n	8007a32 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80079cc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80079ce:	f000 f9f5 	bl	8007dbc <prvIsQueueEmpty>
 80079d2:	4603      	mov	r3, r0
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d026      	beq.n	8007a26 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80079d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d109      	bne.n	80079f4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80079e0:	f001 ff3a 	bl	8009858 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80079e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	4618      	mov	r0, r3
 80079ea:	f001 f8e5 	bl	8008bb8 <xTaskPriorityInherit>
 80079ee:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80079f0:	f001 ff64 	bl	80098bc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80079f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079f6:	3324      	adds	r3, #36	@ 0x24
 80079f8:	683a      	ldr	r2, [r7, #0]
 80079fa:	4611      	mov	r1, r2
 80079fc:	4618      	mov	r0, r3
 80079fe:	f000 feab 	bl	8008758 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007a02:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007a04:	f000 f988 	bl	8007d18 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007a08:	f000 fce0 	bl	80083cc <xTaskResumeAll>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	f47f af67 	bne.w	80078e2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8007a14:	4b18      	ldr	r3, [pc, #96]	@ (8007a78 <xQueueSemaphoreTake+0x21c>)
 8007a16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a1a:	601a      	str	r2, [r3, #0]
 8007a1c:	f3bf 8f4f 	dsb	sy
 8007a20:	f3bf 8f6f 	isb	sy
 8007a24:	e75d      	b.n	80078e2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007a26:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007a28:	f000 f976 	bl	8007d18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007a2c:	f000 fcce 	bl	80083cc <xTaskResumeAll>
 8007a30:	e757      	b.n	80078e2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007a32:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007a34:	f000 f970 	bl	8007d18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007a38:	f000 fcc8 	bl	80083cc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007a3c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007a3e:	f000 f9bd 	bl	8007dbc <prvIsQueueEmpty>
 8007a42:	4603      	mov	r3, r0
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	f43f af4c 	beq.w	80078e2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d00d      	beq.n	8007a6c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8007a50:	f001 ff02 	bl	8009858 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007a54:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007a56:	f000 f8b7 	bl	8007bc8 <prvGetDisinheritPriorityAfterTimeout>
 8007a5a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007a5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a5e:	689b      	ldr	r3, [r3, #8]
 8007a60:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007a62:	4618      	mov	r0, r3
 8007a64:	f001 f980 	bl	8008d68 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007a68:	f001 ff28 	bl	80098bc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007a6c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3738      	adds	r7, #56	@ 0x38
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	bf00      	nop
 8007a78:	e000ed04 	.word	0xe000ed04

08007a7c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b08e      	sub	sp, #56	@ 0x38
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	60f8      	str	r0, [r7, #12]
 8007a84:	60b9      	str	r1, [r7, #8]
 8007a86:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d10b      	bne.n	8007aaa <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8007a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a96:	f383 8811 	msr	BASEPRI, r3
 8007a9a:	f3bf 8f6f 	isb	sy
 8007a9e:	f3bf 8f4f 	dsb	sy
 8007aa2:	623b      	str	r3, [r7, #32]
}
 8007aa4:	bf00      	nop
 8007aa6:	bf00      	nop
 8007aa8:	e7fd      	b.n	8007aa6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d103      	bne.n	8007ab8 <xQueueReceiveFromISR+0x3c>
 8007ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d101      	bne.n	8007abc <xQueueReceiveFromISR+0x40>
 8007ab8:	2301      	movs	r3, #1
 8007aba:	e000      	b.n	8007abe <xQueueReceiveFromISR+0x42>
 8007abc:	2300      	movs	r3, #0
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d10b      	bne.n	8007ada <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8007ac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ac6:	f383 8811 	msr	BASEPRI, r3
 8007aca:	f3bf 8f6f 	isb	sy
 8007ace:	f3bf 8f4f 	dsb	sy
 8007ad2:	61fb      	str	r3, [r7, #28]
}
 8007ad4:	bf00      	nop
 8007ad6:	bf00      	nop
 8007ad8:	e7fd      	b.n	8007ad6 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007ada:	f001 ff9d 	bl	8009a18 <vPortValidateInterruptPriority>
	__asm volatile
 8007ade:	f3ef 8211 	mrs	r2, BASEPRI
 8007ae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ae6:	f383 8811 	msr	BASEPRI, r3
 8007aea:	f3bf 8f6f 	isb	sy
 8007aee:	f3bf 8f4f 	dsb	sy
 8007af2:	61ba      	str	r2, [r7, #24]
 8007af4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007af6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007af8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007afc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007afe:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d02f      	beq.n	8007b66 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b08:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007b0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007b10:	68b9      	ldr	r1, [r7, #8]
 8007b12:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007b14:	f000 f8da 	bl	8007ccc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b1a:	1e5a      	subs	r2, r3, #1
 8007b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b1e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007b20:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b28:	d112      	bne.n	8007b50 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b2c:	691b      	ldr	r3, [r3, #16]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d016      	beq.n	8007b60 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b34:	3310      	adds	r3, #16
 8007b36:	4618      	mov	r0, r3
 8007b38:	f000 fe60 	bl	80087fc <xTaskRemoveFromEventList>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d00e      	beq.n	8007b60 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d00b      	beq.n	8007b60 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	601a      	str	r2, [r3, #0]
 8007b4e:	e007      	b.n	8007b60 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007b50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007b54:	3301      	adds	r3, #1
 8007b56:	b2db      	uxtb	r3, r3
 8007b58:	b25a      	sxtb	r2, r3
 8007b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8007b60:	2301      	movs	r3, #1
 8007b62:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b64:	e001      	b.n	8007b6a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8007b66:	2300      	movs	r3, #0
 8007b68:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b6c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	f383 8811 	msr	BASEPRI, r3
}
 8007b74:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007b76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3738      	adds	r7, #56	@ 0x38
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b084      	sub	sp, #16
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d10b      	bne.n	8007baa <vQueueDelete+0x2a>
	__asm volatile
 8007b92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b96:	f383 8811 	msr	BASEPRI, r3
 8007b9a:	f3bf 8f6f 	isb	sy
 8007b9e:	f3bf 8f4f 	dsb	sy
 8007ba2:	60bb      	str	r3, [r7, #8]
}
 8007ba4:	bf00      	nop
 8007ba6:	bf00      	nop
 8007ba8:	e7fd      	b.n	8007ba6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007baa:	68f8      	ldr	r0, [r7, #12]
 8007bac:	f000 f95e 	bl	8007e6c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d102      	bne.n	8007bc0 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8007bba:	68f8      	ldr	r0, [r7, #12]
 8007bbc:	f002 f83c 	bl	8009c38 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007bc0:	bf00      	nop
 8007bc2:	3710      	adds	r7, #16
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007bc8:	b480      	push	{r7}
 8007bca:	b085      	sub	sp, #20
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d006      	beq.n	8007be6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8007be2:	60fb      	str	r3, [r7, #12]
 8007be4:	e001      	b.n	8007bea <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007be6:	2300      	movs	r3, #0
 8007be8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007bea:	68fb      	ldr	r3, [r7, #12]
	}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3714      	adds	r7, #20
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr

08007bf8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b086      	sub	sp, #24
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	60f8      	str	r0, [r7, #12]
 8007c00:	60b9      	str	r1, [r7, #8]
 8007c02:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007c04:	2300      	movs	r3, #0
 8007c06:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c0c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d10d      	bne.n	8007c32 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d14d      	bne.n	8007cba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	689b      	ldr	r3, [r3, #8]
 8007c22:	4618      	mov	r0, r3
 8007c24:	f001 f830 	bl	8008c88 <xTaskPriorityDisinherit>
 8007c28:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	609a      	str	r2, [r3, #8]
 8007c30:	e043      	b.n	8007cba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d119      	bne.n	8007c6c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	6858      	ldr	r0, [r3, #4]
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c40:	461a      	mov	r2, r3
 8007c42:	68b9      	ldr	r1, [r7, #8]
 8007c44:	f003 f94b 	bl	800aede <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	685a      	ldr	r2, [r3, #4]
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c50:	441a      	add	r2, r3
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	685a      	ldr	r2, [r3, #4]
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	d32b      	bcc.n	8007cba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681a      	ldr	r2, [r3, #0]
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	605a      	str	r2, [r3, #4]
 8007c6a:	e026      	b.n	8007cba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	68d8      	ldr	r0, [r3, #12]
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c74:	461a      	mov	r2, r3
 8007c76:	68b9      	ldr	r1, [r7, #8]
 8007c78:	f003 f931 	bl	800aede <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	68da      	ldr	r2, [r3, #12]
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c84:	425b      	negs	r3, r3
 8007c86:	441a      	add	r2, r3
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	68da      	ldr	r2, [r3, #12]
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	429a      	cmp	r2, r3
 8007c96:	d207      	bcs.n	8007ca8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	689a      	ldr	r2, [r3, #8]
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ca0:	425b      	negs	r3, r3
 8007ca2:	441a      	add	r2, r3
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2b02      	cmp	r3, #2
 8007cac:	d105      	bne.n	8007cba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d002      	beq.n	8007cba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	3b01      	subs	r3, #1
 8007cb8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007cba:	693b      	ldr	r3, [r7, #16]
 8007cbc:	1c5a      	adds	r2, r3, #1
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007cc2:	697b      	ldr	r3, [r7, #20]
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3718      	adds	r7, #24
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b082      	sub	sp, #8
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d018      	beq.n	8007d10 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	68da      	ldr	r2, [r3, #12]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ce6:	441a      	add	r2, r3
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	68da      	ldr	r2, [r3, #12]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	689b      	ldr	r3, [r3, #8]
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d303      	bcc.n	8007d00 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681a      	ldr	r2, [r3, #0]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	68d9      	ldr	r1, [r3, #12]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d08:	461a      	mov	r2, r3
 8007d0a:	6838      	ldr	r0, [r7, #0]
 8007d0c:	f003 f8e7 	bl	800aede <memcpy>
	}
}
 8007d10:	bf00      	nop
 8007d12:	3708      	adds	r7, #8
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007d20:	f001 fd9a 	bl	8009858 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007d2a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d2c:	e011      	b.n	8007d52 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d012      	beq.n	8007d5c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	3324      	adds	r3, #36	@ 0x24
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f000 fd5e 	bl	80087fc <xTaskRemoveFromEventList>
 8007d40:	4603      	mov	r3, r0
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d001      	beq.n	8007d4a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007d46:	f000 fe37 	bl	80089b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007d4a:	7bfb      	ldrb	r3, [r7, #15]
 8007d4c:	3b01      	subs	r3, #1
 8007d4e:	b2db      	uxtb	r3, r3
 8007d50:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	dce9      	bgt.n	8007d2e <prvUnlockQueue+0x16>
 8007d5a:	e000      	b.n	8007d5e <prvUnlockQueue+0x46>
					break;
 8007d5c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	22ff      	movs	r2, #255	@ 0xff
 8007d62:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007d66:	f001 fda9 	bl	80098bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007d6a:	f001 fd75 	bl	8009858 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007d74:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007d76:	e011      	b.n	8007d9c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	691b      	ldr	r3, [r3, #16]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d012      	beq.n	8007da6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	3310      	adds	r3, #16
 8007d84:	4618      	mov	r0, r3
 8007d86:	f000 fd39 	bl	80087fc <xTaskRemoveFromEventList>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d001      	beq.n	8007d94 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007d90:	f000 fe12 	bl	80089b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007d94:	7bbb      	ldrb	r3, [r7, #14]
 8007d96:	3b01      	subs	r3, #1
 8007d98:	b2db      	uxtb	r3, r3
 8007d9a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007d9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	dce9      	bgt.n	8007d78 <prvUnlockQueue+0x60>
 8007da4:	e000      	b.n	8007da8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007da6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	22ff      	movs	r2, #255	@ 0xff
 8007dac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007db0:	f001 fd84 	bl	80098bc <vPortExitCritical>
}
 8007db4:	bf00      	nop
 8007db6:	3710      	adds	r7, #16
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b084      	sub	sp, #16
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007dc4:	f001 fd48 	bl	8009858 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d102      	bne.n	8007dd6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	60fb      	str	r3, [r7, #12]
 8007dd4:	e001      	b.n	8007dda <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007dda:	f001 fd6f 	bl	80098bc <vPortExitCritical>

	return xReturn;
 8007dde:	68fb      	ldr	r3, [r7, #12]
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3710      	adds	r7, #16
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}

08007de8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b084      	sub	sp, #16
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007df0:	f001 fd32 	bl	8009858 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d102      	bne.n	8007e06 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007e00:	2301      	movs	r3, #1
 8007e02:	60fb      	str	r3, [r7, #12]
 8007e04:	e001      	b.n	8007e0a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007e06:	2300      	movs	r3, #0
 8007e08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007e0a:	f001 fd57 	bl	80098bc <vPortExitCritical>

	return xReturn;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	3710      	adds	r7, #16
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}

08007e18 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007e18:	b480      	push	{r7}
 8007e1a:	b085      	sub	sp, #20
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e22:	2300      	movs	r3, #0
 8007e24:	60fb      	str	r3, [r7, #12]
 8007e26:	e014      	b.n	8007e52 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007e28:	4a0f      	ldr	r2, [pc, #60]	@ (8007e68 <vQueueAddToRegistry+0x50>)
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d10b      	bne.n	8007e4c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007e34:	490c      	ldr	r1, [pc, #48]	@ (8007e68 <vQueueAddToRegistry+0x50>)
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	683a      	ldr	r2, [r7, #0]
 8007e3a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007e3e:	4a0a      	ldr	r2, [pc, #40]	@ (8007e68 <vQueueAddToRegistry+0x50>)
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	00db      	lsls	r3, r3, #3
 8007e44:	4413      	add	r3, r2
 8007e46:	687a      	ldr	r2, [r7, #4]
 8007e48:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007e4a:	e006      	b.n	8007e5a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	3301      	adds	r3, #1
 8007e50:	60fb      	str	r3, [r7, #12]
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	2b07      	cmp	r3, #7
 8007e56:	d9e7      	bls.n	8007e28 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007e58:	bf00      	nop
 8007e5a:	bf00      	nop
 8007e5c:	3714      	adds	r7, #20
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e64:	4770      	bx	lr
 8007e66:	bf00      	nop
 8007e68:	20000d20 	.word	0x20000d20

08007e6c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b085      	sub	sp, #20
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e74:	2300      	movs	r3, #0
 8007e76:	60fb      	str	r3, [r7, #12]
 8007e78:	e016      	b.n	8007ea8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007e7a:	4a10      	ldr	r2, [pc, #64]	@ (8007ebc <vQueueUnregisterQueue+0x50>)
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	00db      	lsls	r3, r3, #3
 8007e80:	4413      	add	r3, r2
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	687a      	ldr	r2, [r7, #4]
 8007e86:	429a      	cmp	r2, r3
 8007e88:	d10b      	bne.n	8007ea2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007e8a:	4a0c      	ldr	r2, [pc, #48]	@ (8007ebc <vQueueUnregisterQueue+0x50>)
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2100      	movs	r1, #0
 8007e90:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007e94:	4a09      	ldr	r2, [pc, #36]	@ (8007ebc <vQueueUnregisterQueue+0x50>)
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	00db      	lsls	r3, r3, #3
 8007e9a:	4413      	add	r3, r2
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	605a      	str	r2, [r3, #4]
				break;
 8007ea0:	e006      	b.n	8007eb0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	3301      	adds	r3, #1
 8007ea6:	60fb      	str	r3, [r7, #12]
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2b07      	cmp	r3, #7
 8007eac:	d9e5      	bls.n	8007e7a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007eae:	bf00      	nop
 8007eb0:	bf00      	nop
 8007eb2:	3714      	adds	r7, #20
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr
 8007ebc:	20000d20 	.word	0x20000d20

08007ec0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b086      	sub	sp, #24
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	60f8      	str	r0, [r7, #12]
 8007ec8:	60b9      	str	r1, [r7, #8]
 8007eca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007ed0:	f001 fcc2 	bl	8009858 <vPortEnterCritical>
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007eda:	b25b      	sxtb	r3, r3
 8007edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ee0:	d103      	bne.n	8007eea <vQueueWaitForMessageRestricted+0x2a>
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007ef0:	b25b      	sxtb	r3, r3
 8007ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ef6:	d103      	bne.n	8007f00 <vQueueWaitForMessageRestricted+0x40>
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	2200      	movs	r2, #0
 8007efc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007f00:	f001 fcdc 	bl	80098bc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d106      	bne.n	8007f1a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	3324      	adds	r3, #36	@ 0x24
 8007f10:	687a      	ldr	r2, [r7, #4]
 8007f12:	68b9      	ldr	r1, [r7, #8]
 8007f14:	4618      	mov	r0, r3
 8007f16:	f000 fc45 	bl	80087a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007f1a:	6978      	ldr	r0, [r7, #20]
 8007f1c:	f7ff fefc 	bl	8007d18 <prvUnlockQueue>
	}
 8007f20:	bf00      	nop
 8007f22:	3718      	adds	r7, #24
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b08e      	sub	sp, #56	@ 0x38
 8007f2c:	af04      	add	r7, sp, #16
 8007f2e:	60f8      	str	r0, [r7, #12]
 8007f30:	60b9      	str	r1, [r7, #8]
 8007f32:	607a      	str	r2, [r7, #4]
 8007f34:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007f36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d10b      	bne.n	8007f54 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007f3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f40:	f383 8811 	msr	BASEPRI, r3
 8007f44:	f3bf 8f6f 	isb	sy
 8007f48:	f3bf 8f4f 	dsb	sy
 8007f4c:	623b      	str	r3, [r7, #32]
}
 8007f4e:	bf00      	nop
 8007f50:	bf00      	nop
 8007f52:	e7fd      	b.n	8007f50 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007f54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d10b      	bne.n	8007f72 <xTaskCreateStatic+0x4a>
	__asm volatile
 8007f5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f5e:	f383 8811 	msr	BASEPRI, r3
 8007f62:	f3bf 8f6f 	isb	sy
 8007f66:	f3bf 8f4f 	dsb	sy
 8007f6a:	61fb      	str	r3, [r7, #28]
}
 8007f6c:	bf00      	nop
 8007f6e:	bf00      	nop
 8007f70:	e7fd      	b.n	8007f6e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007f72:	235c      	movs	r3, #92	@ 0x5c
 8007f74:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	2b5c      	cmp	r3, #92	@ 0x5c
 8007f7a:	d00b      	beq.n	8007f94 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007f7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f80:	f383 8811 	msr	BASEPRI, r3
 8007f84:	f3bf 8f6f 	isb	sy
 8007f88:	f3bf 8f4f 	dsb	sy
 8007f8c:	61bb      	str	r3, [r7, #24]
}
 8007f8e:	bf00      	nop
 8007f90:	bf00      	nop
 8007f92:	e7fd      	b.n	8007f90 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007f94:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d01e      	beq.n	8007fda <xTaskCreateStatic+0xb2>
 8007f9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d01b      	beq.n	8007fda <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fa4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007faa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fae:	2202      	movs	r2, #2
 8007fb0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	9303      	str	r3, [sp, #12]
 8007fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fba:	9302      	str	r3, [sp, #8]
 8007fbc:	f107 0314 	add.w	r3, r7, #20
 8007fc0:	9301      	str	r3, [sp, #4]
 8007fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fc4:	9300      	str	r3, [sp, #0]
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	687a      	ldr	r2, [r7, #4]
 8007fca:	68b9      	ldr	r1, [r7, #8]
 8007fcc:	68f8      	ldr	r0, [r7, #12]
 8007fce:	f000 f850 	bl	8008072 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007fd2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007fd4:	f000 f8de 	bl	8008194 <prvAddNewTaskToReadyList>
 8007fd8:	e001      	b.n	8007fde <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007fde:	697b      	ldr	r3, [r7, #20]
	}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3728      	adds	r7, #40	@ 0x28
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}

08007fe8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b08c      	sub	sp, #48	@ 0x30
 8007fec:	af04      	add	r7, sp, #16
 8007fee:	60f8      	str	r0, [r7, #12]
 8007ff0:	60b9      	str	r1, [r7, #8]
 8007ff2:	603b      	str	r3, [r7, #0]
 8007ff4:	4613      	mov	r3, r2
 8007ff6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007ff8:	88fb      	ldrh	r3, [r7, #6]
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f001 fd4d 	bl	8009a9c <pvPortMalloc>
 8008002:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d00e      	beq.n	8008028 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800800a:	205c      	movs	r0, #92	@ 0x5c
 800800c:	f001 fd46 	bl	8009a9c <pvPortMalloc>
 8008010:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008012:	69fb      	ldr	r3, [r7, #28]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d003      	beq.n	8008020 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008018:	69fb      	ldr	r3, [r7, #28]
 800801a:	697a      	ldr	r2, [r7, #20]
 800801c:	631a      	str	r2, [r3, #48]	@ 0x30
 800801e:	e005      	b.n	800802c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008020:	6978      	ldr	r0, [r7, #20]
 8008022:	f001 fe09 	bl	8009c38 <vPortFree>
 8008026:	e001      	b.n	800802c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008028:	2300      	movs	r3, #0
 800802a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800802c:	69fb      	ldr	r3, [r7, #28]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d017      	beq.n	8008062 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008032:	69fb      	ldr	r3, [r7, #28]
 8008034:	2200      	movs	r2, #0
 8008036:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800803a:	88fa      	ldrh	r2, [r7, #6]
 800803c:	2300      	movs	r3, #0
 800803e:	9303      	str	r3, [sp, #12]
 8008040:	69fb      	ldr	r3, [r7, #28]
 8008042:	9302      	str	r3, [sp, #8]
 8008044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008046:	9301      	str	r3, [sp, #4]
 8008048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800804a:	9300      	str	r3, [sp, #0]
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	68b9      	ldr	r1, [r7, #8]
 8008050:	68f8      	ldr	r0, [r7, #12]
 8008052:	f000 f80e 	bl	8008072 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008056:	69f8      	ldr	r0, [r7, #28]
 8008058:	f000 f89c 	bl	8008194 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800805c:	2301      	movs	r3, #1
 800805e:	61bb      	str	r3, [r7, #24]
 8008060:	e002      	b.n	8008068 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008062:	f04f 33ff 	mov.w	r3, #4294967295
 8008066:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008068:	69bb      	ldr	r3, [r7, #24]
	}
 800806a:	4618      	mov	r0, r3
 800806c:	3720      	adds	r7, #32
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}

08008072 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008072:	b580      	push	{r7, lr}
 8008074:	b088      	sub	sp, #32
 8008076:	af00      	add	r7, sp, #0
 8008078:	60f8      	str	r0, [r7, #12]
 800807a:	60b9      	str	r1, [r7, #8]
 800807c:	607a      	str	r2, [r7, #4]
 800807e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008082:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	009b      	lsls	r3, r3, #2
 8008088:	461a      	mov	r2, r3
 800808a:	21a5      	movs	r1, #165	@ 0xa5
 800808c:	f002 fe3d 	bl	800ad0a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008092:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800809a:	3b01      	subs	r3, #1
 800809c:	009b      	lsls	r3, r3, #2
 800809e:	4413      	add	r3, r2
 80080a0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80080a2:	69bb      	ldr	r3, [r7, #24]
 80080a4:	f023 0307 	bic.w	r3, r3, #7
 80080a8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80080aa:	69bb      	ldr	r3, [r7, #24]
 80080ac:	f003 0307 	and.w	r3, r3, #7
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d00b      	beq.n	80080cc <prvInitialiseNewTask+0x5a>
	__asm volatile
 80080b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080b8:	f383 8811 	msr	BASEPRI, r3
 80080bc:	f3bf 8f6f 	isb	sy
 80080c0:	f3bf 8f4f 	dsb	sy
 80080c4:	617b      	str	r3, [r7, #20]
}
 80080c6:	bf00      	nop
 80080c8:	bf00      	nop
 80080ca:	e7fd      	b.n	80080c8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d01f      	beq.n	8008112 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80080d2:	2300      	movs	r3, #0
 80080d4:	61fb      	str	r3, [r7, #28]
 80080d6:	e012      	b.n	80080fe <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80080d8:	68ba      	ldr	r2, [r7, #8]
 80080da:	69fb      	ldr	r3, [r7, #28]
 80080dc:	4413      	add	r3, r2
 80080de:	7819      	ldrb	r1, [r3, #0]
 80080e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080e2:	69fb      	ldr	r3, [r7, #28]
 80080e4:	4413      	add	r3, r2
 80080e6:	3334      	adds	r3, #52	@ 0x34
 80080e8:	460a      	mov	r2, r1
 80080ea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80080ec:	68ba      	ldr	r2, [r7, #8]
 80080ee:	69fb      	ldr	r3, [r7, #28]
 80080f0:	4413      	add	r3, r2
 80080f2:	781b      	ldrb	r3, [r3, #0]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d006      	beq.n	8008106 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80080f8:	69fb      	ldr	r3, [r7, #28]
 80080fa:	3301      	adds	r3, #1
 80080fc:	61fb      	str	r3, [r7, #28]
 80080fe:	69fb      	ldr	r3, [r7, #28]
 8008100:	2b0f      	cmp	r3, #15
 8008102:	d9e9      	bls.n	80080d8 <prvInitialiseNewTask+0x66>
 8008104:	e000      	b.n	8008108 <prvInitialiseNewTask+0x96>
			{
				break;
 8008106:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800810a:	2200      	movs	r2, #0
 800810c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008110:	e003      	b.n	800811a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008114:	2200      	movs	r2, #0
 8008116:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800811a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800811c:	2b37      	cmp	r3, #55	@ 0x37
 800811e:	d901      	bls.n	8008124 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008120:	2337      	movs	r3, #55	@ 0x37
 8008122:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008126:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008128:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800812a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800812c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800812e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008132:	2200      	movs	r2, #0
 8008134:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008138:	3304      	adds	r3, #4
 800813a:	4618      	mov	r0, r3
 800813c:	f7fe fe34 	bl	8006da8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008142:	3318      	adds	r3, #24
 8008144:	4618      	mov	r0, r3
 8008146:	f7fe fe2f 	bl	8006da8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800814a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800814c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800814e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008152:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008158:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800815a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800815c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800815e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008162:	2200      	movs	r2, #0
 8008164:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008168:	2200      	movs	r2, #0
 800816a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800816e:	683a      	ldr	r2, [r7, #0]
 8008170:	68f9      	ldr	r1, [r7, #12]
 8008172:	69b8      	ldr	r0, [r7, #24]
 8008174:	f001 fa3e 	bl	80095f4 <pxPortInitialiseStack>
 8008178:	4602      	mov	r2, r0
 800817a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800817c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800817e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008180:	2b00      	cmp	r3, #0
 8008182:	d002      	beq.n	800818a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008186:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008188:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800818a:	bf00      	nop
 800818c:	3720      	adds	r7, #32
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
	...

08008194 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b082      	sub	sp, #8
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800819c:	f001 fb5c 	bl	8009858 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80081a0:	4b2d      	ldr	r3, [pc, #180]	@ (8008258 <prvAddNewTaskToReadyList+0xc4>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	3301      	adds	r3, #1
 80081a6:	4a2c      	ldr	r2, [pc, #176]	@ (8008258 <prvAddNewTaskToReadyList+0xc4>)
 80081a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80081aa:	4b2c      	ldr	r3, [pc, #176]	@ (800825c <prvAddNewTaskToReadyList+0xc8>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d109      	bne.n	80081c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80081b2:	4a2a      	ldr	r2, [pc, #168]	@ (800825c <prvAddNewTaskToReadyList+0xc8>)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80081b8:	4b27      	ldr	r3, [pc, #156]	@ (8008258 <prvAddNewTaskToReadyList+0xc4>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	2b01      	cmp	r3, #1
 80081be:	d110      	bne.n	80081e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80081c0:	f000 fc1e 	bl	8008a00 <prvInitialiseTaskLists>
 80081c4:	e00d      	b.n	80081e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80081c6:	4b26      	ldr	r3, [pc, #152]	@ (8008260 <prvAddNewTaskToReadyList+0xcc>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d109      	bne.n	80081e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80081ce:	4b23      	ldr	r3, [pc, #140]	@ (800825c <prvAddNewTaskToReadyList+0xc8>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081d8:	429a      	cmp	r2, r3
 80081da:	d802      	bhi.n	80081e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80081dc:	4a1f      	ldr	r2, [pc, #124]	@ (800825c <prvAddNewTaskToReadyList+0xc8>)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80081e2:	4b20      	ldr	r3, [pc, #128]	@ (8008264 <prvAddNewTaskToReadyList+0xd0>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	3301      	adds	r3, #1
 80081e8:	4a1e      	ldr	r2, [pc, #120]	@ (8008264 <prvAddNewTaskToReadyList+0xd0>)
 80081ea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80081ec:	4b1d      	ldr	r3, [pc, #116]	@ (8008264 <prvAddNewTaskToReadyList+0xd0>)
 80081ee:	681a      	ldr	r2, [r3, #0]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081f8:	4b1b      	ldr	r3, [pc, #108]	@ (8008268 <prvAddNewTaskToReadyList+0xd4>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	429a      	cmp	r2, r3
 80081fe:	d903      	bls.n	8008208 <prvAddNewTaskToReadyList+0x74>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008204:	4a18      	ldr	r2, [pc, #96]	@ (8008268 <prvAddNewTaskToReadyList+0xd4>)
 8008206:	6013      	str	r3, [r2, #0]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800820c:	4613      	mov	r3, r2
 800820e:	009b      	lsls	r3, r3, #2
 8008210:	4413      	add	r3, r2
 8008212:	009b      	lsls	r3, r3, #2
 8008214:	4a15      	ldr	r2, [pc, #84]	@ (800826c <prvAddNewTaskToReadyList+0xd8>)
 8008216:	441a      	add	r2, r3
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	3304      	adds	r3, #4
 800821c:	4619      	mov	r1, r3
 800821e:	4610      	mov	r0, r2
 8008220:	f7fe fdcf 	bl	8006dc2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008224:	f001 fb4a 	bl	80098bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008228:	4b0d      	ldr	r3, [pc, #52]	@ (8008260 <prvAddNewTaskToReadyList+0xcc>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d00e      	beq.n	800824e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008230:	4b0a      	ldr	r3, [pc, #40]	@ (800825c <prvAddNewTaskToReadyList+0xc8>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800823a:	429a      	cmp	r2, r3
 800823c:	d207      	bcs.n	800824e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800823e:	4b0c      	ldr	r3, [pc, #48]	@ (8008270 <prvAddNewTaskToReadyList+0xdc>)
 8008240:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008244:	601a      	str	r2, [r3, #0]
 8008246:	f3bf 8f4f 	dsb	sy
 800824a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800824e:	bf00      	nop
 8008250:	3708      	adds	r7, #8
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}
 8008256:	bf00      	nop
 8008258:	20001234 	.word	0x20001234
 800825c:	20000d60 	.word	0x20000d60
 8008260:	20001240 	.word	0x20001240
 8008264:	20001250 	.word	0x20001250
 8008268:	2000123c 	.word	0x2000123c
 800826c:	20000d64 	.word	0x20000d64
 8008270:	e000ed04 	.word	0xe000ed04

08008274 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008274:	b580      	push	{r7, lr}
 8008276:	b084      	sub	sp, #16
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800827c:	2300      	movs	r3, #0
 800827e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d018      	beq.n	80082b8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008286:	4b14      	ldr	r3, [pc, #80]	@ (80082d8 <vTaskDelay+0x64>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d00b      	beq.n	80082a6 <vTaskDelay+0x32>
	__asm volatile
 800828e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008292:	f383 8811 	msr	BASEPRI, r3
 8008296:	f3bf 8f6f 	isb	sy
 800829a:	f3bf 8f4f 	dsb	sy
 800829e:	60bb      	str	r3, [r7, #8]
}
 80082a0:	bf00      	nop
 80082a2:	bf00      	nop
 80082a4:	e7fd      	b.n	80082a2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80082a6:	f000 f883 	bl	80083b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80082aa:	2100      	movs	r1, #0
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f000 fdf3 	bl	8008e98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80082b2:	f000 f88b 	bl	80083cc <xTaskResumeAll>
 80082b6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d107      	bne.n	80082ce <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80082be:	4b07      	ldr	r3, [pc, #28]	@ (80082dc <vTaskDelay+0x68>)
 80082c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082c4:	601a      	str	r2, [r3, #0]
 80082c6:	f3bf 8f4f 	dsb	sy
 80082ca:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80082ce:	bf00      	nop
 80082d0:	3710      	adds	r7, #16
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}
 80082d6:	bf00      	nop
 80082d8:	2000125c 	.word	0x2000125c
 80082dc:	e000ed04 	.word	0xe000ed04

080082e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b08a      	sub	sp, #40	@ 0x28
 80082e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80082e6:	2300      	movs	r3, #0
 80082e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80082ea:	2300      	movs	r3, #0
 80082ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80082ee:	463a      	mov	r2, r7
 80082f0:	1d39      	adds	r1, r7, #4
 80082f2:	f107 0308 	add.w	r3, r7, #8
 80082f6:	4618      	mov	r0, r3
 80082f8:	f7fe fd02 	bl	8006d00 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80082fc:	6839      	ldr	r1, [r7, #0]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	68ba      	ldr	r2, [r7, #8]
 8008302:	9202      	str	r2, [sp, #8]
 8008304:	9301      	str	r3, [sp, #4]
 8008306:	2300      	movs	r3, #0
 8008308:	9300      	str	r3, [sp, #0]
 800830a:	2300      	movs	r3, #0
 800830c:	460a      	mov	r2, r1
 800830e:	4922      	ldr	r1, [pc, #136]	@ (8008398 <vTaskStartScheduler+0xb8>)
 8008310:	4822      	ldr	r0, [pc, #136]	@ (800839c <vTaskStartScheduler+0xbc>)
 8008312:	f7ff fe09 	bl	8007f28 <xTaskCreateStatic>
 8008316:	4603      	mov	r3, r0
 8008318:	4a21      	ldr	r2, [pc, #132]	@ (80083a0 <vTaskStartScheduler+0xc0>)
 800831a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800831c:	4b20      	ldr	r3, [pc, #128]	@ (80083a0 <vTaskStartScheduler+0xc0>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d002      	beq.n	800832a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008324:	2301      	movs	r3, #1
 8008326:	617b      	str	r3, [r7, #20]
 8008328:	e001      	b.n	800832e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800832a:	2300      	movs	r3, #0
 800832c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	2b01      	cmp	r3, #1
 8008332:	d102      	bne.n	800833a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008334:	f000 fe04 	bl	8008f40 <xTimerCreateTimerTask>
 8008338:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	2b01      	cmp	r3, #1
 800833e:	d116      	bne.n	800836e <vTaskStartScheduler+0x8e>
	__asm volatile
 8008340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008344:	f383 8811 	msr	BASEPRI, r3
 8008348:	f3bf 8f6f 	isb	sy
 800834c:	f3bf 8f4f 	dsb	sy
 8008350:	613b      	str	r3, [r7, #16]
}
 8008352:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008354:	4b13      	ldr	r3, [pc, #76]	@ (80083a4 <vTaskStartScheduler+0xc4>)
 8008356:	f04f 32ff 	mov.w	r2, #4294967295
 800835a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800835c:	4b12      	ldr	r3, [pc, #72]	@ (80083a8 <vTaskStartScheduler+0xc8>)
 800835e:	2201      	movs	r2, #1
 8008360:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008362:	4b12      	ldr	r3, [pc, #72]	@ (80083ac <vTaskStartScheduler+0xcc>)
 8008364:	2200      	movs	r2, #0
 8008366:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008368:	f001 f9d2 	bl	8009710 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800836c:	e00f      	b.n	800838e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008374:	d10b      	bne.n	800838e <vTaskStartScheduler+0xae>
	__asm volatile
 8008376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800837a:	f383 8811 	msr	BASEPRI, r3
 800837e:	f3bf 8f6f 	isb	sy
 8008382:	f3bf 8f4f 	dsb	sy
 8008386:	60fb      	str	r3, [r7, #12]
}
 8008388:	bf00      	nop
 800838a:	bf00      	nop
 800838c:	e7fd      	b.n	800838a <vTaskStartScheduler+0xaa>
}
 800838e:	bf00      	nop
 8008390:	3718      	adds	r7, #24
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}
 8008396:	bf00      	nop
 8008398:	0800cf44 	.word	0x0800cf44
 800839c:	080089d1 	.word	0x080089d1
 80083a0:	20001258 	.word	0x20001258
 80083a4:	20001254 	.word	0x20001254
 80083a8:	20001240 	.word	0x20001240
 80083ac:	20001238 	.word	0x20001238

080083b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80083b0:	b480      	push	{r7}
 80083b2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80083b4:	4b04      	ldr	r3, [pc, #16]	@ (80083c8 <vTaskSuspendAll+0x18>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	3301      	adds	r3, #1
 80083ba:	4a03      	ldr	r2, [pc, #12]	@ (80083c8 <vTaskSuspendAll+0x18>)
 80083bc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80083be:	bf00      	nop
 80083c0:	46bd      	mov	sp, r7
 80083c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c6:	4770      	bx	lr
 80083c8:	2000125c 	.word	0x2000125c

080083cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b084      	sub	sp, #16
 80083d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80083d2:	2300      	movs	r3, #0
 80083d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80083d6:	2300      	movs	r3, #0
 80083d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80083da:	4b42      	ldr	r3, [pc, #264]	@ (80084e4 <xTaskResumeAll+0x118>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d10b      	bne.n	80083fa <xTaskResumeAll+0x2e>
	__asm volatile
 80083e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083e6:	f383 8811 	msr	BASEPRI, r3
 80083ea:	f3bf 8f6f 	isb	sy
 80083ee:	f3bf 8f4f 	dsb	sy
 80083f2:	603b      	str	r3, [r7, #0]
}
 80083f4:	bf00      	nop
 80083f6:	bf00      	nop
 80083f8:	e7fd      	b.n	80083f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80083fa:	f001 fa2d 	bl	8009858 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80083fe:	4b39      	ldr	r3, [pc, #228]	@ (80084e4 <xTaskResumeAll+0x118>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	3b01      	subs	r3, #1
 8008404:	4a37      	ldr	r2, [pc, #220]	@ (80084e4 <xTaskResumeAll+0x118>)
 8008406:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008408:	4b36      	ldr	r3, [pc, #216]	@ (80084e4 <xTaskResumeAll+0x118>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d162      	bne.n	80084d6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008410:	4b35      	ldr	r3, [pc, #212]	@ (80084e8 <xTaskResumeAll+0x11c>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d05e      	beq.n	80084d6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008418:	e02f      	b.n	800847a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800841a:	4b34      	ldr	r3, [pc, #208]	@ (80084ec <xTaskResumeAll+0x120>)
 800841c:	68db      	ldr	r3, [r3, #12]
 800841e:	68db      	ldr	r3, [r3, #12]
 8008420:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	3318      	adds	r3, #24
 8008426:	4618      	mov	r0, r3
 8008428:	f7fe fd28 	bl	8006e7c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	3304      	adds	r3, #4
 8008430:	4618      	mov	r0, r3
 8008432:	f7fe fd23 	bl	8006e7c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800843a:	4b2d      	ldr	r3, [pc, #180]	@ (80084f0 <xTaskResumeAll+0x124>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	429a      	cmp	r2, r3
 8008440:	d903      	bls.n	800844a <xTaskResumeAll+0x7e>
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008446:	4a2a      	ldr	r2, [pc, #168]	@ (80084f0 <xTaskResumeAll+0x124>)
 8008448:	6013      	str	r3, [r2, #0]
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800844e:	4613      	mov	r3, r2
 8008450:	009b      	lsls	r3, r3, #2
 8008452:	4413      	add	r3, r2
 8008454:	009b      	lsls	r3, r3, #2
 8008456:	4a27      	ldr	r2, [pc, #156]	@ (80084f4 <xTaskResumeAll+0x128>)
 8008458:	441a      	add	r2, r3
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	3304      	adds	r3, #4
 800845e:	4619      	mov	r1, r3
 8008460:	4610      	mov	r0, r2
 8008462:	f7fe fcae 	bl	8006dc2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800846a:	4b23      	ldr	r3, [pc, #140]	@ (80084f8 <xTaskResumeAll+0x12c>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008470:	429a      	cmp	r2, r3
 8008472:	d302      	bcc.n	800847a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008474:	4b21      	ldr	r3, [pc, #132]	@ (80084fc <xTaskResumeAll+0x130>)
 8008476:	2201      	movs	r2, #1
 8008478:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800847a:	4b1c      	ldr	r3, [pc, #112]	@ (80084ec <xTaskResumeAll+0x120>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d1cb      	bne.n	800841a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d001      	beq.n	800848c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008488:	f000 fb58 	bl	8008b3c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800848c:	4b1c      	ldr	r3, [pc, #112]	@ (8008500 <xTaskResumeAll+0x134>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d010      	beq.n	80084ba <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008498:	f000 f846 	bl	8008528 <xTaskIncrementTick>
 800849c:	4603      	mov	r3, r0
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d002      	beq.n	80084a8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80084a2:	4b16      	ldr	r3, [pc, #88]	@ (80084fc <xTaskResumeAll+0x130>)
 80084a4:	2201      	movs	r2, #1
 80084a6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	3b01      	subs	r3, #1
 80084ac:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d1f1      	bne.n	8008498 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80084b4:	4b12      	ldr	r3, [pc, #72]	@ (8008500 <xTaskResumeAll+0x134>)
 80084b6:	2200      	movs	r2, #0
 80084b8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80084ba:	4b10      	ldr	r3, [pc, #64]	@ (80084fc <xTaskResumeAll+0x130>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d009      	beq.n	80084d6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80084c2:	2301      	movs	r3, #1
 80084c4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80084c6:	4b0f      	ldr	r3, [pc, #60]	@ (8008504 <xTaskResumeAll+0x138>)
 80084c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084cc:	601a      	str	r2, [r3, #0]
 80084ce:	f3bf 8f4f 	dsb	sy
 80084d2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80084d6:	f001 f9f1 	bl	80098bc <vPortExitCritical>

	return xAlreadyYielded;
 80084da:	68bb      	ldr	r3, [r7, #8]
}
 80084dc:	4618      	mov	r0, r3
 80084de:	3710      	adds	r7, #16
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}
 80084e4:	2000125c 	.word	0x2000125c
 80084e8:	20001234 	.word	0x20001234
 80084ec:	200011f4 	.word	0x200011f4
 80084f0:	2000123c 	.word	0x2000123c
 80084f4:	20000d64 	.word	0x20000d64
 80084f8:	20000d60 	.word	0x20000d60
 80084fc:	20001248 	.word	0x20001248
 8008500:	20001244 	.word	0x20001244
 8008504:	e000ed04 	.word	0xe000ed04

08008508 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008508:	b480      	push	{r7}
 800850a:	b083      	sub	sp, #12
 800850c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800850e:	4b05      	ldr	r3, [pc, #20]	@ (8008524 <xTaskGetTickCount+0x1c>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008514:	687b      	ldr	r3, [r7, #4]
}
 8008516:	4618      	mov	r0, r3
 8008518:	370c      	adds	r7, #12
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr
 8008522:	bf00      	nop
 8008524:	20001238 	.word	0x20001238

08008528 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b086      	sub	sp, #24
 800852c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800852e:	2300      	movs	r3, #0
 8008530:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008532:	4b4f      	ldr	r3, [pc, #316]	@ (8008670 <xTaskIncrementTick+0x148>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	2b00      	cmp	r3, #0
 8008538:	f040 8090 	bne.w	800865c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800853c:	4b4d      	ldr	r3, [pc, #308]	@ (8008674 <xTaskIncrementTick+0x14c>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	3301      	adds	r3, #1
 8008542:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008544:	4a4b      	ldr	r2, [pc, #300]	@ (8008674 <xTaskIncrementTick+0x14c>)
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d121      	bne.n	8008594 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008550:	4b49      	ldr	r3, [pc, #292]	@ (8008678 <xTaskIncrementTick+0x150>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d00b      	beq.n	8008572 <xTaskIncrementTick+0x4a>
	__asm volatile
 800855a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800855e:	f383 8811 	msr	BASEPRI, r3
 8008562:	f3bf 8f6f 	isb	sy
 8008566:	f3bf 8f4f 	dsb	sy
 800856a:	603b      	str	r3, [r7, #0]
}
 800856c:	bf00      	nop
 800856e:	bf00      	nop
 8008570:	e7fd      	b.n	800856e <xTaskIncrementTick+0x46>
 8008572:	4b41      	ldr	r3, [pc, #260]	@ (8008678 <xTaskIncrementTick+0x150>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	60fb      	str	r3, [r7, #12]
 8008578:	4b40      	ldr	r3, [pc, #256]	@ (800867c <xTaskIncrementTick+0x154>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a3e      	ldr	r2, [pc, #248]	@ (8008678 <xTaskIncrementTick+0x150>)
 800857e:	6013      	str	r3, [r2, #0]
 8008580:	4a3e      	ldr	r2, [pc, #248]	@ (800867c <xTaskIncrementTick+0x154>)
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	6013      	str	r3, [r2, #0]
 8008586:	4b3e      	ldr	r3, [pc, #248]	@ (8008680 <xTaskIncrementTick+0x158>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	3301      	adds	r3, #1
 800858c:	4a3c      	ldr	r2, [pc, #240]	@ (8008680 <xTaskIncrementTick+0x158>)
 800858e:	6013      	str	r3, [r2, #0]
 8008590:	f000 fad4 	bl	8008b3c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008594:	4b3b      	ldr	r3, [pc, #236]	@ (8008684 <xTaskIncrementTick+0x15c>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	693a      	ldr	r2, [r7, #16]
 800859a:	429a      	cmp	r2, r3
 800859c:	d349      	bcc.n	8008632 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800859e:	4b36      	ldr	r3, [pc, #216]	@ (8008678 <xTaskIncrementTick+0x150>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d104      	bne.n	80085b2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085a8:	4b36      	ldr	r3, [pc, #216]	@ (8008684 <xTaskIncrementTick+0x15c>)
 80085aa:	f04f 32ff 	mov.w	r2, #4294967295
 80085ae:	601a      	str	r2, [r3, #0]
					break;
 80085b0:	e03f      	b.n	8008632 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085b2:	4b31      	ldr	r3, [pc, #196]	@ (8008678 <xTaskIncrementTick+0x150>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	68db      	ldr	r3, [r3, #12]
 80085b8:	68db      	ldr	r3, [r3, #12]
 80085ba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80085c2:	693a      	ldr	r2, [r7, #16]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	429a      	cmp	r2, r3
 80085c8:	d203      	bcs.n	80085d2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80085ca:	4a2e      	ldr	r2, [pc, #184]	@ (8008684 <xTaskIncrementTick+0x15c>)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80085d0:	e02f      	b.n	8008632 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	3304      	adds	r3, #4
 80085d6:	4618      	mov	r0, r3
 80085d8:	f7fe fc50 	bl	8006e7c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d004      	beq.n	80085ee <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	3318      	adds	r3, #24
 80085e8:	4618      	mov	r0, r3
 80085ea:	f7fe fc47 	bl	8006e7c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085f2:	4b25      	ldr	r3, [pc, #148]	@ (8008688 <xTaskIncrementTick+0x160>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d903      	bls.n	8008602 <xTaskIncrementTick+0xda>
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085fe:	4a22      	ldr	r2, [pc, #136]	@ (8008688 <xTaskIncrementTick+0x160>)
 8008600:	6013      	str	r3, [r2, #0]
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008606:	4613      	mov	r3, r2
 8008608:	009b      	lsls	r3, r3, #2
 800860a:	4413      	add	r3, r2
 800860c:	009b      	lsls	r3, r3, #2
 800860e:	4a1f      	ldr	r2, [pc, #124]	@ (800868c <xTaskIncrementTick+0x164>)
 8008610:	441a      	add	r2, r3
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	3304      	adds	r3, #4
 8008616:	4619      	mov	r1, r3
 8008618:	4610      	mov	r0, r2
 800861a:	f7fe fbd2 	bl	8006dc2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008622:	4b1b      	ldr	r3, [pc, #108]	@ (8008690 <xTaskIncrementTick+0x168>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008628:	429a      	cmp	r2, r3
 800862a:	d3b8      	bcc.n	800859e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800862c:	2301      	movs	r3, #1
 800862e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008630:	e7b5      	b.n	800859e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008632:	4b17      	ldr	r3, [pc, #92]	@ (8008690 <xTaskIncrementTick+0x168>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008638:	4914      	ldr	r1, [pc, #80]	@ (800868c <xTaskIncrementTick+0x164>)
 800863a:	4613      	mov	r3, r2
 800863c:	009b      	lsls	r3, r3, #2
 800863e:	4413      	add	r3, r2
 8008640:	009b      	lsls	r3, r3, #2
 8008642:	440b      	add	r3, r1
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	2b01      	cmp	r3, #1
 8008648:	d901      	bls.n	800864e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800864a:	2301      	movs	r3, #1
 800864c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800864e:	4b11      	ldr	r3, [pc, #68]	@ (8008694 <xTaskIncrementTick+0x16c>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d007      	beq.n	8008666 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008656:	2301      	movs	r3, #1
 8008658:	617b      	str	r3, [r7, #20]
 800865a:	e004      	b.n	8008666 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800865c:	4b0e      	ldr	r3, [pc, #56]	@ (8008698 <xTaskIncrementTick+0x170>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	3301      	adds	r3, #1
 8008662:	4a0d      	ldr	r2, [pc, #52]	@ (8008698 <xTaskIncrementTick+0x170>)
 8008664:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008666:	697b      	ldr	r3, [r7, #20]
}
 8008668:	4618      	mov	r0, r3
 800866a:	3718      	adds	r7, #24
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}
 8008670:	2000125c 	.word	0x2000125c
 8008674:	20001238 	.word	0x20001238
 8008678:	200011ec 	.word	0x200011ec
 800867c:	200011f0 	.word	0x200011f0
 8008680:	2000124c 	.word	0x2000124c
 8008684:	20001254 	.word	0x20001254
 8008688:	2000123c 	.word	0x2000123c
 800868c:	20000d64 	.word	0x20000d64
 8008690:	20000d60 	.word	0x20000d60
 8008694:	20001248 	.word	0x20001248
 8008698:	20001244 	.word	0x20001244

0800869c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800869c:	b480      	push	{r7}
 800869e:	b085      	sub	sp, #20
 80086a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80086a2:	4b28      	ldr	r3, [pc, #160]	@ (8008744 <vTaskSwitchContext+0xa8>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d003      	beq.n	80086b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80086aa:	4b27      	ldr	r3, [pc, #156]	@ (8008748 <vTaskSwitchContext+0xac>)
 80086ac:	2201      	movs	r2, #1
 80086ae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80086b0:	e042      	b.n	8008738 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80086b2:	4b25      	ldr	r3, [pc, #148]	@ (8008748 <vTaskSwitchContext+0xac>)
 80086b4:	2200      	movs	r2, #0
 80086b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086b8:	4b24      	ldr	r3, [pc, #144]	@ (800874c <vTaskSwitchContext+0xb0>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	60fb      	str	r3, [r7, #12]
 80086be:	e011      	b.n	80086e4 <vTaskSwitchContext+0x48>
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d10b      	bne.n	80086de <vTaskSwitchContext+0x42>
	__asm volatile
 80086c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086ca:	f383 8811 	msr	BASEPRI, r3
 80086ce:	f3bf 8f6f 	isb	sy
 80086d2:	f3bf 8f4f 	dsb	sy
 80086d6:	607b      	str	r3, [r7, #4]
}
 80086d8:	bf00      	nop
 80086da:	bf00      	nop
 80086dc:	e7fd      	b.n	80086da <vTaskSwitchContext+0x3e>
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	3b01      	subs	r3, #1
 80086e2:	60fb      	str	r3, [r7, #12]
 80086e4:	491a      	ldr	r1, [pc, #104]	@ (8008750 <vTaskSwitchContext+0xb4>)
 80086e6:	68fa      	ldr	r2, [r7, #12]
 80086e8:	4613      	mov	r3, r2
 80086ea:	009b      	lsls	r3, r3, #2
 80086ec:	4413      	add	r3, r2
 80086ee:	009b      	lsls	r3, r3, #2
 80086f0:	440b      	add	r3, r1
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d0e3      	beq.n	80086c0 <vTaskSwitchContext+0x24>
 80086f8:	68fa      	ldr	r2, [r7, #12]
 80086fa:	4613      	mov	r3, r2
 80086fc:	009b      	lsls	r3, r3, #2
 80086fe:	4413      	add	r3, r2
 8008700:	009b      	lsls	r3, r3, #2
 8008702:	4a13      	ldr	r2, [pc, #76]	@ (8008750 <vTaskSwitchContext+0xb4>)
 8008704:	4413      	add	r3, r2
 8008706:	60bb      	str	r3, [r7, #8]
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	685b      	ldr	r3, [r3, #4]
 800870c:	685a      	ldr	r2, [r3, #4]
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	605a      	str	r2, [r3, #4]
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	685a      	ldr	r2, [r3, #4]
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	3308      	adds	r3, #8
 800871a:	429a      	cmp	r2, r3
 800871c:	d104      	bne.n	8008728 <vTaskSwitchContext+0x8c>
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	685a      	ldr	r2, [r3, #4]
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	605a      	str	r2, [r3, #4]
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	68db      	ldr	r3, [r3, #12]
 800872e:	4a09      	ldr	r2, [pc, #36]	@ (8008754 <vTaskSwitchContext+0xb8>)
 8008730:	6013      	str	r3, [r2, #0]
 8008732:	4a06      	ldr	r2, [pc, #24]	@ (800874c <vTaskSwitchContext+0xb0>)
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	6013      	str	r3, [r2, #0]
}
 8008738:	bf00      	nop
 800873a:	3714      	adds	r7, #20
 800873c:	46bd      	mov	sp, r7
 800873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008742:	4770      	bx	lr
 8008744:	2000125c 	.word	0x2000125c
 8008748:	20001248 	.word	0x20001248
 800874c:	2000123c 	.word	0x2000123c
 8008750:	20000d64 	.word	0x20000d64
 8008754:	20000d60 	.word	0x20000d60

08008758 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b084      	sub	sp, #16
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d10b      	bne.n	8008780 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800876c:	f383 8811 	msr	BASEPRI, r3
 8008770:	f3bf 8f6f 	isb	sy
 8008774:	f3bf 8f4f 	dsb	sy
 8008778:	60fb      	str	r3, [r7, #12]
}
 800877a:	bf00      	nop
 800877c:	bf00      	nop
 800877e:	e7fd      	b.n	800877c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008780:	4b07      	ldr	r3, [pc, #28]	@ (80087a0 <vTaskPlaceOnEventList+0x48>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	3318      	adds	r3, #24
 8008786:	4619      	mov	r1, r3
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f7fe fb3e 	bl	8006e0a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800878e:	2101      	movs	r1, #1
 8008790:	6838      	ldr	r0, [r7, #0]
 8008792:	f000 fb81 	bl	8008e98 <prvAddCurrentTaskToDelayedList>
}
 8008796:	bf00      	nop
 8008798:	3710      	adds	r7, #16
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}
 800879e:	bf00      	nop
 80087a0:	20000d60 	.word	0x20000d60

080087a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b086      	sub	sp, #24
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	60f8      	str	r0, [r7, #12]
 80087ac:	60b9      	str	r1, [r7, #8]
 80087ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d10b      	bne.n	80087ce <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80087b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087ba:	f383 8811 	msr	BASEPRI, r3
 80087be:	f3bf 8f6f 	isb	sy
 80087c2:	f3bf 8f4f 	dsb	sy
 80087c6:	617b      	str	r3, [r7, #20]
}
 80087c8:	bf00      	nop
 80087ca:	bf00      	nop
 80087cc:	e7fd      	b.n	80087ca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80087ce:	4b0a      	ldr	r3, [pc, #40]	@ (80087f8 <vTaskPlaceOnEventListRestricted+0x54>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	3318      	adds	r3, #24
 80087d4:	4619      	mov	r1, r3
 80087d6:	68f8      	ldr	r0, [r7, #12]
 80087d8:	f7fe faf3 	bl	8006dc2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d002      	beq.n	80087e8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80087e2:	f04f 33ff 	mov.w	r3, #4294967295
 80087e6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80087e8:	6879      	ldr	r1, [r7, #4]
 80087ea:	68b8      	ldr	r0, [r7, #8]
 80087ec:	f000 fb54 	bl	8008e98 <prvAddCurrentTaskToDelayedList>
	}
 80087f0:	bf00      	nop
 80087f2:	3718      	adds	r7, #24
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}
 80087f8:	20000d60 	.word	0x20000d60

080087fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b086      	sub	sp, #24
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	68db      	ldr	r3, [r3, #12]
 8008808:	68db      	ldr	r3, [r3, #12]
 800880a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d10b      	bne.n	800882a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008816:	f383 8811 	msr	BASEPRI, r3
 800881a:	f3bf 8f6f 	isb	sy
 800881e:	f3bf 8f4f 	dsb	sy
 8008822:	60fb      	str	r3, [r7, #12]
}
 8008824:	bf00      	nop
 8008826:	bf00      	nop
 8008828:	e7fd      	b.n	8008826 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	3318      	adds	r3, #24
 800882e:	4618      	mov	r0, r3
 8008830:	f7fe fb24 	bl	8006e7c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008834:	4b1d      	ldr	r3, [pc, #116]	@ (80088ac <xTaskRemoveFromEventList+0xb0>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d11d      	bne.n	8008878 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	3304      	adds	r3, #4
 8008840:	4618      	mov	r0, r3
 8008842:	f7fe fb1b 	bl	8006e7c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800884a:	4b19      	ldr	r3, [pc, #100]	@ (80088b0 <xTaskRemoveFromEventList+0xb4>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	429a      	cmp	r2, r3
 8008850:	d903      	bls.n	800885a <xTaskRemoveFromEventList+0x5e>
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008856:	4a16      	ldr	r2, [pc, #88]	@ (80088b0 <xTaskRemoveFromEventList+0xb4>)
 8008858:	6013      	str	r3, [r2, #0]
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800885e:	4613      	mov	r3, r2
 8008860:	009b      	lsls	r3, r3, #2
 8008862:	4413      	add	r3, r2
 8008864:	009b      	lsls	r3, r3, #2
 8008866:	4a13      	ldr	r2, [pc, #76]	@ (80088b4 <xTaskRemoveFromEventList+0xb8>)
 8008868:	441a      	add	r2, r3
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	3304      	adds	r3, #4
 800886e:	4619      	mov	r1, r3
 8008870:	4610      	mov	r0, r2
 8008872:	f7fe faa6 	bl	8006dc2 <vListInsertEnd>
 8008876:	e005      	b.n	8008884 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	3318      	adds	r3, #24
 800887c:	4619      	mov	r1, r3
 800887e:	480e      	ldr	r0, [pc, #56]	@ (80088b8 <xTaskRemoveFromEventList+0xbc>)
 8008880:	f7fe fa9f 	bl	8006dc2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008888:	4b0c      	ldr	r3, [pc, #48]	@ (80088bc <xTaskRemoveFromEventList+0xc0>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800888e:	429a      	cmp	r2, r3
 8008890:	d905      	bls.n	800889e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008892:	2301      	movs	r3, #1
 8008894:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008896:	4b0a      	ldr	r3, [pc, #40]	@ (80088c0 <xTaskRemoveFromEventList+0xc4>)
 8008898:	2201      	movs	r2, #1
 800889a:	601a      	str	r2, [r3, #0]
 800889c:	e001      	b.n	80088a2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800889e:	2300      	movs	r3, #0
 80088a0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80088a2:	697b      	ldr	r3, [r7, #20]
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3718      	adds	r7, #24
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}
 80088ac:	2000125c 	.word	0x2000125c
 80088b0:	2000123c 	.word	0x2000123c
 80088b4:	20000d64 	.word	0x20000d64
 80088b8:	200011f4 	.word	0x200011f4
 80088bc:	20000d60 	.word	0x20000d60
 80088c0:	20001248 	.word	0x20001248

080088c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80088c4:	b480      	push	{r7}
 80088c6:	b083      	sub	sp, #12
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80088cc:	4b06      	ldr	r3, [pc, #24]	@ (80088e8 <vTaskInternalSetTimeOutState+0x24>)
 80088ce:	681a      	ldr	r2, [r3, #0]
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80088d4:	4b05      	ldr	r3, [pc, #20]	@ (80088ec <vTaskInternalSetTimeOutState+0x28>)
 80088d6:	681a      	ldr	r2, [r3, #0]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	605a      	str	r2, [r3, #4]
}
 80088dc:	bf00      	nop
 80088de:	370c      	adds	r7, #12
 80088e0:	46bd      	mov	sp, r7
 80088e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e6:	4770      	bx	lr
 80088e8:	2000124c 	.word	0x2000124c
 80088ec:	20001238 	.word	0x20001238

080088f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b088      	sub	sp, #32
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d10b      	bne.n	8008918 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008904:	f383 8811 	msr	BASEPRI, r3
 8008908:	f3bf 8f6f 	isb	sy
 800890c:	f3bf 8f4f 	dsb	sy
 8008910:	613b      	str	r3, [r7, #16]
}
 8008912:	bf00      	nop
 8008914:	bf00      	nop
 8008916:	e7fd      	b.n	8008914 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d10b      	bne.n	8008936 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800891e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008922:	f383 8811 	msr	BASEPRI, r3
 8008926:	f3bf 8f6f 	isb	sy
 800892a:	f3bf 8f4f 	dsb	sy
 800892e:	60fb      	str	r3, [r7, #12]
}
 8008930:	bf00      	nop
 8008932:	bf00      	nop
 8008934:	e7fd      	b.n	8008932 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008936:	f000 ff8f 	bl	8009858 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800893a:	4b1d      	ldr	r3, [pc, #116]	@ (80089b0 <xTaskCheckForTimeOut+0xc0>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	69ba      	ldr	r2, [r7, #24]
 8008946:	1ad3      	subs	r3, r2, r3
 8008948:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008952:	d102      	bne.n	800895a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008954:	2300      	movs	r3, #0
 8008956:	61fb      	str	r3, [r7, #28]
 8008958:	e023      	b.n	80089a2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681a      	ldr	r2, [r3, #0]
 800895e:	4b15      	ldr	r3, [pc, #84]	@ (80089b4 <xTaskCheckForTimeOut+0xc4>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	429a      	cmp	r2, r3
 8008964:	d007      	beq.n	8008976 <xTaskCheckForTimeOut+0x86>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	685b      	ldr	r3, [r3, #4]
 800896a:	69ba      	ldr	r2, [r7, #24]
 800896c:	429a      	cmp	r2, r3
 800896e:	d302      	bcc.n	8008976 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008970:	2301      	movs	r3, #1
 8008972:	61fb      	str	r3, [r7, #28]
 8008974:	e015      	b.n	80089a2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	697a      	ldr	r2, [r7, #20]
 800897c:	429a      	cmp	r2, r3
 800897e:	d20b      	bcs.n	8008998 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	681a      	ldr	r2, [r3, #0]
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	1ad2      	subs	r2, r2, r3
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f7ff ff99 	bl	80088c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008992:	2300      	movs	r3, #0
 8008994:	61fb      	str	r3, [r7, #28]
 8008996:	e004      	b.n	80089a2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	2200      	movs	r2, #0
 800899c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800899e:	2301      	movs	r3, #1
 80089a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80089a2:	f000 ff8b 	bl	80098bc <vPortExitCritical>

	return xReturn;
 80089a6:	69fb      	ldr	r3, [r7, #28]
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3720      	adds	r7, #32
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}
 80089b0:	20001238 	.word	0x20001238
 80089b4:	2000124c 	.word	0x2000124c

080089b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80089b8:	b480      	push	{r7}
 80089ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80089bc:	4b03      	ldr	r3, [pc, #12]	@ (80089cc <vTaskMissedYield+0x14>)
 80089be:	2201      	movs	r2, #1
 80089c0:	601a      	str	r2, [r3, #0]
}
 80089c2:	bf00      	nop
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr
 80089cc:	20001248 	.word	0x20001248

080089d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b082      	sub	sp, #8
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80089d8:	f000 f852 	bl	8008a80 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80089dc:	4b06      	ldr	r3, [pc, #24]	@ (80089f8 <prvIdleTask+0x28>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	2b01      	cmp	r3, #1
 80089e2:	d9f9      	bls.n	80089d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80089e4:	4b05      	ldr	r3, [pc, #20]	@ (80089fc <prvIdleTask+0x2c>)
 80089e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089ea:	601a      	str	r2, [r3, #0]
 80089ec:	f3bf 8f4f 	dsb	sy
 80089f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80089f4:	e7f0      	b.n	80089d8 <prvIdleTask+0x8>
 80089f6:	bf00      	nop
 80089f8:	20000d64 	.word	0x20000d64
 80089fc:	e000ed04 	.word	0xe000ed04

08008a00 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b082      	sub	sp, #8
 8008a04:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a06:	2300      	movs	r3, #0
 8008a08:	607b      	str	r3, [r7, #4]
 8008a0a:	e00c      	b.n	8008a26 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008a0c:	687a      	ldr	r2, [r7, #4]
 8008a0e:	4613      	mov	r3, r2
 8008a10:	009b      	lsls	r3, r3, #2
 8008a12:	4413      	add	r3, r2
 8008a14:	009b      	lsls	r3, r3, #2
 8008a16:	4a12      	ldr	r2, [pc, #72]	@ (8008a60 <prvInitialiseTaskLists+0x60>)
 8008a18:	4413      	add	r3, r2
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f7fe f9a4 	bl	8006d68 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	3301      	adds	r3, #1
 8008a24:	607b      	str	r3, [r7, #4]
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2b37      	cmp	r3, #55	@ 0x37
 8008a2a:	d9ef      	bls.n	8008a0c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008a2c:	480d      	ldr	r0, [pc, #52]	@ (8008a64 <prvInitialiseTaskLists+0x64>)
 8008a2e:	f7fe f99b 	bl	8006d68 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008a32:	480d      	ldr	r0, [pc, #52]	@ (8008a68 <prvInitialiseTaskLists+0x68>)
 8008a34:	f7fe f998 	bl	8006d68 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008a38:	480c      	ldr	r0, [pc, #48]	@ (8008a6c <prvInitialiseTaskLists+0x6c>)
 8008a3a:	f7fe f995 	bl	8006d68 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008a3e:	480c      	ldr	r0, [pc, #48]	@ (8008a70 <prvInitialiseTaskLists+0x70>)
 8008a40:	f7fe f992 	bl	8006d68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008a44:	480b      	ldr	r0, [pc, #44]	@ (8008a74 <prvInitialiseTaskLists+0x74>)
 8008a46:	f7fe f98f 	bl	8006d68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008a4a:	4b0b      	ldr	r3, [pc, #44]	@ (8008a78 <prvInitialiseTaskLists+0x78>)
 8008a4c:	4a05      	ldr	r2, [pc, #20]	@ (8008a64 <prvInitialiseTaskLists+0x64>)
 8008a4e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008a50:	4b0a      	ldr	r3, [pc, #40]	@ (8008a7c <prvInitialiseTaskLists+0x7c>)
 8008a52:	4a05      	ldr	r2, [pc, #20]	@ (8008a68 <prvInitialiseTaskLists+0x68>)
 8008a54:	601a      	str	r2, [r3, #0]
}
 8008a56:	bf00      	nop
 8008a58:	3708      	adds	r7, #8
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}
 8008a5e:	bf00      	nop
 8008a60:	20000d64 	.word	0x20000d64
 8008a64:	200011c4 	.word	0x200011c4
 8008a68:	200011d8 	.word	0x200011d8
 8008a6c:	200011f4 	.word	0x200011f4
 8008a70:	20001208 	.word	0x20001208
 8008a74:	20001220 	.word	0x20001220
 8008a78:	200011ec 	.word	0x200011ec
 8008a7c:	200011f0 	.word	0x200011f0

08008a80 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b082      	sub	sp, #8
 8008a84:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008a86:	e019      	b.n	8008abc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008a88:	f000 fee6 	bl	8009858 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a8c:	4b10      	ldr	r3, [pc, #64]	@ (8008ad0 <prvCheckTasksWaitingTermination+0x50>)
 8008a8e:	68db      	ldr	r3, [r3, #12]
 8008a90:	68db      	ldr	r3, [r3, #12]
 8008a92:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	3304      	adds	r3, #4
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f7fe f9ef 	bl	8006e7c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8008ad4 <prvCheckTasksWaitingTermination+0x54>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	3b01      	subs	r3, #1
 8008aa4:	4a0b      	ldr	r2, [pc, #44]	@ (8008ad4 <prvCheckTasksWaitingTermination+0x54>)
 8008aa6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8008ad8 <prvCheckTasksWaitingTermination+0x58>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	3b01      	subs	r3, #1
 8008aae:	4a0a      	ldr	r2, [pc, #40]	@ (8008ad8 <prvCheckTasksWaitingTermination+0x58>)
 8008ab0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008ab2:	f000 ff03 	bl	80098bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 f810 	bl	8008adc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008abc:	4b06      	ldr	r3, [pc, #24]	@ (8008ad8 <prvCheckTasksWaitingTermination+0x58>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d1e1      	bne.n	8008a88 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008ac4:	bf00      	nop
 8008ac6:	bf00      	nop
 8008ac8:	3708      	adds	r7, #8
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}
 8008ace:	bf00      	nop
 8008ad0:	20001208 	.word	0x20001208
 8008ad4:	20001234 	.word	0x20001234
 8008ad8:	2000121c 	.word	0x2000121c

08008adc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b084      	sub	sp, #16
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d108      	bne.n	8008b00 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008af2:	4618      	mov	r0, r3
 8008af4:	f001 f8a0 	bl	8009c38 <vPortFree>
				vPortFree( pxTCB );
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f001 f89d 	bl	8009c38 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008afe:	e019      	b.n	8008b34 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008b06:	2b01      	cmp	r3, #1
 8008b08:	d103      	bne.n	8008b12 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f001 f894 	bl	8009c38 <vPortFree>
	}
 8008b10:	e010      	b.n	8008b34 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008b18:	2b02      	cmp	r3, #2
 8008b1a:	d00b      	beq.n	8008b34 <prvDeleteTCB+0x58>
	__asm volatile
 8008b1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b20:	f383 8811 	msr	BASEPRI, r3
 8008b24:	f3bf 8f6f 	isb	sy
 8008b28:	f3bf 8f4f 	dsb	sy
 8008b2c:	60fb      	str	r3, [r7, #12]
}
 8008b2e:	bf00      	nop
 8008b30:	bf00      	nop
 8008b32:	e7fd      	b.n	8008b30 <prvDeleteTCB+0x54>
	}
 8008b34:	bf00      	nop
 8008b36:	3710      	adds	r7, #16
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}

08008b3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b083      	sub	sp, #12
 8008b40:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b42:	4b0c      	ldr	r3, [pc, #48]	@ (8008b74 <prvResetNextTaskUnblockTime+0x38>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d104      	bne.n	8008b56 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8008b78 <prvResetNextTaskUnblockTime+0x3c>)
 8008b4e:	f04f 32ff 	mov.w	r2, #4294967295
 8008b52:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008b54:	e008      	b.n	8008b68 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b56:	4b07      	ldr	r3, [pc, #28]	@ (8008b74 <prvResetNextTaskUnblockTime+0x38>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	68db      	ldr	r3, [r3, #12]
 8008b5c:	68db      	ldr	r3, [r3, #12]
 8008b5e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	4a04      	ldr	r2, [pc, #16]	@ (8008b78 <prvResetNextTaskUnblockTime+0x3c>)
 8008b66:	6013      	str	r3, [r2, #0]
}
 8008b68:	bf00      	nop
 8008b6a:	370c      	adds	r7, #12
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b72:	4770      	bx	lr
 8008b74:	200011ec 	.word	0x200011ec
 8008b78:	20001254 	.word	0x20001254

08008b7c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b083      	sub	sp, #12
 8008b80:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008b82:	4b0b      	ldr	r3, [pc, #44]	@ (8008bb0 <xTaskGetSchedulerState+0x34>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d102      	bne.n	8008b90 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	607b      	str	r3, [r7, #4]
 8008b8e:	e008      	b.n	8008ba2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b90:	4b08      	ldr	r3, [pc, #32]	@ (8008bb4 <xTaskGetSchedulerState+0x38>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d102      	bne.n	8008b9e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008b98:	2302      	movs	r3, #2
 8008b9a:	607b      	str	r3, [r7, #4]
 8008b9c:	e001      	b.n	8008ba2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008ba2:	687b      	ldr	r3, [r7, #4]
	}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	370c      	adds	r7, #12
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr
 8008bb0:	20001240 	.word	0x20001240
 8008bb4:	2000125c 	.word	0x2000125c

08008bb8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b084      	sub	sp, #16
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d051      	beq.n	8008c72 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bd2:	4b2a      	ldr	r3, [pc, #168]	@ (8008c7c <xTaskPriorityInherit+0xc4>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	d241      	bcs.n	8008c60 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	699b      	ldr	r3, [r3, #24]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	db06      	blt.n	8008bf2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008be4:	4b25      	ldr	r3, [pc, #148]	@ (8008c7c <xTaskPriorityInherit+0xc4>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bea:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	6959      	ldr	r1, [r3, #20]
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bfa:	4613      	mov	r3, r2
 8008bfc:	009b      	lsls	r3, r3, #2
 8008bfe:	4413      	add	r3, r2
 8008c00:	009b      	lsls	r3, r3, #2
 8008c02:	4a1f      	ldr	r2, [pc, #124]	@ (8008c80 <xTaskPriorityInherit+0xc8>)
 8008c04:	4413      	add	r3, r2
 8008c06:	4299      	cmp	r1, r3
 8008c08:	d122      	bne.n	8008c50 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	3304      	adds	r3, #4
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f7fe f934 	bl	8006e7c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008c14:	4b19      	ldr	r3, [pc, #100]	@ (8008c7c <xTaskPriorityInherit+0xc4>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c22:	4b18      	ldr	r3, [pc, #96]	@ (8008c84 <xTaskPriorityInherit+0xcc>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	429a      	cmp	r2, r3
 8008c28:	d903      	bls.n	8008c32 <xTaskPriorityInherit+0x7a>
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c2e:	4a15      	ldr	r2, [pc, #84]	@ (8008c84 <xTaskPriorityInherit+0xcc>)
 8008c30:	6013      	str	r3, [r2, #0]
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c36:	4613      	mov	r3, r2
 8008c38:	009b      	lsls	r3, r3, #2
 8008c3a:	4413      	add	r3, r2
 8008c3c:	009b      	lsls	r3, r3, #2
 8008c3e:	4a10      	ldr	r2, [pc, #64]	@ (8008c80 <xTaskPriorityInherit+0xc8>)
 8008c40:	441a      	add	r2, r3
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	3304      	adds	r3, #4
 8008c46:	4619      	mov	r1, r3
 8008c48:	4610      	mov	r0, r2
 8008c4a:	f7fe f8ba 	bl	8006dc2 <vListInsertEnd>
 8008c4e:	e004      	b.n	8008c5a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008c50:	4b0a      	ldr	r3, [pc, #40]	@ (8008c7c <xTaskPriorityInherit+0xc4>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	60fb      	str	r3, [r7, #12]
 8008c5e:	e008      	b.n	8008c72 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008c64:	4b05      	ldr	r3, [pc, #20]	@ (8008c7c <xTaskPriorityInherit+0xc4>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	d201      	bcs.n	8008c72 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008c6e:	2301      	movs	r3, #1
 8008c70:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008c72:	68fb      	ldr	r3, [r7, #12]
	}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3710      	adds	r7, #16
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}
 8008c7c:	20000d60 	.word	0x20000d60
 8008c80:	20000d64 	.word	0x20000d64
 8008c84:	2000123c 	.word	0x2000123c

08008c88 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b086      	sub	sp, #24
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008c94:	2300      	movs	r3, #0
 8008c96:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d058      	beq.n	8008d50 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008c9e:	4b2f      	ldr	r3, [pc, #188]	@ (8008d5c <xTaskPriorityDisinherit+0xd4>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	693a      	ldr	r2, [r7, #16]
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d00b      	beq.n	8008cc0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008ca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cac:	f383 8811 	msr	BASEPRI, r3
 8008cb0:	f3bf 8f6f 	isb	sy
 8008cb4:	f3bf 8f4f 	dsb	sy
 8008cb8:	60fb      	str	r3, [r7, #12]
}
 8008cba:	bf00      	nop
 8008cbc:	bf00      	nop
 8008cbe:	e7fd      	b.n	8008cbc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d10b      	bne.n	8008ce0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008cc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ccc:	f383 8811 	msr	BASEPRI, r3
 8008cd0:	f3bf 8f6f 	isb	sy
 8008cd4:	f3bf 8f4f 	dsb	sy
 8008cd8:	60bb      	str	r3, [r7, #8]
}
 8008cda:	bf00      	nop
 8008cdc:	bf00      	nop
 8008cde:	e7fd      	b.n	8008cdc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ce4:	1e5a      	subs	r2, r3, #1
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008cea:	693b      	ldr	r3, [r7, #16]
 8008cec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	d02c      	beq.n	8008d50 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008cf6:	693b      	ldr	r3, [r7, #16]
 8008cf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d128      	bne.n	8008d50 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	3304      	adds	r3, #4
 8008d02:	4618      	mov	r0, r3
 8008d04:	f7fe f8ba 	bl	8006e7c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008d0c:	693b      	ldr	r3, [r7, #16]
 8008d0e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d14:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d20:	4b0f      	ldr	r3, [pc, #60]	@ (8008d60 <xTaskPriorityDisinherit+0xd8>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	429a      	cmp	r2, r3
 8008d26:	d903      	bls.n	8008d30 <xTaskPriorityDisinherit+0xa8>
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d2c:	4a0c      	ldr	r2, [pc, #48]	@ (8008d60 <xTaskPriorityDisinherit+0xd8>)
 8008d2e:	6013      	str	r3, [r2, #0]
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d34:	4613      	mov	r3, r2
 8008d36:	009b      	lsls	r3, r3, #2
 8008d38:	4413      	add	r3, r2
 8008d3a:	009b      	lsls	r3, r3, #2
 8008d3c:	4a09      	ldr	r2, [pc, #36]	@ (8008d64 <xTaskPriorityDisinherit+0xdc>)
 8008d3e:	441a      	add	r2, r3
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	3304      	adds	r3, #4
 8008d44:	4619      	mov	r1, r3
 8008d46:	4610      	mov	r0, r2
 8008d48:	f7fe f83b 	bl	8006dc2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008d50:	697b      	ldr	r3, [r7, #20]
	}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3718      	adds	r7, #24
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}
 8008d5a:	bf00      	nop
 8008d5c:	20000d60 	.word	0x20000d60
 8008d60:	2000123c 	.word	0x2000123c
 8008d64:	20000d64 	.word	0x20000d64

08008d68 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b088      	sub	sp, #32
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
 8008d70:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008d76:	2301      	movs	r3, #1
 8008d78:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d06c      	beq.n	8008e5a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008d80:	69bb      	ldr	r3, [r7, #24]
 8008d82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d10b      	bne.n	8008da0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8008d88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d8c:	f383 8811 	msr	BASEPRI, r3
 8008d90:	f3bf 8f6f 	isb	sy
 8008d94:	f3bf 8f4f 	dsb	sy
 8008d98:	60fb      	str	r3, [r7, #12]
}
 8008d9a:	bf00      	nop
 8008d9c:	bf00      	nop
 8008d9e:	e7fd      	b.n	8008d9c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008da0:	69bb      	ldr	r3, [r7, #24]
 8008da2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008da4:	683a      	ldr	r2, [r7, #0]
 8008da6:	429a      	cmp	r2, r3
 8008da8:	d902      	bls.n	8008db0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	61fb      	str	r3, [r7, #28]
 8008dae:	e002      	b.n	8008db6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008db0:	69bb      	ldr	r3, [r7, #24]
 8008db2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008db4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008db6:	69bb      	ldr	r3, [r7, #24]
 8008db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dba:	69fa      	ldr	r2, [r7, #28]
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d04c      	beq.n	8008e5a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008dc0:	69bb      	ldr	r3, [r7, #24]
 8008dc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008dc4:	697a      	ldr	r2, [r7, #20]
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d147      	bne.n	8008e5a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008dca:	4b26      	ldr	r3, [pc, #152]	@ (8008e64 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	69ba      	ldr	r2, [r7, #24]
 8008dd0:	429a      	cmp	r2, r3
 8008dd2:	d10b      	bne.n	8008dec <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8008dd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dd8:	f383 8811 	msr	BASEPRI, r3
 8008ddc:	f3bf 8f6f 	isb	sy
 8008de0:	f3bf 8f4f 	dsb	sy
 8008de4:	60bb      	str	r3, [r7, #8]
}
 8008de6:	bf00      	nop
 8008de8:	bf00      	nop
 8008dea:	e7fd      	b.n	8008de8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008dec:	69bb      	ldr	r3, [r7, #24]
 8008dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008df0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008df2:	69bb      	ldr	r3, [r7, #24]
 8008df4:	69fa      	ldr	r2, [r7, #28]
 8008df6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008df8:	69bb      	ldr	r3, [r7, #24]
 8008dfa:	699b      	ldr	r3, [r3, #24]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	db04      	blt.n	8008e0a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e00:	69fb      	ldr	r3, [r7, #28]
 8008e02:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008e06:	69bb      	ldr	r3, [r7, #24]
 8008e08:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008e0a:	69bb      	ldr	r3, [r7, #24]
 8008e0c:	6959      	ldr	r1, [r3, #20]
 8008e0e:	693a      	ldr	r2, [r7, #16]
 8008e10:	4613      	mov	r3, r2
 8008e12:	009b      	lsls	r3, r3, #2
 8008e14:	4413      	add	r3, r2
 8008e16:	009b      	lsls	r3, r3, #2
 8008e18:	4a13      	ldr	r2, [pc, #76]	@ (8008e68 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008e1a:	4413      	add	r3, r2
 8008e1c:	4299      	cmp	r1, r3
 8008e1e:	d11c      	bne.n	8008e5a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e20:	69bb      	ldr	r3, [r7, #24]
 8008e22:	3304      	adds	r3, #4
 8008e24:	4618      	mov	r0, r3
 8008e26:	f7fe f829 	bl	8006e7c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008e2a:	69bb      	ldr	r3, [r7, #24]
 8008e2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e2e:	4b0f      	ldr	r3, [pc, #60]	@ (8008e6c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	429a      	cmp	r2, r3
 8008e34:	d903      	bls.n	8008e3e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8008e36:	69bb      	ldr	r3, [r7, #24]
 8008e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e3a:	4a0c      	ldr	r2, [pc, #48]	@ (8008e6c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008e3c:	6013      	str	r3, [r2, #0]
 8008e3e:	69bb      	ldr	r3, [r7, #24]
 8008e40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e42:	4613      	mov	r3, r2
 8008e44:	009b      	lsls	r3, r3, #2
 8008e46:	4413      	add	r3, r2
 8008e48:	009b      	lsls	r3, r3, #2
 8008e4a:	4a07      	ldr	r2, [pc, #28]	@ (8008e68 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008e4c:	441a      	add	r2, r3
 8008e4e:	69bb      	ldr	r3, [r7, #24]
 8008e50:	3304      	adds	r3, #4
 8008e52:	4619      	mov	r1, r3
 8008e54:	4610      	mov	r0, r2
 8008e56:	f7fd ffb4 	bl	8006dc2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008e5a:	bf00      	nop
 8008e5c:	3720      	adds	r7, #32
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}
 8008e62:	bf00      	nop
 8008e64:	20000d60 	.word	0x20000d60
 8008e68:	20000d64 	.word	0x20000d64
 8008e6c:	2000123c 	.word	0x2000123c

08008e70 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008e70:	b480      	push	{r7}
 8008e72:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008e74:	4b07      	ldr	r3, [pc, #28]	@ (8008e94 <pvTaskIncrementMutexHeldCount+0x24>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d004      	beq.n	8008e86 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008e7c:	4b05      	ldr	r3, [pc, #20]	@ (8008e94 <pvTaskIncrementMutexHeldCount+0x24>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008e82:	3201      	adds	r2, #1
 8008e84:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8008e86:	4b03      	ldr	r3, [pc, #12]	@ (8008e94 <pvTaskIncrementMutexHeldCount+0x24>)
 8008e88:	681b      	ldr	r3, [r3, #0]
	}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e92:	4770      	bx	lr
 8008e94:	20000d60 	.word	0x20000d60

08008e98 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b084      	sub	sp, #16
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008ea2:	4b21      	ldr	r3, [pc, #132]	@ (8008f28 <prvAddCurrentTaskToDelayedList+0x90>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ea8:	4b20      	ldr	r3, [pc, #128]	@ (8008f2c <prvAddCurrentTaskToDelayedList+0x94>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	3304      	adds	r3, #4
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f7fd ffe4 	bl	8006e7c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eba:	d10a      	bne.n	8008ed2 <prvAddCurrentTaskToDelayedList+0x3a>
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d007      	beq.n	8008ed2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ec2:	4b1a      	ldr	r3, [pc, #104]	@ (8008f2c <prvAddCurrentTaskToDelayedList+0x94>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	3304      	adds	r3, #4
 8008ec8:	4619      	mov	r1, r3
 8008eca:	4819      	ldr	r0, [pc, #100]	@ (8008f30 <prvAddCurrentTaskToDelayedList+0x98>)
 8008ecc:	f7fd ff79 	bl	8006dc2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008ed0:	e026      	b.n	8008f20 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008ed2:	68fa      	ldr	r2, [r7, #12]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	4413      	add	r3, r2
 8008ed8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008eda:	4b14      	ldr	r3, [pc, #80]	@ (8008f2c <prvAddCurrentTaskToDelayedList+0x94>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	68ba      	ldr	r2, [r7, #8]
 8008ee0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008ee2:	68ba      	ldr	r2, [r7, #8]
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	d209      	bcs.n	8008efe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008eea:	4b12      	ldr	r3, [pc, #72]	@ (8008f34 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008eec:	681a      	ldr	r2, [r3, #0]
 8008eee:	4b0f      	ldr	r3, [pc, #60]	@ (8008f2c <prvAddCurrentTaskToDelayedList+0x94>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	3304      	adds	r3, #4
 8008ef4:	4619      	mov	r1, r3
 8008ef6:	4610      	mov	r0, r2
 8008ef8:	f7fd ff87 	bl	8006e0a <vListInsert>
}
 8008efc:	e010      	b.n	8008f20 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008efe:	4b0e      	ldr	r3, [pc, #56]	@ (8008f38 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008f00:	681a      	ldr	r2, [r3, #0]
 8008f02:	4b0a      	ldr	r3, [pc, #40]	@ (8008f2c <prvAddCurrentTaskToDelayedList+0x94>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	3304      	adds	r3, #4
 8008f08:	4619      	mov	r1, r3
 8008f0a:	4610      	mov	r0, r2
 8008f0c:	f7fd ff7d 	bl	8006e0a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008f10:	4b0a      	ldr	r3, [pc, #40]	@ (8008f3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	68ba      	ldr	r2, [r7, #8]
 8008f16:	429a      	cmp	r2, r3
 8008f18:	d202      	bcs.n	8008f20 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008f1a:	4a08      	ldr	r2, [pc, #32]	@ (8008f3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	6013      	str	r3, [r2, #0]
}
 8008f20:	bf00      	nop
 8008f22:	3710      	adds	r7, #16
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}
 8008f28:	20001238 	.word	0x20001238
 8008f2c:	20000d60 	.word	0x20000d60
 8008f30:	20001220 	.word	0x20001220
 8008f34:	200011f0 	.word	0x200011f0
 8008f38:	200011ec 	.word	0x200011ec
 8008f3c:	20001254 	.word	0x20001254

08008f40 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b08a      	sub	sp, #40	@ 0x28
 8008f44:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008f46:	2300      	movs	r3, #0
 8008f48:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008f4a:	f000 fb13 	bl	8009574 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008f4e:	4b1d      	ldr	r3, [pc, #116]	@ (8008fc4 <xTimerCreateTimerTask+0x84>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d021      	beq.n	8008f9a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008f56:	2300      	movs	r3, #0
 8008f58:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008f5e:	1d3a      	adds	r2, r7, #4
 8008f60:	f107 0108 	add.w	r1, r7, #8
 8008f64:	f107 030c 	add.w	r3, r7, #12
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f7fd fee3 	bl	8006d34 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008f6e:	6879      	ldr	r1, [r7, #4]
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	68fa      	ldr	r2, [r7, #12]
 8008f74:	9202      	str	r2, [sp, #8]
 8008f76:	9301      	str	r3, [sp, #4]
 8008f78:	2302      	movs	r3, #2
 8008f7a:	9300      	str	r3, [sp, #0]
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	460a      	mov	r2, r1
 8008f80:	4911      	ldr	r1, [pc, #68]	@ (8008fc8 <xTimerCreateTimerTask+0x88>)
 8008f82:	4812      	ldr	r0, [pc, #72]	@ (8008fcc <xTimerCreateTimerTask+0x8c>)
 8008f84:	f7fe ffd0 	bl	8007f28 <xTaskCreateStatic>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	4a11      	ldr	r2, [pc, #68]	@ (8008fd0 <xTimerCreateTimerTask+0x90>)
 8008f8c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008f8e:	4b10      	ldr	r3, [pc, #64]	@ (8008fd0 <xTimerCreateTimerTask+0x90>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d001      	beq.n	8008f9a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008f96:	2301      	movs	r3, #1
 8008f98:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d10b      	bne.n	8008fb8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008fa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fa4:	f383 8811 	msr	BASEPRI, r3
 8008fa8:	f3bf 8f6f 	isb	sy
 8008fac:	f3bf 8f4f 	dsb	sy
 8008fb0:	613b      	str	r3, [r7, #16]
}
 8008fb2:	bf00      	nop
 8008fb4:	bf00      	nop
 8008fb6:	e7fd      	b.n	8008fb4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008fb8:	697b      	ldr	r3, [r7, #20]
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3718      	adds	r7, #24
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}
 8008fc2:	bf00      	nop
 8008fc4:	20001290 	.word	0x20001290
 8008fc8:	0800cf4c 	.word	0x0800cf4c
 8008fcc:	0800910d 	.word	0x0800910d
 8008fd0:	20001294 	.word	0x20001294

08008fd4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b08a      	sub	sp, #40	@ 0x28
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	60f8      	str	r0, [r7, #12]
 8008fdc:	60b9      	str	r1, [r7, #8]
 8008fde:	607a      	str	r2, [r7, #4]
 8008fe0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d10b      	bne.n	8009004 <xTimerGenericCommand+0x30>
	__asm volatile
 8008fec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ff0:	f383 8811 	msr	BASEPRI, r3
 8008ff4:	f3bf 8f6f 	isb	sy
 8008ff8:	f3bf 8f4f 	dsb	sy
 8008ffc:	623b      	str	r3, [r7, #32]
}
 8008ffe:	bf00      	nop
 8009000:	bf00      	nop
 8009002:	e7fd      	b.n	8009000 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009004:	4b19      	ldr	r3, [pc, #100]	@ (800906c <xTimerGenericCommand+0x98>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d02a      	beq.n	8009062 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	2b05      	cmp	r3, #5
 800901c:	dc18      	bgt.n	8009050 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800901e:	f7ff fdad 	bl	8008b7c <xTaskGetSchedulerState>
 8009022:	4603      	mov	r3, r0
 8009024:	2b02      	cmp	r3, #2
 8009026:	d109      	bne.n	800903c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009028:	4b10      	ldr	r3, [pc, #64]	@ (800906c <xTimerGenericCommand+0x98>)
 800902a:	6818      	ldr	r0, [r3, #0]
 800902c:	f107 0110 	add.w	r1, r7, #16
 8009030:	2300      	movs	r3, #0
 8009032:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009034:	f7fe f900 	bl	8007238 <xQueueGenericSend>
 8009038:	6278      	str	r0, [r7, #36]	@ 0x24
 800903a:	e012      	b.n	8009062 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800903c:	4b0b      	ldr	r3, [pc, #44]	@ (800906c <xTimerGenericCommand+0x98>)
 800903e:	6818      	ldr	r0, [r3, #0]
 8009040:	f107 0110 	add.w	r1, r7, #16
 8009044:	2300      	movs	r3, #0
 8009046:	2200      	movs	r2, #0
 8009048:	f7fe f8f6 	bl	8007238 <xQueueGenericSend>
 800904c:	6278      	str	r0, [r7, #36]	@ 0x24
 800904e:	e008      	b.n	8009062 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009050:	4b06      	ldr	r3, [pc, #24]	@ (800906c <xTimerGenericCommand+0x98>)
 8009052:	6818      	ldr	r0, [r3, #0]
 8009054:	f107 0110 	add.w	r1, r7, #16
 8009058:	2300      	movs	r3, #0
 800905a:	683a      	ldr	r2, [r7, #0]
 800905c:	f7fe f9ee 	bl	800743c <xQueueGenericSendFromISR>
 8009060:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009064:	4618      	mov	r0, r3
 8009066:	3728      	adds	r7, #40	@ 0x28
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}
 800906c:	20001290 	.word	0x20001290

08009070 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b088      	sub	sp, #32
 8009074:	af02      	add	r7, sp, #8
 8009076:	6078      	str	r0, [r7, #4]
 8009078:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800907a:	4b23      	ldr	r3, [pc, #140]	@ (8009108 <prvProcessExpiredTimer+0x98>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	68db      	ldr	r3, [r3, #12]
 8009080:	68db      	ldr	r3, [r3, #12]
 8009082:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	3304      	adds	r3, #4
 8009088:	4618      	mov	r0, r3
 800908a:	f7fd fef7 	bl	8006e7c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009094:	f003 0304 	and.w	r3, r3, #4
 8009098:	2b00      	cmp	r3, #0
 800909a:	d023      	beq.n	80090e4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	699a      	ldr	r2, [r3, #24]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	18d1      	adds	r1, r2, r3
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	683a      	ldr	r2, [r7, #0]
 80090a8:	6978      	ldr	r0, [r7, #20]
 80090aa:	f000 f8d5 	bl	8009258 <prvInsertTimerInActiveList>
 80090ae:	4603      	mov	r3, r0
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d020      	beq.n	80090f6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80090b4:	2300      	movs	r3, #0
 80090b6:	9300      	str	r3, [sp, #0]
 80090b8:	2300      	movs	r3, #0
 80090ba:	687a      	ldr	r2, [r7, #4]
 80090bc:	2100      	movs	r1, #0
 80090be:	6978      	ldr	r0, [r7, #20]
 80090c0:	f7ff ff88 	bl	8008fd4 <xTimerGenericCommand>
 80090c4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d114      	bne.n	80090f6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80090cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090d0:	f383 8811 	msr	BASEPRI, r3
 80090d4:	f3bf 8f6f 	isb	sy
 80090d8:	f3bf 8f4f 	dsb	sy
 80090dc:	60fb      	str	r3, [r7, #12]
}
 80090de:	bf00      	nop
 80090e0:	bf00      	nop
 80090e2:	e7fd      	b.n	80090e0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80090e4:	697b      	ldr	r3, [r7, #20]
 80090e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80090ea:	f023 0301 	bic.w	r3, r3, #1
 80090ee:	b2da      	uxtb	r2, r3
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	6a1b      	ldr	r3, [r3, #32]
 80090fa:	6978      	ldr	r0, [r7, #20]
 80090fc:	4798      	blx	r3
}
 80090fe:	bf00      	nop
 8009100:	3718      	adds	r7, #24
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}
 8009106:	bf00      	nop
 8009108:	20001288 	.word	0x20001288

0800910c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b084      	sub	sp, #16
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009114:	f107 0308 	add.w	r3, r7, #8
 8009118:	4618      	mov	r0, r3
 800911a:	f000 f859 	bl	80091d0 <prvGetNextExpireTime>
 800911e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	4619      	mov	r1, r3
 8009124:	68f8      	ldr	r0, [r7, #12]
 8009126:	f000 f805 	bl	8009134 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800912a:	f000 f8d7 	bl	80092dc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800912e:	bf00      	nop
 8009130:	e7f0      	b.n	8009114 <prvTimerTask+0x8>
	...

08009134 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b084      	sub	sp, #16
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
 800913c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800913e:	f7ff f937 	bl	80083b0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009142:	f107 0308 	add.w	r3, r7, #8
 8009146:	4618      	mov	r0, r3
 8009148:	f000 f866 	bl	8009218 <prvSampleTimeNow>
 800914c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d130      	bne.n	80091b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d10a      	bne.n	8009170 <prvProcessTimerOrBlockTask+0x3c>
 800915a:	687a      	ldr	r2, [r7, #4]
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	429a      	cmp	r2, r3
 8009160:	d806      	bhi.n	8009170 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009162:	f7ff f933 	bl	80083cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009166:	68f9      	ldr	r1, [r7, #12]
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f7ff ff81 	bl	8009070 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800916e:	e024      	b.n	80091ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d008      	beq.n	8009188 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009176:	4b13      	ldr	r3, [pc, #76]	@ (80091c4 <prvProcessTimerOrBlockTask+0x90>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d101      	bne.n	8009184 <prvProcessTimerOrBlockTask+0x50>
 8009180:	2301      	movs	r3, #1
 8009182:	e000      	b.n	8009186 <prvProcessTimerOrBlockTask+0x52>
 8009184:	2300      	movs	r3, #0
 8009186:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009188:	4b0f      	ldr	r3, [pc, #60]	@ (80091c8 <prvProcessTimerOrBlockTask+0x94>)
 800918a:	6818      	ldr	r0, [r3, #0]
 800918c:	687a      	ldr	r2, [r7, #4]
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	1ad3      	subs	r3, r2, r3
 8009192:	683a      	ldr	r2, [r7, #0]
 8009194:	4619      	mov	r1, r3
 8009196:	f7fe fe93 	bl	8007ec0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800919a:	f7ff f917 	bl	80083cc <xTaskResumeAll>
 800919e:	4603      	mov	r3, r0
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d10a      	bne.n	80091ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80091a4:	4b09      	ldr	r3, [pc, #36]	@ (80091cc <prvProcessTimerOrBlockTask+0x98>)
 80091a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80091aa:	601a      	str	r2, [r3, #0]
 80091ac:	f3bf 8f4f 	dsb	sy
 80091b0:	f3bf 8f6f 	isb	sy
}
 80091b4:	e001      	b.n	80091ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80091b6:	f7ff f909 	bl	80083cc <xTaskResumeAll>
}
 80091ba:	bf00      	nop
 80091bc:	3710      	adds	r7, #16
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}
 80091c2:	bf00      	nop
 80091c4:	2000128c 	.word	0x2000128c
 80091c8:	20001290 	.word	0x20001290
 80091cc:	e000ed04 	.word	0xe000ed04

080091d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80091d0:	b480      	push	{r7}
 80091d2:	b085      	sub	sp, #20
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80091d8:	4b0e      	ldr	r3, [pc, #56]	@ (8009214 <prvGetNextExpireTime+0x44>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d101      	bne.n	80091e6 <prvGetNextExpireTime+0x16>
 80091e2:	2201      	movs	r2, #1
 80091e4:	e000      	b.n	80091e8 <prvGetNextExpireTime+0x18>
 80091e6:	2200      	movs	r2, #0
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d105      	bne.n	8009200 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80091f4:	4b07      	ldr	r3, [pc, #28]	@ (8009214 <prvGetNextExpireTime+0x44>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	68db      	ldr	r3, [r3, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	60fb      	str	r3, [r7, #12]
 80091fe:	e001      	b.n	8009204 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009200:	2300      	movs	r3, #0
 8009202:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009204:	68fb      	ldr	r3, [r7, #12]
}
 8009206:	4618      	mov	r0, r3
 8009208:	3714      	adds	r7, #20
 800920a:	46bd      	mov	sp, r7
 800920c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009210:	4770      	bx	lr
 8009212:	bf00      	nop
 8009214:	20001288 	.word	0x20001288

08009218 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b084      	sub	sp, #16
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009220:	f7ff f972 	bl	8008508 <xTaskGetTickCount>
 8009224:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009226:	4b0b      	ldr	r3, [pc, #44]	@ (8009254 <prvSampleTimeNow+0x3c>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	68fa      	ldr	r2, [r7, #12]
 800922c:	429a      	cmp	r2, r3
 800922e:	d205      	bcs.n	800923c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009230:	f000 f93a 	bl	80094a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2201      	movs	r2, #1
 8009238:	601a      	str	r2, [r3, #0]
 800923a:	e002      	b.n	8009242 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2200      	movs	r2, #0
 8009240:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009242:	4a04      	ldr	r2, [pc, #16]	@ (8009254 <prvSampleTimeNow+0x3c>)
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009248:	68fb      	ldr	r3, [r7, #12]
}
 800924a:	4618      	mov	r0, r3
 800924c:	3710      	adds	r7, #16
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}
 8009252:	bf00      	nop
 8009254:	20001298 	.word	0x20001298

08009258 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b086      	sub	sp, #24
 800925c:	af00      	add	r7, sp, #0
 800925e:	60f8      	str	r0, [r7, #12]
 8009260:	60b9      	str	r1, [r7, #8]
 8009262:	607a      	str	r2, [r7, #4]
 8009264:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009266:	2300      	movs	r3, #0
 8009268:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	68ba      	ldr	r2, [r7, #8]
 800926e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	68fa      	ldr	r2, [r7, #12]
 8009274:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009276:	68ba      	ldr	r2, [r7, #8]
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	429a      	cmp	r2, r3
 800927c:	d812      	bhi.n	80092a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800927e:	687a      	ldr	r2, [r7, #4]
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	1ad2      	subs	r2, r2, r3
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	699b      	ldr	r3, [r3, #24]
 8009288:	429a      	cmp	r2, r3
 800928a:	d302      	bcc.n	8009292 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800928c:	2301      	movs	r3, #1
 800928e:	617b      	str	r3, [r7, #20]
 8009290:	e01b      	b.n	80092ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009292:	4b10      	ldr	r3, [pc, #64]	@ (80092d4 <prvInsertTimerInActiveList+0x7c>)
 8009294:	681a      	ldr	r2, [r3, #0]
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	3304      	adds	r3, #4
 800929a:	4619      	mov	r1, r3
 800929c:	4610      	mov	r0, r2
 800929e:	f7fd fdb4 	bl	8006e0a <vListInsert>
 80092a2:	e012      	b.n	80092ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80092a4:	687a      	ldr	r2, [r7, #4]
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d206      	bcs.n	80092ba <prvInsertTimerInActiveList+0x62>
 80092ac:	68ba      	ldr	r2, [r7, #8]
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	429a      	cmp	r2, r3
 80092b2:	d302      	bcc.n	80092ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80092b4:	2301      	movs	r3, #1
 80092b6:	617b      	str	r3, [r7, #20]
 80092b8:	e007      	b.n	80092ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80092ba:	4b07      	ldr	r3, [pc, #28]	@ (80092d8 <prvInsertTimerInActiveList+0x80>)
 80092bc:	681a      	ldr	r2, [r3, #0]
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	3304      	adds	r3, #4
 80092c2:	4619      	mov	r1, r3
 80092c4:	4610      	mov	r0, r2
 80092c6:	f7fd fda0 	bl	8006e0a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80092ca:	697b      	ldr	r3, [r7, #20]
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3718      	adds	r7, #24
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}
 80092d4:	2000128c 	.word	0x2000128c
 80092d8:	20001288 	.word	0x20001288

080092dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b08e      	sub	sp, #56	@ 0x38
 80092e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80092e2:	e0ce      	b.n	8009482 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	da19      	bge.n	800931e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80092ea:	1d3b      	adds	r3, r7, #4
 80092ec:	3304      	adds	r3, #4
 80092ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80092f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d10b      	bne.n	800930e <prvProcessReceivedCommands+0x32>
	__asm volatile
 80092f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092fa:	f383 8811 	msr	BASEPRI, r3
 80092fe:	f3bf 8f6f 	isb	sy
 8009302:	f3bf 8f4f 	dsb	sy
 8009306:	61fb      	str	r3, [r7, #28]
}
 8009308:	bf00      	nop
 800930a:	bf00      	nop
 800930c:	e7fd      	b.n	800930a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800930e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009314:	6850      	ldr	r0, [r2, #4]
 8009316:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009318:	6892      	ldr	r2, [r2, #8]
 800931a:	4611      	mov	r1, r2
 800931c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2b00      	cmp	r3, #0
 8009322:	f2c0 80ae 	blt.w	8009482 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800932a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800932c:	695b      	ldr	r3, [r3, #20]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d004      	beq.n	800933c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009334:	3304      	adds	r3, #4
 8009336:	4618      	mov	r0, r3
 8009338:	f7fd fda0 	bl	8006e7c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800933c:	463b      	mov	r3, r7
 800933e:	4618      	mov	r0, r3
 8009340:	f7ff ff6a 	bl	8009218 <prvSampleTimeNow>
 8009344:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2b09      	cmp	r3, #9
 800934a:	f200 8097 	bhi.w	800947c <prvProcessReceivedCommands+0x1a0>
 800934e:	a201      	add	r2, pc, #4	@ (adr r2, 8009354 <prvProcessReceivedCommands+0x78>)
 8009350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009354:	0800937d 	.word	0x0800937d
 8009358:	0800937d 	.word	0x0800937d
 800935c:	0800937d 	.word	0x0800937d
 8009360:	080093f3 	.word	0x080093f3
 8009364:	08009407 	.word	0x08009407
 8009368:	08009453 	.word	0x08009453
 800936c:	0800937d 	.word	0x0800937d
 8009370:	0800937d 	.word	0x0800937d
 8009374:	080093f3 	.word	0x080093f3
 8009378:	08009407 	.word	0x08009407
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800937c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800937e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009382:	f043 0301 	orr.w	r3, r3, #1
 8009386:	b2da      	uxtb	r2, r3
 8009388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800938a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800938e:	68ba      	ldr	r2, [r7, #8]
 8009390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009392:	699b      	ldr	r3, [r3, #24]
 8009394:	18d1      	adds	r1, r2, r3
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800939a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800939c:	f7ff ff5c 	bl	8009258 <prvInsertTimerInActiveList>
 80093a0:	4603      	mov	r3, r0
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d06c      	beq.n	8009480 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80093a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093a8:	6a1b      	ldr	r3, [r3, #32]
 80093aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80093ac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80093ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80093b4:	f003 0304 	and.w	r3, r3, #4
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d061      	beq.n	8009480 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80093bc:	68ba      	ldr	r2, [r7, #8]
 80093be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093c0:	699b      	ldr	r3, [r3, #24]
 80093c2:	441a      	add	r2, r3
 80093c4:	2300      	movs	r3, #0
 80093c6:	9300      	str	r3, [sp, #0]
 80093c8:	2300      	movs	r3, #0
 80093ca:	2100      	movs	r1, #0
 80093cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80093ce:	f7ff fe01 	bl	8008fd4 <xTimerGenericCommand>
 80093d2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80093d4:	6a3b      	ldr	r3, [r7, #32]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d152      	bne.n	8009480 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80093da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093de:	f383 8811 	msr	BASEPRI, r3
 80093e2:	f3bf 8f6f 	isb	sy
 80093e6:	f3bf 8f4f 	dsb	sy
 80093ea:	61bb      	str	r3, [r7, #24]
}
 80093ec:	bf00      	nop
 80093ee:	bf00      	nop
 80093f0:	e7fd      	b.n	80093ee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80093f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80093f8:	f023 0301 	bic.w	r3, r3, #1
 80093fc:	b2da      	uxtb	r2, r3
 80093fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009400:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009404:	e03d      	b.n	8009482 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009408:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800940c:	f043 0301 	orr.w	r3, r3, #1
 8009410:	b2da      	uxtb	r2, r3
 8009412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009414:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009418:	68ba      	ldr	r2, [r7, #8]
 800941a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800941c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800941e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009420:	699b      	ldr	r3, [r3, #24]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d10b      	bne.n	800943e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800942a:	f383 8811 	msr	BASEPRI, r3
 800942e:	f3bf 8f6f 	isb	sy
 8009432:	f3bf 8f4f 	dsb	sy
 8009436:	617b      	str	r3, [r7, #20]
}
 8009438:	bf00      	nop
 800943a:	bf00      	nop
 800943c:	e7fd      	b.n	800943a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800943e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009440:	699a      	ldr	r2, [r3, #24]
 8009442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009444:	18d1      	adds	r1, r2, r3
 8009446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009448:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800944a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800944c:	f7ff ff04 	bl	8009258 <prvInsertTimerInActiveList>
					break;
 8009450:	e017      	b.n	8009482 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009454:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009458:	f003 0302 	and.w	r3, r3, #2
 800945c:	2b00      	cmp	r3, #0
 800945e:	d103      	bne.n	8009468 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009460:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009462:	f000 fbe9 	bl	8009c38 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009466:	e00c      	b.n	8009482 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800946a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800946e:	f023 0301 	bic.w	r3, r3, #1
 8009472:	b2da      	uxtb	r2, r3
 8009474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009476:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800947a:	e002      	b.n	8009482 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800947c:	bf00      	nop
 800947e:	e000      	b.n	8009482 <prvProcessReceivedCommands+0x1a6>
					break;
 8009480:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009482:	4b08      	ldr	r3, [pc, #32]	@ (80094a4 <prvProcessReceivedCommands+0x1c8>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	1d39      	adds	r1, r7, #4
 8009488:	2200      	movs	r2, #0
 800948a:	4618      	mov	r0, r3
 800948c:	f7fe f904 	bl	8007698 <xQueueReceive>
 8009490:	4603      	mov	r3, r0
 8009492:	2b00      	cmp	r3, #0
 8009494:	f47f af26 	bne.w	80092e4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009498:	bf00      	nop
 800949a:	bf00      	nop
 800949c:	3730      	adds	r7, #48	@ 0x30
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}
 80094a2:	bf00      	nop
 80094a4:	20001290 	.word	0x20001290

080094a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b088      	sub	sp, #32
 80094ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80094ae:	e049      	b.n	8009544 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80094b0:	4b2e      	ldr	r3, [pc, #184]	@ (800956c <prvSwitchTimerLists+0xc4>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	68db      	ldr	r3, [r3, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094ba:	4b2c      	ldr	r3, [pc, #176]	@ (800956c <prvSwitchTimerLists+0xc4>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	68db      	ldr	r3, [r3, #12]
 80094c0:	68db      	ldr	r3, [r3, #12]
 80094c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	3304      	adds	r3, #4
 80094c8:	4618      	mov	r0, r3
 80094ca:	f7fd fcd7 	bl	8006e7c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	6a1b      	ldr	r3, [r3, #32]
 80094d2:	68f8      	ldr	r0, [r7, #12]
 80094d4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80094dc:	f003 0304 	and.w	r3, r3, #4
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d02f      	beq.n	8009544 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	699b      	ldr	r3, [r3, #24]
 80094e8:	693a      	ldr	r2, [r7, #16]
 80094ea:	4413      	add	r3, r2
 80094ec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80094ee:	68ba      	ldr	r2, [r7, #8]
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	429a      	cmp	r2, r3
 80094f4:	d90e      	bls.n	8009514 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	68ba      	ldr	r2, [r7, #8]
 80094fa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	68fa      	ldr	r2, [r7, #12]
 8009500:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009502:	4b1a      	ldr	r3, [pc, #104]	@ (800956c <prvSwitchTimerLists+0xc4>)
 8009504:	681a      	ldr	r2, [r3, #0]
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	3304      	adds	r3, #4
 800950a:	4619      	mov	r1, r3
 800950c:	4610      	mov	r0, r2
 800950e:	f7fd fc7c 	bl	8006e0a <vListInsert>
 8009512:	e017      	b.n	8009544 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009514:	2300      	movs	r3, #0
 8009516:	9300      	str	r3, [sp, #0]
 8009518:	2300      	movs	r3, #0
 800951a:	693a      	ldr	r2, [r7, #16]
 800951c:	2100      	movs	r1, #0
 800951e:	68f8      	ldr	r0, [r7, #12]
 8009520:	f7ff fd58 	bl	8008fd4 <xTimerGenericCommand>
 8009524:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d10b      	bne.n	8009544 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800952c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009530:	f383 8811 	msr	BASEPRI, r3
 8009534:	f3bf 8f6f 	isb	sy
 8009538:	f3bf 8f4f 	dsb	sy
 800953c:	603b      	str	r3, [r7, #0]
}
 800953e:	bf00      	nop
 8009540:	bf00      	nop
 8009542:	e7fd      	b.n	8009540 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009544:	4b09      	ldr	r3, [pc, #36]	@ (800956c <prvSwitchTimerLists+0xc4>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d1b0      	bne.n	80094b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800954e:	4b07      	ldr	r3, [pc, #28]	@ (800956c <prvSwitchTimerLists+0xc4>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009554:	4b06      	ldr	r3, [pc, #24]	@ (8009570 <prvSwitchTimerLists+0xc8>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	4a04      	ldr	r2, [pc, #16]	@ (800956c <prvSwitchTimerLists+0xc4>)
 800955a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800955c:	4a04      	ldr	r2, [pc, #16]	@ (8009570 <prvSwitchTimerLists+0xc8>)
 800955e:	697b      	ldr	r3, [r7, #20]
 8009560:	6013      	str	r3, [r2, #0]
}
 8009562:	bf00      	nop
 8009564:	3718      	adds	r7, #24
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}
 800956a:	bf00      	nop
 800956c:	20001288 	.word	0x20001288
 8009570:	2000128c 	.word	0x2000128c

08009574 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b082      	sub	sp, #8
 8009578:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800957a:	f000 f96d 	bl	8009858 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800957e:	4b15      	ldr	r3, [pc, #84]	@ (80095d4 <prvCheckForValidListAndQueue+0x60>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d120      	bne.n	80095c8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009586:	4814      	ldr	r0, [pc, #80]	@ (80095d8 <prvCheckForValidListAndQueue+0x64>)
 8009588:	f7fd fbee 	bl	8006d68 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800958c:	4813      	ldr	r0, [pc, #76]	@ (80095dc <prvCheckForValidListAndQueue+0x68>)
 800958e:	f7fd fbeb 	bl	8006d68 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009592:	4b13      	ldr	r3, [pc, #76]	@ (80095e0 <prvCheckForValidListAndQueue+0x6c>)
 8009594:	4a10      	ldr	r2, [pc, #64]	@ (80095d8 <prvCheckForValidListAndQueue+0x64>)
 8009596:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009598:	4b12      	ldr	r3, [pc, #72]	@ (80095e4 <prvCheckForValidListAndQueue+0x70>)
 800959a:	4a10      	ldr	r2, [pc, #64]	@ (80095dc <prvCheckForValidListAndQueue+0x68>)
 800959c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800959e:	2300      	movs	r3, #0
 80095a0:	9300      	str	r3, [sp, #0]
 80095a2:	4b11      	ldr	r3, [pc, #68]	@ (80095e8 <prvCheckForValidListAndQueue+0x74>)
 80095a4:	4a11      	ldr	r2, [pc, #68]	@ (80095ec <prvCheckForValidListAndQueue+0x78>)
 80095a6:	2110      	movs	r1, #16
 80095a8:	200a      	movs	r0, #10
 80095aa:	f7fd fcfb 	bl	8006fa4 <xQueueGenericCreateStatic>
 80095ae:	4603      	mov	r3, r0
 80095b0:	4a08      	ldr	r2, [pc, #32]	@ (80095d4 <prvCheckForValidListAndQueue+0x60>)
 80095b2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80095b4:	4b07      	ldr	r3, [pc, #28]	@ (80095d4 <prvCheckForValidListAndQueue+0x60>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d005      	beq.n	80095c8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80095bc:	4b05      	ldr	r3, [pc, #20]	@ (80095d4 <prvCheckForValidListAndQueue+0x60>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	490b      	ldr	r1, [pc, #44]	@ (80095f0 <prvCheckForValidListAndQueue+0x7c>)
 80095c2:	4618      	mov	r0, r3
 80095c4:	f7fe fc28 	bl	8007e18 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80095c8:	f000 f978 	bl	80098bc <vPortExitCritical>
}
 80095cc:	bf00      	nop
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}
 80095d2:	bf00      	nop
 80095d4:	20001290 	.word	0x20001290
 80095d8:	20001260 	.word	0x20001260
 80095dc:	20001274 	.word	0x20001274
 80095e0:	20001288 	.word	0x20001288
 80095e4:	2000128c 	.word	0x2000128c
 80095e8:	2000133c 	.word	0x2000133c
 80095ec:	2000129c 	.word	0x2000129c
 80095f0:	0800cf54 	.word	0x0800cf54

080095f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80095f4:	b480      	push	{r7}
 80095f6:	b085      	sub	sp, #20
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	60f8      	str	r0, [r7, #12]
 80095fc:	60b9      	str	r1, [r7, #8]
 80095fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	3b04      	subs	r3, #4
 8009604:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800960c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	3b04      	subs	r3, #4
 8009612:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	f023 0201 	bic.w	r2, r3, #1
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	3b04      	subs	r3, #4
 8009622:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009624:	4a0c      	ldr	r2, [pc, #48]	@ (8009658 <pxPortInitialiseStack+0x64>)
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	3b14      	subs	r3, #20
 800962e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009630:	687a      	ldr	r2, [r7, #4]
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	3b04      	subs	r3, #4
 800963a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	f06f 0202 	mvn.w	r2, #2
 8009642:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	3b20      	subs	r3, #32
 8009648:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800964a:	68fb      	ldr	r3, [r7, #12]
}
 800964c:	4618      	mov	r0, r3
 800964e:	3714      	adds	r7, #20
 8009650:	46bd      	mov	sp, r7
 8009652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009656:	4770      	bx	lr
 8009658:	0800965d 	.word	0x0800965d

0800965c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800965c:	b480      	push	{r7}
 800965e:	b085      	sub	sp, #20
 8009660:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009662:	2300      	movs	r3, #0
 8009664:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009666:	4b13      	ldr	r3, [pc, #76]	@ (80096b4 <prvTaskExitError+0x58>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800966e:	d00b      	beq.n	8009688 <prvTaskExitError+0x2c>
	__asm volatile
 8009670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009674:	f383 8811 	msr	BASEPRI, r3
 8009678:	f3bf 8f6f 	isb	sy
 800967c:	f3bf 8f4f 	dsb	sy
 8009680:	60fb      	str	r3, [r7, #12]
}
 8009682:	bf00      	nop
 8009684:	bf00      	nop
 8009686:	e7fd      	b.n	8009684 <prvTaskExitError+0x28>
	__asm volatile
 8009688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800968c:	f383 8811 	msr	BASEPRI, r3
 8009690:	f3bf 8f6f 	isb	sy
 8009694:	f3bf 8f4f 	dsb	sy
 8009698:	60bb      	str	r3, [r7, #8]
}
 800969a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800969c:	bf00      	nop
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d0fc      	beq.n	800969e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80096a4:	bf00      	nop
 80096a6:	bf00      	nop
 80096a8:	3714      	adds	r7, #20
 80096aa:	46bd      	mov	sp, r7
 80096ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b0:	4770      	bx	lr
 80096b2:	bf00      	nop
 80096b4:	2000000c 	.word	0x2000000c
	...

080096c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80096c0:	4b07      	ldr	r3, [pc, #28]	@ (80096e0 <pxCurrentTCBConst2>)
 80096c2:	6819      	ldr	r1, [r3, #0]
 80096c4:	6808      	ldr	r0, [r1, #0]
 80096c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096ca:	f380 8809 	msr	PSP, r0
 80096ce:	f3bf 8f6f 	isb	sy
 80096d2:	f04f 0000 	mov.w	r0, #0
 80096d6:	f380 8811 	msr	BASEPRI, r0
 80096da:	4770      	bx	lr
 80096dc:	f3af 8000 	nop.w

080096e0 <pxCurrentTCBConst2>:
 80096e0:	20000d60 	.word	0x20000d60
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80096e4:	bf00      	nop
 80096e6:	bf00      	nop

080096e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80096e8:	4808      	ldr	r0, [pc, #32]	@ (800970c <prvPortStartFirstTask+0x24>)
 80096ea:	6800      	ldr	r0, [r0, #0]
 80096ec:	6800      	ldr	r0, [r0, #0]
 80096ee:	f380 8808 	msr	MSP, r0
 80096f2:	f04f 0000 	mov.w	r0, #0
 80096f6:	f380 8814 	msr	CONTROL, r0
 80096fa:	b662      	cpsie	i
 80096fc:	b661      	cpsie	f
 80096fe:	f3bf 8f4f 	dsb	sy
 8009702:	f3bf 8f6f 	isb	sy
 8009706:	df00      	svc	0
 8009708:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800970a:	bf00      	nop
 800970c:	e000ed08 	.word	0xe000ed08

08009710 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b086      	sub	sp, #24
 8009714:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009716:	4b47      	ldr	r3, [pc, #284]	@ (8009834 <xPortStartScheduler+0x124>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	4a47      	ldr	r2, [pc, #284]	@ (8009838 <xPortStartScheduler+0x128>)
 800971c:	4293      	cmp	r3, r2
 800971e:	d10b      	bne.n	8009738 <xPortStartScheduler+0x28>
	__asm volatile
 8009720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009724:	f383 8811 	msr	BASEPRI, r3
 8009728:	f3bf 8f6f 	isb	sy
 800972c:	f3bf 8f4f 	dsb	sy
 8009730:	613b      	str	r3, [r7, #16]
}
 8009732:	bf00      	nop
 8009734:	bf00      	nop
 8009736:	e7fd      	b.n	8009734 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009738:	4b3e      	ldr	r3, [pc, #248]	@ (8009834 <xPortStartScheduler+0x124>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	4a3f      	ldr	r2, [pc, #252]	@ (800983c <xPortStartScheduler+0x12c>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d10b      	bne.n	800975a <xPortStartScheduler+0x4a>
	__asm volatile
 8009742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009746:	f383 8811 	msr	BASEPRI, r3
 800974a:	f3bf 8f6f 	isb	sy
 800974e:	f3bf 8f4f 	dsb	sy
 8009752:	60fb      	str	r3, [r7, #12]
}
 8009754:	bf00      	nop
 8009756:	bf00      	nop
 8009758:	e7fd      	b.n	8009756 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800975a:	4b39      	ldr	r3, [pc, #228]	@ (8009840 <xPortStartScheduler+0x130>)
 800975c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	781b      	ldrb	r3, [r3, #0]
 8009762:	b2db      	uxtb	r3, r3
 8009764:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	22ff      	movs	r2, #255	@ 0xff
 800976a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	781b      	ldrb	r3, [r3, #0]
 8009770:	b2db      	uxtb	r3, r3
 8009772:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009774:	78fb      	ldrb	r3, [r7, #3]
 8009776:	b2db      	uxtb	r3, r3
 8009778:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800977c:	b2da      	uxtb	r2, r3
 800977e:	4b31      	ldr	r3, [pc, #196]	@ (8009844 <xPortStartScheduler+0x134>)
 8009780:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009782:	4b31      	ldr	r3, [pc, #196]	@ (8009848 <xPortStartScheduler+0x138>)
 8009784:	2207      	movs	r2, #7
 8009786:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009788:	e009      	b.n	800979e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800978a:	4b2f      	ldr	r3, [pc, #188]	@ (8009848 <xPortStartScheduler+0x138>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	3b01      	subs	r3, #1
 8009790:	4a2d      	ldr	r2, [pc, #180]	@ (8009848 <xPortStartScheduler+0x138>)
 8009792:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009794:	78fb      	ldrb	r3, [r7, #3]
 8009796:	b2db      	uxtb	r3, r3
 8009798:	005b      	lsls	r3, r3, #1
 800979a:	b2db      	uxtb	r3, r3
 800979c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800979e:	78fb      	ldrb	r3, [r7, #3]
 80097a0:	b2db      	uxtb	r3, r3
 80097a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097a6:	2b80      	cmp	r3, #128	@ 0x80
 80097a8:	d0ef      	beq.n	800978a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80097aa:	4b27      	ldr	r3, [pc, #156]	@ (8009848 <xPortStartScheduler+0x138>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f1c3 0307 	rsb	r3, r3, #7
 80097b2:	2b04      	cmp	r3, #4
 80097b4:	d00b      	beq.n	80097ce <xPortStartScheduler+0xbe>
	__asm volatile
 80097b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097ba:	f383 8811 	msr	BASEPRI, r3
 80097be:	f3bf 8f6f 	isb	sy
 80097c2:	f3bf 8f4f 	dsb	sy
 80097c6:	60bb      	str	r3, [r7, #8]
}
 80097c8:	bf00      	nop
 80097ca:	bf00      	nop
 80097cc:	e7fd      	b.n	80097ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80097ce:	4b1e      	ldr	r3, [pc, #120]	@ (8009848 <xPortStartScheduler+0x138>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	021b      	lsls	r3, r3, #8
 80097d4:	4a1c      	ldr	r2, [pc, #112]	@ (8009848 <xPortStartScheduler+0x138>)
 80097d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80097d8:	4b1b      	ldr	r3, [pc, #108]	@ (8009848 <xPortStartScheduler+0x138>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80097e0:	4a19      	ldr	r2, [pc, #100]	@ (8009848 <xPortStartScheduler+0x138>)
 80097e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	b2da      	uxtb	r2, r3
 80097e8:	697b      	ldr	r3, [r7, #20]
 80097ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80097ec:	4b17      	ldr	r3, [pc, #92]	@ (800984c <xPortStartScheduler+0x13c>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	4a16      	ldr	r2, [pc, #88]	@ (800984c <xPortStartScheduler+0x13c>)
 80097f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80097f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80097f8:	4b14      	ldr	r3, [pc, #80]	@ (800984c <xPortStartScheduler+0x13c>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	4a13      	ldr	r2, [pc, #76]	@ (800984c <xPortStartScheduler+0x13c>)
 80097fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009802:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009804:	f000 f8da 	bl	80099bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009808:	4b11      	ldr	r3, [pc, #68]	@ (8009850 <xPortStartScheduler+0x140>)
 800980a:	2200      	movs	r2, #0
 800980c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800980e:	f000 f8f9 	bl	8009a04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009812:	4b10      	ldr	r3, [pc, #64]	@ (8009854 <xPortStartScheduler+0x144>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	4a0f      	ldr	r2, [pc, #60]	@ (8009854 <xPortStartScheduler+0x144>)
 8009818:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800981c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800981e:	f7ff ff63 	bl	80096e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009822:	f7fe ff3b 	bl	800869c <vTaskSwitchContext>
	prvTaskExitError();
 8009826:	f7ff ff19 	bl	800965c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800982a:	2300      	movs	r3, #0
}
 800982c:	4618      	mov	r0, r3
 800982e:	3718      	adds	r7, #24
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}
 8009834:	e000ed00 	.word	0xe000ed00
 8009838:	410fc271 	.word	0x410fc271
 800983c:	410fc270 	.word	0x410fc270
 8009840:	e000e400 	.word	0xe000e400
 8009844:	2000138c 	.word	0x2000138c
 8009848:	20001390 	.word	0x20001390
 800984c:	e000ed20 	.word	0xe000ed20
 8009850:	2000000c 	.word	0x2000000c
 8009854:	e000ef34 	.word	0xe000ef34

08009858 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009858:	b480      	push	{r7}
 800985a:	b083      	sub	sp, #12
 800985c:	af00      	add	r7, sp, #0
	__asm volatile
 800985e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009862:	f383 8811 	msr	BASEPRI, r3
 8009866:	f3bf 8f6f 	isb	sy
 800986a:	f3bf 8f4f 	dsb	sy
 800986e:	607b      	str	r3, [r7, #4]
}
 8009870:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009872:	4b10      	ldr	r3, [pc, #64]	@ (80098b4 <vPortEnterCritical+0x5c>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	3301      	adds	r3, #1
 8009878:	4a0e      	ldr	r2, [pc, #56]	@ (80098b4 <vPortEnterCritical+0x5c>)
 800987a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800987c:	4b0d      	ldr	r3, [pc, #52]	@ (80098b4 <vPortEnterCritical+0x5c>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	2b01      	cmp	r3, #1
 8009882:	d110      	bne.n	80098a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009884:	4b0c      	ldr	r3, [pc, #48]	@ (80098b8 <vPortEnterCritical+0x60>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	b2db      	uxtb	r3, r3
 800988a:	2b00      	cmp	r3, #0
 800988c:	d00b      	beq.n	80098a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800988e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009892:	f383 8811 	msr	BASEPRI, r3
 8009896:	f3bf 8f6f 	isb	sy
 800989a:	f3bf 8f4f 	dsb	sy
 800989e:	603b      	str	r3, [r7, #0]
}
 80098a0:	bf00      	nop
 80098a2:	bf00      	nop
 80098a4:	e7fd      	b.n	80098a2 <vPortEnterCritical+0x4a>
	}
}
 80098a6:	bf00      	nop
 80098a8:	370c      	adds	r7, #12
 80098aa:	46bd      	mov	sp, r7
 80098ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b0:	4770      	bx	lr
 80098b2:	bf00      	nop
 80098b4:	2000000c 	.word	0x2000000c
 80098b8:	e000ed04 	.word	0xe000ed04

080098bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80098bc:	b480      	push	{r7}
 80098be:	b083      	sub	sp, #12
 80098c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80098c2:	4b12      	ldr	r3, [pc, #72]	@ (800990c <vPortExitCritical+0x50>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d10b      	bne.n	80098e2 <vPortExitCritical+0x26>
	__asm volatile
 80098ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098ce:	f383 8811 	msr	BASEPRI, r3
 80098d2:	f3bf 8f6f 	isb	sy
 80098d6:	f3bf 8f4f 	dsb	sy
 80098da:	607b      	str	r3, [r7, #4]
}
 80098dc:	bf00      	nop
 80098de:	bf00      	nop
 80098e0:	e7fd      	b.n	80098de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80098e2:	4b0a      	ldr	r3, [pc, #40]	@ (800990c <vPortExitCritical+0x50>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	3b01      	subs	r3, #1
 80098e8:	4a08      	ldr	r2, [pc, #32]	@ (800990c <vPortExitCritical+0x50>)
 80098ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80098ec:	4b07      	ldr	r3, [pc, #28]	@ (800990c <vPortExitCritical+0x50>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d105      	bne.n	8009900 <vPortExitCritical+0x44>
 80098f4:	2300      	movs	r3, #0
 80098f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	f383 8811 	msr	BASEPRI, r3
}
 80098fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009900:	bf00      	nop
 8009902:	370c      	adds	r7, #12
 8009904:	46bd      	mov	sp, r7
 8009906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990a:	4770      	bx	lr
 800990c:	2000000c 	.word	0x2000000c

08009910 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009910:	f3ef 8009 	mrs	r0, PSP
 8009914:	f3bf 8f6f 	isb	sy
 8009918:	4b15      	ldr	r3, [pc, #84]	@ (8009970 <pxCurrentTCBConst>)
 800991a:	681a      	ldr	r2, [r3, #0]
 800991c:	f01e 0f10 	tst.w	lr, #16
 8009920:	bf08      	it	eq
 8009922:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009926:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800992a:	6010      	str	r0, [r2, #0]
 800992c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009930:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009934:	f380 8811 	msr	BASEPRI, r0
 8009938:	f3bf 8f4f 	dsb	sy
 800993c:	f3bf 8f6f 	isb	sy
 8009940:	f7fe feac 	bl	800869c <vTaskSwitchContext>
 8009944:	f04f 0000 	mov.w	r0, #0
 8009948:	f380 8811 	msr	BASEPRI, r0
 800994c:	bc09      	pop	{r0, r3}
 800994e:	6819      	ldr	r1, [r3, #0]
 8009950:	6808      	ldr	r0, [r1, #0]
 8009952:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009956:	f01e 0f10 	tst.w	lr, #16
 800995a:	bf08      	it	eq
 800995c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009960:	f380 8809 	msr	PSP, r0
 8009964:	f3bf 8f6f 	isb	sy
 8009968:	4770      	bx	lr
 800996a:	bf00      	nop
 800996c:	f3af 8000 	nop.w

08009970 <pxCurrentTCBConst>:
 8009970:	20000d60 	.word	0x20000d60
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009974:	bf00      	nop
 8009976:	bf00      	nop

08009978 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b082      	sub	sp, #8
 800997c:	af00      	add	r7, sp, #0
	__asm volatile
 800997e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009982:	f383 8811 	msr	BASEPRI, r3
 8009986:	f3bf 8f6f 	isb	sy
 800998a:	f3bf 8f4f 	dsb	sy
 800998e:	607b      	str	r3, [r7, #4]
}
 8009990:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009992:	f7fe fdc9 	bl	8008528 <xTaskIncrementTick>
 8009996:	4603      	mov	r3, r0
 8009998:	2b00      	cmp	r3, #0
 800999a:	d003      	beq.n	80099a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800999c:	4b06      	ldr	r3, [pc, #24]	@ (80099b8 <xPortSysTickHandler+0x40>)
 800999e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80099a2:	601a      	str	r2, [r3, #0]
 80099a4:	2300      	movs	r3, #0
 80099a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	f383 8811 	msr	BASEPRI, r3
}
 80099ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80099b0:	bf00      	nop
 80099b2:	3708      	adds	r7, #8
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}
 80099b8:	e000ed04 	.word	0xe000ed04

080099bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80099bc:	b480      	push	{r7}
 80099be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80099c0:	4b0b      	ldr	r3, [pc, #44]	@ (80099f0 <vPortSetupTimerInterrupt+0x34>)
 80099c2:	2200      	movs	r2, #0
 80099c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80099c6:	4b0b      	ldr	r3, [pc, #44]	@ (80099f4 <vPortSetupTimerInterrupt+0x38>)
 80099c8:	2200      	movs	r2, #0
 80099ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80099cc:	4b0a      	ldr	r3, [pc, #40]	@ (80099f8 <vPortSetupTimerInterrupt+0x3c>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	4a0a      	ldr	r2, [pc, #40]	@ (80099fc <vPortSetupTimerInterrupt+0x40>)
 80099d2:	fba2 2303 	umull	r2, r3, r2, r3
 80099d6:	099b      	lsrs	r3, r3, #6
 80099d8:	4a09      	ldr	r2, [pc, #36]	@ (8009a00 <vPortSetupTimerInterrupt+0x44>)
 80099da:	3b01      	subs	r3, #1
 80099dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80099de:	4b04      	ldr	r3, [pc, #16]	@ (80099f0 <vPortSetupTimerInterrupt+0x34>)
 80099e0:	2207      	movs	r2, #7
 80099e2:	601a      	str	r2, [r3, #0]
}
 80099e4:	bf00      	nop
 80099e6:	46bd      	mov	sp, r7
 80099e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ec:	4770      	bx	lr
 80099ee:	bf00      	nop
 80099f0:	e000e010 	.word	0xe000e010
 80099f4:	e000e018 	.word	0xe000e018
 80099f8:	20000000 	.word	0x20000000
 80099fc:	10624dd3 	.word	0x10624dd3
 8009a00:	e000e014 	.word	0xe000e014

08009a04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009a04:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009a14 <vPortEnableVFP+0x10>
 8009a08:	6801      	ldr	r1, [r0, #0]
 8009a0a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009a0e:	6001      	str	r1, [r0, #0]
 8009a10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009a12:	bf00      	nop
 8009a14:	e000ed88 	.word	0xe000ed88

08009a18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009a18:	b480      	push	{r7}
 8009a1a:	b085      	sub	sp, #20
 8009a1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009a1e:	f3ef 8305 	mrs	r3, IPSR
 8009a22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2b0f      	cmp	r3, #15
 8009a28:	d915      	bls.n	8009a56 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009a2a:	4a18      	ldr	r2, [pc, #96]	@ (8009a8c <vPortValidateInterruptPriority+0x74>)
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	4413      	add	r3, r2
 8009a30:	781b      	ldrb	r3, [r3, #0]
 8009a32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009a34:	4b16      	ldr	r3, [pc, #88]	@ (8009a90 <vPortValidateInterruptPriority+0x78>)
 8009a36:	781b      	ldrb	r3, [r3, #0]
 8009a38:	7afa      	ldrb	r2, [r7, #11]
 8009a3a:	429a      	cmp	r2, r3
 8009a3c:	d20b      	bcs.n	8009a56 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a42:	f383 8811 	msr	BASEPRI, r3
 8009a46:	f3bf 8f6f 	isb	sy
 8009a4a:	f3bf 8f4f 	dsb	sy
 8009a4e:	607b      	str	r3, [r7, #4]
}
 8009a50:	bf00      	nop
 8009a52:	bf00      	nop
 8009a54:	e7fd      	b.n	8009a52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009a56:	4b0f      	ldr	r3, [pc, #60]	@ (8009a94 <vPortValidateInterruptPriority+0x7c>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8009a98 <vPortValidateInterruptPriority+0x80>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	429a      	cmp	r2, r3
 8009a64:	d90b      	bls.n	8009a7e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009a66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a6a:	f383 8811 	msr	BASEPRI, r3
 8009a6e:	f3bf 8f6f 	isb	sy
 8009a72:	f3bf 8f4f 	dsb	sy
 8009a76:	603b      	str	r3, [r7, #0]
}
 8009a78:	bf00      	nop
 8009a7a:	bf00      	nop
 8009a7c:	e7fd      	b.n	8009a7a <vPortValidateInterruptPriority+0x62>
	}
 8009a7e:	bf00      	nop
 8009a80:	3714      	adds	r7, #20
 8009a82:	46bd      	mov	sp, r7
 8009a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a88:	4770      	bx	lr
 8009a8a:	bf00      	nop
 8009a8c:	e000e3f0 	.word	0xe000e3f0
 8009a90:	2000138c 	.word	0x2000138c
 8009a94:	e000ed0c 	.word	0xe000ed0c
 8009a98:	20001390 	.word	0x20001390

08009a9c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b08a      	sub	sp, #40	@ 0x28
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009aa8:	f7fe fc82 	bl	80083b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009aac:	4b5c      	ldr	r3, [pc, #368]	@ (8009c20 <pvPortMalloc+0x184>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d101      	bne.n	8009ab8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009ab4:	f000 f924 	bl	8009d00 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009ab8:	4b5a      	ldr	r3, [pc, #360]	@ (8009c24 <pvPortMalloc+0x188>)
 8009aba:	681a      	ldr	r2, [r3, #0]
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	4013      	ands	r3, r2
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	f040 8095 	bne.w	8009bf0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d01e      	beq.n	8009b0a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009acc:	2208      	movs	r2, #8
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	4413      	add	r3, r2
 8009ad2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f003 0307 	and.w	r3, r3, #7
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d015      	beq.n	8009b0a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f023 0307 	bic.w	r3, r3, #7
 8009ae4:	3308      	adds	r3, #8
 8009ae6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f003 0307 	and.w	r3, r3, #7
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d00b      	beq.n	8009b0a <pvPortMalloc+0x6e>
	__asm volatile
 8009af2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009af6:	f383 8811 	msr	BASEPRI, r3
 8009afa:	f3bf 8f6f 	isb	sy
 8009afe:	f3bf 8f4f 	dsb	sy
 8009b02:	617b      	str	r3, [r7, #20]
}
 8009b04:	bf00      	nop
 8009b06:	bf00      	nop
 8009b08:	e7fd      	b.n	8009b06 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d06f      	beq.n	8009bf0 <pvPortMalloc+0x154>
 8009b10:	4b45      	ldr	r3, [pc, #276]	@ (8009c28 <pvPortMalloc+0x18c>)
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	687a      	ldr	r2, [r7, #4]
 8009b16:	429a      	cmp	r2, r3
 8009b18:	d86a      	bhi.n	8009bf0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009b1a:	4b44      	ldr	r3, [pc, #272]	@ (8009c2c <pvPortMalloc+0x190>)
 8009b1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009b1e:	4b43      	ldr	r3, [pc, #268]	@ (8009c2c <pvPortMalloc+0x190>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b24:	e004      	b.n	8009b30 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b32:	685b      	ldr	r3, [r3, #4]
 8009b34:	687a      	ldr	r2, [r7, #4]
 8009b36:	429a      	cmp	r2, r3
 8009b38:	d903      	bls.n	8009b42 <pvPortMalloc+0xa6>
 8009b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d1f1      	bne.n	8009b26 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009b42:	4b37      	ldr	r3, [pc, #220]	@ (8009c20 <pvPortMalloc+0x184>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b48:	429a      	cmp	r2, r3
 8009b4a:	d051      	beq.n	8009bf0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009b4c:	6a3b      	ldr	r3, [r7, #32]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	2208      	movs	r2, #8
 8009b52:	4413      	add	r3, r2
 8009b54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b58:	681a      	ldr	r2, [r3, #0]
 8009b5a:	6a3b      	ldr	r3, [r7, #32]
 8009b5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b60:	685a      	ldr	r2, [r3, #4]
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	1ad2      	subs	r2, r2, r3
 8009b66:	2308      	movs	r3, #8
 8009b68:	005b      	lsls	r3, r3, #1
 8009b6a:	429a      	cmp	r2, r3
 8009b6c:	d920      	bls.n	8009bb0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009b6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	4413      	add	r3, r2
 8009b74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b76:	69bb      	ldr	r3, [r7, #24]
 8009b78:	f003 0307 	and.w	r3, r3, #7
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d00b      	beq.n	8009b98 <pvPortMalloc+0xfc>
	__asm volatile
 8009b80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b84:	f383 8811 	msr	BASEPRI, r3
 8009b88:	f3bf 8f6f 	isb	sy
 8009b8c:	f3bf 8f4f 	dsb	sy
 8009b90:	613b      	str	r3, [r7, #16]
}
 8009b92:	bf00      	nop
 8009b94:	bf00      	nop
 8009b96:	e7fd      	b.n	8009b94 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b9a:	685a      	ldr	r2, [r3, #4]
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	1ad2      	subs	r2, r2, r3
 8009ba0:	69bb      	ldr	r3, [r7, #24]
 8009ba2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ba6:	687a      	ldr	r2, [r7, #4]
 8009ba8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009baa:	69b8      	ldr	r0, [r7, #24]
 8009bac:	f000 f90a 	bl	8009dc4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009bb0:	4b1d      	ldr	r3, [pc, #116]	@ (8009c28 <pvPortMalloc+0x18c>)
 8009bb2:	681a      	ldr	r2, [r3, #0]
 8009bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bb6:	685b      	ldr	r3, [r3, #4]
 8009bb8:	1ad3      	subs	r3, r2, r3
 8009bba:	4a1b      	ldr	r2, [pc, #108]	@ (8009c28 <pvPortMalloc+0x18c>)
 8009bbc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009bbe:	4b1a      	ldr	r3, [pc, #104]	@ (8009c28 <pvPortMalloc+0x18c>)
 8009bc0:	681a      	ldr	r2, [r3, #0]
 8009bc2:	4b1b      	ldr	r3, [pc, #108]	@ (8009c30 <pvPortMalloc+0x194>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	429a      	cmp	r2, r3
 8009bc8:	d203      	bcs.n	8009bd2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009bca:	4b17      	ldr	r3, [pc, #92]	@ (8009c28 <pvPortMalloc+0x18c>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	4a18      	ldr	r2, [pc, #96]	@ (8009c30 <pvPortMalloc+0x194>)
 8009bd0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bd4:	685a      	ldr	r2, [r3, #4]
 8009bd6:	4b13      	ldr	r3, [pc, #76]	@ (8009c24 <pvPortMalloc+0x188>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	431a      	orrs	r2, r3
 8009bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bde:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009be2:	2200      	movs	r2, #0
 8009be4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009be6:	4b13      	ldr	r3, [pc, #76]	@ (8009c34 <pvPortMalloc+0x198>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	3301      	adds	r3, #1
 8009bec:	4a11      	ldr	r2, [pc, #68]	@ (8009c34 <pvPortMalloc+0x198>)
 8009bee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009bf0:	f7fe fbec 	bl	80083cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009bf4:	69fb      	ldr	r3, [r7, #28]
 8009bf6:	f003 0307 	and.w	r3, r3, #7
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d00b      	beq.n	8009c16 <pvPortMalloc+0x17a>
	__asm volatile
 8009bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c02:	f383 8811 	msr	BASEPRI, r3
 8009c06:	f3bf 8f6f 	isb	sy
 8009c0a:	f3bf 8f4f 	dsb	sy
 8009c0e:	60fb      	str	r3, [r7, #12]
}
 8009c10:	bf00      	nop
 8009c12:	bf00      	nop
 8009c14:	e7fd      	b.n	8009c12 <pvPortMalloc+0x176>
	return pvReturn;
 8009c16:	69fb      	ldr	r3, [r7, #28]
}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	3728      	adds	r7, #40	@ 0x28
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}
 8009c20:	20001f9c 	.word	0x20001f9c
 8009c24:	20001fb0 	.word	0x20001fb0
 8009c28:	20001fa0 	.word	0x20001fa0
 8009c2c:	20001f94 	.word	0x20001f94
 8009c30:	20001fa4 	.word	0x20001fa4
 8009c34:	20001fa8 	.word	0x20001fa8

08009c38 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b086      	sub	sp, #24
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d04f      	beq.n	8009cea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009c4a:	2308      	movs	r3, #8
 8009c4c:	425b      	negs	r3, r3
 8009c4e:	697a      	ldr	r2, [r7, #20]
 8009c50:	4413      	add	r3, r2
 8009c52:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009c54:	697b      	ldr	r3, [r7, #20]
 8009c56:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009c58:	693b      	ldr	r3, [r7, #16]
 8009c5a:	685a      	ldr	r2, [r3, #4]
 8009c5c:	4b25      	ldr	r3, [pc, #148]	@ (8009cf4 <vPortFree+0xbc>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	4013      	ands	r3, r2
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d10b      	bne.n	8009c7e <vPortFree+0x46>
	__asm volatile
 8009c66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c6a:	f383 8811 	msr	BASEPRI, r3
 8009c6e:	f3bf 8f6f 	isb	sy
 8009c72:	f3bf 8f4f 	dsb	sy
 8009c76:	60fb      	str	r3, [r7, #12]
}
 8009c78:	bf00      	nop
 8009c7a:	bf00      	nop
 8009c7c:	e7fd      	b.n	8009c7a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009c7e:	693b      	ldr	r3, [r7, #16]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d00b      	beq.n	8009c9e <vPortFree+0x66>
	__asm volatile
 8009c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c8a:	f383 8811 	msr	BASEPRI, r3
 8009c8e:	f3bf 8f6f 	isb	sy
 8009c92:	f3bf 8f4f 	dsb	sy
 8009c96:	60bb      	str	r3, [r7, #8]
}
 8009c98:	bf00      	nop
 8009c9a:	bf00      	nop
 8009c9c:	e7fd      	b.n	8009c9a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009c9e:	693b      	ldr	r3, [r7, #16]
 8009ca0:	685a      	ldr	r2, [r3, #4]
 8009ca2:	4b14      	ldr	r3, [pc, #80]	@ (8009cf4 <vPortFree+0xbc>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	4013      	ands	r3, r2
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d01e      	beq.n	8009cea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009cac:	693b      	ldr	r3, [r7, #16]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d11a      	bne.n	8009cea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009cb4:	693b      	ldr	r3, [r7, #16]
 8009cb6:	685a      	ldr	r2, [r3, #4]
 8009cb8:	4b0e      	ldr	r3, [pc, #56]	@ (8009cf4 <vPortFree+0xbc>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	43db      	mvns	r3, r3
 8009cbe:	401a      	ands	r2, r3
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009cc4:	f7fe fb74 	bl	80083b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009cc8:	693b      	ldr	r3, [r7, #16]
 8009cca:	685a      	ldr	r2, [r3, #4]
 8009ccc:	4b0a      	ldr	r3, [pc, #40]	@ (8009cf8 <vPortFree+0xc0>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	4413      	add	r3, r2
 8009cd2:	4a09      	ldr	r2, [pc, #36]	@ (8009cf8 <vPortFree+0xc0>)
 8009cd4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009cd6:	6938      	ldr	r0, [r7, #16]
 8009cd8:	f000 f874 	bl	8009dc4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009cdc:	4b07      	ldr	r3, [pc, #28]	@ (8009cfc <vPortFree+0xc4>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	3301      	adds	r3, #1
 8009ce2:	4a06      	ldr	r2, [pc, #24]	@ (8009cfc <vPortFree+0xc4>)
 8009ce4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009ce6:	f7fe fb71 	bl	80083cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009cea:	bf00      	nop
 8009cec:	3718      	adds	r7, #24
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}
 8009cf2:	bf00      	nop
 8009cf4:	20001fb0 	.word	0x20001fb0
 8009cf8:	20001fa0 	.word	0x20001fa0
 8009cfc:	20001fac 	.word	0x20001fac

08009d00 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009d00:	b480      	push	{r7}
 8009d02:	b085      	sub	sp, #20
 8009d04:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009d06:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8009d0a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009d0c:	4b27      	ldr	r3, [pc, #156]	@ (8009dac <prvHeapInit+0xac>)
 8009d0e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	f003 0307 	and.w	r3, r3, #7
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d00c      	beq.n	8009d34 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	3307      	adds	r3, #7
 8009d1e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	f023 0307 	bic.w	r3, r3, #7
 8009d26:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009d28:	68ba      	ldr	r2, [r7, #8]
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	1ad3      	subs	r3, r2, r3
 8009d2e:	4a1f      	ldr	r2, [pc, #124]	@ (8009dac <prvHeapInit+0xac>)
 8009d30:	4413      	add	r3, r2
 8009d32:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009d38:	4a1d      	ldr	r2, [pc, #116]	@ (8009db0 <prvHeapInit+0xb0>)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009d3e:	4b1c      	ldr	r3, [pc, #112]	@ (8009db0 <prvHeapInit+0xb0>)
 8009d40:	2200      	movs	r2, #0
 8009d42:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	68ba      	ldr	r2, [r7, #8]
 8009d48:	4413      	add	r3, r2
 8009d4a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009d4c:	2208      	movs	r2, #8
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	1a9b      	subs	r3, r3, r2
 8009d52:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	f023 0307 	bic.w	r3, r3, #7
 8009d5a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	4a15      	ldr	r2, [pc, #84]	@ (8009db4 <prvHeapInit+0xb4>)
 8009d60:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009d62:	4b14      	ldr	r3, [pc, #80]	@ (8009db4 <prvHeapInit+0xb4>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	2200      	movs	r2, #0
 8009d68:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009d6a:	4b12      	ldr	r3, [pc, #72]	@ (8009db4 <prvHeapInit+0xb4>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	2200      	movs	r2, #0
 8009d70:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	68fa      	ldr	r2, [r7, #12]
 8009d7a:	1ad2      	subs	r2, r2, r3
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009d80:	4b0c      	ldr	r3, [pc, #48]	@ (8009db4 <prvHeapInit+0xb4>)
 8009d82:	681a      	ldr	r2, [r3, #0]
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	685b      	ldr	r3, [r3, #4]
 8009d8c:	4a0a      	ldr	r2, [pc, #40]	@ (8009db8 <prvHeapInit+0xb8>)
 8009d8e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	4a09      	ldr	r2, [pc, #36]	@ (8009dbc <prvHeapInit+0xbc>)
 8009d96:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009d98:	4b09      	ldr	r3, [pc, #36]	@ (8009dc0 <prvHeapInit+0xc0>)
 8009d9a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009d9e:	601a      	str	r2, [r3, #0]
}
 8009da0:	bf00      	nop
 8009da2:	3714      	adds	r7, #20
 8009da4:	46bd      	mov	sp, r7
 8009da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009daa:	4770      	bx	lr
 8009dac:	20001394 	.word	0x20001394
 8009db0:	20001f94 	.word	0x20001f94
 8009db4:	20001f9c 	.word	0x20001f9c
 8009db8:	20001fa4 	.word	0x20001fa4
 8009dbc:	20001fa0 	.word	0x20001fa0
 8009dc0:	20001fb0 	.word	0x20001fb0

08009dc4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	b085      	sub	sp, #20
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009dcc:	4b28      	ldr	r3, [pc, #160]	@ (8009e70 <prvInsertBlockIntoFreeList+0xac>)
 8009dce:	60fb      	str	r3, [r7, #12]
 8009dd0:	e002      	b.n	8009dd8 <prvInsertBlockIntoFreeList+0x14>
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	60fb      	str	r3, [r7, #12]
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	687a      	ldr	r2, [r7, #4]
 8009dde:	429a      	cmp	r2, r3
 8009de0:	d8f7      	bhi.n	8009dd2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	685b      	ldr	r3, [r3, #4]
 8009dea:	68ba      	ldr	r2, [r7, #8]
 8009dec:	4413      	add	r3, r2
 8009dee:	687a      	ldr	r2, [r7, #4]
 8009df0:	429a      	cmp	r2, r3
 8009df2:	d108      	bne.n	8009e06 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	685a      	ldr	r2, [r3, #4]
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	685b      	ldr	r3, [r3, #4]
 8009dfc:	441a      	add	r2, r3
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	685b      	ldr	r3, [r3, #4]
 8009e0e:	68ba      	ldr	r2, [r7, #8]
 8009e10:	441a      	add	r2, r3
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	429a      	cmp	r2, r3
 8009e18:	d118      	bne.n	8009e4c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681a      	ldr	r2, [r3, #0]
 8009e1e:	4b15      	ldr	r3, [pc, #84]	@ (8009e74 <prvInsertBlockIntoFreeList+0xb0>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	429a      	cmp	r2, r3
 8009e24:	d00d      	beq.n	8009e42 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	685a      	ldr	r2, [r3, #4]
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	685b      	ldr	r3, [r3, #4]
 8009e30:	441a      	add	r2, r3
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	681a      	ldr	r2, [r3, #0]
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	601a      	str	r2, [r3, #0]
 8009e40:	e008      	b.n	8009e54 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009e42:	4b0c      	ldr	r3, [pc, #48]	@ (8009e74 <prvInsertBlockIntoFreeList+0xb0>)
 8009e44:	681a      	ldr	r2, [r3, #0]
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	601a      	str	r2, [r3, #0]
 8009e4a:	e003      	b.n	8009e54 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	681a      	ldr	r2, [r3, #0]
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009e54:	68fa      	ldr	r2, [r7, #12]
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	429a      	cmp	r2, r3
 8009e5a:	d002      	beq.n	8009e62 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	687a      	ldr	r2, [r7, #4]
 8009e60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e62:	bf00      	nop
 8009e64:	3714      	adds	r7, #20
 8009e66:	46bd      	mov	sp, r7
 8009e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6c:	4770      	bx	lr
 8009e6e:	bf00      	nop
 8009e70:	20001f94 	.word	0x20001f94
 8009e74:	20001f9c 	.word	0x20001f9c

08009e78 <atof>:
 8009e78:	2100      	movs	r1, #0
 8009e7a:	f000 be05 	b.w	800aa88 <strtod>

08009e7e <sulp>:
 8009e7e:	b570      	push	{r4, r5, r6, lr}
 8009e80:	4604      	mov	r4, r0
 8009e82:	460d      	mov	r5, r1
 8009e84:	ec45 4b10 	vmov	d0, r4, r5
 8009e88:	4616      	mov	r6, r2
 8009e8a:	f002 f81f 	bl	800becc <__ulp>
 8009e8e:	ec51 0b10 	vmov	r0, r1, d0
 8009e92:	b17e      	cbz	r6, 8009eb4 <sulp+0x36>
 8009e94:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009e98:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	dd09      	ble.n	8009eb4 <sulp+0x36>
 8009ea0:	051b      	lsls	r3, r3, #20
 8009ea2:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009ea6:	2400      	movs	r4, #0
 8009ea8:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009eac:	4622      	mov	r2, r4
 8009eae:	462b      	mov	r3, r5
 8009eb0:	f7f6 fbd2 	bl	8000658 <__aeabi_dmul>
 8009eb4:	ec41 0b10 	vmov	d0, r0, r1
 8009eb8:	bd70      	pop	{r4, r5, r6, pc}
 8009eba:	0000      	movs	r0, r0
 8009ebc:	0000      	movs	r0, r0
	...

08009ec0 <_strtod_l>:
 8009ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ec4:	b09f      	sub	sp, #124	@ 0x7c
 8009ec6:	460c      	mov	r4, r1
 8009ec8:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009eca:	2200      	movs	r2, #0
 8009ecc:	921a      	str	r2, [sp, #104]	@ 0x68
 8009ece:	9005      	str	r0, [sp, #20]
 8009ed0:	f04f 0a00 	mov.w	sl, #0
 8009ed4:	f04f 0b00 	mov.w	fp, #0
 8009ed8:	460a      	mov	r2, r1
 8009eda:	9219      	str	r2, [sp, #100]	@ 0x64
 8009edc:	7811      	ldrb	r1, [r2, #0]
 8009ede:	292b      	cmp	r1, #43	@ 0x2b
 8009ee0:	d04a      	beq.n	8009f78 <_strtod_l+0xb8>
 8009ee2:	d838      	bhi.n	8009f56 <_strtod_l+0x96>
 8009ee4:	290d      	cmp	r1, #13
 8009ee6:	d832      	bhi.n	8009f4e <_strtod_l+0x8e>
 8009ee8:	2908      	cmp	r1, #8
 8009eea:	d832      	bhi.n	8009f52 <_strtod_l+0x92>
 8009eec:	2900      	cmp	r1, #0
 8009eee:	d03b      	beq.n	8009f68 <_strtod_l+0xa8>
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009ef4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009ef6:	782a      	ldrb	r2, [r5, #0]
 8009ef8:	2a30      	cmp	r2, #48	@ 0x30
 8009efa:	f040 80b3 	bne.w	800a064 <_strtod_l+0x1a4>
 8009efe:	786a      	ldrb	r2, [r5, #1]
 8009f00:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009f04:	2a58      	cmp	r2, #88	@ 0x58
 8009f06:	d16e      	bne.n	8009fe6 <_strtod_l+0x126>
 8009f08:	9302      	str	r3, [sp, #8]
 8009f0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009f0c:	9301      	str	r3, [sp, #4]
 8009f0e:	ab1a      	add	r3, sp, #104	@ 0x68
 8009f10:	9300      	str	r3, [sp, #0]
 8009f12:	4a8e      	ldr	r2, [pc, #568]	@ (800a14c <_strtod_l+0x28c>)
 8009f14:	9805      	ldr	r0, [sp, #20]
 8009f16:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009f18:	a919      	add	r1, sp, #100	@ 0x64
 8009f1a:	f001 f8c9 	bl	800b0b0 <__gethex>
 8009f1e:	f010 060f 	ands.w	r6, r0, #15
 8009f22:	4604      	mov	r4, r0
 8009f24:	d005      	beq.n	8009f32 <_strtod_l+0x72>
 8009f26:	2e06      	cmp	r6, #6
 8009f28:	d128      	bne.n	8009f7c <_strtod_l+0xbc>
 8009f2a:	3501      	adds	r5, #1
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	9519      	str	r5, [sp, #100]	@ 0x64
 8009f30:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009f32:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	f040 858e 	bne.w	800aa56 <_strtod_l+0xb96>
 8009f3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009f3c:	b1cb      	cbz	r3, 8009f72 <_strtod_l+0xb2>
 8009f3e:	4652      	mov	r2, sl
 8009f40:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8009f44:	ec43 2b10 	vmov	d0, r2, r3
 8009f48:	b01f      	add	sp, #124	@ 0x7c
 8009f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f4e:	2920      	cmp	r1, #32
 8009f50:	d1ce      	bne.n	8009ef0 <_strtod_l+0x30>
 8009f52:	3201      	adds	r2, #1
 8009f54:	e7c1      	b.n	8009eda <_strtod_l+0x1a>
 8009f56:	292d      	cmp	r1, #45	@ 0x2d
 8009f58:	d1ca      	bne.n	8009ef0 <_strtod_l+0x30>
 8009f5a:	2101      	movs	r1, #1
 8009f5c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009f5e:	1c51      	adds	r1, r2, #1
 8009f60:	9119      	str	r1, [sp, #100]	@ 0x64
 8009f62:	7852      	ldrb	r2, [r2, #1]
 8009f64:	2a00      	cmp	r2, #0
 8009f66:	d1c5      	bne.n	8009ef4 <_strtod_l+0x34>
 8009f68:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009f6a:	9419      	str	r4, [sp, #100]	@ 0x64
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	f040 8570 	bne.w	800aa52 <_strtod_l+0xb92>
 8009f72:	4652      	mov	r2, sl
 8009f74:	465b      	mov	r3, fp
 8009f76:	e7e5      	b.n	8009f44 <_strtod_l+0x84>
 8009f78:	2100      	movs	r1, #0
 8009f7a:	e7ef      	b.n	8009f5c <_strtod_l+0x9c>
 8009f7c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009f7e:	b13a      	cbz	r2, 8009f90 <_strtod_l+0xd0>
 8009f80:	2135      	movs	r1, #53	@ 0x35
 8009f82:	a81c      	add	r0, sp, #112	@ 0x70
 8009f84:	f002 f89c 	bl	800c0c0 <__copybits>
 8009f88:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009f8a:	9805      	ldr	r0, [sp, #20]
 8009f8c:	f001 fc6a 	bl	800b864 <_Bfree>
 8009f90:	3e01      	subs	r6, #1
 8009f92:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009f94:	2e04      	cmp	r6, #4
 8009f96:	d806      	bhi.n	8009fa6 <_strtod_l+0xe6>
 8009f98:	e8df f006 	tbb	[pc, r6]
 8009f9c:	201d0314 	.word	0x201d0314
 8009fa0:	14          	.byte	0x14
 8009fa1:	00          	.byte	0x00
 8009fa2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009fa6:	05e1      	lsls	r1, r4, #23
 8009fa8:	bf48      	it	mi
 8009faa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009fae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009fb2:	0d1b      	lsrs	r3, r3, #20
 8009fb4:	051b      	lsls	r3, r3, #20
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d1bb      	bne.n	8009f32 <_strtod_l+0x72>
 8009fba:	f000 ff63 	bl	800ae84 <__errno>
 8009fbe:	2322      	movs	r3, #34	@ 0x22
 8009fc0:	6003      	str	r3, [r0, #0]
 8009fc2:	e7b6      	b.n	8009f32 <_strtod_l+0x72>
 8009fc4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009fc8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009fcc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009fd0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009fd4:	e7e7      	b.n	8009fa6 <_strtod_l+0xe6>
 8009fd6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800a154 <_strtod_l+0x294>
 8009fda:	e7e4      	b.n	8009fa6 <_strtod_l+0xe6>
 8009fdc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009fe0:	f04f 3aff 	mov.w	sl, #4294967295
 8009fe4:	e7df      	b.n	8009fa6 <_strtod_l+0xe6>
 8009fe6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009fe8:	1c5a      	adds	r2, r3, #1
 8009fea:	9219      	str	r2, [sp, #100]	@ 0x64
 8009fec:	785b      	ldrb	r3, [r3, #1]
 8009fee:	2b30      	cmp	r3, #48	@ 0x30
 8009ff0:	d0f9      	beq.n	8009fe6 <_strtod_l+0x126>
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d09d      	beq.n	8009f32 <_strtod_l+0x72>
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ffa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009ffc:	930c      	str	r3, [sp, #48]	@ 0x30
 8009ffe:	2300      	movs	r3, #0
 800a000:	9308      	str	r3, [sp, #32]
 800a002:	930a      	str	r3, [sp, #40]	@ 0x28
 800a004:	461f      	mov	r7, r3
 800a006:	220a      	movs	r2, #10
 800a008:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a00a:	7805      	ldrb	r5, [r0, #0]
 800a00c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a010:	b2d9      	uxtb	r1, r3
 800a012:	2909      	cmp	r1, #9
 800a014:	d928      	bls.n	800a068 <_strtod_l+0x1a8>
 800a016:	494e      	ldr	r1, [pc, #312]	@ (800a150 <_strtod_l+0x290>)
 800a018:	2201      	movs	r2, #1
 800a01a:	f000 fe7e 	bl	800ad1a <strncmp>
 800a01e:	2800      	cmp	r0, #0
 800a020:	d032      	beq.n	800a088 <_strtod_l+0x1c8>
 800a022:	2000      	movs	r0, #0
 800a024:	462a      	mov	r2, r5
 800a026:	4681      	mov	r9, r0
 800a028:	463d      	mov	r5, r7
 800a02a:	4603      	mov	r3, r0
 800a02c:	2a65      	cmp	r2, #101	@ 0x65
 800a02e:	d001      	beq.n	800a034 <_strtod_l+0x174>
 800a030:	2a45      	cmp	r2, #69	@ 0x45
 800a032:	d114      	bne.n	800a05e <_strtod_l+0x19e>
 800a034:	b91d      	cbnz	r5, 800a03e <_strtod_l+0x17e>
 800a036:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a038:	4302      	orrs	r2, r0
 800a03a:	d095      	beq.n	8009f68 <_strtod_l+0xa8>
 800a03c:	2500      	movs	r5, #0
 800a03e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a040:	1c62      	adds	r2, r4, #1
 800a042:	9219      	str	r2, [sp, #100]	@ 0x64
 800a044:	7862      	ldrb	r2, [r4, #1]
 800a046:	2a2b      	cmp	r2, #43	@ 0x2b
 800a048:	d077      	beq.n	800a13a <_strtod_l+0x27a>
 800a04a:	2a2d      	cmp	r2, #45	@ 0x2d
 800a04c:	d07b      	beq.n	800a146 <_strtod_l+0x286>
 800a04e:	f04f 0c00 	mov.w	ip, #0
 800a052:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a056:	2909      	cmp	r1, #9
 800a058:	f240 8082 	bls.w	800a160 <_strtod_l+0x2a0>
 800a05c:	9419      	str	r4, [sp, #100]	@ 0x64
 800a05e:	f04f 0800 	mov.w	r8, #0
 800a062:	e0a2      	b.n	800a1aa <_strtod_l+0x2ea>
 800a064:	2300      	movs	r3, #0
 800a066:	e7c7      	b.n	8009ff8 <_strtod_l+0x138>
 800a068:	2f08      	cmp	r7, #8
 800a06a:	bfd5      	itete	le
 800a06c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800a06e:	9908      	ldrgt	r1, [sp, #32]
 800a070:	fb02 3301 	mlale	r3, r2, r1, r3
 800a074:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a078:	f100 0001 	add.w	r0, r0, #1
 800a07c:	bfd4      	ite	le
 800a07e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800a080:	9308      	strgt	r3, [sp, #32]
 800a082:	3701      	adds	r7, #1
 800a084:	9019      	str	r0, [sp, #100]	@ 0x64
 800a086:	e7bf      	b.n	800a008 <_strtod_l+0x148>
 800a088:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a08a:	1c5a      	adds	r2, r3, #1
 800a08c:	9219      	str	r2, [sp, #100]	@ 0x64
 800a08e:	785a      	ldrb	r2, [r3, #1]
 800a090:	b37f      	cbz	r7, 800a0f2 <_strtod_l+0x232>
 800a092:	4681      	mov	r9, r0
 800a094:	463d      	mov	r5, r7
 800a096:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a09a:	2b09      	cmp	r3, #9
 800a09c:	d912      	bls.n	800a0c4 <_strtod_l+0x204>
 800a09e:	2301      	movs	r3, #1
 800a0a0:	e7c4      	b.n	800a02c <_strtod_l+0x16c>
 800a0a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a0a4:	1c5a      	adds	r2, r3, #1
 800a0a6:	9219      	str	r2, [sp, #100]	@ 0x64
 800a0a8:	785a      	ldrb	r2, [r3, #1]
 800a0aa:	3001      	adds	r0, #1
 800a0ac:	2a30      	cmp	r2, #48	@ 0x30
 800a0ae:	d0f8      	beq.n	800a0a2 <_strtod_l+0x1e2>
 800a0b0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a0b4:	2b08      	cmp	r3, #8
 800a0b6:	f200 84d3 	bhi.w	800aa60 <_strtod_l+0xba0>
 800a0ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a0bc:	930c      	str	r3, [sp, #48]	@ 0x30
 800a0be:	4681      	mov	r9, r0
 800a0c0:	2000      	movs	r0, #0
 800a0c2:	4605      	mov	r5, r0
 800a0c4:	3a30      	subs	r2, #48	@ 0x30
 800a0c6:	f100 0301 	add.w	r3, r0, #1
 800a0ca:	d02a      	beq.n	800a122 <_strtod_l+0x262>
 800a0cc:	4499      	add	r9, r3
 800a0ce:	eb00 0c05 	add.w	ip, r0, r5
 800a0d2:	462b      	mov	r3, r5
 800a0d4:	210a      	movs	r1, #10
 800a0d6:	4563      	cmp	r3, ip
 800a0d8:	d10d      	bne.n	800a0f6 <_strtod_l+0x236>
 800a0da:	1c69      	adds	r1, r5, #1
 800a0dc:	4401      	add	r1, r0
 800a0de:	4428      	add	r0, r5
 800a0e0:	2808      	cmp	r0, #8
 800a0e2:	dc16      	bgt.n	800a112 <_strtod_l+0x252>
 800a0e4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a0e6:	230a      	movs	r3, #10
 800a0e8:	fb03 2300 	mla	r3, r3, r0, r2
 800a0ec:	930a      	str	r3, [sp, #40]	@ 0x28
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	e018      	b.n	800a124 <_strtod_l+0x264>
 800a0f2:	4638      	mov	r0, r7
 800a0f4:	e7da      	b.n	800a0ac <_strtod_l+0x1ec>
 800a0f6:	2b08      	cmp	r3, #8
 800a0f8:	f103 0301 	add.w	r3, r3, #1
 800a0fc:	dc03      	bgt.n	800a106 <_strtod_l+0x246>
 800a0fe:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a100:	434e      	muls	r6, r1
 800a102:	960a      	str	r6, [sp, #40]	@ 0x28
 800a104:	e7e7      	b.n	800a0d6 <_strtod_l+0x216>
 800a106:	2b10      	cmp	r3, #16
 800a108:	bfde      	ittt	le
 800a10a:	9e08      	ldrle	r6, [sp, #32]
 800a10c:	434e      	mulle	r6, r1
 800a10e:	9608      	strle	r6, [sp, #32]
 800a110:	e7e1      	b.n	800a0d6 <_strtod_l+0x216>
 800a112:	280f      	cmp	r0, #15
 800a114:	dceb      	bgt.n	800a0ee <_strtod_l+0x22e>
 800a116:	9808      	ldr	r0, [sp, #32]
 800a118:	230a      	movs	r3, #10
 800a11a:	fb03 2300 	mla	r3, r3, r0, r2
 800a11e:	9308      	str	r3, [sp, #32]
 800a120:	e7e5      	b.n	800a0ee <_strtod_l+0x22e>
 800a122:	4629      	mov	r1, r5
 800a124:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a126:	1c50      	adds	r0, r2, #1
 800a128:	9019      	str	r0, [sp, #100]	@ 0x64
 800a12a:	7852      	ldrb	r2, [r2, #1]
 800a12c:	4618      	mov	r0, r3
 800a12e:	460d      	mov	r5, r1
 800a130:	e7b1      	b.n	800a096 <_strtod_l+0x1d6>
 800a132:	f04f 0900 	mov.w	r9, #0
 800a136:	2301      	movs	r3, #1
 800a138:	e77d      	b.n	800a036 <_strtod_l+0x176>
 800a13a:	f04f 0c00 	mov.w	ip, #0
 800a13e:	1ca2      	adds	r2, r4, #2
 800a140:	9219      	str	r2, [sp, #100]	@ 0x64
 800a142:	78a2      	ldrb	r2, [r4, #2]
 800a144:	e785      	b.n	800a052 <_strtod_l+0x192>
 800a146:	f04f 0c01 	mov.w	ip, #1
 800a14a:	e7f8      	b.n	800a13e <_strtod_l+0x27e>
 800a14c:	0800d028 	.word	0x0800d028
 800a150:	0800d004 	.word	0x0800d004
 800a154:	7ff00000 	.word	0x7ff00000
 800a158:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a15a:	1c51      	adds	r1, r2, #1
 800a15c:	9119      	str	r1, [sp, #100]	@ 0x64
 800a15e:	7852      	ldrb	r2, [r2, #1]
 800a160:	2a30      	cmp	r2, #48	@ 0x30
 800a162:	d0f9      	beq.n	800a158 <_strtod_l+0x298>
 800a164:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a168:	2908      	cmp	r1, #8
 800a16a:	f63f af78 	bhi.w	800a05e <_strtod_l+0x19e>
 800a16e:	3a30      	subs	r2, #48	@ 0x30
 800a170:	920e      	str	r2, [sp, #56]	@ 0x38
 800a172:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a174:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a176:	f04f 080a 	mov.w	r8, #10
 800a17a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a17c:	1c56      	adds	r6, r2, #1
 800a17e:	9619      	str	r6, [sp, #100]	@ 0x64
 800a180:	7852      	ldrb	r2, [r2, #1]
 800a182:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a186:	f1be 0f09 	cmp.w	lr, #9
 800a18a:	d939      	bls.n	800a200 <_strtod_l+0x340>
 800a18c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a18e:	1a76      	subs	r6, r6, r1
 800a190:	2e08      	cmp	r6, #8
 800a192:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a196:	dc03      	bgt.n	800a1a0 <_strtod_l+0x2e0>
 800a198:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a19a:	4588      	cmp	r8, r1
 800a19c:	bfa8      	it	ge
 800a19e:	4688      	movge	r8, r1
 800a1a0:	f1bc 0f00 	cmp.w	ip, #0
 800a1a4:	d001      	beq.n	800a1aa <_strtod_l+0x2ea>
 800a1a6:	f1c8 0800 	rsb	r8, r8, #0
 800a1aa:	2d00      	cmp	r5, #0
 800a1ac:	d14e      	bne.n	800a24c <_strtod_l+0x38c>
 800a1ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a1b0:	4308      	orrs	r0, r1
 800a1b2:	f47f aebe 	bne.w	8009f32 <_strtod_l+0x72>
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	f47f aed6 	bne.w	8009f68 <_strtod_l+0xa8>
 800a1bc:	2a69      	cmp	r2, #105	@ 0x69
 800a1be:	d028      	beq.n	800a212 <_strtod_l+0x352>
 800a1c0:	dc25      	bgt.n	800a20e <_strtod_l+0x34e>
 800a1c2:	2a49      	cmp	r2, #73	@ 0x49
 800a1c4:	d025      	beq.n	800a212 <_strtod_l+0x352>
 800a1c6:	2a4e      	cmp	r2, #78	@ 0x4e
 800a1c8:	f47f aece 	bne.w	8009f68 <_strtod_l+0xa8>
 800a1cc:	499b      	ldr	r1, [pc, #620]	@ (800a43c <_strtod_l+0x57c>)
 800a1ce:	a819      	add	r0, sp, #100	@ 0x64
 800a1d0:	f001 f990 	bl	800b4f4 <__match>
 800a1d4:	2800      	cmp	r0, #0
 800a1d6:	f43f aec7 	beq.w	8009f68 <_strtod_l+0xa8>
 800a1da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a1dc:	781b      	ldrb	r3, [r3, #0]
 800a1de:	2b28      	cmp	r3, #40	@ 0x28
 800a1e0:	d12e      	bne.n	800a240 <_strtod_l+0x380>
 800a1e2:	4997      	ldr	r1, [pc, #604]	@ (800a440 <_strtod_l+0x580>)
 800a1e4:	aa1c      	add	r2, sp, #112	@ 0x70
 800a1e6:	a819      	add	r0, sp, #100	@ 0x64
 800a1e8:	f001 f998 	bl	800b51c <__hexnan>
 800a1ec:	2805      	cmp	r0, #5
 800a1ee:	d127      	bne.n	800a240 <_strtod_l+0x380>
 800a1f0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a1f2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a1f6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a1fa:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a1fe:	e698      	b.n	8009f32 <_strtod_l+0x72>
 800a200:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a202:	fb08 2101 	mla	r1, r8, r1, r2
 800a206:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a20a:	920e      	str	r2, [sp, #56]	@ 0x38
 800a20c:	e7b5      	b.n	800a17a <_strtod_l+0x2ba>
 800a20e:	2a6e      	cmp	r2, #110	@ 0x6e
 800a210:	e7da      	b.n	800a1c8 <_strtod_l+0x308>
 800a212:	498c      	ldr	r1, [pc, #560]	@ (800a444 <_strtod_l+0x584>)
 800a214:	a819      	add	r0, sp, #100	@ 0x64
 800a216:	f001 f96d 	bl	800b4f4 <__match>
 800a21a:	2800      	cmp	r0, #0
 800a21c:	f43f aea4 	beq.w	8009f68 <_strtod_l+0xa8>
 800a220:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a222:	4989      	ldr	r1, [pc, #548]	@ (800a448 <_strtod_l+0x588>)
 800a224:	3b01      	subs	r3, #1
 800a226:	a819      	add	r0, sp, #100	@ 0x64
 800a228:	9319      	str	r3, [sp, #100]	@ 0x64
 800a22a:	f001 f963 	bl	800b4f4 <__match>
 800a22e:	b910      	cbnz	r0, 800a236 <_strtod_l+0x376>
 800a230:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a232:	3301      	adds	r3, #1
 800a234:	9319      	str	r3, [sp, #100]	@ 0x64
 800a236:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800a458 <_strtod_l+0x598>
 800a23a:	f04f 0a00 	mov.w	sl, #0
 800a23e:	e678      	b.n	8009f32 <_strtod_l+0x72>
 800a240:	4882      	ldr	r0, [pc, #520]	@ (800a44c <_strtod_l+0x58c>)
 800a242:	f000 fe5d 	bl	800af00 <nan>
 800a246:	ec5b ab10 	vmov	sl, fp, d0
 800a24a:	e672      	b.n	8009f32 <_strtod_l+0x72>
 800a24c:	eba8 0309 	sub.w	r3, r8, r9
 800a250:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a252:	9309      	str	r3, [sp, #36]	@ 0x24
 800a254:	2f00      	cmp	r7, #0
 800a256:	bf08      	it	eq
 800a258:	462f      	moveq	r7, r5
 800a25a:	2d10      	cmp	r5, #16
 800a25c:	462c      	mov	r4, r5
 800a25e:	bfa8      	it	ge
 800a260:	2410      	movge	r4, #16
 800a262:	f7f6 f97f 	bl	8000564 <__aeabi_ui2d>
 800a266:	2d09      	cmp	r5, #9
 800a268:	4682      	mov	sl, r0
 800a26a:	468b      	mov	fp, r1
 800a26c:	dc13      	bgt.n	800a296 <_strtod_l+0x3d6>
 800a26e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a270:	2b00      	cmp	r3, #0
 800a272:	f43f ae5e 	beq.w	8009f32 <_strtod_l+0x72>
 800a276:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a278:	dd78      	ble.n	800a36c <_strtod_l+0x4ac>
 800a27a:	2b16      	cmp	r3, #22
 800a27c:	dc5f      	bgt.n	800a33e <_strtod_l+0x47e>
 800a27e:	4974      	ldr	r1, [pc, #464]	@ (800a450 <_strtod_l+0x590>)
 800a280:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a284:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a288:	4652      	mov	r2, sl
 800a28a:	465b      	mov	r3, fp
 800a28c:	f7f6 f9e4 	bl	8000658 <__aeabi_dmul>
 800a290:	4682      	mov	sl, r0
 800a292:	468b      	mov	fp, r1
 800a294:	e64d      	b.n	8009f32 <_strtod_l+0x72>
 800a296:	4b6e      	ldr	r3, [pc, #440]	@ (800a450 <_strtod_l+0x590>)
 800a298:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a29c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a2a0:	f7f6 f9da 	bl	8000658 <__aeabi_dmul>
 800a2a4:	4682      	mov	sl, r0
 800a2a6:	9808      	ldr	r0, [sp, #32]
 800a2a8:	468b      	mov	fp, r1
 800a2aa:	f7f6 f95b 	bl	8000564 <__aeabi_ui2d>
 800a2ae:	4602      	mov	r2, r0
 800a2b0:	460b      	mov	r3, r1
 800a2b2:	4650      	mov	r0, sl
 800a2b4:	4659      	mov	r1, fp
 800a2b6:	f7f6 f819 	bl	80002ec <__adddf3>
 800a2ba:	2d0f      	cmp	r5, #15
 800a2bc:	4682      	mov	sl, r0
 800a2be:	468b      	mov	fp, r1
 800a2c0:	ddd5      	ble.n	800a26e <_strtod_l+0x3ae>
 800a2c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2c4:	1b2c      	subs	r4, r5, r4
 800a2c6:	441c      	add	r4, r3
 800a2c8:	2c00      	cmp	r4, #0
 800a2ca:	f340 8096 	ble.w	800a3fa <_strtod_l+0x53a>
 800a2ce:	f014 030f 	ands.w	r3, r4, #15
 800a2d2:	d00a      	beq.n	800a2ea <_strtod_l+0x42a>
 800a2d4:	495e      	ldr	r1, [pc, #376]	@ (800a450 <_strtod_l+0x590>)
 800a2d6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a2da:	4652      	mov	r2, sl
 800a2dc:	465b      	mov	r3, fp
 800a2de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2e2:	f7f6 f9b9 	bl	8000658 <__aeabi_dmul>
 800a2e6:	4682      	mov	sl, r0
 800a2e8:	468b      	mov	fp, r1
 800a2ea:	f034 040f 	bics.w	r4, r4, #15
 800a2ee:	d073      	beq.n	800a3d8 <_strtod_l+0x518>
 800a2f0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a2f4:	dd48      	ble.n	800a388 <_strtod_l+0x4c8>
 800a2f6:	2400      	movs	r4, #0
 800a2f8:	46a0      	mov	r8, r4
 800a2fa:	940a      	str	r4, [sp, #40]	@ 0x28
 800a2fc:	46a1      	mov	r9, r4
 800a2fe:	9a05      	ldr	r2, [sp, #20]
 800a300:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800a458 <_strtod_l+0x598>
 800a304:	2322      	movs	r3, #34	@ 0x22
 800a306:	6013      	str	r3, [r2, #0]
 800a308:	f04f 0a00 	mov.w	sl, #0
 800a30c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a30e:	2b00      	cmp	r3, #0
 800a310:	f43f ae0f 	beq.w	8009f32 <_strtod_l+0x72>
 800a314:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a316:	9805      	ldr	r0, [sp, #20]
 800a318:	f001 faa4 	bl	800b864 <_Bfree>
 800a31c:	9805      	ldr	r0, [sp, #20]
 800a31e:	4649      	mov	r1, r9
 800a320:	f001 faa0 	bl	800b864 <_Bfree>
 800a324:	9805      	ldr	r0, [sp, #20]
 800a326:	4641      	mov	r1, r8
 800a328:	f001 fa9c 	bl	800b864 <_Bfree>
 800a32c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a32e:	9805      	ldr	r0, [sp, #20]
 800a330:	f001 fa98 	bl	800b864 <_Bfree>
 800a334:	9805      	ldr	r0, [sp, #20]
 800a336:	4621      	mov	r1, r4
 800a338:	f001 fa94 	bl	800b864 <_Bfree>
 800a33c:	e5f9      	b.n	8009f32 <_strtod_l+0x72>
 800a33e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a340:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a344:	4293      	cmp	r3, r2
 800a346:	dbbc      	blt.n	800a2c2 <_strtod_l+0x402>
 800a348:	4c41      	ldr	r4, [pc, #260]	@ (800a450 <_strtod_l+0x590>)
 800a34a:	f1c5 050f 	rsb	r5, r5, #15
 800a34e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a352:	4652      	mov	r2, sl
 800a354:	465b      	mov	r3, fp
 800a356:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a35a:	f7f6 f97d 	bl	8000658 <__aeabi_dmul>
 800a35e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a360:	1b5d      	subs	r5, r3, r5
 800a362:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a366:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a36a:	e78f      	b.n	800a28c <_strtod_l+0x3cc>
 800a36c:	3316      	adds	r3, #22
 800a36e:	dba8      	blt.n	800a2c2 <_strtod_l+0x402>
 800a370:	4b37      	ldr	r3, [pc, #220]	@ (800a450 <_strtod_l+0x590>)
 800a372:	eba9 0808 	sub.w	r8, r9, r8
 800a376:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a37a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a37e:	4650      	mov	r0, sl
 800a380:	4659      	mov	r1, fp
 800a382:	f7f6 fa93 	bl	80008ac <__aeabi_ddiv>
 800a386:	e783      	b.n	800a290 <_strtod_l+0x3d0>
 800a388:	4b32      	ldr	r3, [pc, #200]	@ (800a454 <_strtod_l+0x594>)
 800a38a:	9308      	str	r3, [sp, #32]
 800a38c:	2300      	movs	r3, #0
 800a38e:	1124      	asrs	r4, r4, #4
 800a390:	4650      	mov	r0, sl
 800a392:	4659      	mov	r1, fp
 800a394:	461e      	mov	r6, r3
 800a396:	2c01      	cmp	r4, #1
 800a398:	dc21      	bgt.n	800a3de <_strtod_l+0x51e>
 800a39a:	b10b      	cbz	r3, 800a3a0 <_strtod_l+0x4e0>
 800a39c:	4682      	mov	sl, r0
 800a39e:	468b      	mov	fp, r1
 800a3a0:	492c      	ldr	r1, [pc, #176]	@ (800a454 <_strtod_l+0x594>)
 800a3a2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a3a6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a3aa:	4652      	mov	r2, sl
 800a3ac:	465b      	mov	r3, fp
 800a3ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a3b2:	f7f6 f951 	bl	8000658 <__aeabi_dmul>
 800a3b6:	4b28      	ldr	r3, [pc, #160]	@ (800a458 <_strtod_l+0x598>)
 800a3b8:	460a      	mov	r2, r1
 800a3ba:	400b      	ands	r3, r1
 800a3bc:	4927      	ldr	r1, [pc, #156]	@ (800a45c <_strtod_l+0x59c>)
 800a3be:	428b      	cmp	r3, r1
 800a3c0:	4682      	mov	sl, r0
 800a3c2:	d898      	bhi.n	800a2f6 <_strtod_l+0x436>
 800a3c4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a3c8:	428b      	cmp	r3, r1
 800a3ca:	bf86      	itte	hi
 800a3cc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800a460 <_strtod_l+0x5a0>
 800a3d0:	f04f 3aff 	movhi.w	sl, #4294967295
 800a3d4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a3d8:	2300      	movs	r3, #0
 800a3da:	9308      	str	r3, [sp, #32]
 800a3dc:	e07a      	b.n	800a4d4 <_strtod_l+0x614>
 800a3de:	07e2      	lsls	r2, r4, #31
 800a3e0:	d505      	bpl.n	800a3ee <_strtod_l+0x52e>
 800a3e2:	9b08      	ldr	r3, [sp, #32]
 800a3e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e8:	f7f6 f936 	bl	8000658 <__aeabi_dmul>
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	9a08      	ldr	r2, [sp, #32]
 800a3f0:	3208      	adds	r2, #8
 800a3f2:	3601      	adds	r6, #1
 800a3f4:	1064      	asrs	r4, r4, #1
 800a3f6:	9208      	str	r2, [sp, #32]
 800a3f8:	e7cd      	b.n	800a396 <_strtod_l+0x4d6>
 800a3fa:	d0ed      	beq.n	800a3d8 <_strtod_l+0x518>
 800a3fc:	4264      	negs	r4, r4
 800a3fe:	f014 020f 	ands.w	r2, r4, #15
 800a402:	d00a      	beq.n	800a41a <_strtod_l+0x55a>
 800a404:	4b12      	ldr	r3, [pc, #72]	@ (800a450 <_strtod_l+0x590>)
 800a406:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a40a:	4650      	mov	r0, sl
 800a40c:	4659      	mov	r1, fp
 800a40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a412:	f7f6 fa4b 	bl	80008ac <__aeabi_ddiv>
 800a416:	4682      	mov	sl, r0
 800a418:	468b      	mov	fp, r1
 800a41a:	1124      	asrs	r4, r4, #4
 800a41c:	d0dc      	beq.n	800a3d8 <_strtod_l+0x518>
 800a41e:	2c1f      	cmp	r4, #31
 800a420:	dd20      	ble.n	800a464 <_strtod_l+0x5a4>
 800a422:	2400      	movs	r4, #0
 800a424:	46a0      	mov	r8, r4
 800a426:	940a      	str	r4, [sp, #40]	@ 0x28
 800a428:	46a1      	mov	r9, r4
 800a42a:	9a05      	ldr	r2, [sp, #20]
 800a42c:	2322      	movs	r3, #34	@ 0x22
 800a42e:	f04f 0a00 	mov.w	sl, #0
 800a432:	f04f 0b00 	mov.w	fp, #0
 800a436:	6013      	str	r3, [r2, #0]
 800a438:	e768      	b.n	800a30c <_strtod_l+0x44c>
 800a43a:	bf00      	nop
 800a43c:	0800d00f 	.word	0x0800d00f
 800a440:	0800d014 	.word	0x0800d014
 800a444:	0800d006 	.word	0x0800d006
 800a448:	0800d009 	.word	0x0800d009
 800a44c:	0800d11c 	.word	0x0800d11c
 800a450:	0800d220 	.word	0x0800d220
 800a454:	0800d1f8 	.word	0x0800d1f8
 800a458:	7ff00000 	.word	0x7ff00000
 800a45c:	7ca00000 	.word	0x7ca00000
 800a460:	7fefffff 	.word	0x7fefffff
 800a464:	f014 0310 	ands.w	r3, r4, #16
 800a468:	bf18      	it	ne
 800a46a:	236a      	movne	r3, #106	@ 0x6a
 800a46c:	4ea9      	ldr	r6, [pc, #676]	@ (800a714 <_strtod_l+0x854>)
 800a46e:	9308      	str	r3, [sp, #32]
 800a470:	4650      	mov	r0, sl
 800a472:	4659      	mov	r1, fp
 800a474:	2300      	movs	r3, #0
 800a476:	07e2      	lsls	r2, r4, #31
 800a478:	d504      	bpl.n	800a484 <_strtod_l+0x5c4>
 800a47a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a47e:	f7f6 f8eb 	bl	8000658 <__aeabi_dmul>
 800a482:	2301      	movs	r3, #1
 800a484:	1064      	asrs	r4, r4, #1
 800a486:	f106 0608 	add.w	r6, r6, #8
 800a48a:	d1f4      	bne.n	800a476 <_strtod_l+0x5b6>
 800a48c:	b10b      	cbz	r3, 800a492 <_strtod_l+0x5d2>
 800a48e:	4682      	mov	sl, r0
 800a490:	468b      	mov	fp, r1
 800a492:	9b08      	ldr	r3, [sp, #32]
 800a494:	b1b3      	cbz	r3, 800a4c4 <_strtod_l+0x604>
 800a496:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a49a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	4659      	mov	r1, fp
 800a4a2:	dd0f      	ble.n	800a4c4 <_strtod_l+0x604>
 800a4a4:	2b1f      	cmp	r3, #31
 800a4a6:	dd55      	ble.n	800a554 <_strtod_l+0x694>
 800a4a8:	2b34      	cmp	r3, #52	@ 0x34
 800a4aa:	bfde      	ittt	le
 800a4ac:	f04f 33ff 	movle.w	r3, #4294967295
 800a4b0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a4b4:	4093      	lslle	r3, r2
 800a4b6:	f04f 0a00 	mov.w	sl, #0
 800a4ba:	bfcc      	ite	gt
 800a4bc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a4c0:	ea03 0b01 	andle.w	fp, r3, r1
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	4650      	mov	r0, sl
 800a4ca:	4659      	mov	r1, fp
 800a4cc:	f7f6 fb2c 	bl	8000b28 <__aeabi_dcmpeq>
 800a4d0:	2800      	cmp	r0, #0
 800a4d2:	d1a6      	bne.n	800a422 <_strtod_l+0x562>
 800a4d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a4d6:	9300      	str	r3, [sp, #0]
 800a4d8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a4da:	9805      	ldr	r0, [sp, #20]
 800a4dc:	462b      	mov	r3, r5
 800a4de:	463a      	mov	r2, r7
 800a4e0:	f001 fa28 	bl	800b934 <__s2b>
 800a4e4:	900a      	str	r0, [sp, #40]	@ 0x28
 800a4e6:	2800      	cmp	r0, #0
 800a4e8:	f43f af05 	beq.w	800a2f6 <_strtod_l+0x436>
 800a4ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a4ee:	2a00      	cmp	r2, #0
 800a4f0:	eba9 0308 	sub.w	r3, r9, r8
 800a4f4:	bfa8      	it	ge
 800a4f6:	2300      	movge	r3, #0
 800a4f8:	9312      	str	r3, [sp, #72]	@ 0x48
 800a4fa:	2400      	movs	r4, #0
 800a4fc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a500:	9316      	str	r3, [sp, #88]	@ 0x58
 800a502:	46a0      	mov	r8, r4
 800a504:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a506:	9805      	ldr	r0, [sp, #20]
 800a508:	6859      	ldr	r1, [r3, #4]
 800a50a:	f001 f96b 	bl	800b7e4 <_Balloc>
 800a50e:	4681      	mov	r9, r0
 800a510:	2800      	cmp	r0, #0
 800a512:	f43f aef4 	beq.w	800a2fe <_strtod_l+0x43e>
 800a516:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a518:	691a      	ldr	r2, [r3, #16]
 800a51a:	3202      	adds	r2, #2
 800a51c:	f103 010c 	add.w	r1, r3, #12
 800a520:	0092      	lsls	r2, r2, #2
 800a522:	300c      	adds	r0, #12
 800a524:	f000 fcdb 	bl	800aede <memcpy>
 800a528:	ec4b ab10 	vmov	d0, sl, fp
 800a52c:	9805      	ldr	r0, [sp, #20]
 800a52e:	aa1c      	add	r2, sp, #112	@ 0x70
 800a530:	a91b      	add	r1, sp, #108	@ 0x6c
 800a532:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a536:	f001 fd39 	bl	800bfac <__d2b>
 800a53a:	901a      	str	r0, [sp, #104]	@ 0x68
 800a53c:	2800      	cmp	r0, #0
 800a53e:	f43f aede 	beq.w	800a2fe <_strtod_l+0x43e>
 800a542:	9805      	ldr	r0, [sp, #20]
 800a544:	2101      	movs	r1, #1
 800a546:	f001 fa8b 	bl	800ba60 <__i2b>
 800a54a:	4680      	mov	r8, r0
 800a54c:	b948      	cbnz	r0, 800a562 <_strtod_l+0x6a2>
 800a54e:	f04f 0800 	mov.w	r8, #0
 800a552:	e6d4      	b.n	800a2fe <_strtod_l+0x43e>
 800a554:	f04f 32ff 	mov.w	r2, #4294967295
 800a558:	fa02 f303 	lsl.w	r3, r2, r3
 800a55c:	ea03 0a0a 	and.w	sl, r3, sl
 800a560:	e7b0      	b.n	800a4c4 <_strtod_l+0x604>
 800a562:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a564:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a566:	2d00      	cmp	r5, #0
 800a568:	bfab      	itete	ge
 800a56a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a56c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a56e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a570:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a572:	bfac      	ite	ge
 800a574:	18ef      	addge	r7, r5, r3
 800a576:	1b5e      	sublt	r6, r3, r5
 800a578:	9b08      	ldr	r3, [sp, #32]
 800a57a:	1aed      	subs	r5, r5, r3
 800a57c:	4415      	add	r5, r2
 800a57e:	4b66      	ldr	r3, [pc, #408]	@ (800a718 <_strtod_l+0x858>)
 800a580:	3d01      	subs	r5, #1
 800a582:	429d      	cmp	r5, r3
 800a584:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a588:	da50      	bge.n	800a62c <_strtod_l+0x76c>
 800a58a:	1b5b      	subs	r3, r3, r5
 800a58c:	2b1f      	cmp	r3, #31
 800a58e:	eba2 0203 	sub.w	r2, r2, r3
 800a592:	f04f 0101 	mov.w	r1, #1
 800a596:	dc3d      	bgt.n	800a614 <_strtod_l+0x754>
 800a598:	fa01 f303 	lsl.w	r3, r1, r3
 800a59c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a59e:	2300      	movs	r3, #0
 800a5a0:	9310      	str	r3, [sp, #64]	@ 0x40
 800a5a2:	18bd      	adds	r5, r7, r2
 800a5a4:	9b08      	ldr	r3, [sp, #32]
 800a5a6:	42af      	cmp	r7, r5
 800a5a8:	4416      	add	r6, r2
 800a5aa:	441e      	add	r6, r3
 800a5ac:	463b      	mov	r3, r7
 800a5ae:	bfa8      	it	ge
 800a5b0:	462b      	movge	r3, r5
 800a5b2:	42b3      	cmp	r3, r6
 800a5b4:	bfa8      	it	ge
 800a5b6:	4633      	movge	r3, r6
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	bfc2      	ittt	gt
 800a5bc:	1aed      	subgt	r5, r5, r3
 800a5be:	1af6      	subgt	r6, r6, r3
 800a5c0:	1aff      	subgt	r7, r7, r3
 800a5c2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	dd16      	ble.n	800a5f6 <_strtod_l+0x736>
 800a5c8:	4641      	mov	r1, r8
 800a5ca:	9805      	ldr	r0, [sp, #20]
 800a5cc:	461a      	mov	r2, r3
 800a5ce:	f001 fb07 	bl	800bbe0 <__pow5mult>
 800a5d2:	4680      	mov	r8, r0
 800a5d4:	2800      	cmp	r0, #0
 800a5d6:	d0ba      	beq.n	800a54e <_strtod_l+0x68e>
 800a5d8:	4601      	mov	r1, r0
 800a5da:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a5dc:	9805      	ldr	r0, [sp, #20]
 800a5de:	f001 fa55 	bl	800ba8c <__multiply>
 800a5e2:	900e      	str	r0, [sp, #56]	@ 0x38
 800a5e4:	2800      	cmp	r0, #0
 800a5e6:	f43f ae8a 	beq.w	800a2fe <_strtod_l+0x43e>
 800a5ea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a5ec:	9805      	ldr	r0, [sp, #20]
 800a5ee:	f001 f939 	bl	800b864 <_Bfree>
 800a5f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a5f4:	931a      	str	r3, [sp, #104]	@ 0x68
 800a5f6:	2d00      	cmp	r5, #0
 800a5f8:	dc1d      	bgt.n	800a636 <_strtod_l+0x776>
 800a5fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	dd23      	ble.n	800a648 <_strtod_l+0x788>
 800a600:	4649      	mov	r1, r9
 800a602:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a604:	9805      	ldr	r0, [sp, #20]
 800a606:	f001 faeb 	bl	800bbe0 <__pow5mult>
 800a60a:	4681      	mov	r9, r0
 800a60c:	b9e0      	cbnz	r0, 800a648 <_strtod_l+0x788>
 800a60e:	f04f 0900 	mov.w	r9, #0
 800a612:	e674      	b.n	800a2fe <_strtod_l+0x43e>
 800a614:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a618:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a61c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a620:	35e2      	adds	r5, #226	@ 0xe2
 800a622:	fa01 f305 	lsl.w	r3, r1, r5
 800a626:	9310      	str	r3, [sp, #64]	@ 0x40
 800a628:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a62a:	e7ba      	b.n	800a5a2 <_strtod_l+0x6e2>
 800a62c:	2300      	movs	r3, #0
 800a62e:	9310      	str	r3, [sp, #64]	@ 0x40
 800a630:	2301      	movs	r3, #1
 800a632:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a634:	e7b5      	b.n	800a5a2 <_strtod_l+0x6e2>
 800a636:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a638:	9805      	ldr	r0, [sp, #20]
 800a63a:	462a      	mov	r2, r5
 800a63c:	f001 fb2a 	bl	800bc94 <__lshift>
 800a640:	901a      	str	r0, [sp, #104]	@ 0x68
 800a642:	2800      	cmp	r0, #0
 800a644:	d1d9      	bne.n	800a5fa <_strtod_l+0x73a>
 800a646:	e65a      	b.n	800a2fe <_strtod_l+0x43e>
 800a648:	2e00      	cmp	r6, #0
 800a64a:	dd07      	ble.n	800a65c <_strtod_l+0x79c>
 800a64c:	4649      	mov	r1, r9
 800a64e:	9805      	ldr	r0, [sp, #20]
 800a650:	4632      	mov	r2, r6
 800a652:	f001 fb1f 	bl	800bc94 <__lshift>
 800a656:	4681      	mov	r9, r0
 800a658:	2800      	cmp	r0, #0
 800a65a:	d0d8      	beq.n	800a60e <_strtod_l+0x74e>
 800a65c:	2f00      	cmp	r7, #0
 800a65e:	dd08      	ble.n	800a672 <_strtod_l+0x7b2>
 800a660:	4641      	mov	r1, r8
 800a662:	9805      	ldr	r0, [sp, #20]
 800a664:	463a      	mov	r2, r7
 800a666:	f001 fb15 	bl	800bc94 <__lshift>
 800a66a:	4680      	mov	r8, r0
 800a66c:	2800      	cmp	r0, #0
 800a66e:	f43f ae46 	beq.w	800a2fe <_strtod_l+0x43e>
 800a672:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a674:	9805      	ldr	r0, [sp, #20]
 800a676:	464a      	mov	r2, r9
 800a678:	f001 fb94 	bl	800bda4 <__mdiff>
 800a67c:	4604      	mov	r4, r0
 800a67e:	2800      	cmp	r0, #0
 800a680:	f43f ae3d 	beq.w	800a2fe <_strtod_l+0x43e>
 800a684:	68c3      	ldr	r3, [r0, #12]
 800a686:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a688:	2300      	movs	r3, #0
 800a68a:	60c3      	str	r3, [r0, #12]
 800a68c:	4641      	mov	r1, r8
 800a68e:	f001 fb6d 	bl	800bd6c <__mcmp>
 800a692:	2800      	cmp	r0, #0
 800a694:	da46      	bge.n	800a724 <_strtod_l+0x864>
 800a696:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a698:	ea53 030a 	orrs.w	r3, r3, sl
 800a69c:	d16c      	bne.n	800a778 <_strtod_l+0x8b8>
 800a69e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d168      	bne.n	800a778 <_strtod_l+0x8b8>
 800a6a6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a6aa:	0d1b      	lsrs	r3, r3, #20
 800a6ac:	051b      	lsls	r3, r3, #20
 800a6ae:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a6b2:	d961      	bls.n	800a778 <_strtod_l+0x8b8>
 800a6b4:	6963      	ldr	r3, [r4, #20]
 800a6b6:	b913      	cbnz	r3, 800a6be <_strtod_l+0x7fe>
 800a6b8:	6923      	ldr	r3, [r4, #16]
 800a6ba:	2b01      	cmp	r3, #1
 800a6bc:	dd5c      	ble.n	800a778 <_strtod_l+0x8b8>
 800a6be:	4621      	mov	r1, r4
 800a6c0:	2201      	movs	r2, #1
 800a6c2:	9805      	ldr	r0, [sp, #20]
 800a6c4:	f001 fae6 	bl	800bc94 <__lshift>
 800a6c8:	4641      	mov	r1, r8
 800a6ca:	4604      	mov	r4, r0
 800a6cc:	f001 fb4e 	bl	800bd6c <__mcmp>
 800a6d0:	2800      	cmp	r0, #0
 800a6d2:	dd51      	ble.n	800a778 <_strtod_l+0x8b8>
 800a6d4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a6d8:	9a08      	ldr	r2, [sp, #32]
 800a6da:	0d1b      	lsrs	r3, r3, #20
 800a6dc:	051b      	lsls	r3, r3, #20
 800a6de:	2a00      	cmp	r2, #0
 800a6e0:	d06b      	beq.n	800a7ba <_strtod_l+0x8fa>
 800a6e2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a6e6:	d868      	bhi.n	800a7ba <_strtod_l+0x8fa>
 800a6e8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a6ec:	f67f ae9d 	bls.w	800a42a <_strtod_l+0x56a>
 800a6f0:	4b0a      	ldr	r3, [pc, #40]	@ (800a71c <_strtod_l+0x85c>)
 800a6f2:	4650      	mov	r0, sl
 800a6f4:	4659      	mov	r1, fp
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	f7f5 ffae 	bl	8000658 <__aeabi_dmul>
 800a6fc:	4b08      	ldr	r3, [pc, #32]	@ (800a720 <_strtod_l+0x860>)
 800a6fe:	400b      	ands	r3, r1
 800a700:	4682      	mov	sl, r0
 800a702:	468b      	mov	fp, r1
 800a704:	2b00      	cmp	r3, #0
 800a706:	f47f ae05 	bne.w	800a314 <_strtod_l+0x454>
 800a70a:	9a05      	ldr	r2, [sp, #20]
 800a70c:	2322      	movs	r3, #34	@ 0x22
 800a70e:	6013      	str	r3, [r2, #0]
 800a710:	e600      	b.n	800a314 <_strtod_l+0x454>
 800a712:	bf00      	nop
 800a714:	0800d040 	.word	0x0800d040
 800a718:	fffffc02 	.word	0xfffffc02
 800a71c:	39500000 	.word	0x39500000
 800a720:	7ff00000 	.word	0x7ff00000
 800a724:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a728:	d165      	bne.n	800a7f6 <_strtod_l+0x936>
 800a72a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a72c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a730:	b35a      	cbz	r2, 800a78a <_strtod_l+0x8ca>
 800a732:	4a9f      	ldr	r2, [pc, #636]	@ (800a9b0 <_strtod_l+0xaf0>)
 800a734:	4293      	cmp	r3, r2
 800a736:	d12b      	bne.n	800a790 <_strtod_l+0x8d0>
 800a738:	9b08      	ldr	r3, [sp, #32]
 800a73a:	4651      	mov	r1, sl
 800a73c:	b303      	cbz	r3, 800a780 <_strtod_l+0x8c0>
 800a73e:	4b9d      	ldr	r3, [pc, #628]	@ (800a9b4 <_strtod_l+0xaf4>)
 800a740:	465a      	mov	r2, fp
 800a742:	4013      	ands	r3, r2
 800a744:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a748:	f04f 32ff 	mov.w	r2, #4294967295
 800a74c:	d81b      	bhi.n	800a786 <_strtod_l+0x8c6>
 800a74e:	0d1b      	lsrs	r3, r3, #20
 800a750:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a754:	fa02 f303 	lsl.w	r3, r2, r3
 800a758:	4299      	cmp	r1, r3
 800a75a:	d119      	bne.n	800a790 <_strtod_l+0x8d0>
 800a75c:	4b96      	ldr	r3, [pc, #600]	@ (800a9b8 <_strtod_l+0xaf8>)
 800a75e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a760:	429a      	cmp	r2, r3
 800a762:	d102      	bne.n	800a76a <_strtod_l+0x8aa>
 800a764:	3101      	adds	r1, #1
 800a766:	f43f adca 	beq.w	800a2fe <_strtod_l+0x43e>
 800a76a:	4b92      	ldr	r3, [pc, #584]	@ (800a9b4 <_strtod_l+0xaf4>)
 800a76c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a76e:	401a      	ands	r2, r3
 800a770:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a774:	f04f 0a00 	mov.w	sl, #0
 800a778:	9b08      	ldr	r3, [sp, #32]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d1b8      	bne.n	800a6f0 <_strtod_l+0x830>
 800a77e:	e5c9      	b.n	800a314 <_strtod_l+0x454>
 800a780:	f04f 33ff 	mov.w	r3, #4294967295
 800a784:	e7e8      	b.n	800a758 <_strtod_l+0x898>
 800a786:	4613      	mov	r3, r2
 800a788:	e7e6      	b.n	800a758 <_strtod_l+0x898>
 800a78a:	ea53 030a 	orrs.w	r3, r3, sl
 800a78e:	d0a1      	beq.n	800a6d4 <_strtod_l+0x814>
 800a790:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a792:	b1db      	cbz	r3, 800a7cc <_strtod_l+0x90c>
 800a794:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a796:	4213      	tst	r3, r2
 800a798:	d0ee      	beq.n	800a778 <_strtod_l+0x8b8>
 800a79a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a79c:	9a08      	ldr	r2, [sp, #32]
 800a79e:	4650      	mov	r0, sl
 800a7a0:	4659      	mov	r1, fp
 800a7a2:	b1bb      	cbz	r3, 800a7d4 <_strtod_l+0x914>
 800a7a4:	f7ff fb6b 	bl	8009e7e <sulp>
 800a7a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a7ac:	ec53 2b10 	vmov	r2, r3, d0
 800a7b0:	f7f5 fd9c 	bl	80002ec <__adddf3>
 800a7b4:	4682      	mov	sl, r0
 800a7b6:	468b      	mov	fp, r1
 800a7b8:	e7de      	b.n	800a778 <_strtod_l+0x8b8>
 800a7ba:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a7be:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a7c2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a7c6:	f04f 3aff 	mov.w	sl, #4294967295
 800a7ca:	e7d5      	b.n	800a778 <_strtod_l+0x8b8>
 800a7cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a7ce:	ea13 0f0a 	tst.w	r3, sl
 800a7d2:	e7e1      	b.n	800a798 <_strtod_l+0x8d8>
 800a7d4:	f7ff fb53 	bl	8009e7e <sulp>
 800a7d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a7dc:	ec53 2b10 	vmov	r2, r3, d0
 800a7e0:	f7f5 fd82 	bl	80002e8 <__aeabi_dsub>
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	4682      	mov	sl, r0
 800a7ea:	468b      	mov	fp, r1
 800a7ec:	f7f6 f99c 	bl	8000b28 <__aeabi_dcmpeq>
 800a7f0:	2800      	cmp	r0, #0
 800a7f2:	d0c1      	beq.n	800a778 <_strtod_l+0x8b8>
 800a7f4:	e619      	b.n	800a42a <_strtod_l+0x56a>
 800a7f6:	4641      	mov	r1, r8
 800a7f8:	4620      	mov	r0, r4
 800a7fa:	f001 fc2f 	bl	800c05c <__ratio>
 800a7fe:	ec57 6b10 	vmov	r6, r7, d0
 800a802:	2200      	movs	r2, #0
 800a804:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a808:	4630      	mov	r0, r6
 800a80a:	4639      	mov	r1, r7
 800a80c:	f7f6 f9a0 	bl	8000b50 <__aeabi_dcmple>
 800a810:	2800      	cmp	r0, #0
 800a812:	d06f      	beq.n	800a8f4 <_strtod_l+0xa34>
 800a814:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a816:	2b00      	cmp	r3, #0
 800a818:	d17a      	bne.n	800a910 <_strtod_l+0xa50>
 800a81a:	f1ba 0f00 	cmp.w	sl, #0
 800a81e:	d158      	bne.n	800a8d2 <_strtod_l+0xa12>
 800a820:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a822:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a826:	2b00      	cmp	r3, #0
 800a828:	d15a      	bne.n	800a8e0 <_strtod_l+0xa20>
 800a82a:	4b64      	ldr	r3, [pc, #400]	@ (800a9bc <_strtod_l+0xafc>)
 800a82c:	2200      	movs	r2, #0
 800a82e:	4630      	mov	r0, r6
 800a830:	4639      	mov	r1, r7
 800a832:	f7f6 f983 	bl	8000b3c <__aeabi_dcmplt>
 800a836:	2800      	cmp	r0, #0
 800a838:	d159      	bne.n	800a8ee <_strtod_l+0xa2e>
 800a83a:	4630      	mov	r0, r6
 800a83c:	4639      	mov	r1, r7
 800a83e:	4b60      	ldr	r3, [pc, #384]	@ (800a9c0 <_strtod_l+0xb00>)
 800a840:	2200      	movs	r2, #0
 800a842:	f7f5 ff09 	bl	8000658 <__aeabi_dmul>
 800a846:	4606      	mov	r6, r0
 800a848:	460f      	mov	r7, r1
 800a84a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a84e:	9606      	str	r6, [sp, #24]
 800a850:	9307      	str	r3, [sp, #28]
 800a852:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a856:	4d57      	ldr	r5, [pc, #348]	@ (800a9b4 <_strtod_l+0xaf4>)
 800a858:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a85c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a85e:	401d      	ands	r5, r3
 800a860:	4b58      	ldr	r3, [pc, #352]	@ (800a9c4 <_strtod_l+0xb04>)
 800a862:	429d      	cmp	r5, r3
 800a864:	f040 80b2 	bne.w	800a9cc <_strtod_l+0xb0c>
 800a868:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a86a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a86e:	ec4b ab10 	vmov	d0, sl, fp
 800a872:	f001 fb2b 	bl	800becc <__ulp>
 800a876:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a87a:	ec51 0b10 	vmov	r0, r1, d0
 800a87e:	f7f5 feeb 	bl	8000658 <__aeabi_dmul>
 800a882:	4652      	mov	r2, sl
 800a884:	465b      	mov	r3, fp
 800a886:	f7f5 fd31 	bl	80002ec <__adddf3>
 800a88a:	460b      	mov	r3, r1
 800a88c:	4949      	ldr	r1, [pc, #292]	@ (800a9b4 <_strtod_l+0xaf4>)
 800a88e:	4a4e      	ldr	r2, [pc, #312]	@ (800a9c8 <_strtod_l+0xb08>)
 800a890:	4019      	ands	r1, r3
 800a892:	4291      	cmp	r1, r2
 800a894:	4682      	mov	sl, r0
 800a896:	d942      	bls.n	800a91e <_strtod_l+0xa5e>
 800a898:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a89a:	4b47      	ldr	r3, [pc, #284]	@ (800a9b8 <_strtod_l+0xaf8>)
 800a89c:	429a      	cmp	r2, r3
 800a89e:	d103      	bne.n	800a8a8 <_strtod_l+0x9e8>
 800a8a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a8a2:	3301      	adds	r3, #1
 800a8a4:	f43f ad2b 	beq.w	800a2fe <_strtod_l+0x43e>
 800a8a8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a9b8 <_strtod_l+0xaf8>
 800a8ac:	f04f 3aff 	mov.w	sl, #4294967295
 800a8b0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a8b2:	9805      	ldr	r0, [sp, #20]
 800a8b4:	f000 ffd6 	bl	800b864 <_Bfree>
 800a8b8:	9805      	ldr	r0, [sp, #20]
 800a8ba:	4649      	mov	r1, r9
 800a8bc:	f000 ffd2 	bl	800b864 <_Bfree>
 800a8c0:	9805      	ldr	r0, [sp, #20]
 800a8c2:	4641      	mov	r1, r8
 800a8c4:	f000 ffce 	bl	800b864 <_Bfree>
 800a8c8:	9805      	ldr	r0, [sp, #20]
 800a8ca:	4621      	mov	r1, r4
 800a8cc:	f000 ffca 	bl	800b864 <_Bfree>
 800a8d0:	e618      	b.n	800a504 <_strtod_l+0x644>
 800a8d2:	f1ba 0f01 	cmp.w	sl, #1
 800a8d6:	d103      	bne.n	800a8e0 <_strtod_l+0xa20>
 800a8d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	f43f ada5 	beq.w	800a42a <_strtod_l+0x56a>
 800a8e0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800a990 <_strtod_l+0xad0>
 800a8e4:	4f35      	ldr	r7, [pc, #212]	@ (800a9bc <_strtod_l+0xafc>)
 800a8e6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a8ea:	2600      	movs	r6, #0
 800a8ec:	e7b1      	b.n	800a852 <_strtod_l+0x992>
 800a8ee:	4f34      	ldr	r7, [pc, #208]	@ (800a9c0 <_strtod_l+0xb00>)
 800a8f0:	2600      	movs	r6, #0
 800a8f2:	e7aa      	b.n	800a84a <_strtod_l+0x98a>
 800a8f4:	4b32      	ldr	r3, [pc, #200]	@ (800a9c0 <_strtod_l+0xb00>)
 800a8f6:	4630      	mov	r0, r6
 800a8f8:	4639      	mov	r1, r7
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	f7f5 feac 	bl	8000658 <__aeabi_dmul>
 800a900:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a902:	4606      	mov	r6, r0
 800a904:	460f      	mov	r7, r1
 800a906:	2b00      	cmp	r3, #0
 800a908:	d09f      	beq.n	800a84a <_strtod_l+0x98a>
 800a90a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a90e:	e7a0      	b.n	800a852 <_strtod_l+0x992>
 800a910:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a998 <_strtod_l+0xad8>
 800a914:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a918:	ec57 6b17 	vmov	r6, r7, d7
 800a91c:	e799      	b.n	800a852 <_strtod_l+0x992>
 800a91e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a922:	9b08      	ldr	r3, [sp, #32]
 800a924:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d1c1      	bne.n	800a8b0 <_strtod_l+0x9f0>
 800a92c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a930:	0d1b      	lsrs	r3, r3, #20
 800a932:	051b      	lsls	r3, r3, #20
 800a934:	429d      	cmp	r5, r3
 800a936:	d1bb      	bne.n	800a8b0 <_strtod_l+0x9f0>
 800a938:	4630      	mov	r0, r6
 800a93a:	4639      	mov	r1, r7
 800a93c:	f7f6 f95e 	bl	8000bfc <__aeabi_d2lz>
 800a940:	f7f5 fe5c 	bl	80005fc <__aeabi_l2d>
 800a944:	4602      	mov	r2, r0
 800a946:	460b      	mov	r3, r1
 800a948:	4630      	mov	r0, r6
 800a94a:	4639      	mov	r1, r7
 800a94c:	f7f5 fccc 	bl	80002e8 <__aeabi_dsub>
 800a950:	460b      	mov	r3, r1
 800a952:	4602      	mov	r2, r0
 800a954:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a958:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a95c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a95e:	ea46 060a 	orr.w	r6, r6, sl
 800a962:	431e      	orrs	r6, r3
 800a964:	d06f      	beq.n	800aa46 <_strtod_l+0xb86>
 800a966:	a30e      	add	r3, pc, #56	@ (adr r3, 800a9a0 <_strtod_l+0xae0>)
 800a968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a96c:	f7f6 f8e6 	bl	8000b3c <__aeabi_dcmplt>
 800a970:	2800      	cmp	r0, #0
 800a972:	f47f accf 	bne.w	800a314 <_strtod_l+0x454>
 800a976:	a30c      	add	r3, pc, #48	@ (adr r3, 800a9a8 <_strtod_l+0xae8>)
 800a978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a97c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a980:	f7f6 f8fa 	bl	8000b78 <__aeabi_dcmpgt>
 800a984:	2800      	cmp	r0, #0
 800a986:	d093      	beq.n	800a8b0 <_strtod_l+0x9f0>
 800a988:	e4c4      	b.n	800a314 <_strtod_l+0x454>
 800a98a:	bf00      	nop
 800a98c:	f3af 8000 	nop.w
 800a990:	00000000 	.word	0x00000000
 800a994:	bff00000 	.word	0xbff00000
 800a998:	00000000 	.word	0x00000000
 800a99c:	3ff00000 	.word	0x3ff00000
 800a9a0:	94a03595 	.word	0x94a03595
 800a9a4:	3fdfffff 	.word	0x3fdfffff
 800a9a8:	35afe535 	.word	0x35afe535
 800a9ac:	3fe00000 	.word	0x3fe00000
 800a9b0:	000fffff 	.word	0x000fffff
 800a9b4:	7ff00000 	.word	0x7ff00000
 800a9b8:	7fefffff 	.word	0x7fefffff
 800a9bc:	3ff00000 	.word	0x3ff00000
 800a9c0:	3fe00000 	.word	0x3fe00000
 800a9c4:	7fe00000 	.word	0x7fe00000
 800a9c8:	7c9fffff 	.word	0x7c9fffff
 800a9cc:	9b08      	ldr	r3, [sp, #32]
 800a9ce:	b323      	cbz	r3, 800aa1a <_strtod_l+0xb5a>
 800a9d0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a9d4:	d821      	bhi.n	800aa1a <_strtod_l+0xb5a>
 800a9d6:	a328      	add	r3, pc, #160	@ (adr r3, 800aa78 <_strtod_l+0xbb8>)
 800a9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9dc:	4630      	mov	r0, r6
 800a9de:	4639      	mov	r1, r7
 800a9e0:	f7f6 f8b6 	bl	8000b50 <__aeabi_dcmple>
 800a9e4:	b1a0      	cbz	r0, 800aa10 <_strtod_l+0xb50>
 800a9e6:	4639      	mov	r1, r7
 800a9e8:	4630      	mov	r0, r6
 800a9ea:	f7f6 f8cf 	bl	8000b8c <__aeabi_d2uiz>
 800a9ee:	2801      	cmp	r0, #1
 800a9f0:	bf38      	it	cc
 800a9f2:	2001      	movcc	r0, #1
 800a9f4:	f7f5 fdb6 	bl	8000564 <__aeabi_ui2d>
 800a9f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a9fa:	4606      	mov	r6, r0
 800a9fc:	460f      	mov	r7, r1
 800a9fe:	b9fb      	cbnz	r3, 800aa40 <_strtod_l+0xb80>
 800aa00:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800aa04:	9014      	str	r0, [sp, #80]	@ 0x50
 800aa06:	9315      	str	r3, [sp, #84]	@ 0x54
 800aa08:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800aa0c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800aa10:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800aa12:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800aa16:	1b5b      	subs	r3, r3, r5
 800aa18:	9311      	str	r3, [sp, #68]	@ 0x44
 800aa1a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800aa1e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800aa22:	f001 fa53 	bl	800becc <__ulp>
 800aa26:	4650      	mov	r0, sl
 800aa28:	ec53 2b10 	vmov	r2, r3, d0
 800aa2c:	4659      	mov	r1, fp
 800aa2e:	f7f5 fe13 	bl	8000658 <__aeabi_dmul>
 800aa32:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800aa36:	f7f5 fc59 	bl	80002ec <__adddf3>
 800aa3a:	4682      	mov	sl, r0
 800aa3c:	468b      	mov	fp, r1
 800aa3e:	e770      	b.n	800a922 <_strtod_l+0xa62>
 800aa40:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800aa44:	e7e0      	b.n	800aa08 <_strtod_l+0xb48>
 800aa46:	a30e      	add	r3, pc, #56	@ (adr r3, 800aa80 <_strtod_l+0xbc0>)
 800aa48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa4c:	f7f6 f876 	bl	8000b3c <__aeabi_dcmplt>
 800aa50:	e798      	b.n	800a984 <_strtod_l+0xac4>
 800aa52:	2300      	movs	r3, #0
 800aa54:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aa56:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800aa58:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aa5a:	6013      	str	r3, [r2, #0]
 800aa5c:	f7ff ba6d 	b.w	8009f3a <_strtod_l+0x7a>
 800aa60:	2a65      	cmp	r2, #101	@ 0x65
 800aa62:	f43f ab66 	beq.w	800a132 <_strtod_l+0x272>
 800aa66:	2a45      	cmp	r2, #69	@ 0x45
 800aa68:	f43f ab63 	beq.w	800a132 <_strtod_l+0x272>
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	f7ff bb9e 	b.w	800a1ae <_strtod_l+0x2ee>
 800aa72:	bf00      	nop
 800aa74:	f3af 8000 	nop.w
 800aa78:	ffc00000 	.word	0xffc00000
 800aa7c:	41dfffff 	.word	0x41dfffff
 800aa80:	94a03595 	.word	0x94a03595
 800aa84:	3fcfffff 	.word	0x3fcfffff

0800aa88 <strtod>:
 800aa88:	460a      	mov	r2, r1
 800aa8a:	4601      	mov	r1, r0
 800aa8c:	4802      	ldr	r0, [pc, #8]	@ (800aa98 <strtod+0x10>)
 800aa8e:	4b03      	ldr	r3, [pc, #12]	@ (800aa9c <strtod+0x14>)
 800aa90:	6800      	ldr	r0, [r0, #0]
 800aa92:	f7ff ba15 	b.w	8009ec0 <_strtod_l>
 800aa96:	bf00      	nop
 800aa98:	20000188 	.word	0x20000188
 800aa9c:	2000001c 	.word	0x2000001c

0800aaa0 <std>:
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	b510      	push	{r4, lr}
 800aaa4:	4604      	mov	r4, r0
 800aaa6:	e9c0 3300 	strd	r3, r3, [r0]
 800aaaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aaae:	6083      	str	r3, [r0, #8]
 800aab0:	8181      	strh	r1, [r0, #12]
 800aab2:	6643      	str	r3, [r0, #100]	@ 0x64
 800aab4:	81c2      	strh	r2, [r0, #14]
 800aab6:	6183      	str	r3, [r0, #24]
 800aab8:	4619      	mov	r1, r3
 800aaba:	2208      	movs	r2, #8
 800aabc:	305c      	adds	r0, #92	@ 0x5c
 800aabe:	f000 f924 	bl	800ad0a <memset>
 800aac2:	4b0d      	ldr	r3, [pc, #52]	@ (800aaf8 <std+0x58>)
 800aac4:	6263      	str	r3, [r4, #36]	@ 0x24
 800aac6:	4b0d      	ldr	r3, [pc, #52]	@ (800aafc <std+0x5c>)
 800aac8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800aaca:	4b0d      	ldr	r3, [pc, #52]	@ (800ab00 <std+0x60>)
 800aacc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800aace:	4b0d      	ldr	r3, [pc, #52]	@ (800ab04 <std+0x64>)
 800aad0:	6323      	str	r3, [r4, #48]	@ 0x30
 800aad2:	4b0d      	ldr	r3, [pc, #52]	@ (800ab08 <std+0x68>)
 800aad4:	6224      	str	r4, [r4, #32]
 800aad6:	429c      	cmp	r4, r3
 800aad8:	d006      	beq.n	800aae8 <std+0x48>
 800aada:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800aade:	4294      	cmp	r4, r2
 800aae0:	d002      	beq.n	800aae8 <std+0x48>
 800aae2:	33d0      	adds	r3, #208	@ 0xd0
 800aae4:	429c      	cmp	r4, r3
 800aae6:	d105      	bne.n	800aaf4 <std+0x54>
 800aae8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800aaec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aaf0:	f000 b9f2 	b.w	800aed8 <__retarget_lock_init_recursive>
 800aaf4:	bd10      	pop	{r4, pc}
 800aaf6:	bf00      	nop
 800aaf8:	0800ac65 	.word	0x0800ac65
 800aafc:	0800ac87 	.word	0x0800ac87
 800ab00:	0800acbf 	.word	0x0800acbf
 800ab04:	0800ace3 	.word	0x0800ace3
 800ab08:	20001fb4 	.word	0x20001fb4

0800ab0c <stdio_exit_handler>:
 800ab0c:	4a02      	ldr	r2, [pc, #8]	@ (800ab18 <stdio_exit_handler+0xc>)
 800ab0e:	4903      	ldr	r1, [pc, #12]	@ (800ab1c <stdio_exit_handler+0x10>)
 800ab10:	4803      	ldr	r0, [pc, #12]	@ (800ab20 <stdio_exit_handler+0x14>)
 800ab12:	f000 b869 	b.w	800abe8 <_fwalk_sglue>
 800ab16:	bf00      	nop
 800ab18:	20000010 	.word	0x20000010
 800ab1c:	0800c835 	.word	0x0800c835
 800ab20:	2000018c 	.word	0x2000018c

0800ab24 <cleanup_stdio>:
 800ab24:	6841      	ldr	r1, [r0, #4]
 800ab26:	4b0c      	ldr	r3, [pc, #48]	@ (800ab58 <cleanup_stdio+0x34>)
 800ab28:	4299      	cmp	r1, r3
 800ab2a:	b510      	push	{r4, lr}
 800ab2c:	4604      	mov	r4, r0
 800ab2e:	d001      	beq.n	800ab34 <cleanup_stdio+0x10>
 800ab30:	f001 fe80 	bl	800c834 <_fflush_r>
 800ab34:	68a1      	ldr	r1, [r4, #8]
 800ab36:	4b09      	ldr	r3, [pc, #36]	@ (800ab5c <cleanup_stdio+0x38>)
 800ab38:	4299      	cmp	r1, r3
 800ab3a:	d002      	beq.n	800ab42 <cleanup_stdio+0x1e>
 800ab3c:	4620      	mov	r0, r4
 800ab3e:	f001 fe79 	bl	800c834 <_fflush_r>
 800ab42:	68e1      	ldr	r1, [r4, #12]
 800ab44:	4b06      	ldr	r3, [pc, #24]	@ (800ab60 <cleanup_stdio+0x3c>)
 800ab46:	4299      	cmp	r1, r3
 800ab48:	d004      	beq.n	800ab54 <cleanup_stdio+0x30>
 800ab4a:	4620      	mov	r0, r4
 800ab4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab50:	f001 be70 	b.w	800c834 <_fflush_r>
 800ab54:	bd10      	pop	{r4, pc}
 800ab56:	bf00      	nop
 800ab58:	20001fb4 	.word	0x20001fb4
 800ab5c:	2000201c 	.word	0x2000201c
 800ab60:	20002084 	.word	0x20002084

0800ab64 <global_stdio_init.part.0>:
 800ab64:	b510      	push	{r4, lr}
 800ab66:	4b0b      	ldr	r3, [pc, #44]	@ (800ab94 <global_stdio_init.part.0+0x30>)
 800ab68:	4c0b      	ldr	r4, [pc, #44]	@ (800ab98 <global_stdio_init.part.0+0x34>)
 800ab6a:	4a0c      	ldr	r2, [pc, #48]	@ (800ab9c <global_stdio_init.part.0+0x38>)
 800ab6c:	601a      	str	r2, [r3, #0]
 800ab6e:	4620      	mov	r0, r4
 800ab70:	2200      	movs	r2, #0
 800ab72:	2104      	movs	r1, #4
 800ab74:	f7ff ff94 	bl	800aaa0 <std>
 800ab78:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ab7c:	2201      	movs	r2, #1
 800ab7e:	2109      	movs	r1, #9
 800ab80:	f7ff ff8e 	bl	800aaa0 <std>
 800ab84:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ab88:	2202      	movs	r2, #2
 800ab8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab8e:	2112      	movs	r1, #18
 800ab90:	f7ff bf86 	b.w	800aaa0 <std>
 800ab94:	200020ec 	.word	0x200020ec
 800ab98:	20001fb4 	.word	0x20001fb4
 800ab9c:	0800ab0d 	.word	0x0800ab0d

0800aba0 <__sfp_lock_acquire>:
 800aba0:	4801      	ldr	r0, [pc, #4]	@ (800aba8 <__sfp_lock_acquire+0x8>)
 800aba2:	f000 b99a 	b.w	800aeda <__retarget_lock_acquire_recursive>
 800aba6:	bf00      	nop
 800aba8:	200020f5 	.word	0x200020f5

0800abac <__sfp_lock_release>:
 800abac:	4801      	ldr	r0, [pc, #4]	@ (800abb4 <__sfp_lock_release+0x8>)
 800abae:	f000 b995 	b.w	800aedc <__retarget_lock_release_recursive>
 800abb2:	bf00      	nop
 800abb4:	200020f5 	.word	0x200020f5

0800abb8 <__sinit>:
 800abb8:	b510      	push	{r4, lr}
 800abba:	4604      	mov	r4, r0
 800abbc:	f7ff fff0 	bl	800aba0 <__sfp_lock_acquire>
 800abc0:	6a23      	ldr	r3, [r4, #32]
 800abc2:	b11b      	cbz	r3, 800abcc <__sinit+0x14>
 800abc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abc8:	f7ff bff0 	b.w	800abac <__sfp_lock_release>
 800abcc:	4b04      	ldr	r3, [pc, #16]	@ (800abe0 <__sinit+0x28>)
 800abce:	6223      	str	r3, [r4, #32]
 800abd0:	4b04      	ldr	r3, [pc, #16]	@ (800abe4 <__sinit+0x2c>)
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d1f5      	bne.n	800abc4 <__sinit+0xc>
 800abd8:	f7ff ffc4 	bl	800ab64 <global_stdio_init.part.0>
 800abdc:	e7f2      	b.n	800abc4 <__sinit+0xc>
 800abde:	bf00      	nop
 800abe0:	0800ab25 	.word	0x0800ab25
 800abe4:	200020ec 	.word	0x200020ec

0800abe8 <_fwalk_sglue>:
 800abe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abec:	4607      	mov	r7, r0
 800abee:	4688      	mov	r8, r1
 800abf0:	4614      	mov	r4, r2
 800abf2:	2600      	movs	r6, #0
 800abf4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800abf8:	f1b9 0901 	subs.w	r9, r9, #1
 800abfc:	d505      	bpl.n	800ac0a <_fwalk_sglue+0x22>
 800abfe:	6824      	ldr	r4, [r4, #0]
 800ac00:	2c00      	cmp	r4, #0
 800ac02:	d1f7      	bne.n	800abf4 <_fwalk_sglue+0xc>
 800ac04:	4630      	mov	r0, r6
 800ac06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac0a:	89ab      	ldrh	r3, [r5, #12]
 800ac0c:	2b01      	cmp	r3, #1
 800ac0e:	d907      	bls.n	800ac20 <_fwalk_sglue+0x38>
 800ac10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ac14:	3301      	adds	r3, #1
 800ac16:	d003      	beq.n	800ac20 <_fwalk_sglue+0x38>
 800ac18:	4629      	mov	r1, r5
 800ac1a:	4638      	mov	r0, r7
 800ac1c:	47c0      	blx	r8
 800ac1e:	4306      	orrs	r6, r0
 800ac20:	3568      	adds	r5, #104	@ 0x68
 800ac22:	e7e9      	b.n	800abf8 <_fwalk_sglue+0x10>

0800ac24 <siprintf>:
 800ac24:	b40e      	push	{r1, r2, r3}
 800ac26:	b500      	push	{lr}
 800ac28:	b09c      	sub	sp, #112	@ 0x70
 800ac2a:	ab1d      	add	r3, sp, #116	@ 0x74
 800ac2c:	9002      	str	r0, [sp, #8]
 800ac2e:	9006      	str	r0, [sp, #24]
 800ac30:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ac34:	4809      	ldr	r0, [pc, #36]	@ (800ac5c <siprintf+0x38>)
 800ac36:	9107      	str	r1, [sp, #28]
 800ac38:	9104      	str	r1, [sp, #16]
 800ac3a:	4909      	ldr	r1, [pc, #36]	@ (800ac60 <siprintf+0x3c>)
 800ac3c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac40:	9105      	str	r1, [sp, #20]
 800ac42:	6800      	ldr	r0, [r0, #0]
 800ac44:	9301      	str	r3, [sp, #4]
 800ac46:	a902      	add	r1, sp, #8
 800ac48:	f001 fae6 	bl	800c218 <_svfiprintf_r>
 800ac4c:	9b02      	ldr	r3, [sp, #8]
 800ac4e:	2200      	movs	r2, #0
 800ac50:	701a      	strb	r2, [r3, #0]
 800ac52:	b01c      	add	sp, #112	@ 0x70
 800ac54:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac58:	b003      	add	sp, #12
 800ac5a:	4770      	bx	lr
 800ac5c:	20000188 	.word	0x20000188
 800ac60:	ffff0208 	.word	0xffff0208

0800ac64 <__sread>:
 800ac64:	b510      	push	{r4, lr}
 800ac66:	460c      	mov	r4, r1
 800ac68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac6c:	f000 f8e6 	bl	800ae3c <_read_r>
 800ac70:	2800      	cmp	r0, #0
 800ac72:	bfab      	itete	ge
 800ac74:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ac76:	89a3      	ldrhlt	r3, [r4, #12]
 800ac78:	181b      	addge	r3, r3, r0
 800ac7a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ac7e:	bfac      	ite	ge
 800ac80:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ac82:	81a3      	strhlt	r3, [r4, #12]
 800ac84:	bd10      	pop	{r4, pc}

0800ac86 <__swrite>:
 800ac86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac8a:	461f      	mov	r7, r3
 800ac8c:	898b      	ldrh	r3, [r1, #12]
 800ac8e:	05db      	lsls	r3, r3, #23
 800ac90:	4605      	mov	r5, r0
 800ac92:	460c      	mov	r4, r1
 800ac94:	4616      	mov	r6, r2
 800ac96:	d505      	bpl.n	800aca4 <__swrite+0x1e>
 800ac98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac9c:	2302      	movs	r3, #2
 800ac9e:	2200      	movs	r2, #0
 800aca0:	f000 f8ba 	bl	800ae18 <_lseek_r>
 800aca4:	89a3      	ldrh	r3, [r4, #12]
 800aca6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800acaa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800acae:	81a3      	strh	r3, [r4, #12]
 800acb0:	4632      	mov	r2, r6
 800acb2:	463b      	mov	r3, r7
 800acb4:	4628      	mov	r0, r5
 800acb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800acba:	f000 b8d1 	b.w	800ae60 <_write_r>

0800acbe <__sseek>:
 800acbe:	b510      	push	{r4, lr}
 800acc0:	460c      	mov	r4, r1
 800acc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acc6:	f000 f8a7 	bl	800ae18 <_lseek_r>
 800acca:	1c43      	adds	r3, r0, #1
 800accc:	89a3      	ldrh	r3, [r4, #12]
 800acce:	bf15      	itete	ne
 800acd0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800acd2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800acd6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800acda:	81a3      	strheq	r3, [r4, #12]
 800acdc:	bf18      	it	ne
 800acde:	81a3      	strhne	r3, [r4, #12]
 800ace0:	bd10      	pop	{r4, pc}

0800ace2 <__sclose>:
 800ace2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ace6:	f000 b887 	b.w	800adf8 <_close_r>

0800acea <memcmp>:
 800acea:	b510      	push	{r4, lr}
 800acec:	3901      	subs	r1, #1
 800acee:	4402      	add	r2, r0
 800acf0:	4290      	cmp	r0, r2
 800acf2:	d101      	bne.n	800acf8 <memcmp+0xe>
 800acf4:	2000      	movs	r0, #0
 800acf6:	e005      	b.n	800ad04 <memcmp+0x1a>
 800acf8:	7803      	ldrb	r3, [r0, #0]
 800acfa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800acfe:	42a3      	cmp	r3, r4
 800ad00:	d001      	beq.n	800ad06 <memcmp+0x1c>
 800ad02:	1b18      	subs	r0, r3, r4
 800ad04:	bd10      	pop	{r4, pc}
 800ad06:	3001      	adds	r0, #1
 800ad08:	e7f2      	b.n	800acf0 <memcmp+0x6>

0800ad0a <memset>:
 800ad0a:	4402      	add	r2, r0
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	4293      	cmp	r3, r2
 800ad10:	d100      	bne.n	800ad14 <memset+0xa>
 800ad12:	4770      	bx	lr
 800ad14:	f803 1b01 	strb.w	r1, [r3], #1
 800ad18:	e7f9      	b.n	800ad0e <memset+0x4>

0800ad1a <strncmp>:
 800ad1a:	b510      	push	{r4, lr}
 800ad1c:	b16a      	cbz	r2, 800ad3a <strncmp+0x20>
 800ad1e:	3901      	subs	r1, #1
 800ad20:	1884      	adds	r4, r0, r2
 800ad22:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad26:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ad2a:	429a      	cmp	r2, r3
 800ad2c:	d103      	bne.n	800ad36 <strncmp+0x1c>
 800ad2e:	42a0      	cmp	r0, r4
 800ad30:	d001      	beq.n	800ad36 <strncmp+0x1c>
 800ad32:	2a00      	cmp	r2, #0
 800ad34:	d1f5      	bne.n	800ad22 <strncmp+0x8>
 800ad36:	1ad0      	subs	r0, r2, r3
 800ad38:	bd10      	pop	{r4, pc}
 800ad3a:	4610      	mov	r0, r2
 800ad3c:	e7fc      	b.n	800ad38 <strncmp+0x1e>
	...

0800ad40 <strtok>:
 800ad40:	4b16      	ldr	r3, [pc, #88]	@ (800ad9c <strtok+0x5c>)
 800ad42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad46:	681f      	ldr	r7, [r3, #0]
 800ad48:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800ad4a:	4605      	mov	r5, r0
 800ad4c:	460e      	mov	r6, r1
 800ad4e:	b9ec      	cbnz	r4, 800ad8c <strtok+0x4c>
 800ad50:	2050      	movs	r0, #80	@ 0x50
 800ad52:	f000 fc7f 	bl	800b654 <malloc>
 800ad56:	4602      	mov	r2, r0
 800ad58:	6478      	str	r0, [r7, #68]	@ 0x44
 800ad5a:	b920      	cbnz	r0, 800ad66 <strtok+0x26>
 800ad5c:	4b10      	ldr	r3, [pc, #64]	@ (800ada0 <strtok+0x60>)
 800ad5e:	4811      	ldr	r0, [pc, #68]	@ (800ada4 <strtok+0x64>)
 800ad60:	215b      	movs	r1, #91	@ 0x5b
 800ad62:	f000 f8d5 	bl	800af10 <__assert_func>
 800ad66:	e9c0 4400 	strd	r4, r4, [r0]
 800ad6a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800ad6e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800ad72:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800ad76:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800ad7a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800ad7e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800ad82:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800ad86:	6184      	str	r4, [r0, #24]
 800ad88:	7704      	strb	r4, [r0, #28]
 800ad8a:	6244      	str	r4, [r0, #36]	@ 0x24
 800ad8c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ad8e:	4631      	mov	r1, r6
 800ad90:	4628      	mov	r0, r5
 800ad92:	2301      	movs	r3, #1
 800ad94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad98:	f000 b806 	b.w	800ada8 <__strtok_r>
 800ad9c:	20000188 	.word	0x20000188
 800ada0:	0800d068 	.word	0x0800d068
 800ada4:	0800d07f 	.word	0x0800d07f

0800ada8 <__strtok_r>:
 800ada8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800adaa:	4604      	mov	r4, r0
 800adac:	b908      	cbnz	r0, 800adb2 <__strtok_r+0xa>
 800adae:	6814      	ldr	r4, [r2, #0]
 800adb0:	b144      	cbz	r4, 800adc4 <__strtok_r+0x1c>
 800adb2:	4620      	mov	r0, r4
 800adb4:	f814 5b01 	ldrb.w	r5, [r4], #1
 800adb8:	460f      	mov	r7, r1
 800adba:	f817 6b01 	ldrb.w	r6, [r7], #1
 800adbe:	b91e      	cbnz	r6, 800adc8 <__strtok_r+0x20>
 800adc0:	b965      	cbnz	r5, 800addc <__strtok_r+0x34>
 800adc2:	6015      	str	r5, [r2, #0]
 800adc4:	2000      	movs	r0, #0
 800adc6:	e005      	b.n	800add4 <__strtok_r+0x2c>
 800adc8:	42b5      	cmp	r5, r6
 800adca:	d1f6      	bne.n	800adba <__strtok_r+0x12>
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d1f0      	bne.n	800adb2 <__strtok_r+0xa>
 800add0:	6014      	str	r4, [r2, #0]
 800add2:	7003      	strb	r3, [r0, #0]
 800add4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800add6:	461c      	mov	r4, r3
 800add8:	e00c      	b.n	800adf4 <__strtok_r+0x4c>
 800adda:	b915      	cbnz	r5, 800ade2 <__strtok_r+0x3a>
 800addc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ade0:	460e      	mov	r6, r1
 800ade2:	f816 5b01 	ldrb.w	r5, [r6], #1
 800ade6:	42ab      	cmp	r3, r5
 800ade8:	d1f7      	bne.n	800adda <__strtok_r+0x32>
 800adea:	2b00      	cmp	r3, #0
 800adec:	d0f3      	beq.n	800add6 <__strtok_r+0x2e>
 800adee:	2300      	movs	r3, #0
 800adf0:	f804 3c01 	strb.w	r3, [r4, #-1]
 800adf4:	6014      	str	r4, [r2, #0]
 800adf6:	e7ed      	b.n	800add4 <__strtok_r+0x2c>

0800adf8 <_close_r>:
 800adf8:	b538      	push	{r3, r4, r5, lr}
 800adfa:	4d06      	ldr	r5, [pc, #24]	@ (800ae14 <_close_r+0x1c>)
 800adfc:	2300      	movs	r3, #0
 800adfe:	4604      	mov	r4, r0
 800ae00:	4608      	mov	r0, r1
 800ae02:	602b      	str	r3, [r5, #0]
 800ae04:	f7f6 fb26 	bl	8001454 <_close>
 800ae08:	1c43      	adds	r3, r0, #1
 800ae0a:	d102      	bne.n	800ae12 <_close_r+0x1a>
 800ae0c:	682b      	ldr	r3, [r5, #0]
 800ae0e:	b103      	cbz	r3, 800ae12 <_close_r+0x1a>
 800ae10:	6023      	str	r3, [r4, #0]
 800ae12:	bd38      	pop	{r3, r4, r5, pc}
 800ae14:	200020f0 	.word	0x200020f0

0800ae18 <_lseek_r>:
 800ae18:	b538      	push	{r3, r4, r5, lr}
 800ae1a:	4d07      	ldr	r5, [pc, #28]	@ (800ae38 <_lseek_r+0x20>)
 800ae1c:	4604      	mov	r4, r0
 800ae1e:	4608      	mov	r0, r1
 800ae20:	4611      	mov	r1, r2
 800ae22:	2200      	movs	r2, #0
 800ae24:	602a      	str	r2, [r5, #0]
 800ae26:	461a      	mov	r2, r3
 800ae28:	f7f6 fb3b 	bl	80014a2 <_lseek>
 800ae2c:	1c43      	adds	r3, r0, #1
 800ae2e:	d102      	bne.n	800ae36 <_lseek_r+0x1e>
 800ae30:	682b      	ldr	r3, [r5, #0]
 800ae32:	b103      	cbz	r3, 800ae36 <_lseek_r+0x1e>
 800ae34:	6023      	str	r3, [r4, #0]
 800ae36:	bd38      	pop	{r3, r4, r5, pc}
 800ae38:	200020f0 	.word	0x200020f0

0800ae3c <_read_r>:
 800ae3c:	b538      	push	{r3, r4, r5, lr}
 800ae3e:	4d07      	ldr	r5, [pc, #28]	@ (800ae5c <_read_r+0x20>)
 800ae40:	4604      	mov	r4, r0
 800ae42:	4608      	mov	r0, r1
 800ae44:	4611      	mov	r1, r2
 800ae46:	2200      	movs	r2, #0
 800ae48:	602a      	str	r2, [r5, #0]
 800ae4a:	461a      	mov	r2, r3
 800ae4c:	f7f6 fac9 	bl	80013e2 <_read>
 800ae50:	1c43      	adds	r3, r0, #1
 800ae52:	d102      	bne.n	800ae5a <_read_r+0x1e>
 800ae54:	682b      	ldr	r3, [r5, #0]
 800ae56:	b103      	cbz	r3, 800ae5a <_read_r+0x1e>
 800ae58:	6023      	str	r3, [r4, #0]
 800ae5a:	bd38      	pop	{r3, r4, r5, pc}
 800ae5c:	200020f0 	.word	0x200020f0

0800ae60 <_write_r>:
 800ae60:	b538      	push	{r3, r4, r5, lr}
 800ae62:	4d07      	ldr	r5, [pc, #28]	@ (800ae80 <_write_r+0x20>)
 800ae64:	4604      	mov	r4, r0
 800ae66:	4608      	mov	r0, r1
 800ae68:	4611      	mov	r1, r2
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	602a      	str	r2, [r5, #0]
 800ae6e:	461a      	mov	r2, r3
 800ae70:	f7f6 fad4 	bl	800141c <_write>
 800ae74:	1c43      	adds	r3, r0, #1
 800ae76:	d102      	bne.n	800ae7e <_write_r+0x1e>
 800ae78:	682b      	ldr	r3, [r5, #0]
 800ae7a:	b103      	cbz	r3, 800ae7e <_write_r+0x1e>
 800ae7c:	6023      	str	r3, [r4, #0]
 800ae7e:	bd38      	pop	{r3, r4, r5, pc}
 800ae80:	200020f0 	.word	0x200020f0

0800ae84 <__errno>:
 800ae84:	4b01      	ldr	r3, [pc, #4]	@ (800ae8c <__errno+0x8>)
 800ae86:	6818      	ldr	r0, [r3, #0]
 800ae88:	4770      	bx	lr
 800ae8a:	bf00      	nop
 800ae8c:	20000188 	.word	0x20000188

0800ae90 <__libc_init_array>:
 800ae90:	b570      	push	{r4, r5, r6, lr}
 800ae92:	4d0d      	ldr	r5, [pc, #52]	@ (800aec8 <__libc_init_array+0x38>)
 800ae94:	4c0d      	ldr	r4, [pc, #52]	@ (800aecc <__libc_init_array+0x3c>)
 800ae96:	1b64      	subs	r4, r4, r5
 800ae98:	10a4      	asrs	r4, r4, #2
 800ae9a:	2600      	movs	r6, #0
 800ae9c:	42a6      	cmp	r6, r4
 800ae9e:	d109      	bne.n	800aeb4 <__libc_init_array+0x24>
 800aea0:	4d0b      	ldr	r5, [pc, #44]	@ (800aed0 <__libc_init_array+0x40>)
 800aea2:	4c0c      	ldr	r4, [pc, #48]	@ (800aed4 <__libc_init_array+0x44>)
 800aea4:	f002 f818 	bl	800ced8 <_init>
 800aea8:	1b64      	subs	r4, r4, r5
 800aeaa:	10a4      	asrs	r4, r4, #2
 800aeac:	2600      	movs	r6, #0
 800aeae:	42a6      	cmp	r6, r4
 800aeb0:	d105      	bne.n	800aebe <__libc_init_array+0x2e>
 800aeb2:	bd70      	pop	{r4, r5, r6, pc}
 800aeb4:	f855 3b04 	ldr.w	r3, [r5], #4
 800aeb8:	4798      	blx	r3
 800aeba:	3601      	adds	r6, #1
 800aebc:	e7ee      	b.n	800ae9c <__libc_init_array+0xc>
 800aebe:	f855 3b04 	ldr.w	r3, [r5], #4
 800aec2:	4798      	blx	r3
 800aec4:	3601      	adds	r6, #1
 800aec6:	e7f2      	b.n	800aeae <__libc_init_array+0x1e>
 800aec8:	0800d424 	.word	0x0800d424
 800aecc:	0800d424 	.word	0x0800d424
 800aed0:	0800d424 	.word	0x0800d424
 800aed4:	0800d428 	.word	0x0800d428

0800aed8 <__retarget_lock_init_recursive>:
 800aed8:	4770      	bx	lr

0800aeda <__retarget_lock_acquire_recursive>:
 800aeda:	4770      	bx	lr

0800aedc <__retarget_lock_release_recursive>:
 800aedc:	4770      	bx	lr

0800aede <memcpy>:
 800aede:	440a      	add	r2, r1
 800aee0:	4291      	cmp	r1, r2
 800aee2:	f100 33ff 	add.w	r3, r0, #4294967295
 800aee6:	d100      	bne.n	800aeea <memcpy+0xc>
 800aee8:	4770      	bx	lr
 800aeea:	b510      	push	{r4, lr}
 800aeec:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aef0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aef4:	4291      	cmp	r1, r2
 800aef6:	d1f9      	bne.n	800aeec <memcpy+0xe>
 800aef8:	bd10      	pop	{r4, pc}
 800aefa:	0000      	movs	r0, r0
 800aefc:	0000      	movs	r0, r0
	...

0800af00 <nan>:
 800af00:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800af08 <nan+0x8>
 800af04:	4770      	bx	lr
 800af06:	bf00      	nop
 800af08:	00000000 	.word	0x00000000
 800af0c:	7ff80000 	.word	0x7ff80000

0800af10 <__assert_func>:
 800af10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800af12:	4614      	mov	r4, r2
 800af14:	461a      	mov	r2, r3
 800af16:	4b09      	ldr	r3, [pc, #36]	@ (800af3c <__assert_func+0x2c>)
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	4605      	mov	r5, r0
 800af1c:	68d8      	ldr	r0, [r3, #12]
 800af1e:	b954      	cbnz	r4, 800af36 <__assert_func+0x26>
 800af20:	4b07      	ldr	r3, [pc, #28]	@ (800af40 <__assert_func+0x30>)
 800af22:	461c      	mov	r4, r3
 800af24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800af28:	9100      	str	r1, [sp, #0]
 800af2a:	462b      	mov	r3, r5
 800af2c:	4905      	ldr	r1, [pc, #20]	@ (800af44 <__assert_func+0x34>)
 800af2e:	f001 fca9 	bl	800c884 <fiprintf>
 800af32:	f001 fce3 	bl	800c8fc <abort>
 800af36:	4b04      	ldr	r3, [pc, #16]	@ (800af48 <__assert_func+0x38>)
 800af38:	e7f4      	b.n	800af24 <__assert_func+0x14>
 800af3a:	bf00      	nop
 800af3c:	20000188 	.word	0x20000188
 800af40:	0800d11c 	.word	0x0800d11c
 800af44:	0800d0ee 	.word	0x0800d0ee
 800af48:	0800d0e1 	.word	0x0800d0e1

0800af4c <_free_r>:
 800af4c:	b538      	push	{r3, r4, r5, lr}
 800af4e:	4605      	mov	r5, r0
 800af50:	2900      	cmp	r1, #0
 800af52:	d041      	beq.n	800afd8 <_free_r+0x8c>
 800af54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af58:	1f0c      	subs	r4, r1, #4
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	bfb8      	it	lt
 800af5e:	18e4      	addlt	r4, r4, r3
 800af60:	f000 fc34 	bl	800b7cc <__malloc_lock>
 800af64:	4a1d      	ldr	r2, [pc, #116]	@ (800afdc <_free_r+0x90>)
 800af66:	6813      	ldr	r3, [r2, #0]
 800af68:	b933      	cbnz	r3, 800af78 <_free_r+0x2c>
 800af6a:	6063      	str	r3, [r4, #4]
 800af6c:	6014      	str	r4, [r2, #0]
 800af6e:	4628      	mov	r0, r5
 800af70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af74:	f000 bc30 	b.w	800b7d8 <__malloc_unlock>
 800af78:	42a3      	cmp	r3, r4
 800af7a:	d908      	bls.n	800af8e <_free_r+0x42>
 800af7c:	6820      	ldr	r0, [r4, #0]
 800af7e:	1821      	adds	r1, r4, r0
 800af80:	428b      	cmp	r3, r1
 800af82:	bf01      	itttt	eq
 800af84:	6819      	ldreq	r1, [r3, #0]
 800af86:	685b      	ldreq	r3, [r3, #4]
 800af88:	1809      	addeq	r1, r1, r0
 800af8a:	6021      	streq	r1, [r4, #0]
 800af8c:	e7ed      	b.n	800af6a <_free_r+0x1e>
 800af8e:	461a      	mov	r2, r3
 800af90:	685b      	ldr	r3, [r3, #4]
 800af92:	b10b      	cbz	r3, 800af98 <_free_r+0x4c>
 800af94:	42a3      	cmp	r3, r4
 800af96:	d9fa      	bls.n	800af8e <_free_r+0x42>
 800af98:	6811      	ldr	r1, [r2, #0]
 800af9a:	1850      	adds	r0, r2, r1
 800af9c:	42a0      	cmp	r0, r4
 800af9e:	d10b      	bne.n	800afb8 <_free_r+0x6c>
 800afa0:	6820      	ldr	r0, [r4, #0]
 800afa2:	4401      	add	r1, r0
 800afa4:	1850      	adds	r0, r2, r1
 800afa6:	4283      	cmp	r3, r0
 800afa8:	6011      	str	r1, [r2, #0]
 800afaa:	d1e0      	bne.n	800af6e <_free_r+0x22>
 800afac:	6818      	ldr	r0, [r3, #0]
 800afae:	685b      	ldr	r3, [r3, #4]
 800afb0:	6053      	str	r3, [r2, #4]
 800afb2:	4408      	add	r0, r1
 800afb4:	6010      	str	r0, [r2, #0]
 800afb6:	e7da      	b.n	800af6e <_free_r+0x22>
 800afb8:	d902      	bls.n	800afc0 <_free_r+0x74>
 800afba:	230c      	movs	r3, #12
 800afbc:	602b      	str	r3, [r5, #0]
 800afbe:	e7d6      	b.n	800af6e <_free_r+0x22>
 800afc0:	6820      	ldr	r0, [r4, #0]
 800afc2:	1821      	adds	r1, r4, r0
 800afc4:	428b      	cmp	r3, r1
 800afc6:	bf04      	itt	eq
 800afc8:	6819      	ldreq	r1, [r3, #0]
 800afca:	685b      	ldreq	r3, [r3, #4]
 800afcc:	6063      	str	r3, [r4, #4]
 800afce:	bf04      	itt	eq
 800afd0:	1809      	addeq	r1, r1, r0
 800afd2:	6021      	streq	r1, [r4, #0]
 800afd4:	6054      	str	r4, [r2, #4]
 800afd6:	e7ca      	b.n	800af6e <_free_r+0x22>
 800afd8:	bd38      	pop	{r3, r4, r5, pc}
 800afda:	bf00      	nop
 800afdc:	200020fc 	.word	0x200020fc

0800afe0 <rshift>:
 800afe0:	6903      	ldr	r3, [r0, #16]
 800afe2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800afe6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800afea:	ea4f 1261 	mov.w	r2, r1, asr #5
 800afee:	f100 0414 	add.w	r4, r0, #20
 800aff2:	dd45      	ble.n	800b080 <rshift+0xa0>
 800aff4:	f011 011f 	ands.w	r1, r1, #31
 800aff8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800affc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b000:	d10c      	bne.n	800b01c <rshift+0x3c>
 800b002:	f100 0710 	add.w	r7, r0, #16
 800b006:	4629      	mov	r1, r5
 800b008:	42b1      	cmp	r1, r6
 800b00a:	d334      	bcc.n	800b076 <rshift+0x96>
 800b00c:	1a9b      	subs	r3, r3, r2
 800b00e:	009b      	lsls	r3, r3, #2
 800b010:	1eea      	subs	r2, r5, #3
 800b012:	4296      	cmp	r6, r2
 800b014:	bf38      	it	cc
 800b016:	2300      	movcc	r3, #0
 800b018:	4423      	add	r3, r4
 800b01a:	e015      	b.n	800b048 <rshift+0x68>
 800b01c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b020:	f1c1 0820 	rsb	r8, r1, #32
 800b024:	40cf      	lsrs	r7, r1
 800b026:	f105 0e04 	add.w	lr, r5, #4
 800b02a:	46a1      	mov	r9, r4
 800b02c:	4576      	cmp	r6, lr
 800b02e:	46f4      	mov	ip, lr
 800b030:	d815      	bhi.n	800b05e <rshift+0x7e>
 800b032:	1a9a      	subs	r2, r3, r2
 800b034:	0092      	lsls	r2, r2, #2
 800b036:	3a04      	subs	r2, #4
 800b038:	3501      	adds	r5, #1
 800b03a:	42ae      	cmp	r6, r5
 800b03c:	bf38      	it	cc
 800b03e:	2200      	movcc	r2, #0
 800b040:	18a3      	adds	r3, r4, r2
 800b042:	50a7      	str	r7, [r4, r2]
 800b044:	b107      	cbz	r7, 800b048 <rshift+0x68>
 800b046:	3304      	adds	r3, #4
 800b048:	1b1a      	subs	r2, r3, r4
 800b04a:	42a3      	cmp	r3, r4
 800b04c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b050:	bf08      	it	eq
 800b052:	2300      	moveq	r3, #0
 800b054:	6102      	str	r2, [r0, #16]
 800b056:	bf08      	it	eq
 800b058:	6143      	streq	r3, [r0, #20]
 800b05a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b05e:	f8dc c000 	ldr.w	ip, [ip]
 800b062:	fa0c fc08 	lsl.w	ip, ip, r8
 800b066:	ea4c 0707 	orr.w	r7, ip, r7
 800b06a:	f849 7b04 	str.w	r7, [r9], #4
 800b06e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b072:	40cf      	lsrs	r7, r1
 800b074:	e7da      	b.n	800b02c <rshift+0x4c>
 800b076:	f851 cb04 	ldr.w	ip, [r1], #4
 800b07a:	f847 cf04 	str.w	ip, [r7, #4]!
 800b07e:	e7c3      	b.n	800b008 <rshift+0x28>
 800b080:	4623      	mov	r3, r4
 800b082:	e7e1      	b.n	800b048 <rshift+0x68>

0800b084 <__hexdig_fun>:
 800b084:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b088:	2b09      	cmp	r3, #9
 800b08a:	d802      	bhi.n	800b092 <__hexdig_fun+0xe>
 800b08c:	3820      	subs	r0, #32
 800b08e:	b2c0      	uxtb	r0, r0
 800b090:	4770      	bx	lr
 800b092:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b096:	2b05      	cmp	r3, #5
 800b098:	d801      	bhi.n	800b09e <__hexdig_fun+0x1a>
 800b09a:	3847      	subs	r0, #71	@ 0x47
 800b09c:	e7f7      	b.n	800b08e <__hexdig_fun+0xa>
 800b09e:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b0a2:	2b05      	cmp	r3, #5
 800b0a4:	d801      	bhi.n	800b0aa <__hexdig_fun+0x26>
 800b0a6:	3827      	subs	r0, #39	@ 0x27
 800b0a8:	e7f1      	b.n	800b08e <__hexdig_fun+0xa>
 800b0aa:	2000      	movs	r0, #0
 800b0ac:	4770      	bx	lr
	...

0800b0b0 <__gethex>:
 800b0b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0b4:	b085      	sub	sp, #20
 800b0b6:	468a      	mov	sl, r1
 800b0b8:	9302      	str	r3, [sp, #8]
 800b0ba:	680b      	ldr	r3, [r1, #0]
 800b0bc:	9001      	str	r0, [sp, #4]
 800b0be:	4690      	mov	r8, r2
 800b0c0:	1c9c      	adds	r4, r3, #2
 800b0c2:	46a1      	mov	r9, r4
 800b0c4:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b0c8:	2830      	cmp	r0, #48	@ 0x30
 800b0ca:	d0fa      	beq.n	800b0c2 <__gethex+0x12>
 800b0cc:	eba9 0303 	sub.w	r3, r9, r3
 800b0d0:	f1a3 0b02 	sub.w	fp, r3, #2
 800b0d4:	f7ff ffd6 	bl	800b084 <__hexdig_fun>
 800b0d8:	4605      	mov	r5, r0
 800b0da:	2800      	cmp	r0, #0
 800b0dc:	d168      	bne.n	800b1b0 <__gethex+0x100>
 800b0de:	49a0      	ldr	r1, [pc, #640]	@ (800b360 <__gethex+0x2b0>)
 800b0e0:	2201      	movs	r2, #1
 800b0e2:	4648      	mov	r0, r9
 800b0e4:	f7ff fe19 	bl	800ad1a <strncmp>
 800b0e8:	4607      	mov	r7, r0
 800b0ea:	2800      	cmp	r0, #0
 800b0ec:	d167      	bne.n	800b1be <__gethex+0x10e>
 800b0ee:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b0f2:	4626      	mov	r6, r4
 800b0f4:	f7ff ffc6 	bl	800b084 <__hexdig_fun>
 800b0f8:	2800      	cmp	r0, #0
 800b0fa:	d062      	beq.n	800b1c2 <__gethex+0x112>
 800b0fc:	4623      	mov	r3, r4
 800b0fe:	7818      	ldrb	r0, [r3, #0]
 800b100:	2830      	cmp	r0, #48	@ 0x30
 800b102:	4699      	mov	r9, r3
 800b104:	f103 0301 	add.w	r3, r3, #1
 800b108:	d0f9      	beq.n	800b0fe <__gethex+0x4e>
 800b10a:	f7ff ffbb 	bl	800b084 <__hexdig_fun>
 800b10e:	fab0 f580 	clz	r5, r0
 800b112:	096d      	lsrs	r5, r5, #5
 800b114:	f04f 0b01 	mov.w	fp, #1
 800b118:	464a      	mov	r2, r9
 800b11a:	4616      	mov	r6, r2
 800b11c:	3201      	adds	r2, #1
 800b11e:	7830      	ldrb	r0, [r6, #0]
 800b120:	f7ff ffb0 	bl	800b084 <__hexdig_fun>
 800b124:	2800      	cmp	r0, #0
 800b126:	d1f8      	bne.n	800b11a <__gethex+0x6a>
 800b128:	498d      	ldr	r1, [pc, #564]	@ (800b360 <__gethex+0x2b0>)
 800b12a:	2201      	movs	r2, #1
 800b12c:	4630      	mov	r0, r6
 800b12e:	f7ff fdf4 	bl	800ad1a <strncmp>
 800b132:	2800      	cmp	r0, #0
 800b134:	d13f      	bne.n	800b1b6 <__gethex+0x106>
 800b136:	b944      	cbnz	r4, 800b14a <__gethex+0x9a>
 800b138:	1c74      	adds	r4, r6, #1
 800b13a:	4622      	mov	r2, r4
 800b13c:	4616      	mov	r6, r2
 800b13e:	3201      	adds	r2, #1
 800b140:	7830      	ldrb	r0, [r6, #0]
 800b142:	f7ff ff9f 	bl	800b084 <__hexdig_fun>
 800b146:	2800      	cmp	r0, #0
 800b148:	d1f8      	bne.n	800b13c <__gethex+0x8c>
 800b14a:	1ba4      	subs	r4, r4, r6
 800b14c:	00a7      	lsls	r7, r4, #2
 800b14e:	7833      	ldrb	r3, [r6, #0]
 800b150:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b154:	2b50      	cmp	r3, #80	@ 0x50
 800b156:	d13e      	bne.n	800b1d6 <__gethex+0x126>
 800b158:	7873      	ldrb	r3, [r6, #1]
 800b15a:	2b2b      	cmp	r3, #43	@ 0x2b
 800b15c:	d033      	beq.n	800b1c6 <__gethex+0x116>
 800b15e:	2b2d      	cmp	r3, #45	@ 0x2d
 800b160:	d034      	beq.n	800b1cc <__gethex+0x11c>
 800b162:	1c71      	adds	r1, r6, #1
 800b164:	2400      	movs	r4, #0
 800b166:	7808      	ldrb	r0, [r1, #0]
 800b168:	f7ff ff8c 	bl	800b084 <__hexdig_fun>
 800b16c:	1e43      	subs	r3, r0, #1
 800b16e:	b2db      	uxtb	r3, r3
 800b170:	2b18      	cmp	r3, #24
 800b172:	d830      	bhi.n	800b1d6 <__gethex+0x126>
 800b174:	f1a0 0210 	sub.w	r2, r0, #16
 800b178:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b17c:	f7ff ff82 	bl	800b084 <__hexdig_fun>
 800b180:	f100 3cff 	add.w	ip, r0, #4294967295
 800b184:	fa5f fc8c 	uxtb.w	ip, ip
 800b188:	f1bc 0f18 	cmp.w	ip, #24
 800b18c:	f04f 030a 	mov.w	r3, #10
 800b190:	d91e      	bls.n	800b1d0 <__gethex+0x120>
 800b192:	b104      	cbz	r4, 800b196 <__gethex+0xe6>
 800b194:	4252      	negs	r2, r2
 800b196:	4417      	add	r7, r2
 800b198:	f8ca 1000 	str.w	r1, [sl]
 800b19c:	b1ed      	cbz	r5, 800b1da <__gethex+0x12a>
 800b19e:	f1bb 0f00 	cmp.w	fp, #0
 800b1a2:	bf0c      	ite	eq
 800b1a4:	2506      	moveq	r5, #6
 800b1a6:	2500      	movne	r5, #0
 800b1a8:	4628      	mov	r0, r5
 800b1aa:	b005      	add	sp, #20
 800b1ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1b0:	2500      	movs	r5, #0
 800b1b2:	462c      	mov	r4, r5
 800b1b4:	e7b0      	b.n	800b118 <__gethex+0x68>
 800b1b6:	2c00      	cmp	r4, #0
 800b1b8:	d1c7      	bne.n	800b14a <__gethex+0x9a>
 800b1ba:	4627      	mov	r7, r4
 800b1bc:	e7c7      	b.n	800b14e <__gethex+0x9e>
 800b1be:	464e      	mov	r6, r9
 800b1c0:	462f      	mov	r7, r5
 800b1c2:	2501      	movs	r5, #1
 800b1c4:	e7c3      	b.n	800b14e <__gethex+0x9e>
 800b1c6:	2400      	movs	r4, #0
 800b1c8:	1cb1      	adds	r1, r6, #2
 800b1ca:	e7cc      	b.n	800b166 <__gethex+0xb6>
 800b1cc:	2401      	movs	r4, #1
 800b1ce:	e7fb      	b.n	800b1c8 <__gethex+0x118>
 800b1d0:	fb03 0002 	mla	r0, r3, r2, r0
 800b1d4:	e7ce      	b.n	800b174 <__gethex+0xc4>
 800b1d6:	4631      	mov	r1, r6
 800b1d8:	e7de      	b.n	800b198 <__gethex+0xe8>
 800b1da:	eba6 0309 	sub.w	r3, r6, r9
 800b1de:	3b01      	subs	r3, #1
 800b1e0:	4629      	mov	r1, r5
 800b1e2:	2b07      	cmp	r3, #7
 800b1e4:	dc0a      	bgt.n	800b1fc <__gethex+0x14c>
 800b1e6:	9801      	ldr	r0, [sp, #4]
 800b1e8:	f000 fafc 	bl	800b7e4 <_Balloc>
 800b1ec:	4604      	mov	r4, r0
 800b1ee:	b940      	cbnz	r0, 800b202 <__gethex+0x152>
 800b1f0:	4b5c      	ldr	r3, [pc, #368]	@ (800b364 <__gethex+0x2b4>)
 800b1f2:	4602      	mov	r2, r0
 800b1f4:	21e4      	movs	r1, #228	@ 0xe4
 800b1f6:	485c      	ldr	r0, [pc, #368]	@ (800b368 <__gethex+0x2b8>)
 800b1f8:	f7ff fe8a 	bl	800af10 <__assert_func>
 800b1fc:	3101      	adds	r1, #1
 800b1fe:	105b      	asrs	r3, r3, #1
 800b200:	e7ef      	b.n	800b1e2 <__gethex+0x132>
 800b202:	f100 0a14 	add.w	sl, r0, #20
 800b206:	2300      	movs	r3, #0
 800b208:	4655      	mov	r5, sl
 800b20a:	469b      	mov	fp, r3
 800b20c:	45b1      	cmp	r9, r6
 800b20e:	d337      	bcc.n	800b280 <__gethex+0x1d0>
 800b210:	f845 bb04 	str.w	fp, [r5], #4
 800b214:	eba5 050a 	sub.w	r5, r5, sl
 800b218:	10ad      	asrs	r5, r5, #2
 800b21a:	6125      	str	r5, [r4, #16]
 800b21c:	4658      	mov	r0, fp
 800b21e:	f000 fbd3 	bl	800b9c8 <__hi0bits>
 800b222:	016d      	lsls	r5, r5, #5
 800b224:	f8d8 6000 	ldr.w	r6, [r8]
 800b228:	1a2d      	subs	r5, r5, r0
 800b22a:	42b5      	cmp	r5, r6
 800b22c:	dd54      	ble.n	800b2d8 <__gethex+0x228>
 800b22e:	1bad      	subs	r5, r5, r6
 800b230:	4629      	mov	r1, r5
 800b232:	4620      	mov	r0, r4
 800b234:	f000 ff67 	bl	800c106 <__any_on>
 800b238:	4681      	mov	r9, r0
 800b23a:	b178      	cbz	r0, 800b25c <__gethex+0x1ac>
 800b23c:	1e6b      	subs	r3, r5, #1
 800b23e:	1159      	asrs	r1, r3, #5
 800b240:	f003 021f 	and.w	r2, r3, #31
 800b244:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b248:	f04f 0901 	mov.w	r9, #1
 800b24c:	fa09 f202 	lsl.w	r2, r9, r2
 800b250:	420a      	tst	r2, r1
 800b252:	d003      	beq.n	800b25c <__gethex+0x1ac>
 800b254:	454b      	cmp	r3, r9
 800b256:	dc36      	bgt.n	800b2c6 <__gethex+0x216>
 800b258:	f04f 0902 	mov.w	r9, #2
 800b25c:	4629      	mov	r1, r5
 800b25e:	4620      	mov	r0, r4
 800b260:	f7ff febe 	bl	800afe0 <rshift>
 800b264:	442f      	add	r7, r5
 800b266:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b26a:	42bb      	cmp	r3, r7
 800b26c:	da42      	bge.n	800b2f4 <__gethex+0x244>
 800b26e:	9801      	ldr	r0, [sp, #4]
 800b270:	4621      	mov	r1, r4
 800b272:	f000 faf7 	bl	800b864 <_Bfree>
 800b276:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b278:	2300      	movs	r3, #0
 800b27a:	6013      	str	r3, [r2, #0]
 800b27c:	25a3      	movs	r5, #163	@ 0xa3
 800b27e:	e793      	b.n	800b1a8 <__gethex+0xf8>
 800b280:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b284:	2a2e      	cmp	r2, #46	@ 0x2e
 800b286:	d012      	beq.n	800b2ae <__gethex+0x1fe>
 800b288:	2b20      	cmp	r3, #32
 800b28a:	d104      	bne.n	800b296 <__gethex+0x1e6>
 800b28c:	f845 bb04 	str.w	fp, [r5], #4
 800b290:	f04f 0b00 	mov.w	fp, #0
 800b294:	465b      	mov	r3, fp
 800b296:	7830      	ldrb	r0, [r6, #0]
 800b298:	9303      	str	r3, [sp, #12]
 800b29a:	f7ff fef3 	bl	800b084 <__hexdig_fun>
 800b29e:	9b03      	ldr	r3, [sp, #12]
 800b2a0:	f000 000f 	and.w	r0, r0, #15
 800b2a4:	4098      	lsls	r0, r3
 800b2a6:	ea4b 0b00 	orr.w	fp, fp, r0
 800b2aa:	3304      	adds	r3, #4
 800b2ac:	e7ae      	b.n	800b20c <__gethex+0x15c>
 800b2ae:	45b1      	cmp	r9, r6
 800b2b0:	d8ea      	bhi.n	800b288 <__gethex+0x1d8>
 800b2b2:	492b      	ldr	r1, [pc, #172]	@ (800b360 <__gethex+0x2b0>)
 800b2b4:	9303      	str	r3, [sp, #12]
 800b2b6:	2201      	movs	r2, #1
 800b2b8:	4630      	mov	r0, r6
 800b2ba:	f7ff fd2e 	bl	800ad1a <strncmp>
 800b2be:	9b03      	ldr	r3, [sp, #12]
 800b2c0:	2800      	cmp	r0, #0
 800b2c2:	d1e1      	bne.n	800b288 <__gethex+0x1d8>
 800b2c4:	e7a2      	b.n	800b20c <__gethex+0x15c>
 800b2c6:	1ea9      	subs	r1, r5, #2
 800b2c8:	4620      	mov	r0, r4
 800b2ca:	f000 ff1c 	bl	800c106 <__any_on>
 800b2ce:	2800      	cmp	r0, #0
 800b2d0:	d0c2      	beq.n	800b258 <__gethex+0x1a8>
 800b2d2:	f04f 0903 	mov.w	r9, #3
 800b2d6:	e7c1      	b.n	800b25c <__gethex+0x1ac>
 800b2d8:	da09      	bge.n	800b2ee <__gethex+0x23e>
 800b2da:	1b75      	subs	r5, r6, r5
 800b2dc:	4621      	mov	r1, r4
 800b2de:	9801      	ldr	r0, [sp, #4]
 800b2e0:	462a      	mov	r2, r5
 800b2e2:	f000 fcd7 	bl	800bc94 <__lshift>
 800b2e6:	1b7f      	subs	r7, r7, r5
 800b2e8:	4604      	mov	r4, r0
 800b2ea:	f100 0a14 	add.w	sl, r0, #20
 800b2ee:	f04f 0900 	mov.w	r9, #0
 800b2f2:	e7b8      	b.n	800b266 <__gethex+0x1b6>
 800b2f4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b2f8:	42bd      	cmp	r5, r7
 800b2fa:	dd6f      	ble.n	800b3dc <__gethex+0x32c>
 800b2fc:	1bed      	subs	r5, r5, r7
 800b2fe:	42ae      	cmp	r6, r5
 800b300:	dc34      	bgt.n	800b36c <__gethex+0x2bc>
 800b302:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b306:	2b02      	cmp	r3, #2
 800b308:	d022      	beq.n	800b350 <__gethex+0x2a0>
 800b30a:	2b03      	cmp	r3, #3
 800b30c:	d024      	beq.n	800b358 <__gethex+0x2a8>
 800b30e:	2b01      	cmp	r3, #1
 800b310:	d115      	bne.n	800b33e <__gethex+0x28e>
 800b312:	42ae      	cmp	r6, r5
 800b314:	d113      	bne.n	800b33e <__gethex+0x28e>
 800b316:	2e01      	cmp	r6, #1
 800b318:	d10b      	bne.n	800b332 <__gethex+0x282>
 800b31a:	9a02      	ldr	r2, [sp, #8]
 800b31c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b320:	6013      	str	r3, [r2, #0]
 800b322:	2301      	movs	r3, #1
 800b324:	6123      	str	r3, [r4, #16]
 800b326:	f8ca 3000 	str.w	r3, [sl]
 800b32a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b32c:	2562      	movs	r5, #98	@ 0x62
 800b32e:	601c      	str	r4, [r3, #0]
 800b330:	e73a      	b.n	800b1a8 <__gethex+0xf8>
 800b332:	1e71      	subs	r1, r6, #1
 800b334:	4620      	mov	r0, r4
 800b336:	f000 fee6 	bl	800c106 <__any_on>
 800b33a:	2800      	cmp	r0, #0
 800b33c:	d1ed      	bne.n	800b31a <__gethex+0x26a>
 800b33e:	9801      	ldr	r0, [sp, #4]
 800b340:	4621      	mov	r1, r4
 800b342:	f000 fa8f 	bl	800b864 <_Bfree>
 800b346:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b348:	2300      	movs	r3, #0
 800b34a:	6013      	str	r3, [r2, #0]
 800b34c:	2550      	movs	r5, #80	@ 0x50
 800b34e:	e72b      	b.n	800b1a8 <__gethex+0xf8>
 800b350:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b352:	2b00      	cmp	r3, #0
 800b354:	d1f3      	bne.n	800b33e <__gethex+0x28e>
 800b356:	e7e0      	b.n	800b31a <__gethex+0x26a>
 800b358:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d1dd      	bne.n	800b31a <__gethex+0x26a>
 800b35e:	e7ee      	b.n	800b33e <__gethex+0x28e>
 800b360:	0800d004 	.word	0x0800d004
 800b364:	0800d11d 	.word	0x0800d11d
 800b368:	0800d12e 	.word	0x0800d12e
 800b36c:	1e6f      	subs	r7, r5, #1
 800b36e:	f1b9 0f00 	cmp.w	r9, #0
 800b372:	d130      	bne.n	800b3d6 <__gethex+0x326>
 800b374:	b127      	cbz	r7, 800b380 <__gethex+0x2d0>
 800b376:	4639      	mov	r1, r7
 800b378:	4620      	mov	r0, r4
 800b37a:	f000 fec4 	bl	800c106 <__any_on>
 800b37e:	4681      	mov	r9, r0
 800b380:	117a      	asrs	r2, r7, #5
 800b382:	2301      	movs	r3, #1
 800b384:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b388:	f007 071f 	and.w	r7, r7, #31
 800b38c:	40bb      	lsls	r3, r7
 800b38e:	4213      	tst	r3, r2
 800b390:	4629      	mov	r1, r5
 800b392:	4620      	mov	r0, r4
 800b394:	bf18      	it	ne
 800b396:	f049 0902 	orrne.w	r9, r9, #2
 800b39a:	f7ff fe21 	bl	800afe0 <rshift>
 800b39e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b3a2:	1b76      	subs	r6, r6, r5
 800b3a4:	2502      	movs	r5, #2
 800b3a6:	f1b9 0f00 	cmp.w	r9, #0
 800b3aa:	d047      	beq.n	800b43c <__gethex+0x38c>
 800b3ac:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b3b0:	2b02      	cmp	r3, #2
 800b3b2:	d015      	beq.n	800b3e0 <__gethex+0x330>
 800b3b4:	2b03      	cmp	r3, #3
 800b3b6:	d017      	beq.n	800b3e8 <__gethex+0x338>
 800b3b8:	2b01      	cmp	r3, #1
 800b3ba:	d109      	bne.n	800b3d0 <__gethex+0x320>
 800b3bc:	f019 0f02 	tst.w	r9, #2
 800b3c0:	d006      	beq.n	800b3d0 <__gethex+0x320>
 800b3c2:	f8da 3000 	ldr.w	r3, [sl]
 800b3c6:	ea49 0903 	orr.w	r9, r9, r3
 800b3ca:	f019 0f01 	tst.w	r9, #1
 800b3ce:	d10e      	bne.n	800b3ee <__gethex+0x33e>
 800b3d0:	f045 0510 	orr.w	r5, r5, #16
 800b3d4:	e032      	b.n	800b43c <__gethex+0x38c>
 800b3d6:	f04f 0901 	mov.w	r9, #1
 800b3da:	e7d1      	b.n	800b380 <__gethex+0x2d0>
 800b3dc:	2501      	movs	r5, #1
 800b3de:	e7e2      	b.n	800b3a6 <__gethex+0x2f6>
 800b3e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3e2:	f1c3 0301 	rsb	r3, r3, #1
 800b3e6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b3e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d0f0      	beq.n	800b3d0 <__gethex+0x320>
 800b3ee:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b3f2:	f104 0314 	add.w	r3, r4, #20
 800b3f6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b3fa:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b3fe:	f04f 0c00 	mov.w	ip, #0
 800b402:	4618      	mov	r0, r3
 800b404:	f853 2b04 	ldr.w	r2, [r3], #4
 800b408:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b40c:	d01b      	beq.n	800b446 <__gethex+0x396>
 800b40e:	3201      	adds	r2, #1
 800b410:	6002      	str	r2, [r0, #0]
 800b412:	2d02      	cmp	r5, #2
 800b414:	f104 0314 	add.w	r3, r4, #20
 800b418:	d13c      	bne.n	800b494 <__gethex+0x3e4>
 800b41a:	f8d8 2000 	ldr.w	r2, [r8]
 800b41e:	3a01      	subs	r2, #1
 800b420:	42b2      	cmp	r2, r6
 800b422:	d109      	bne.n	800b438 <__gethex+0x388>
 800b424:	1171      	asrs	r1, r6, #5
 800b426:	2201      	movs	r2, #1
 800b428:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b42c:	f006 061f 	and.w	r6, r6, #31
 800b430:	fa02 f606 	lsl.w	r6, r2, r6
 800b434:	421e      	tst	r6, r3
 800b436:	d13a      	bne.n	800b4ae <__gethex+0x3fe>
 800b438:	f045 0520 	orr.w	r5, r5, #32
 800b43c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b43e:	601c      	str	r4, [r3, #0]
 800b440:	9b02      	ldr	r3, [sp, #8]
 800b442:	601f      	str	r7, [r3, #0]
 800b444:	e6b0      	b.n	800b1a8 <__gethex+0xf8>
 800b446:	4299      	cmp	r1, r3
 800b448:	f843 cc04 	str.w	ip, [r3, #-4]
 800b44c:	d8d9      	bhi.n	800b402 <__gethex+0x352>
 800b44e:	68a3      	ldr	r3, [r4, #8]
 800b450:	459b      	cmp	fp, r3
 800b452:	db17      	blt.n	800b484 <__gethex+0x3d4>
 800b454:	6861      	ldr	r1, [r4, #4]
 800b456:	9801      	ldr	r0, [sp, #4]
 800b458:	3101      	adds	r1, #1
 800b45a:	f000 f9c3 	bl	800b7e4 <_Balloc>
 800b45e:	4681      	mov	r9, r0
 800b460:	b918      	cbnz	r0, 800b46a <__gethex+0x3ba>
 800b462:	4b1a      	ldr	r3, [pc, #104]	@ (800b4cc <__gethex+0x41c>)
 800b464:	4602      	mov	r2, r0
 800b466:	2184      	movs	r1, #132	@ 0x84
 800b468:	e6c5      	b.n	800b1f6 <__gethex+0x146>
 800b46a:	6922      	ldr	r2, [r4, #16]
 800b46c:	3202      	adds	r2, #2
 800b46e:	f104 010c 	add.w	r1, r4, #12
 800b472:	0092      	lsls	r2, r2, #2
 800b474:	300c      	adds	r0, #12
 800b476:	f7ff fd32 	bl	800aede <memcpy>
 800b47a:	4621      	mov	r1, r4
 800b47c:	9801      	ldr	r0, [sp, #4]
 800b47e:	f000 f9f1 	bl	800b864 <_Bfree>
 800b482:	464c      	mov	r4, r9
 800b484:	6923      	ldr	r3, [r4, #16]
 800b486:	1c5a      	adds	r2, r3, #1
 800b488:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b48c:	6122      	str	r2, [r4, #16]
 800b48e:	2201      	movs	r2, #1
 800b490:	615a      	str	r2, [r3, #20]
 800b492:	e7be      	b.n	800b412 <__gethex+0x362>
 800b494:	6922      	ldr	r2, [r4, #16]
 800b496:	455a      	cmp	r2, fp
 800b498:	dd0b      	ble.n	800b4b2 <__gethex+0x402>
 800b49a:	2101      	movs	r1, #1
 800b49c:	4620      	mov	r0, r4
 800b49e:	f7ff fd9f 	bl	800afe0 <rshift>
 800b4a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b4a6:	3701      	adds	r7, #1
 800b4a8:	42bb      	cmp	r3, r7
 800b4aa:	f6ff aee0 	blt.w	800b26e <__gethex+0x1be>
 800b4ae:	2501      	movs	r5, #1
 800b4b0:	e7c2      	b.n	800b438 <__gethex+0x388>
 800b4b2:	f016 061f 	ands.w	r6, r6, #31
 800b4b6:	d0fa      	beq.n	800b4ae <__gethex+0x3fe>
 800b4b8:	4453      	add	r3, sl
 800b4ba:	f1c6 0620 	rsb	r6, r6, #32
 800b4be:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b4c2:	f000 fa81 	bl	800b9c8 <__hi0bits>
 800b4c6:	42b0      	cmp	r0, r6
 800b4c8:	dbe7      	blt.n	800b49a <__gethex+0x3ea>
 800b4ca:	e7f0      	b.n	800b4ae <__gethex+0x3fe>
 800b4cc:	0800d11d 	.word	0x0800d11d

0800b4d0 <L_shift>:
 800b4d0:	f1c2 0208 	rsb	r2, r2, #8
 800b4d4:	0092      	lsls	r2, r2, #2
 800b4d6:	b570      	push	{r4, r5, r6, lr}
 800b4d8:	f1c2 0620 	rsb	r6, r2, #32
 800b4dc:	6843      	ldr	r3, [r0, #4]
 800b4de:	6804      	ldr	r4, [r0, #0]
 800b4e0:	fa03 f506 	lsl.w	r5, r3, r6
 800b4e4:	432c      	orrs	r4, r5
 800b4e6:	40d3      	lsrs	r3, r2
 800b4e8:	6004      	str	r4, [r0, #0]
 800b4ea:	f840 3f04 	str.w	r3, [r0, #4]!
 800b4ee:	4288      	cmp	r0, r1
 800b4f0:	d3f4      	bcc.n	800b4dc <L_shift+0xc>
 800b4f2:	bd70      	pop	{r4, r5, r6, pc}

0800b4f4 <__match>:
 800b4f4:	b530      	push	{r4, r5, lr}
 800b4f6:	6803      	ldr	r3, [r0, #0]
 800b4f8:	3301      	adds	r3, #1
 800b4fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b4fe:	b914      	cbnz	r4, 800b506 <__match+0x12>
 800b500:	6003      	str	r3, [r0, #0]
 800b502:	2001      	movs	r0, #1
 800b504:	bd30      	pop	{r4, r5, pc}
 800b506:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b50a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b50e:	2d19      	cmp	r5, #25
 800b510:	bf98      	it	ls
 800b512:	3220      	addls	r2, #32
 800b514:	42a2      	cmp	r2, r4
 800b516:	d0f0      	beq.n	800b4fa <__match+0x6>
 800b518:	2000      	movs	r0, #0
 800b51a:	e7f3      	b.n	800b504 <__match+0x10>

0800b51c <__hexnan>:
 800b51c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b520:	680b      	ldr	r3, [r1, #0]
 800b522:	6801      	ldr	r1, [r0, #0]
 800b524:	115e      	asrs	r6, r3, #5
 800b526:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b52a:	f013 031f 	ands.w	r3, r3, #31
 800b52e:	b087      	sub	sp, #28
 800b530:	bf18      	it	ne
 800b532:	3604      	addne	r6, #4
 800b534:	2500      	movs	r5, #0
 800b536:	1f37      	subs	r7, r6, #4
 800b538:	4682      	mov	sl, r0
 800b53a:	4690      	mov	r8, r2
 800b53c:	9301      	str	r3, [sp, #4]
 800b53e:	f846 5c04 	str.w	r5, [r6, #-4]
 800b542:	46b9      	mov	r9, r7
 800b544:	463c      	mov	r4, r7
 800b546:	9502      	str	r5, [sp, #8]
 800b548:	46ab      	mov	fp, r5
 800b54a:	784a      	ldrb	r2, [r1, #1]
 800b54c:	1c4b      	adds	r3, r1, #1
 800b54e:	9303      	str	r3, [sp, #12]
 800b550:	b342      	cbz	r2, 800b5a4 <__hexnan+0x88>
 800b552:	4610      	mov	r0, r2
 800b554:	9105      	str	r1, [sp, #20]
 800b556:	9204      	str	r2, [sp, #16]
 800b558:	f7ff fd94 	bl	800b084 <__hexdig_fun>
 800b55c:	2800      	cmp	r0, #0
 800b55e:	d151      	bne.n	800b604 <__hexnan+0xe8>
 800b560:	9a04      	ldr	r2, [sp, #16]
 800b562:	9905      	ldr	r1, [sp, #20]
 800b564:	2a20      	cmp	r2, #32
 800b566:	d818      	bhi.n	800b59a <__hexnan+0x7e>
 800b568:	9b02      	ldr	r3, [sp, #8]
 800b56a:	459b      	cmp	fp, r3
 800b56c:	dd13      	ble.n	800b596 <__hexnan+0x7a>
 800b56e:	454c      	cmp	r4, r9
 800b570:	d206      	bcs.n	800b580 <__hexnan+0x64>
 800b572:	2d07      	cmp	r5, #7
 800b574:	dc04      	bgt.n	800b580 <__hexnan+0x64>
 800b576:	462a      	mov	r2, r5
 800b578:	4649      	mov	r1, r9
 800b57a:	4620      	mov	r0, r4
 800b57c:	f7ff ffa8 	bl	800b4d0 <L_shift>
 800b580:	4544      	cmp	r4, r8
 800b582:	d952      	bls.n	800b62a <__hexnan+0x10e>
 800b584:	2300      	movs	r3, #0
 800b586:	f1a4 0904 	sub.w	r9, r4, #4
 800b58a:	f844 3c04 	str.w	r3, [r4, #-4]
 800b58e:	f8cd b008 	str.w	fp, [sp, #8]
 800b592:	464c      	mov	r4, r9
 800b594:	461d      	mov	r5, r3
 800b596:	9903      	ldr	r1, [sp, #12]
 800b598:	e7d7      	b.n	800b54a <__hexnan+0x2e>
 800b59a:	2a29      	cmp	r2, #41	@ 0x29
 800b59c:	d157      	bne.n	800b64e <__hexnan+0x132>
 800b59e:	3102      	adds	r1, #2
 800b5a0:	f8ca 1000 	str.w	r1, [sl]
 800b5a4:	f1bb 0f00 	cmp.w	fp, #0
 800b5a8:	d051      	beq.n	800b64e <__hexnan+0x132>
 800b5aa:	454c      	cmp	r4, r9
 800b5ac:	d206      	bcs.n	800b5bc <__hexnan+0xa0>
 800b5ae:	2d07      	cmp	r5, #7
 800b5b0:	dc04      	bgt.n	800b5bc <__hexnan+0xa0>
 800b5b2:	462a      	mov	r2, r5
 800b5b4:	4649      	mov	r1, r9
 800b5b6:	4620      	mov	r0, r4
 800b5b8:	f7ff ff8a 	bl	800b4d0 <L_shift>
 800b5bc:	4544      	cmp	r4, r8
 800b5be:	d936      	bls.n	800b62e <__hexnan+0x112>
 800b5c0:	f1a8 0204 	sub.w	r2, r8, #4
 800b5c4:	4623      	mov	r3, r4
 800b5c6:	f853 1b04 	ldr.w	r1, [r3], #4
 800b5ca:	f842 1f04 	str.w	r1, [r2, #4]!
 800b5ce:	429f      	cmp	r7, r3
 800b5d0:	d2f9      	bcs.n	800b5c6 <__hexnan+0xaa>
 800b5d2:	1b3b      	subs	r3, r7, r4
 800b5d4:	f023 0303 	bic.w	r3, r3, #3
 800b5d8:	3304      	adds	r3, #4
 800b5da:	3401      	adds	r4, #1
 800b5dc:	3e03      	subs	r6, #3
 800b5de:	42b4      	cmp	r4, r6
 800b5e0:	bf88      	it	hi
 800b5e2:	2304      	movhi	r3, #4
 800b5e4:	4443      	add	r3, r8
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	f843 2b04 	str.w	r2, [r3], #4
 800b5ec:	429f      	cmp	r7, r3
 800b5ee:	d2fb      	bcs.n	800b5e8 <__hexnan+0xcc>
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	b91b      	cbnz	r3, 800b5fc <__hexnan+0xe0>
 800b5f4:	4547      	cmp	r7, r8
 800b5f6:	d128      	bne.n	800b64a <__hexnan+0x12e>
 800b5f8:	2301      	movs	r3, #1
 800b5fa:	603b      	str	r3, [r7, #0]
 800b5fc:	2005      	movs	r0, #5
 800b5fe:	b007      	add	sp, #28
 800b600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b604:	3501      	adds	r5, #1
 800b606:	2d08      	cmp	r5, #8
 800b608:	f10b 0b01 	add.w	fp, fp, #1
 800b60c:	dd06      	ble.n	800b61c <__hexnan+0x100>
 800b60e:	4544      	cmp	r4, r8
 800b610:	d9c1      	bls.n	800b596 <__hexnan+0x7a>
 800b612:	2300      	movs	r3, #0
 800b614:	f844 3c04 	str.w	r3, [r4, #-4]
 800b618:	2501      	movs	r5, #1
 800b61a:	3c04      	subs	r4, #4
 800b61c:	6822      	ldr	r2, [r4, #0]
 800b61e:	f000 000f 	and.w	r0, r0, #15
 800b622:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b626:	6020      	str	r0, [r4, #0]
 800b628:	e7b5      	b.n	800b596 <__hexnan+0x7a>
 800b62a:	2508      	movs	r5, #8
 800b62c:	e7b3      	b.n	800b596 <__hexnan+0x7a>
 800b62e:	9b01      	ldr	r3, [sp, #4]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d0dd      	beq.n	800b5f0 <__hexnan+0xd4>
 800b634:	f1c3 0320 	rsb	r3, r3, #32
 800b638:	f04f 32ff 	mov.w	r2, #4294967295
 800b63c:	40da      	lsrs	r2, r3
 800b63e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b642:	4013      	ands	r3, r2
 800b644:	f846 3c04 	str.w	r3, [r6, #-4]
 800b648:	e7d2      	b.n	800b5f0 <__hexnan+0xd4>
 800b64a:	3f04      	subs	r7, #4
 800b64c:	e7d0      	b.n	800b5f0 <__hexnan+0xd4>
 800b64e:	2004      	movs	r0, #4
 800b650:	e7d5      	b.n	800b5fe <__hexnan+0xe2>
	...

0800b654 <malloc>:
 800b654:	4b02      	ldr	r3, [pc, #8]	@ (800b660 <malloc+0xc>)
 800b656:	4601      	mov	r1, r0
 800b658:	6818      	ldr	r0, [r3, #0]
 800b65a:	f000 b825 	b.w	800b6a8 <_malloc_r>
 800b65e:	bf00      	nop
 800b660:	20000188 	.word	0x20000188

0800b664 <sbrk_aligned>:
 800b664:	b570      	push	{r4, r5, r6, lr}
 800b666:	4e0f      	ldr	r6, [pc, #60]	@ (800b6a4 <sbrk_aligned+0x40>)
 800b668:	460c      	mov	r4, r1
 800b66a:	6831      	ldr	r1, [r6, #0]
 800b66c:	4605      	mov	r5, r0
 800b66e:	b911      	cbnz	r1, 800b676 <sbrk_aligned+0x12>
 800b670:	f001 f934 	bl	800c8dc <_sbrk_r>
 800b674:	6030      	str	r0, [r6, #0]
 800b676:	4621      	mov	r1, r4
 800b678:	4628      	mov	r0, r5
 800b67a:	f001 f92f 	bl	800c8dc <_sbrk_r>
 800b67e:	1c43      	adds	r3, r0, #1
 800b680:	d103      	bne.n	800b68a <sbrk_aligned+0x26>
 800b682:	f04f 34ff 	mov.w	r4, #4294967295
 800b686:	4620      	mov	r0, r4
 800b688:	bd70      	pop	{r4, r5, r6, pc}
 800b68a:	1cc4      	adds	r4, r0, #3
 800b68c:	f024 0403 	bic.w	r4, r4, #3
 800b690:	42a0      	cmp	r0, r4
 800b692:	d0f8      	beq.n	800b686 <sbrk_aligned+0x22>
 800b694:	1a21      	subs	r1, r4, r0
 800b696:	4628      	mov	r0, r5
 800b698:	f001 f920 	bl	800c8dc <_sbrk_r>
 800b69c:	3001      	adds	r0, #1
 800b69e:	d1f2      	bne.n	800b686 <sbrk_aligned+0x22>
 800b6a0:	e7ef      	b.n	800b682 <sbrk_aligned+0x1e>
 800b6a2:	bf00      	nop
 800b6a4:	200020f8 	.word	0x200020f8

0800b6a8 <_malloc_r>:
 800b6a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6ac:	1ccd      	adds	r5, r1, #3
 800b6ae:	f025 0503 	bic.w	r5, r5, #3
 800b6b2:	3508      	adds	r5, #8
 800b6b4:	2d0c      	cmp	r5, #12
 800b6b6:	bf38      	it	cc
 800b6b8:	250c      	movcc	r5, #12
 800b6ba:	2d00      	cmp	r5, #0
 800b6bc:	4606      	mov	r6, r0
 800b6be:	db01      	blt.n	800b6c4 <_malloc_r+0x1c>
 800b6c0:	42a9      	cmp	r1, r5
 800b6c2:	d904      	bls.n	800b6ce <_malloc_r+0x26>
 800b6c4:	230c      	movs	r3, #12
 800b6c6:	6033      	str	r3, [r6, #0]
 800b6c8:	2000      	movs	r0, #0
 800b6ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b7a4 <_malloc_r+0xfc>
 800b6d2:	f000 f87b 	bl	800b7cc <__malloc_lock>
 800b6d6:	f8d8 3000 	ldr.w	r3, [r8]
 800b6da:	461c      	mov	r4, r3
 800b6dc:	bb44      	cbnz	r4, 800b730 <_malloc_r+0x88>
 800b6de:	4629      	mov	r1, r5
 800b6e0:	4630      	mov	r0, r6
 800b6e2:	f7ff ffbf 	bl	800b664 <sbrk_aligned>
 800b6e6:	1c43      	adds	r3, r0, #1
 800b6e8:	4604      	mov	r4, r0
 800b6ea:	d158      	bne.n	800b79e <_malloc_r+0xf6>
 800b6ec:	f8d8 4000 	ldr.w	r4, [r8]
 800b6f0:	4627      	mov	r7, r4
 800b6f2:	2f00      	cmp	r7, #0
 800b6f4:	d143      	bne.n	800b77e <_malloc_r+0xd6>
 800b6f6:	2c00      	cmp	r4, #0
 800b6f8:	d04b      	beq.n	800b792 <_malloc_r+0xea>
 800b6fa:	6823      	ldr	r3, [r4, #0]
 800b6fc:	4639      	mov	r1, r7
 800b6fe:	4630      	mov	r0, r6
 800b700:	eb04 0903 	add.w	r9, r4, r3
 800b704:	f001 f8ea 	bl	800c8dc <_sbrk_r>
 800b708:	4581      	cmp	r9, r0
 800b70a:	d142      	bne.n	800b792 <_malloc_r+0xea>
 800b70c:	6821      	ldr	r1, [r4, #0]
 800b70e:	1a6d      	subs	r5, r5, r1
 800b710:	4629      	mov	r1, r5
 800b712:	4630      	mov	r0, r6
 800b714:	f7ff ffa6 	bl	800b664 <sbrk_aligned>
 800b718:	3001      	adds	r0, #1
 800b71a:	d03a      	beq.n	800b792 <_malloc_r+0xea>
 800b71c:	6823      	ldr	r3, [r4, #0]
 800b71e:	442b      	add	r3, r5
 800b720:	6023      	str	r3, [r4, #0]
 800b722:	f8d8 3000 	ldr.w	r3, [r8]
 800b726:	685a      	ldr	r2, [r3, #4]
 800b728:	bb62      	cbnz	r2, 800b784 <_malloc_r+0xdc>
 800b72a:	f8c8 7000 	str.w	r7, [r8]
 800b72e:	e00f      	b.n	800b750 <_malloc_r+0xa8>
 800b730:	6822      	ldr	r2, [r4, #0]
 800b732:	1b52      	subs	r2, r2, r5
 800b734:	d420      	bmi.n	800b778 <_malloc_r+0xd0>
 800b736:	2a0b      	cmp	r2, #11
 800b738:	d917      	bls.n	800b76a <_malloc_r+0xc2>
 800b73a:	1961      	adds	r1, r4, r5
 800b73c:	42a3      	cmp	r3, r4
 800b73e:	6025      	str	r5, [r4, #0]
 800b740:	bf18      	it	ne
 800b742:	6059      	strne	r1, [r3, #4]
 800b744:	6863      	ldr	r3, [r4, #4]
 800b746:	bf08      	it	eq
 800b748:	f8c8 1000 	streq.w	r1, [r8]
 800b74c:	5162      	str	r2, [r4, r5]
 800b74e:	604b      	str	r3, [r1, #4]
 800b750:	4630      	mov	r0, r6
 800b752:	f000 f841 	bl	800b7d8 <__malloc_unlock>
 800b756:	f104 000b 	add.w	r0, r4, #11
 800b75a:	1d23      	adds	r3, r4, #4
 800b75c:	f020 0007 	bic.w	r0, r0, #7
 800b760:	1ac2      	subs	r2, r0, r3
 800b762:	bf1c      	itt	ne
 800b764:	1a1b      	subne	r3, r3, r0
 800b766:	50a3      	strne	r3, [r4, r2]
 800b768:	e7af      	b.n	800b6ca <_malloc_r+0x22>
 800b76a:	6862      	ldr	r2, [r4, #4]
 800b76c:	42a3      	cmp	r3, r4
 800b76e:	bf0c      	ite	eq
 800b770:	f8c8 2000 	streq.w	r2, [r8]
 800b774:	605a      	strne	r2, [r3, #4]
 800b776:	e7eb      	b.n	800b750 <_malloc_r+0xa8>
 800b778:	4623      	mov	r3, r4
 800b77a:	6864      	ldr	r4, [r4, #4]
 800b77c:	e7ae      	b.n	800b6dc <_malloc_r+0x34>
 800b77e:	463c      	mov	r4, r7
 800b780:	687f      	ldr	r7, [r7, #4]
 800b782:	e7b6      	b.n	800b6f2 <_malloc_r+0x4a>
 800b784:	461a      	mov	r2, r3
 800b786:	685b      	ldr	r3, [r3, #4]
 800b788:	42a3      	cmp	r3, r4
 800b78a:	d1fb      	bne.n	800b784 <_malloc_r+0xdc>
 800b78c:	2300      	movs	r3, #0
 800b78e:	6053      	str	r3, [r2, #4]
 800b790:	e7de      	b.n	800b750 <_malloc_r+0xa8>
 800b792:	230c      	movs	r3, #12
 800b794:	6033      	str	r3, [r6, #0]
 800b796:	4630      	mov	r0, r6
 800b798:	f000 f81e 	bl	800b7d8 <__malloc_unlock>
 800b79c:	e794      	b.n	800b6c8 <_malloc_r+0x20>
 800b79e:	6005      	str	r5, [r0, #0]
 800b7a0:	e7d6      	b.n	800b750 <_malloc_r+0xa8>
 800b7a2:	bf00      	nop
 800b7a4:	200020fc 	.word	0x200020fc

0800b7a8 <__ascii_mbtowc>:
 800b7a8:	b082      	sub	sp, #8
 800b7aa:	b901      	cbnz	r1, 800b7ae <__ascii_mbtowc+0x6>
 800b7ac:	a901      	add	r1, sp, #4
 800b7ae:	b142      	cbz	r2, 800b7c2 <__ascii_mbtowc+0x1a>
 800b7b0:	b14b      	cbz	r3, 800b7c6 <__ascii_mbtowc+0x1e>
 800b7b2:	7813      	ldrb	r3, [r2, #0]
 800b7b4:	600b      	str	r3, [r1, #0]
 800b7b6:	7812      	ldrb	r2, [r2, #0]
 800b7b8:	1e10      	subs	r0, r2, #0
 800b7ba:	bf18      	it	ne
 800b7bc:	2001      	movne	r0, #1
 800b7be:	b002      	add	sp, #8
 800b7c0:	4770      	bx	lr
 800b7c2:	4610      	mov	r0, r2
 800b7c4:	e7fb      	b.n	800b7be <__ascii_mbtowc+0x16>
 800b7c6:	f06f 0001 	mvn.w	r0, #1
 800b7ca:	e7f8      	b.n	800b7be <__ascii_mbtowc+0x16>

0800b7cc <__malloc_lock>:
 800b7cc:	4801      	ldr	r0, [pc, #4]	@ (800b7d4 <__malloc_lock+0x8>)
 800b7ce:	f7ff bb84 	b.w	800aeda <__retarget_lock_acquire_recursive>
 800b7d2:	bf00      	nop
 800b7d4:	200020f4 	.word	0x200020f4

0800b7d8 <__malloc_unlock>:
 800b7d8:	4801      	ldr	r0, [pc, #4]	@ (800b7e0 <__malloc_unlock+0x8>)
 800b7da:	f7ff bb7f 	b.w	800aedc <__retarget_lock_release_recursive>
 800b7de:	bf00      	nop
 800b7e0:	200020f4 	.word	0x200020f4

0800b7e4 <_Balloc>:
 800b7e4:	b570      	push	{r4, r5, r6, lr}
 800b7e6:	69c6      	ldr	r6, [r0, #28]
 800b7e8:	4604      	mov	r4, r0
 800b7ea:	460d      	mov	r5, r1
 800b7ec:	b976      	cbnz	r6, 800b80c <_Balloc+0x28>
 800b7ee:	2010      	movs	r0, #16
 800b7f0:	f7ff ff30 	bl	800b654 <malloc>
 800b7f4:	4602      	mov	r2, r0
 800b7f6:	61e0      	str	r0, [r4, #28]
 800b7f8:	b920      	cbnz	r0, 800b804 <_Balloc+0x20>
 800b7fa:	4b18      	ldr	r3, [pc, #96]	@ (800b85c <_Balloc+0x78>)
 800b7fc:	4818      	ldr	r0, [pc, #96]	@ (800b860 <_Balloc+0x7c>)
 800b7fe:	216b      	movs	r1, #107	@ 0x6b
 800b800:	f7ff fb86 	bl	800af10 <__assert_func>
 800b804:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b808:	6006      	str	r6, [r0, #0]
 800b80a:	60c6      	str	r6, [r0, #12]
 800b80c:	69e6      	ldr	r6, [r4, #28]
 800b80e:	68f3      	ldr	r3, [r6, #12]
 800b810:	b183      	cbz	r3, 800b834 <_Balloc+0x50>
 800b812:	69e3      	ldr	r3, [r4, #28]
 800b814:	68db      	ldr	r3, [r3, #12]
 800b816:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b81a:	b9b8      	cbnz	r0, 800b84c <_Balloc+0x68>
 800b81c:	2101      	movs	r1, #1
 800b81e:	fa01 f605 	lsl.w	r6, r1, r5
 800b822:	1d72      	adds	r2, r6, #5
 800b824:	0092      	lsls	r2, r2, #2
 800b826:	4620      	mov	r0, r4
 800b828:	f001 f86f 	bl	800c90a <_calloc_r>
 800b82c:	b160      	cbz	r0, 800b848 <_Balloc+0x64>
 800b82e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b832:	e00e      	b.n	800b852 <_Balloc+0x6e>
 800b834:	2221      	movs	r2, #33	@ 0x21
 800b836:	2104      	movs	r1, #4
 800b838:	4620      	mov	r0, r4
 800b83a:	f001 f866 	bl	800c90a <_calloc_r>
 800b83e:	69e3      	ldr	r3, [r4, #28]
 800b840:	60f0      	str	r0, [r6, #12]
 800b842:	68db      	ldr	r3, [r3, #12]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d1e4      	bne.n	800b812 <_Balloc+0x2e>
 800b848:	2000      	movs	r0, #0
 800b84a:	bd70      	pop	{r4, r5, r6, pc}
 800b84c:	6802      	ldr	r2, [r0, #0]
 800b84e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b852:	2300      	movs	r3, #0
 800b854:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b858:	e7f7      	b.n	800b84a <_Balloc+0x66>
 800b85a:	bf00      	nop
 800b85c:	0800d068 	.word	0x0800d068
 800b860:	0800d18e 	.word	0x0800d18e

0800b864 <_Bfree>:
 800b864:	b570      	push	{r4, r5, r6, lr}
 800b866:	69c6      	ldr	r6, [r0, #28]
 800b868:	4605      	mov	r5, r0
 800b86a:	460c      	mov	r4, r1
 800b86c:	b976      	cbnz	r6, 800b88c <_Bfree+0x28>
 800b86e:	2010      	movs	r0, #16
 800b870:	f7ff fef0 	bl	800b654 <malloc>
 800b874:	4602      	mov	r2, r0
 800b876:	61e8      	str	r0, [r5, #28]
 800b878:	b920      	cbnz	r0, 800b884 <_Bfree+0x20>
 800b87a:	4b09      	ldr	r3, [pc, #36]	@ (800b8a0 <_Bfree+0x3c>)
 800b87c:	4809      	ldr	r0, [pc, #36]	@ (800b8a4 <_Bfree+0x40>)
 800b87e:	218f      	movs	r1, #143	@ 0x8f
 800b880:	f7ff fb46 	bl	800af10 <__assert_func>
 800b884:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b888:	6006      	str	r6, [r0, #0]
 800b88a:	60c6      	str	r6, [r0, #12]
 800b88c:	b13c      	cbz	r4, 800b89e <_Bfree+0x3a>
 800b88e:	69eb      	ldr	r3, [r5, #28]
 800b890:	6862      	ldr	r2, [r4, #4]
 800b892:	68db      	ldr	r3, [r3, #12]
 800b894:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b898:	6021      	str	r1, [r4, #0]
 800b89a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b89e:	bd70      	pop	{r4, r5, r6, pc}
 800b8a0:	0800d068 	.word	0x0800d068
 800b8a4:	0800d18e 	.word	0x0800d18e

0800b8a8 <__multadd>:
 800b8a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8ac:	690d      	ldr	r5, [r1, #16]
 800b8ae:	4607      	mov	r7, r0
 800b8b0:	460c      	mov	r4, r1
 800b8b2:	461e      	mov	r6, r3
 800b8b4:	f101 0c14 	add.w	ip, r1, #20
 800b8b8:	2000      	movs	r0, #0
 800b8ba:	f8dc 3000 	ldr.w	r3, [ip]
 800b8be:	b299      	uxth	r1, r3
 800b8c0:	fb02 6101 	mla	r1, r2, r1, r6
 800b8c4:	0c1e      	lsrs	r6, r3, #16
 800b8c6:	0c0b      	lsrs	r3, r1, #16
 800b8c8:	fb02 3306 	mla	r3, r2, r6, r3
 800b8cc:	b289      	uxth	r1, r1
 800b8ce:	3001      	adds	r0, #1
 800b8d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b8d4:	4285      	cmp	r5, r0
 800b8d6:	f84c 1b04 	str.w	r1, [ip], #4
 800b8da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b8de:	dcec      	bgt.n	800b8ba <__multadd+0x12>
 800b8e0:	b30e      	cbz	r6, 800b926 <__multadd+0x7e>
 800b8e2:	68a3      	ldr	r3, [r4, #8]
 800b8e4:	42ab      	cmp	r3, r5
 800b8e6:	dc19      	bgt.n	800b91c <__multadd+0x74>
 800b8e8:	6861      	ldr	r1, [r4, #4]
 800b8ea:	4638      	mov	r0, r7
 800b8ec:	3101      	adds	r1, #1
 800b8ee:	f7ff ff79 	bl	800b7e4 <_Balloc>
 800b8f2:	4680      	mov	r8, r0
 800b8f4:	b928      	cbnz	r0, 800b902 <__multadd+0x5a>
 800b8f6:	4602      	mov	r2, r0
 800b8f8:	4b0c      	ldr	r3, [pc, #48]	@ (800b92c <__multadd+0x84>)
 800b8fa:	480d      	ldr	r0, [pc, #52]	@ (800b930 <__multadd+0x88>)
 800b8fc:	21ba      	movs	r1, #186	@ 0xba
 800b8fe:	f7ff fb07 	bl	800af10 <__assert_func>
 800b902:	6922      	ldr	r2, [r4, #16]
 800b904:	3202      	adds	r2, #2
 800b906:	f104 010c 	add.w	r1, r4, #12
 800b90a:	0092      	lsls	r2, r2, #2
 800b90c:	300c      	adds	r0, #12
 800b90e:	f7ff fae6 	bl	800aede <memcpy>
 800b912:	4621      	mov	r1, r4
 800b914:	4638      	mov	r0, r7
 800b916:	f7ff ffa5 	bl	800b864 <_Bfree>
 800b91a:	4644      	mov	r4, r8
 800b91c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b920:	3501      	adds	r5, #1
 800b922:	615e      	str	r6, [r3, #20]
 800b924:	6125      	str	r5, [r4, #16]
 800b926:	4620      	mov	r0, r4
 800b928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b92c:	0800d11d 	.word	0x0800d11d
 800b930:	0800d18e 	.word	0x0800d18e

0800b934 <__s2b>:
 800b934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b938:	460c      	mov	r4, r1
 800b93a:	4615      	mov	r5, r2
 800b93c:	461f      	mov	r7, r3
 800b93e:	2209      	movs	r2, #9
 800b940:	3308      	adds	r3, #8
 800b942:	4606      	mov	r6, r0
 800b944:	fb93 f3f2 	sdiv	r3, r3, r2
 800b948:	2100      	movs	r1, #0
 800b94a:	2201      	movs	r2, #1
 800b94c:	429a      	cmp	r2, r3
 800b94e:	db09      	blt.n	800b964 <__s2b+0x30>
 800b950:	4630      	mov	r0, r6
 800b952:	f7ff ff47 	bl	800b7e4 <_Balloc>
 800b956:	b940      	cbnz	r0, 800b96a <__s2b+0x36>
 800b958:	4602      	mov	r2, r0
 800b95a:	4b19      	ldr	r3, [pc, #100]	@ (800b9c0 <__s2b+0x8c>)
 800b95c:	4819      	ldr	r0, [pc, #100]	@ (800b9c4 <__s2b+0x90>)
 800b95e:	21d3      	movs	r1, #211	@ 0xd3
 800b960:	f7ff fad6 	bl	800af10 <__assert_func>
 800b964:	0052      	lsls	r2, r2, #1
 800b966:	3101      	adds	r1, #1
 800b968:	e7f0      	b.n	800b94c <__s2b+0x18>
 800b96a:	9b08      	ldr	r3, [sp, #32]
 800b96c:	6143      	str	r3, [r0, #20]
 800b96e:	2d09      	cmp	r5, #9
 800b970:	f04f 0301 	mov.w	r3, #1
 800b974:	6103      	str	r3, [r0, #16]
 800b976:	dd16      	ble.n	800b9a6 <__s2b+0x72>
 800b978:	f104 0909 	add.w	r9, r4, #9
 800b97c:	46c8      	mov	r8, r9
 800b97e:	442c      	add	r4, r5
 800b980:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b984:	4601      	mov	r1, r0
 800b986:	3b30      	subs	r3, #48	@ 0x30
 800b988:	220a      	movs	r2, #10
 800b98a:	4630      	mov	r0, r6
 800b98c:	f7ff ff8c 	bl	800b8a8 <__multadd>
 800b990:	45a0      	cmp	r8, r4
 800b992:	d1f5      	bne.n	800b980 <__s2b+0x4c>
 800b994:	f1a5 0408 	sub.w	r4, r5, #8
 800b998:	444c      	add	r4, r9
 800b99a:	1b2d      	subs	r5, r5, r4
 800b99c:	1963      	adds	r3, r4, r5
 800b99e:	42bb      	cmp	r3, r7
 800b9a0:	db04      	blt.n	800b9ac <__s2b+0x78>
 800b9a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9a6:	340a      	adds	r4, #10
 800b9a8:	2509      	movs	r5, #9
 800b9aa:	e7f6      	b.n	800b99a <__s2b+0x66>
 800b9ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b9b0:	4601      	mov	r1, r0
 800b9b2:	3b30      	subs	r3, #48	@ 0x30
 800b9b4:	220a      	movs	r2, #10
 800b9b6:	4630      	mov	r0, r6
 800b9b8:	f7ff ff76 	bl	800b8a8 <__multadd>
 800b9bc:	e7ee      	b.n	800b99c <__s2b+0x68>
 800b9be:	bf00      	nop
 800b9c0:	0800d11d 	.word	0x0800d11d
 800b9c4:	0800d18e 	.word	0x0800d18e

0800b9c8 <__hi0bits>:
 800b9c8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	bf36      	itet	cc
 800b9d0:	0403      	lslcc	r3, r0, #16
 800b9d2:	2000      	movcs	r0, #0
 800b9d4:	2010      	movcc	r0, #16
 800b9d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b9da:	bf3c      	itt	cc
 800b9dc:	021b      	lslcc	r3, r3, #8
 800b9de:	3008      	addcc	r0, #8
 800b9e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b9e4:	bf3c      	itt	cc
 800b9e6:	011b      	lslcc	r3, r3, #4
 800b9e8:	3004      	addcc	r0, #4
 800b9ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b9ee:	bf3c      	itt	cc
 800b9f0:	009b      	lslcc	r3, r3, #2
 800b9f2:	3002      	addcc	r0, #2
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	db05      	blt.n	800ba04 <__hi0bits+0x3c>
 800b9f8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b9fc:	f100 0001 	add.w	r0, r0, #1
 800ba00:	bf08      	it	eq
 800ba02:	2020      	moveq	r0, #32
 800ba04:	4770      	bx	lr

0800ba06 <__lo0bits>:
 800ba06:	6803      	ldr	r3, [r0, #0]
 800ba08:	4602      	mov	r2, r0
 800ba0a:	f013 0007 	ands.w	r0, r3, #7
 800ba0e:	d00b      	beq.n	800ba28 <__lo0bits+0x22>
 800ba10:	07d9      	lsls	r1, r3, #31
 800ba12:	d421      	bmi.n	800ba58 <__lo0bits+0x52>
 800ba14:	0798      	lsls	r0, r3, #30
 800ba16:	bf49      	itett	mi
 800ba18:	085b      	lsrmi	r3, r3, #1
 800ba1a:	089b      	lsrpl	r3, r3, #2
 800ba1c:	2001      	movmi	r0, #1
 800ba1e:	6013      	strmi	r3, [r2, #0]
 800ba20:	bf5c      	itt	pl
 800ba22:	6013      	strpl	r3, [r2, #0]
 800ba24:	2002      	movpl	r0, #2
 800ba26:	4770      	bx	lr
 800ba28:	b299      	uxth	r1, r3
 800ba2a:	b909      	cbnz	r1, 800ba30 <__lo0bits+0x2a>
 800ba2c:	0c1b      	lsrs	r3, r3, #16
 800ba2e:	2010      	movs	r0, #16
 800ba30:	b2d9      	uxtb	r1, r3
 800ba32:	b909      	cbnz	r1, 800ba38 <__lo0bits+0x32>
 800ba34:	3008      	adds	r0, #8
 800ba36:	0a1b      	lsrs	r3, r3, #8
 800ba38:	0719      	lsls	r1, r3, #28
 800ba3a:	bf04      	itt	eq
 800ba3c:	091b      	lsreq	r3, r3, #4
 800ba3e:	3004      	addeq	r0, #4
 800ba40:	0799      	lsls	r1, r3, #30
 800ba42:	bf04      	itt	eq
 800ba44:	089b      	lsreq	r3, r3, #2
 800ba46:	3002      	addeq	r0, #2
 800ba48:	07d9      	lsls	r1, r3, #31
 800ba4a:	d403      	bmi.n	800ba54 <__lo0bits+0x4e>
 800ba4c:	085b      	lsrs	r3, r3, #1
 800ba4e:	f100 0001 	add.w	r0, r0, #1
 800ba52:	d003      	beq.n	800ba5c <__lo0bits+0x56>
 800ba54:	6013      	str	r3, [r2, #0]
 800ba56:	4770      	bx	lr
 800ba58:	2000      	movs	r0, #0
 800ba5a:	4770      	bx	lr
 800ba5c:	2020      	movs	r0, #32
 800ba5e:	4770      	bx	lr

0800ba60 <__i2b>:
 800ba60:	b510      	push	{r4, lr}
 800ba62:	460c      	mov	r4, r1
 800ba64:	2101      	movs	r1, #1
 800ba66:	f7ff febd 	bl	800b7e4 <_Balloc>
 800ba6a:	4602      	mov	r2, r0
 800ba6c:	b928      	cbnz	r0, 800ba7a <__i2b+0x1a>
 800ba6e:	4b05      	ldr	r3, [pc, #20]	@ (800ba84 <__i2b+0x24>)
 800ba70:	4805      	ldr	r0, [pc, #20]	@ (800ba88 <__i2b+0x28>)
 800ba72:	f240 1145 	movw	r1, #325	@ 0x145
 800ba76:	f7ff fa4b 	bl	800af10 <__assert_func>
 800ba7a:	2301      	movs	r3, #1
 800ba7c:	6144      	str	r4, [r0, #20]
 800ba7e:	6103      	str	r3, [r0, #16]
 800ba80:	bd10      	pop	{r4, pc}
 800ba82:	bf00      	nop
 800ba84:	0800d11d 	.word	0x0800d11d
 800ba88:	0800d18e 	.word	0x0800d18e

0800ba8c <__multiply>:
 800ba8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba90:	4614      	mov	r4, r2
 800ba92:	690a      	ldr	r2, [r1, #16]
 800ba94:	6923      	ldr	r3, [r4, #16]
 800ba96:	429a      	cmp	r2, r3
 800ba98:	bfa8      	it	ge
 800ba9a:	4623      	movge	r3, r4
 800ba9c:	460f      	mov	r7, r1
 800ba9e:	bfa4      	itt	ge
 800baa0:	460c      	movge	r4, r1
 800baa2:	461f      	movge	r7, r3
 800baa4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800baa8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800baac:	68a3      	ldr	r3, [r4, #8]
 800baae:	6861      	ldr	r1, [r4, #4]
 800bab0:	eb0a 0609 	add.w	r6, sl, r9
 800bab4:	42b3      	cmp	r3, r6
 800bab6:	b085      	sub	sp, #20
 800bab8:	bfb8      	it	lt
 800baba:	3101      	addlt	r1, #1
 800babc:	f7ff fe92 	bl	800b7e4 <_Balloc>
 800bac0:	b930      	cbnz	r0, 800bad0 <__multiply+0x44>
 800bac2:	4602      	mov	r2, r0
 800bac4:	4b44      	ldr	r3, [pc, #272]	@ (800bbd8 <__multiply+0x14c>)
 800bac6:	4845      	ldr	r0, [pc, #276]	@ (800bbdc <__multiply+0x150>)
 800bac8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800bacc:	f7ff fa20 	bl	800af10 <__assert_func>
 800bad0:	f100 0514 	add.w	r5, r0, #20
 800bad4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bad8:	462b      	mov	r3, r5
 800bada:	2200      	movs	r2, #0
 800badc:	4543      	cmp	r3, r8
 800bade:	d321      	bcc.n	800bb24 <__multiply+0x98>
 800bae0:	f107 0114 	add.w	r1, r7, #20
 800bae4:	f104 0214 	add.w	r2, r4, #20
 800bae8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800baec:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800baf0:	9302      	str	r3, [sp, #8]
 800baf2:	1b13      	subs	r3, r2, r4
 800baf4:	3b15      	subs	r3, #21
 800baf6:	f023 0303 	bic.w	r3, r3, #3
 800bafa:	3304      	adds	r3, #4
 800bafc:	f104 0715 	add.w	r7, r4, #21
 800bb00:	42ba      	cmp	r2, r7
 800bb02:	bf38      	it	cc
 800bb04:	2304      	movcc	r3, #4
 800bb06:	9301      	str	r3, [sp, #4]
 800bb08:	9b02      	ldr	r3, [sp, #8]
 800bb0a:	9103      	str	r1, [sp, #12]
 800bb0c:	428b      	cmp	r3, r1
 800bb0e:	d80c      	bhi.n	800bb2a <__multiply+0x9e>
 800bb10:	2e00      	cmp	r6, #0
 800bb12:	dd03      	ble.n	800bb1c <__multiply+0x90>
 800bb14:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d05b      	beq.n	800bbd4 <__multiply+0x148>
 800bb1c:	6106      	str	r6, [r0, #16]
 800bb1e:	b005      	add	sp, #20
 800bb20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb24:	f843 2b04 	str.w	r2, [r3], #4
 800bb28:	e7d8      	b.n	800badc <__multiply+0x50>
 800bb2a:	f8b1 a000 	ldrh.w	sl, [r1]
 800bb2e:	f1ba 0f00 	cmp.w	sl, #0
 800bb32:	d024      	beq.n	800bb7e <__multiply+0xf2>
 800bb34:	f104 0e14 	add.w	lr, r4, #20
 800bb38:	46a9      	mov	r9, r5
 800bb3a:	f04f 0c00 	mov.w	ip, #0
 800bb3e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bb42:	f8d9 3000 	ldr.w	r3, [r9]
 800bb46:	fa1f fb87 	uxth.w	fp, r7
 800bb4a:	b29b      	uxth	r3, r3
 800bb4c:	fb0a 330b 	mla	r3, sl, fp, r3
 800bb50:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800bb54:	f8d9 7000 	ldr.w	r7, [r9]
 800bb58:	4463      	add	r3, ip
 800bb5a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bb5e:	fb0a c70b 	mla	r7, sl, fp, ip
 800bb62:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800bb66:	b29b      	uxth	r3, r3
 800bb68:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bb6c:	4572      	cmp	r2, lr
 800bb6e:	f849 3b04 	str.w	r3, [r9], #4
 800bb72:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bb76:	d8e2      	bhi.n	800bb3e <__multiply+0xb2>
 800bb78:	9b01      	ldr	r3, [sp, #4]
 800bb7a:	f845 c003 	str.w	ip, [r5, r3]
 800bb7e:	9b03      	ldr	r3, [sp, #12]
 800bb80:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bb84:	3104      	adds	r1, #4
 800bb86:	f1b9 0f00 	cmp.w	r9, #0
 800bb8a:	d021      	beq.n	800bbd0 <__multiply+0x144>
 800bb8c:	682b      	ldr	r3, [r5, #0]
 800bb8e:	f104 0c14 	add.w	ip, r4, #20
 800bb92:	46ae      	mov	lr, r5
 800bb94:	f04f 0a00 	mov.w	sl, #0
 800bb98:	f8bc b000 	ldrh.w	fp, [ip]
 800bb9c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800bba0:	fb09 770b 	mla	r7, r9, fp, r7
 800bba4:	4457      	add	r7, sl
 800bba6:	b29b      	uxth	r3, r3
 800bba8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bbac:	f84e 3b04 	str.w	r3, [lr], #4
 800bbb0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bbb4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bbb8:	f8be 3000 	ldrh.w	r3, [lr]
 800bbbc:	fb09 330a 	mla	r3, r9, sl, r3
 800bbc0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800bbc4:	4562      	cmp	r2, ip
 800bbc6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bbca:	d8e5      	bhi.n	800bb98 <__multiply+0x10c>
 800bbcc:	9f01      	ldr	r7, [sp, #4]
 800bbce:	51eb      	str	r3, [r5, r7]
 800bbd0:	3504      	adds	r5, #4
 800bbd2:	e799      	b.n	800bb08 <__multiply+0x7c>
 800bbd4:	3e01      	subs	r6, #1
 800bbd6:	e79b      	b.n	800bb10 <__multiply+0x84>
 800bbd8:	0800d11d 	.word	0x0800d11d
 800bbdc:	0800d18e 	.word	0x0800d18e

0800bbe0 <__pow5mult>:
 800bbe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbe4:	4615      	mov	r5, r2
 800bbe6:	f012 0203 	ands.w	r2, r2, #3
 800bbea:	4607      	mov	r7, r0
 800bbec:	460e      	mov	r6, r1
 800bbee:	d007      	beq.n	800bc00 <__pow5mult+0x20>
 800bbf0:	4c25      	ldr	r4, [pc, #148]	@ (800bc88 <__pow5mult+0xa8>)
 800bbf2:	3a01      	subs	r2, #1
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bbfa:	f7ff fe55 	bl	800b8a8 <__multadd>
 800bbfe:	4606      	mov	r6, r0
 800bc00:	10ad      	asrs	r5, r5, #2
 800bc02:	d03d      	beq.n	800bc80 <__pow5mult+0xa0>
 800bc04:	69fc      	ldr	r4, [r7, #28]
 800bc06:	b97c      	cbnz	r4, 800bc28 <__pow5mult+0x48>
 800bc08:	2010      	movs	r0, #16
 800bc0a:	f7ff fd23 	bl	800b654 <malloc>
 800bc0e:	4602      	mov	r2, r0
 800bc10:	61f8      	str	r0, [r7, #28]
 800bc12:	b928      	cbnz	r0, 800bc20 <__pow5mult+0x40>
 800bc14:	4b1d      	ldr	r3, [pc, #116]	@ (800bc8c <__pow5mult+0xac>)
 800bc16:	481e      	ldr	r0, [pc, #120]	@ (800bc90 <__pow5mult+0xb0>)
 800bc18:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bc1c:	f7ff f978 	bl	800af10 <__assert_func>
 800bc20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bc24:	6004      	str	r4, [r0, #0]
 800bc26:	60c4      	str	r4, [r0, #12]
 800bc28:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bc2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bc30:	b94c      	cbnz	r4, 800bc46 <__pow5mult+0x66>
 800bc32:	f240 2171 	movw	r1, #625	@ 0x271
 800bc36:	4638      	mov	r0, r7
 800bc38:	f7ff ff12 	bl	800ba60 <__i2b>
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	f8c8 0008 	str.w	r0, [r8, #8]
 800bc42:	4604      	mov	r4, r0
 800bc44:	6003      	str	r3, [r0, #0]
 800bc46:	f04f 0900 	mov.w	r9, #0
 800bc4a:	07eb      	lsls	r3, r5, #31
 800bc4c:	d50a      	bpl.n	800bc64 <__pow5mult+0x84>
 800bc4e:	4631      	mov	r1, r6
 800bc50:	4622      	mov	r2, r4
 800bc52:	4638      	mov	r0, r7
 800bc54:	f7ff ff1a 	bl	800ba8c <__multiply>
 800bc58:	4631      	mov	r1, r6
 800bc5a:	4680      	mov	r8, r0
 800bc5c:	4638      	mov	r0, r7
 800bc5e:	f7ff fe01 	bl	800b864 <_Bfree>
 800bc62:	4646      	mov	r6, r8
 800bc64:	106d      	asrs	r5, r5, #1
 800bc66:	d00b      	beq.n	800bc80 <__pow5mult+0xa0>
 800bc68:	6820      	ldr	r0, [r4, #0]
 800bc6a:	b938      	cbnz	r0, 800bc7c <__pow5mult+0x9c>
 800bc6c:	4622      	mov	r2, r4
 800bc6e:	4621      	mov	r1, r4
 800bc70:	4638      	mov	r0, r7
 800bc72:	f7ff ff0b 	bl	800ba8c <__multiply>
 800bc76:	6020      	str	r0, [r4, #0]
 800bc78:	f8c0 9000 	str.w	r9, [r0]
 800bc7c:	4604      	mov	r4, r0
 800bc7e:	e7e4      	b.n	800bc4a <__pow5mult+0x6a>
 800bc80:	4630      	mov	r0, r6
 800bc82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc86:	bf00      	nop
 800bc88:	0800d1e8 	.word	0x0800d1e8
 800bc8c:	0800d068 	.word	0x0800d068
 800bc90:	0800d18e 	.word	0x0800d18e

0800bc94 <__lshift>:
 800bc94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc98:	460c      	mov	r4, r1
 800bc9a:	6849      	ldr	r1, [r1, #4]
 800bc9c:	6923      	ldr	r3, [r4, #16]
 800bc9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bca2:	68a3      	ldr	r3, [r4, #8]
 800bca4:	4607      	mov	r7, r0
 800bca6:	4691      	mov	r9, r2
 800bca8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bcac:	f108 0601 	add.w	r6, r8, #1
 800bcb0:	42b3      	cmp	r3, r6
 800bcb2:	db0b      	blt.n	800bccc <__lshift+0x38>
 800bcb4:	4638      	mov	r0, r7
 800bcb6:	f7ff fd95 	bl	800b7e4 <_Balloc>
 800bcba:	4605      	mov	r5, r0
 800bcbc:	b948      	cbnz	r0, 800bcd2 <__lshift+0x3e>
 800bcbe:	4602      	mov	r2, r0
 800bcc0:	4b28      	ldr	r3, [pc, #160]	@ (800bd64 <__lshift+0xd0>)
 800bcc2:	4829      	ldr	r0, [pc, #164]	@ (800bd68 <__lshift+0xd4>)
 800bcc4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bcc8:	f7ff f922 	bl	800af10 <__assert_func>
 800bccc:	3101      	adds	r1, #1
 800bcce:	005b      	lsls	r3, r3, #1
 800bcd0:	e7ee      	b.n	800bcb0 <__lshift+0x1c>
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	f100 0114 	add.w	r1, r0, #20
 800bcd8:	f100 0210 	add.w	r2, r0, #16
 800bcdc:	4618      	mov	r0, r3
 800bcde:	4553      	cmp	r3, sl
 800bce0:	db33      	blt.n	800bd4a <__lshift+0xb6>
 800bce2:	6920      	ldr	r0, [r4, #16]
 800bce4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bce8:	f104 0314 	add.w	r3, r4, #20
 800bcec:	f019 091f 	ands.w	r9, r9, #31
 800bcf0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bcf4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bcf8:	d02b      	beq.n	800bd52 <__lshift+0xbe>
 800bcfa:	f1c9 0e20 	rsb	lr, r9, #32
 800bcfe:	468a      	mov	sl, r1
 800bd00:	2200      	movs	r2, #0
 800bd02:	6818      	ldr	r0, [r3, #0]
 800bd04:	fa00 f009 	lsl.w	r0, r0, r9
 800bd08:	4310      	orrs	r0, r2
 800bd0a:	f84a 0b04 	str.w	r0, [sl], #4
 800bd0e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd12:	459c      	cmp	ip, r3
 800bd14:	fa22 f20e 	lsr.w	r2, r2, lr
 800bd18:	d8f3      	bhi.n	800bd02 <__lshift+0x6e>
 800bd1a:	ebac 0304 	sub.w	r3, ip, r4
 800bd1e:	3b15      	subs	r3, #21
 800bd20:	f023 0303 	bic.w	r3, r3, #3
 800bd24:	3304      	adds	r3, #4
 800bd26:	f104 0015 	add.w	r0, r4, #21
 800bd2a:	4584      	cmp	ip, r0
 800bd2c:	bf38      	it	cc
 800bd2e:	2304      	movcc	r3, #4
 800bd30:	50ca      	str	r2, [r1, r3]
 800bd32:	b10a      	cbz	r2, 800bd38 <__lshift+0xa4>
 800bd34:	f108 0602 	add.w	r6, r8, #2
 800bd38:	3e01      	subs	r6, #1
 800bd3a:	4638      	mov	r0, r7
 800bd3c:	612e      	str	r6, [r5, #16]
 800bd3e:	4621      	mov	r1, r4
 800bd40:	f7ff fd90 	bl	800b864 <_Bfree>
 800bd44:	4628      	mov	r0, r5
 800bd46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd4a:	f842 0f04 	str.w	r0, [r2, #4]!
 800bd4e:	3301      	adds	r3, #1
 800bd50:	e7c5      	b.n	800bcde <__lshift+0x4a>
 800bd52:	3904      	subs	r1, #4
 800bd54:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd58:	f841 2f04 	str.w	r2, [r1, #4]!
 800bd5c:	459c      	cmp	ip, r3
 800bd5e:	d8f9      	bhi.n	800bd54 <__lshift+0xc0>
 800bd60:	e7ea      	b.n	800bd38 <__lshift+0xa4>
 800bd62:	bf00      	nop
 800bd64:	0800d11d 	.word	0x0800d11d
 800bd68:	0800d18e 	.word	0x0800d18e

0800bd6c <__mcmp>:
 800bd6c:	690a      	ldr	r2, [r1, #16]
 800bd6e:	4603      	mov	r3, r0
 800bd70:	6900      	ldr	r0, [r0, #16]
 800bd72:	1a80      	subs	r0, r0, r2
 800bd74:	b530      	push	{r4, r5, lr}
 800bd76:	d10e      	bne.n	800bd96 <__mcmp+0x2a>
 800bd78:	3314      	adds	r3, #20
 800bd7a:	3114      	adds	r1, #20
 800bd7c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bd80:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bd84:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bd88:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bd8c:	4295      	cmp	r5, r2
 800bd8e:	d003      	beq.n	800bd98 <__mcmp+0x2c>
 800bd90:	d205      	bcs.n	800bd9e <__mcmp+0x32>
 800bd92:	f04f 30ff 	mov.w	r0, #4294967295
 800bd96:	bd30      	pop	{r4, r5, pc}
 800bd98:	42a3      	cmp	r3, r4
 800bd9a:	d3f3      	bcc.n	800bd84 <__mcmp+0x18>
 800bd9c:	e7fb      	b.n	800bd96 <__mcmp+0x2a>
 800bd9e:	2001      	movs	r0, #1
 800bda0:	e7f9      	b.n	800bd96 <__mcmp+0x2a>
	...

0800bda4 <__mdiff>:
 800bda4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bda8:	4689      	mov	r9, r1
 800bdaa:	4606      	mov	r6, r0
 800bdac:	4611      	mov	r1, r2
 800bdae:	4648      	mov	r0, r9
 800bdb0:	4614      	mov	r4, r2
 800bdb2:	f7ff ffdb 	bl	800bd6c <__mcmp>
 800bdb6:	1e05      	subs	r5, r0, #0
 800bdb8:	d112      	bne.n	800bde0 <__mdiff+0x3c>
 800bdba:	4629      	mov	r1, r5
 800bdbc:	4630      	mov	r0, r6
 800bdbe:	f7ff fd11 	bl	800b7e4 <_Balloc>
 800bdc2:	4602      	mov	r2, r0
 800bdc4:	b928      	cbnz	r0, 800bdd2 <__mdiff+0x2e>
 800bdc6:	4b3f      	ldr	r3, [pc, #252]	@ (800bec4 <__mdiff+0x120>)
 800bdc8:	f240 2137 	movw	r1, #567	@ 0x237
 800bdcc:	483e      	ldr	r0, [pc, #248]	@ (800bec8 <__mdiff+0x124>)
 800bdce:	f7ff f89f 	bl	800af10 <__assert_func>
 800bdd2:	2301      	movs	r3, #1
 800bdd4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bdd8:	4610      	mov	r0, r2
 800bdda:	b003      	add	sp, #12
 800bddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bde0:	bfbc      	itt	lt
 800bde2:	464b      	movlt	r3, r9
 800bde4:	46a1      	movlt	r9, r4
 800bde6:	4630      	mov	r0, r6
 800bde8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bdec:	bfba      	itte	lt
 800bdee:	461c      	movlt	r4, r3
 800bdf0:	2501      	movlt	r5, #1
 800bdf2:	2500      	movge	r5, #0
 800bdf4:	f7ff fcf6 	bl	800b7e4 <_Balloc>
 800bdf8:	4602      	mov	r2, r0
 800bdfa:	b918      	cbnz	r0, 800be04 <__mdiff+0x60>
 800bdfc:	4b31      	ldr	r3, [pc, #196]	@ (800bec4 <__mdiff+0x120>)
 800bdfe:	f240 2145 	movw	r1, #581	@ 0x245
 800be02:	e7e3      	b.n	800bdcc <__mdiff+0x28>
 800be04:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800be08:	6926      	ldr	r6, [r4, #16]
 800be0a:	60c5      	str	r5, [r0, #12]
 800be0c:	f109 0310 	add.w	r3, r9, #16
 800be10:	f109 0514 	add.w	r5, r9, #20
 800be14:	f104 0e14 	add.w	lr, r4, #20
 800be18:	f100 0b14 	add.w	fp, r0, #20
 800be1c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800be20:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800be24:	9301      	str	r3, [sp, #4]
 800be26:	46d9      	mov	r9, fp
 800be28:	f04f 0c00 	mov.w	ip, #0
 800be2c:	9b01      	ldr	r3, [sp, #4]
 800be2e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800be32:	f853 af04 	ldr.w	sl, [r3, #4]!
 800be36:	9301      	str	r3, [sp, #4]
 800be38:	fa1f f38a 	uxth.w	r3, sl
 800be3c:	4619      	mov	r1, r3
 800be3e:	b283      	uxth	r3, r0
 800be40:	1acb      	subs	r3, r1, r3
 800be42:	0c00      	lsrs	r0, r0, #16
 800be44:	4463      	add	r3, ip
 800be46:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800be4a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800be4e:	b29b      	uxth	r3, r3
 800be50:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800be54:	4576      	cmp	r6, lr
 800be56:	f849 3b04 	str.w	r3, [r9], #4
 800be5a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800be5e:	d8e5      	bhi.n	800be2c <__mdiff+0x88>
 800be60:	1b33      	subs	r3, r6, r4
 800be62:	3b15      	subs	r3, #21
 800be64:	f023 0303 	bic.w	r3, r3, #3
 800be68:	3415      	adds	r4, #21
 800be6a:	3304      	adds	r3, #4
 800be6c:	42a6      	cmp	r6, r4
 800be6e:	bf38      	it	cc
 800be70:	2304      	movcc	r3, #4
 800be72:	441d      	add	r5, r3
 800be74:	445b      	add	r3, fp
 800be76:	461e      	mov	r6, r3
 800be78:	462c      	mov	r4, r5
 800be7a:	4544      	cmp	r4, r8
 800be7c:	d30e      	bcc.n	800be9c <__mdiff+0xf8>
 800be7e:	f108 0103 	add.w	r1, r8, #3
 800be82:	1b49      	subs	r1, r1, r5
 800be84:	f021 0103 	bic.w	r1, r1, #3
 800be88:	3d03      	subs	r5, #3
 800be8a:	45a8      	cmp	r8, r5
 800be8c:	bf38      	it	cc
 800be8e:	2100      	movcc	r1, #0
 800be90:	440b      	add	r3, r1
 800be92:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800be96:	b191      	cbz	r1, 800bebe <__mdiff+0x11a>
 800be98:	6117      	str	r7, [r2, #16]
 800be9a:	e79d      	b.n	800bdd8 <__mdiff+0x34>
 800be9c:	f854 1b04 	ldr.w	r1, [r4], #4
 800bea0:	46e6      	mov	lr, ip
 800bea2:	0c08      	lsrs	r0, r1, #16
 800bea4:	fa1c fc81 	uxtah	ip, ip, r1
 800bea8:	4471      	add	r1, lr
 800beaa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800beae:	b289      	uxth	r1, r1
 800beb0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800beb4:	f846 1b04 	str.w	r1, [r6], #4
 800beb8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bebc:	e7dd      	b.n	800be7a <__mdiff+0xd6>
 800bebe:	3f01      	subs	r7, #1
 800bec0:	e7e7      	b.n	800be92 <__mdiff+0xee>
 800bec2:	bf00      	nop
 800bec4:	0800d11d 	.word	0x0800d11d
 800bec8:	0800d18e 	.word	0x0800d18e

0800becc <__ulp>:
 800becc:	b082      	sub	sp, #8
 800bece:	ed8d 0b00 	vstr	d0, [sp]
 800bed2:	9a01      	ldr	r2, [sp, #4]
 800bed4:	4b0f      	ldr	r3, [pc, #60]	@ (800bf14 <__ulp+0x48>)
 800bed6:	4013      	ands	r3, r2
 800bed8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800bedc:	2b00      	cmp	r3, #0
 800bede:	dc08      	bgt.n	800bef2 <__ulp+0x26>
 800bee0:	425b      	negs	r3, r3
 800bee2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800bee6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800beea:	da04      	bge.n	800bef6 <__ulp+0x2a>
 800beec:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800bef0:	4113      	asrs	r3, r2
 800bef2:	2200      	movs	r2, #0
 800bef4:	e008      	b.n	800bf08 <__ulp+0x3c>
 800bef6:	f1a2 0314 	sub.w	r3, r2, #20
 800befa:	2b1e      	cmp	r3, #30
 800befc:	bfda      	itte	le
 800befe:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800bf02:	40da      	lsrle	r2, r3
 800bf04:	2201      	movgt	r2, #1
 800bf06:	2300      	movs	r3, #0
 800bf08:	4619      	mov	r1, r3
 800bf0a:	4610      	mov	r0, r2
 800bf0c:	ec41 0b10 	vmov	d0, r0, r1
 800bf10:	b002      	add	sp, #8
 800bf12:	4770      	bx	lr
 800bf14:	7ff00000 	.word	0x7ff00000

0800bf18 <__b2d>:
 800bf18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf1c:	6906      	ldr	r6, [r0, #16]
 800bf1e:	f100 0814 	add.w	r8, r0, #20
 800bf22:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800bf26:	1f37      	subs	r7, r6, #4
 800bf28:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bf2c:	4610      	mov	r0, r2
 800bf2e:	f7ff fd4b 	bl	800b9c8 <__hi0bits>
 800bf32:	f1c0 0320 	rsb	r3, r0, #32
 800bf36:	280a      	cmp	r0, #10
 800bf38:	600b      	str	r3, [r1, #0]
 800bf3a:	491b      	ldr	r1, [pc, #108]	@ (800bfa8 <__b2d+0x90>)
 800bf3c:	dc15      	bgt.n	800bf6a <__b2d+0x52>
 800bf3e:	f1c0 0c0b 	rsb	ip, r0, #11
 800bf42:	fa22 f30c 	lsr.w	r3, r2, ip
 800bf46:	45b8      	cmp	r8, r7
 800bf48:	ea43 0501 	orr.w	r5, r3, r1
 800bf4c:	bf34      	ite	cc
 800bf4e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bf52:	2300      	movcs	r3, #0
 800bf54:	3015      	adds	r0, #21
 800bf56:	fa02 f000 	lsl.w	r0, r2, r0
 800bf5a:	fa23 f30c 	lsr.w	r3, r3, ip
 800bf5e:	4303      	orrs	r3, r0
 800bf60:	461c      	mov	r4, r3
 800bf62:	ec45 4b10 	vmov	d0, r4, r5
 800bf66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf6a:	45b8      	cmp	r8, r7
 800bf6c:	bf3a      	itte	cc
 800bf6e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bf72:	f1a6 0708 	subcc.w	r7, r6, #8
 800bf76:	2300      	movcs	r3, #0
 800bf78:	380b      	subs	r0, #11
 800bf7a:	d012      	beq.n	800bfa2 <__b2d+0x8a>
 800bf7c:	f1c0 0120 	rsb	r1, r0, #32
 800bf80:	fa23 f401 	lsr.w	r4, r3, r1
 800bf84:	4082      	lsls	r2, r0
 800bf86:	4322      	orrs	r2, r4
 800bf88:	4547      	cmp	r7, r8
 800bf8a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800bf8e:	bf8c      	ite	hi
 800bf90:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800bf94:	2200      	movls	r2, #0
 800bf96:	4083      	lsls	r3, r0
 800bf98:	40ca      	lsrs	r2, r1
 800bf9a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800bf9e:	4313      	orrs	r3, r2
 800bfa0:	e7de      	b.n	800bf60 <__b2d+0x48>
 800bfa2:	ea42 0501 	orr.w	r5, r2, r1
 800bfa6:	e7db      	b.n	800bf60 <__b2d+0x48>
 800bfa8:	3ff00000 	.word	0x3ff00000

0800bfac <__d2b>:
 800bfac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bfb0:	460f      	mov	r7, r1
 800bfb2:	2101      	movs	r1, #1
 800bfb4:	ec59 8b10 	vmov	r8, r9, d0
 800bfb8:	4616      	mov	r6, r2
 800bfba:	f7ff fc13 	bl	800b7e4 <_Balloc>
 800bfbe:	4604      	mov	r4, r0
 800bfc0:	b930      	cbnz	r0, 800bfd0 <__d2b+0x24>
 800bfc2:	4602      	mov	r2, r0
 800bfc4:	4b23      	ldr	r3, [pc, #140]	@ (800c054 <__d2b+0xa8>)
 800bfc6:	4824      	ldr	r0, [pc, #144]	@ (800c058 <__d2b+0xac>)
 800bfc8:	f240 310f 	movw	r1, #783	@ 0x30f
 800bfcc:	f7fe ffa0 	bl	800af10 <__assert_func>
 800bfd0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bfd4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bfd8:	b10d      	cbz	r5, 800bfde <__d2b+0x32>
 800bfda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bfde:	9301      	str	r3, [sp, #4]
 800bfe0:	f1b8 0300 	subs.w	r3, r8, #0
 800bfe4:	d023      	beq.n	800c02e <__d2b+0x82>
 800bfe6:	4668      	mov	r0, sp
 800bfe8:	9300      	str	r3, [sp, #0]
 800bfea:	f7ff fd0c 	bl	800ba06 <__lo0bits>
 800bfee:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bff2:	b1d0      	cbz	r0, 800c02a <__d2b+0x7e>
 800bff4:	f1c0 0320 	rsb	r3, r0, #32
 800bff8:	fa02 f303 	lsl.w	r3, r2, r3
 800bffc:	430b      	orrs	r3, r1
 800bffe:	40c2      	lsrs	r2, r0
 800c000:	6163      	str	r3, [r4, #20]
 800c002:	9201      	str	r2, [sp, #4]
 800c004:	9b01      	ldr	r3, [sp, #4]
 800c006:	61a3      	str	r3, [r4, #24]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	bf0c      	ite	eq
 800c00c:	2201      	moveq	r2, #1
 800c00e:	2202      	movne	r2, #2
 800c010:	6122      	str	r2, [r4, #16]
 800c012:	b1a5      	cbz	r5, 800c03e <__d2b+0x92>
 800c014:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c018:	4405      	add	r5, r0
 800c01a:	603d      	str	r5, [r7, #0]
 800c01c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c020:	6030      	str	r0, [r6, #0]
 800c022:	4620      	mov	r0, r4
 800c024:	b003      	add	sp, #12
 800c026:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c02a:	6161      	str	r1, [r4, #20]
 800c02c:	e7ea      	b.n	800c004 <__d2b+0x58>
 800c02e:	a801      	add	r0, sp, #4
 800c030:	f7ff fce9 	bl	800ba06 <__lo0bits>
 800c034:	9b01      	ldr	r3, [sp, #4]
 800c036:	6163      	str	r3, [r4, #20]
 800c038:	3020      	adds	r0, #32
 800c03a:	2201      	movs	r2, #1
 800c03c:	e7e8      	b.n	800c010 <__d2b+0x64>
 800c03e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c042:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c046:	6038      	str	r0, [r7, #0]
 800c048:	6918      	ldr	r0, [r3, #16]
 800c04a:	f7ff fcbd 	bl	800b9c8 <__hi0bits>
 800c04e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c052:	e7e5      	b.n	800c020 <__d2b+0x74>
 800c054:	0800d11d 	.word	0x0800d11d
 800c058:	0800d18e 	.word	0x0800d18e

0800c05c <__ratio>:
 800c05c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c060:	b085      	sub	sp, #20
 800c062:	e9cd 1000 	strd	r1, r0, [sp]
 800c066:	a902      	add	r1, sp, #8
 800c068:	f7ff ff56 	bl	800bf18 <__b2d>
 800c06c:	9800      	ldr	r0, [sp, #0]
 800c06e:	a903      	add	r1, sp, #12
 800c070:	ec55 4b10 	vmov	r4, r5, d0
 800c074:	f7ff ff50 	bl	800bf18 <__b2d>
 800c078:	9b01      	ldr	r3, [sp, #4]
 800c07a:	6919      	ldr	r1, [r3, #16]
 800c07c:	9b00      	ldr	r3, [sp, #0]
 800c07e:	691b      	ldr	r3, [r3, #16]
 800c080:	1ac9      	subs	r1, r1, r3
 800c082:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c086:	1a9b      	subs	r3, r3, r2
 800c088:	ec5b ab10 	vmov	sl, fp, d0
 800c08c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c090:	2b00      	cmp	r3, #0
 800c092:	bfce      	itee	gt
 800c094:	462a      	movgt	r2, r5
 800c096:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c09a:	465a      	movle	r2, fp
 800c09c:	462f      	mov	r7, r5
 800c09e:	46d9      	mov	r9, fp
 800c0a0:	bfcc      	ite	gt
 800c0a2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c0a6:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c0aa:	464b      	mov	r3, r9
 800c0ac:	4652      	mov	r2, sl
 800c0ae:	4620      	mov	r0, r4
 800c0b0:	4639      	mov	r1, r7
 800c0b2:	f7f4 fbfb 	bl	80008ac <__aeabi_ddiv>
 800c0b6:	ec41 0b10 	vmov	d0, r0, r1
 800c0ba:	b005      	add	sp, #20
 800c0bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c0c0 <__copybits>:
 800c0c0:	3901      	subs	r1, #1
 800c0c2:	b570      	push	{r4, r5, r6, lr}
 800c0c4:	1149      	asrs	r1, r1, #5
 800c0c6:	6914      	ldr	r4, [r2, #16]
 800c0c8:	3101      	adds	r1, #1
 800c0ca:	f102 0314 	add.w	r3, r2, #20
 800c0ce:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c0d2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c0d6:	1f05      	subs	r5, r0, #4
 800c0d8:	42a3      	cmp	r3, r4
 800c0da:	d30c      	bcc.n	800c0f6 <__copybits+0x36>
 800c0dc:	1aa3      	subs	r3, r4, r2
 800c0de:	3b11      	subs	r3, #17
 800c0e0:	f023 0303 	bic.w	r3, r3, #3
 800c0e4:	3211      	adds	r2, #17
 800c0e6:	42a2      	cmp	r2, r4
 800c0e8:	bf88      	it	hi
 800c0ea:	2300      	movhi	r3, #0
 800c0ec:	4418      	add	r0, r3
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	4288      	cmp	r0, r1
 800c0f2:	d305      	bcc.n	800c100 <__copybits+0x40>
 800c0f4:	bd70      	pop	{r4, r5, r6, pc}
 800c0f6:	f853 6b04 	ldr.w	r6, [r3], #4
 800c0fa:	f845 6f04 	str.w	r6, [r5, #4]!
 800c0fe:	e7eb      	b.n	800c0d8 <__copybits+0x18>
 800c100:	f840 3b04 	str.w	r3, [r0], #4
 800c104:	e7f4      	b.n	800c0f0 <__copybits+0x30>

0800c106 <__any_on>:
 800c106:	f100 0214 	add.w	r2, r0, #20
 800c10a:	6900      	ldr	r0, [r0, #16]
 800c10c:	114b      	asrs	r3, r1, #5
 800c10e:	4298      	cmp	r0, r3
 800c110:	b510      	push	{r4, lr}
 800c112:	db11      	blt.n	800c138 <__any_on+0x32>
 800c114:	dd0a      	ble.n	800c12c <__any_on+0x26>
 800c116:	f011 011f 	ands.w	r1, r1, #31
 800c11a:	d007      	beq.n	800c12c <__any_on+0x26>
 800c11c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c120:	fa24 f001 	lsr.w	r0, r4, r1
 800c124:	fa00 f101 	lsl.w	r1, r0, r1
 800c128:	428c      	cmp	r4, r1
 800c12a:	d10b      	bne.n	800c144 <__any_on+0x3e>
 800c12c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c130:	4293      	cmp	r3, r2
 800c132:	d803      	bhi.n	800c13c <__any_on+0x36>
 800c134:	2000      	movs	r0, #0
 800c136:	bd10      	pop	{r4, pc}
 800c138:	4603      	mov	r3, r0
 800c13a:	e7f7      	b.n	800c12c <__any_on+0x26>
 800c13c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c140:	2900      	cmp	r1, #0
 800c142:	d0f5      	beq.n	800c130 <__any_on+0x2a>
 800c144:	2001      	movs	r0, #1
 800c146:	e7f6      	b.n	800c136 <__any_on+0x30>

0800c148 <__ascii_wctomb>:
 800c148:	4603      	mov	r3, r0
 800c14a:	4608      	mov	r0, r1
 800c14c:	b141      	cbz	r1, 800c160 <__ascii_wctomb+0x18>
 800c14e:	2aff      	cmp	r2, #255	@ 0xff
 800c150:	d904      	bls.n	800c15c <__ascii_wctomb+0x14>
 800c152:	228a      	movs	r2, #138	@ 0x8a
 800c154:	601a      	str	r2, [r3, #0]
 800c156:	f04f 30ff 	mov.w	r0, #4294967295
 800c15a:	4770      	bx	lr
 800c15c:	700a      	strb	r2, [r1, #0]
 800c15e:	2001      	movs	r0, #1
 800c160:	4770      	bx	lr

0800c162 <__ssputs_r>:
 800c162:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c166:	688e      	ldr	r6, [r1, #8]
 800c168:	461f      	mov	r7, r3
 800c16a:	42be      	cmp	r6, r7
 800c16c:	680b      	ldr	r3, [r1, #0]
 800c16e:	4682      	mov	sl, r0
 800c170:	460c      	mov	r4, r1
 800c172:	4690      	mov	r8, r2
 800c174:	d82d      	bhi.n	800c1d2 <__ssputs_r+0x70>
 800c176:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c17a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c17e:	d026      	beq.n	800c1ce <__ssputs_r+0x6c>
 800c180:	6965      	ldr	r5, [r4, #20]
 800c182:	6909      	ldr	r1, [r1, #16]
 800c184:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c188:	eba3 0901 	sub.w	r9, r3, r1
 800c18c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c190:	1c7b      	adds	r3, r7, #1
 800c192:	444b      	add	r3, r9
 800c194:	106d      	asrs	r5, r5, #1
 800c196:	429d      	cmp	r5, r3
 800c198:	bf38      	it	cc
 800c19a:	461d      	movcc	r5, r3
 800c19c:	0553      	lsls	r3, r2, #21
 800c19e:	d527      	bpl.n	800c1f0 <__ssputs_r+0x8e>
 800c1a0:	4629      	mov	r1, r5
 800c1a2:	f7ff fa81 	bl	800b6a8 <_malloc_r>
 800c1a6:	4606      	mov	r6, r0
 800c1a8:	b360      	cbz	r0, 800c204 <__ssputs_r+0xa2>
 800c1aa:	6921      	ldr	r1, [r4, #16]
 800c1ac:	464a      	mov	r2, r9
 800c1ae:	f7fe fe96 	bl	800aede <memcpy>
 800c1b2:	89a3      	ldrh	r3, [r4, #12]
 800c1b4:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c1b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c1bc:	81a3      	strh	r3, [r4, #12]
 800c1be:	6126      	str	r6, [r4, #16]
 800c1c0:	6165      	str	r5, [r4, #20]
 800c1c2:	444e      	add	r6, r9
 800c1c4:	eba5 0509 	sub.w	r5, r5, r9
 800c1c8:	6026      	str	r6, [r4, #0]
 800c1ca:	60a5      	str	r5, [r4, #8]
 800c1cc:	463e      	mov	r6, r7
 800c1ce:	42be      	cmp	r6, r7
 800c1d0:	d900      	bls.n	800c1d4 <__ssputs_r+0x72>
 800c1d2:	463e      	mov	r6, r7
 800c1d4:	6820      	ldr	r0, [r4, #0]
 800c1d6:	4632      	mov	r2, r6
 800c1d8:	4641      	mov	r1, r8
 800c1da:	f000 fb65 	bl	800c8a8 <memmove>
 800c1de:	68a3      	ldr	r3, [r4, #8]
 800c1e0:	1b9b      	subs	r3, r3, r6
 800c1e2:	60a3      	str	r3, [r4, #8]
 800c1e4:	6823      	ldr	r3, [r4, #0]
 800c1e6:	4433      	add	r3, r6
 800c1e8:	6023      	str	r3, [r4, #0]
 800c1ea:	2000      	movs	r0, #0
 800c1ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1f0:	462a      	mov	r2, r5
 800c1f2:	f000 fb9e 	bl	800c932 <_realloc_r>
 800c1f6:	4606      	mov	r6, r0
 800c1f8:	2800      	cmp	r0, #0
 800c1fa:	d1e0      	bne.n	800c1be <__ssputs_r+0x5c>
 800c1fc:	6921      	ldr	r1, [r4, #16]
 800c1fe:	4650      	mov	r0, sl
 800c200:	f7fe fea4 	bl	800af4c <_free_r>
 800c204:	230c      	movs	r3, #12
 800c206:	f8ca 3000 	str.w	r3, [sl]
 800c20a:	89a3      	ldrh	r3, [r4, #12]
 800c20c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c210:	81a3      	strh	r3, [r4, #12]
 800c212:	f04f 30ff 	mov.w	r0, #4294967295
 800c216:	e7e9      	b.n	800c1ec <__ssputs_r+0x8a>

0800c218 <_svfiprintf_r>:
 800c218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c21c:	4698      	mov	r8, r3
 800c21e:	898b      	ldrh	r3, [r1, #12]
 800c220:	061b      	lsls	r3, r3, #24
 800c222:	b09d      	sub	sp, #116	@ 0x74
 800c224:	4607      	mov	r7, r0
 800c226:	460d      	mov	r5, r1
 800c228:	4614      	mov	r4, r2
 800c22a:	d510      	bpl.n	800c24e <_svfiprintf_r+0x36>
 800c22c:	690b      	ldr	r3, [r1, #16]
 800c22e:	b973      	cbnz	r3, 800c24e <_svfiprintf_r+0x36>
 800c230:	2140      	movs	r1, #64	@ 0x40
 800c232:	f7ff fa39 	bl	800b6a8 <_malloc_r>
 800c236:	6028      	str	r0, [r5, #0]
 800c238:	6128      	str	r0, [r5, #16]
 800c23a:	b930      	cbnz	r0, 800c24a <_svfiprintf_r+0x32>
 800c23c:	230c      	movs	r3, #12
 800c23e:	603b      	str	r3, [r7, #0]
 800c240:	f04f 30ff 	mov.w	r0, #4294967295
 800c244:	b01d      	add	sp, #116	@ 0x74
 800c246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c24a:	2340      	movs	r3, #64	@ 0x40
 800c24c:	616b      	str	r3, [r5, #20]
 800c24e:	2300      	movs	r3, #0
 800c250:	9309      	str	r3, [sp, #36]	@ 0x24
 800c252:	2320      	movs	r3, #32
 800c254:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c258:	f8cd 800c 	str.w	r8, [sp, #12]
 800c25c:	2330      	movs	r3, #48	@ 0x30
 800c25e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c3fc <_svfiprintf_r+0x1e4>
 800c262:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c266:	f04f 0901 	mov.w	r9, #1
 800c26a:	4623      	mov	r3, r4
 800c26c:	469a      	mov	sl, r3
 800c26e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c272:	b10a      	cbz	r2, 800c278 <_svfiprintf_r+0x60>
 800c274:	2a25      	cmp	r2, #37	@ 0x25
 800c276:	d1f9      	bne.n	800c26c <_svfiprintf_r+0x54>
 800c278:	ebba 0b04 	subs.w	fp, sl, r4
 800c27c:	d00b      	beq.n	800c296 <_svfiprintf_r+0x7e>
 800c27e:	465b      	mov	r3, fp
 800c280:	4622      	mov	r2, r4
 800c282:	4629      	mov	r1, r5
 800c284:	4638      	mov	r0, r7
 800c286:	f7ff ff6c 	bl	800c162 <__ssputs_r>
 800c28a:	3001      	adds	r0, #1
 800c28c:	f000 80a7 	beq.w	800c3de <_svfiprintf_r+0x1c6>
 800c290:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c292:	445a      	add	r2, fp
 800c294:	9209      	str	r2, [sp, #36]	@ 0x24
 800c296:	f89a 3000 	ldrb.w	r3, [sl]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	f000 809f 	beq.w	800c3de <_svfiprintf_r+0x1c6>
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	f04f 32ff 	mov.w	r2, #4294967295
 800c2a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c2aa:	f10a 0a01 	add.w	sl, sl, #1
 800c2ae:	9304      	str	r3, [sp, #16]
 800c2b0:	9307      	str	r3, [sp, #28]
 800c2b2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c2b6:	931a      	str	r3, [sp, #104]	@ 0x68
 800c2b8:	4654      	mov	r4, sl
 800c2ba:	2205      	movs	r2, #5
 800c2bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2c0:	484e      	ldr	r0, [pc, #312]	@ (800c3fc <_svfiprintf_r+0x1e4>)
 800c2c2:	f7f3 ffbd 	bl	8000240 <memchr>
 800c2c6:	9a04      	ldr	r2, [sp, #16]
 800c2c8:	b9d8      	cbnz	r0, 800c302 <_svfiprintf_r+0xea>
 800c2ca:	06d0      	lsls	r0, r2, #27
 800c2cc:	bf44      	itt	mi
 800c2ce:	2320      	movmi	r3, #32
 800c2d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c2d4:	0711      	lsls	r1, r2, #28
 800c2d6:	bf44      	itt	mi
 800c2d8:	232b      	movmi	r3, #43	@ 0x2b
 800c2da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c2de:	f89a 3000 	ldrb.w	r3, [sl]
 800c2e2:	2b2a      	cmp	r3, #42	@ 0x2a
 800c2e4:	d015      	beq.n	800c312 <_svfiprintf_r+0xfa>
 800c2e6:	9a07      	ldr	r2, [sp, #28]
 800c2e8:	4654      	mov	r4, sl
 800c2ea:	2000      	movs	r0, #0
 800c2ec:	f04f 0c0a 	mov.w	ip, #10
 800c2f0:	4621      	mov	r1, r4
 800c2f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c2f6:	3b30      	subs	r3, #48	@ 0x30
 800c2f8:	2b09      	cmp	r3, #9
 800c2fa:	d94b      	bls.n	800c394 <_svfiprintf_r+0x17c>
 800c2fc:	b1b0      	cbz	r0, 800c32c <_svfiprintf_r+0x114>
 800c2fe:	9207      	str	r2, [sp, #28]
 800c300:	e014      	b.n	800c32c <_svfiprintf_r+0x114>
 800c302:	eba0 0308 	sub.w	r3, r0, r8
 800c306:	fa09 f303 	lsl.w	r3, r9, r3
 800c30a:	4313      	orrs	r3, r2
 800c30c:	9304      	str	r3, [sp, #16]
 800c30e:	46a2      	mov	sl, r4
 800c310:	e7d2      	b.n	800c2b8 <_svfiprintf_r+0xa0>
 800c312:	9b03      	ldr	r3, [sp, #12]
 800c314:	1d19      	adds	r1, r3, #4
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	9103      	str	r1, [sp, #12]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	bfbb      	ittet	lt
 800c31e:	425b      	neglt	r3, r3
 800c320:	f042 0202 	orrlt.w	r2, r2, #2
 800c324:	9307      	strge	r3, [sp, #28]
 800c326:	9307      	strlt	r3, [sp, #28]
 800c328:	bfb8      	it	lt
 800c32a:	9204      	strlt	r2, [sp, #16]
 800c32c:	7823      	ldrb	r3, [r4, #0]
 800c32e:	2b2e      	cmp	r3, #46	@ 0x2e
 800c330:	d10a      	bne.n	800c348 <_svfiprintf_r+0x130>
 800c332:	7863      	ldrb	r3, [r4, #1]
 800c334:	2b2a      	cmp	r3, #42	@ 0x2a
 800c336:	d132      	bne.n	800c39e <_svfiprintf_r+0x186>
 800c338:	9b03      	ldr	r3, [sp, #12]
 800c33a:	1d1a      	adds	r2, r3, #4
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	9203      	str	r2, [sp, #12]
 800c340:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c344:	3402      	adds	r4, #2
 800c346:	9305      	str	r3, [sp, #20]
 800c348:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c40c <_svfiprintf_r+0x1f4>
 800c34c:	7821      	ldrb	r1, [r4, #0]
 800c34e:	2203      	movs	r2, #3
 800c350:	4650      	mov	r0, sl
 800c352:	f7f3 ff75 	bl	8000240 <memchr>
 800c356:	b138      	cbz	r0, 800c368 <_svfiprintf_r+0x150>
 800c358:	9b04      	ldr	r3, [sp, #16]
 800c35a:	eba0 000a 	sub.w	r0, r0, sl
 800c35e:	2240      	movs	r2, #64	@ 0x40
 800c360:	4082      	lsls	r2, r0
 800c362:	4313      	orrs	r3, r2
 800c364:	3401      	adds	r4, #1
 800c366:	9304      	str	r3, [sp, #16]
 800c368:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c36c:	4824      	ldr	r0, [pc, #144]	@ (800c400 <_svfiprintf_r+0x1e8>)
 800c36e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c372:	2206      	movs	r2, #6
 800c374:	f7f3 ff64 	bl	8000240 <memchr>
 800c378:	2800      	cmp	r0, #0
 800c37a:	d036      	beq.n	800c3ea <_svfiprintf_r+0x1d2>
 800c37c:	4b21      	ldr	r3, [pc, #132]	@ (800c404 <_svfiprintf_r+0x1ec>)
 800c37e:	bb1b      	cbnz	r3, 800c3c8 <_svfiprintf_r+0x1b0>
 800c380:	9b03      	ldr	r3, [sp, #12]
 800c382:	3307      	adds	r3, #7
 800c384:	f023 0307 	bic.w	r3, r3, #7
 800c388:	3308      	adds	r3, #8
 800c38a:	9303      	str	r3, [sp, #12]
 800c38c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c38e:	4433      	add	r3, r6
 800c390:	9309      	str	r3, [sp, #36]	@ 0x24
 800c392:	e76a      	b.n	800c26a <_svfiprintf_r+0x52>
 800c394:	fb0c 3202 	mla	r2, ip, r2, r3
 800c398:	460c      	mov	r4, r1
 800c39a:	2001      	movs	r0, #1
 800c39c:	e7a8      	b.n	800c2f0 <_svfiprintf_r+0xd8>
 800c39e:	2300      	movs	r3, #0
 800c3a0:	3401      	adds	r4, #1
 800c3a2:	9305      	str	r3, [sp, #20]
 800c3a4:	4619      	mov	r1, r3
 800c3a6:	f04f 0c0a 	mov.w	ip, #10
 800c3aa:	4620      	mov	r0, r4
 800c3ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c3b0:	3a30      	subs	r2, #48	@ 0x30
 800c3b2:	2a09      	cmp	r2, #9
 800c3b4:	d903      	bls.n	800c3be <_svfiprintf_r+0x1a6>
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d0c6      	beq.n	800c348 <_svfiprintf_r+0x130>
 800c3ba:	9105      	str	r1, [sp, #20]
 800c3bc:	e7c4      	b.n	800c348 <_svfiprintf_r+0x130>
 800c3be:	fb0c 2101 	mla	r1, ip, r1, r2
 800c3c2:	4604      	mov	r4, r0
 800c3c4:	2301      	movs	r3, #1
 800c3c6:	e7f0      	b.n	800c3aa <_svfiprintf_r+0x192>
 800c3c8:	ab03      	add	r3, sp, #12
 800c3ca:	9300      	str	r3, [sp, #0]
 800c3cc:	462a      	mov	r2, r5
 800c3ce:	4b0e      	ldr	r3, [pc, #56]	@ (800c408 <_svfiprintf_r+0x1f0>)
 800c3d0:	a904      	add	r1, sp, #16
 800c3d2:	4638      	mov	r0, r7
 800c3d4:	f3af 8000 	nop.w
 800c3d8:	1c42      	adds	r2, r0, #1
 800c3da:	4606      	mov	r6, r0
 800c3dc:	d1d6      	bne.n	800c38c <_svfiprintf_r+0x174>
 800c3de:	89ab      	ldrh	r3, [r5, #12]
 800c3e0:	065b      	lsls	r3, r3, #25
 800c3e2:	f53f af2d 	bmi.w	800c240 <_svfiprintf_r+0x28>
 800c3e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c3e8:	e72c      	b.n	800c244 <_svfiprintf_r+0x2c>
 800c3ea:	ab03      	add	r3, sp, #12
 800c3ec:	9300      	str	r3, [sp, #0]
 800c3ee:	462a      	mov	r2, r5
 800c3f0:	4b05      	ldr	r3, [pc, #20]	@ (800c408 <_svfiprintf_r+0x1f0>)
 800c3f2:	a904      	add	r1, sp, #16
 800c3f4:	4638      	mov	r0, r7
 800c3f6:	f000 f879 	bl	800c4ec <_printf_i>
 800c3fa:	e7ed      	b.n	800c3d8 <_svfiprintf_r+0x1c0>
 800c3fc:	0800d3e9 	.word	0x0800d3e9
 800c400:	0800d3f3 	.word	0x0800d3f3
 800c404:	00000000 	.word	0x00000000
 800c408:	0800c163 	.word	0x0800c163
 800c40c:	0800d3ef 	.word	0x0800d3ef

0800c410 <_printf_common>:
 800c410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c414:	4616      	mov	r6, r2
 800c416:	4698      	mov	r8, r3
 800c418:	688a      	ldr	r2, [r1, #8]
 800c41a:	690b      	ldr	r3, [r1, #16]
 800c41c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c420:	4293      	cmp	r3, r2
 800c422:	bfb8      	it	lt
 800c424:	4613      	movlt	r3, r2
 800c426:	6033      	str	r3, [r6, #0]
 800c428:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c42c:	4607      	mov	r7, r0
 800c42e:	460c      	mov	r4, r1
 800c430:	b10a      	cbz	r2, 800c436 <_printf_common+0x26>
 800c432:	3301      	adds	r3, #1
 800c434:	6033      	str	r3, [r6, #0]
 800c436:	6823      	ldr	r3, [r4, #0]
 800c438:	0699      	lsls	r1, r3, #26
 800c43a:	bf42      	ittt	mi
 800c43c:	6833      	ldrmi	r3, [r6, #0]
 800c43e:	3302      	addmi	r3, #2
 800c440:	6033      	strmi	r3, [r6, #0]
 800c442:	6825      	ldr	r5, [r4, #0]
 800c444:	f015 0506 	ands.w	r5, r5, #6
 800c448:	d106      	bne.n	800c458 <_printf_common+0x48>
 800c44a:	f104 0a19 	add.w	sl, r4, #25
 800c44e:	68e3      	ldr	r3, [r4, #12]
 800c450:	6832      	ldr	r2, [r6, #0]
 800c452:	1a9b      	subs	r3, r3, r2
 800c454:	42ab      	cmp	r3, r5
 800c456:	dc26      	bgt.n	800c4a6 <_printf_common+0x96>
 800c458:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c45c:	6822      	ldr	r2, [r4, #0]
 800c45e:	3b00      	subs	r3, #0
 800c460:	bf18      	it	ne
 800c462:	2301      	movne	r3, #1
 800c464:	0692      	lsls	r2, r2, #26
 800c466:	d42b      	bmi.n	800c4c0 <_printf_common+0xb0>
 800c468:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c46c:	4641      	mov	r1, r8
 800c46e:	4638      	mov	r0, r7
 800c470:	47c8      	blx	r9
 800c472:	3001      	adds	r0, #1
 800c474:	d01e      	beq.n	800c4b4 <_printf_common+0xa4>
 800c476:	6823      	ldr	r3, [r4, #0]
 800c478:	6922      	ldr	r2, [r4, #16]
 800c47a:	f003 0306 	and.w	r3, r3, #6
 800c47e:	2b04      	cmp	r3, #4
 800c480:	bf02      	ittt	eq
 800c482:	68e5      	ldreq	r5, [r4, #12]
 800c484:	6833      	ldreq	r3, [r6, #0]
 800c486:	1aed      	subeq	r5, r5, r3
 800c488:	68a3      	ldr	r3, [r4, #8]
 800c48a:	bf0c      	ite	eq
 800c48c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c490:	2500      	movne	r5, #0
 800c492:	4293      	cmp	r3, r2
 800c494:	bfc4      	itt	gt
 800c496:	1a9b      	subgt	r3, r3, r2
 800c498:	18ed      	addgt	r5, r5, r3
 800c49a:	2600      	movs	r6, #0
 800c49c:	341a      	adds	r4, #26
 800c49e:	42b5      	cmp	r5, r6
 800c4a0:	d11a      	bne.n	800c4d8 <_printf_common+0xc8>
 800c4a2:	2000      	movs	r0, #0
 800c4a4:	e008      	b.n	800c4b8 <_printf_common+0xa8>
 800c4a6:	2301      	movs	r3, #1
 800c4a8:	4652      	mov	r2, sl
 800c4aa:	4641      	mov	r1, r8
 800c4ac:	4638      	mov	r0, r7
 800c4ae:	47c8      	blx	r9
 800c4b0:	3001      	adds	r0, #1
 800c4b2:	d103      	bne.n	800c4bc <_printf_common+0xac>
 800c4b4:	f04f 30ff 	mov.w	r0, #4294967295
 800c4b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4bc:	3501      	adds	r5, #1
 800c4be:	e7c6      	b.n	800c44e <_printf_common+0x3e>
 800c4c0:	18e1      	adds	r1, r4, r3
 800c4c2:	1c5a      	adds	r2, r3, #1
 800c4c4:	2030      	movs	r0, #48	@ 0x30
 800c4c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c4ca:	4422      	add	r2, r4
 800c4cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c4d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c4d4:	3302      	adds	r3, #2
 800c4d6:	e7c7      	b.n	800c468 <_printf_common+0x58>
 800c4d8:	2301      	movs	r3, #1
 800c4da:	4622      	mov	r2, r4
 800c4dc:	4641      	mov	r1, r8
 800c4de:	4638      	mov	r0, r7
 800c4e0:	47c8      	blx	r9
 800c4e2:	3001      	adds	r0, #1
 800c4e4:	d0e6      	beq.n	800c4b4 <_printf_common+0xa4>
 800c4e6:	3601      	adds	r6, #1
 800c4e8:	e7d9      	b.n	800c49e <_printf_common+0x8e>
	...

0800c4ec <_printf_i>:
 800c4ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c4f0:	7e0f      	ldrb	r7, [r1, #24]
 800c4f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c4f4:	2f78      	cmp	r7, #120	@ 0x78
 800c4f6:	4691      	mov	r9, r2
 800c4f8:	4680      	mov	r8, r0
 800c4fa:	460c      	mov	r4, r1
 800c4fc:	469a      	mov	sl, r3
 800c4fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c502:	d807      	bhi.n	800c514 <_printf_i+0x28>
 800c504:	2f62      	cmp	r7, #98	@ 0x62
 800c506:	d80a      	bhi.n	800c51e <_printf_i+0x32>
 800c508:	2f00      	cmp	r7, #0
 800c50a:	f000 80d2 	beq.w	800c6b2 <_printf_i+0x1c6>
 800c50e:	2f58      	cmp	r7, #88	@ 0x58
 800c510:	f000 80b9 	beq.w	800c686 <_printf_i+0x19a>
 800c514:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c518:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c51c:	e03a      	b.n	800c594 <_printf_i+0xa8>
 800c51e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c522:	2b15      	cmp	r3, #21
 800c524:	d8f6      	bhi.n	800c514 <_printf_i+0x28>
 800c526:	a101      	add	r1, pc, #4	@ (adr r1, 800c52c <_printf_i+0x40>)
 800c528:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c52c:	0800c585 	.word	0x0800c585
 800c530:	0800c599 	.word	0x0800c599
 800c534:	0800c515 	.word	0x0800c515
 800c538:	0800c515 	.word	0x0800c515
 800c53c:	0800c515 	.word	0x0800c515
 800c540:	0800c515 	.word	0x0800c515
 800c544:	0800c599 	.word	0x0800c599
 800c548:	0800c515 	.word	0x0800c515
 800c54c:	0800c515 	.word	0x0800c515
 800c550:	0800c515 	.word	0x0800c515
 800c554:	0800c515 	.word	0x0800c515
 800c558:	0800c699 	.word	0x0800c699
 800c55c:	0800c5c3 	.word	0x0800c5c3
 800c560:	0800c653 	.word	0x0800c653
 800c564:	0800c515 	.word	0x0800c515
 800c568:	0800c515 	.word	0x0800c515
 800c56c:	0800c6bb 	.word	0x0800c6bb
 800c570:	0800c515 	.word	0x0800c515
 800c574:	0800c5c3 	.word	0x0800c5c3
 800c578:	0800c515 	.word	0x0800c515
 800c57c:	0800c515 	.word	0x0800c515
 800c580:	0800c65b 	.word	0x0800c65b
 800c584:	6833      	ldr	r3, [r6, #0]
 800c586:	1d1a      	adds	r2, r3, #4
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	6032      	str	r2, [r6, #0]
 800c58c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c590:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c594:	2301      	movs	r3, #1
 800c596:	e09d      	b.n	800c6d4 <_printf_i+0x1e8>
 800c598:	6833      	ldr	r3, [r6, #0]
 800c59a:	6820      	ldr	r0, [r4, #0]
 800c59c:	1d19      	adds	r1, r3, #4
 800c59e:	6031      	str	r1, [r6, #0]
 800c5a0:	0606      	lsls	r6, r0, #24
 800c5a2:	d501      	bpl.n	800c5a8 <_printf_i+0xbc>
 800c5a4:	681d      	ldr	r5, [r3, #0]
 800c5a6:	e003      	b.n	800c5b0 <_printf_i+0xc4>
 800c5a8:	0645      	lsls	r5, r0, #25
 800c5aa:	d5fb      	bpl.n	800c5a4 <_printf_i+0xb8>
 800c5ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c5b0:	2d00      	cmp	r5, #0
 800c5b2:	da03      	bge.n	800c5bc <_printf_i+0xd0>
 800c5b4:	232d      	movs	r3, #45	@ 0x2d
 800c5b6:	426d      	negs	r5, r5
 800c5b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c5bc:	4859      	ldr	r0, [pc, #356]	@ (800c724 <_printf_i+0x238>)
 800c5be:	230a      	movs	r3, #10
 800c5c0:	e011      	b.n	800c5e6 <_printf_i+0xfa>
 800c5c2:	6821      	ldr	r1, [r4, #0]
 800c5c4:	6833      	ldr	r3, [r6, #0]
 800c5c6:	0608      	lsls	r0, r1, #24
 800c5c8:	f853 5b04 	ldr.w	r5, [r3], #4
 800c5cc:	d402      	bmi.n	800c5d4 <_printf_i+0xe8>
 800c5ce:	0649      	lsls	r1, r1, #25
 800c5d0:	bf48      	it	mi
 800c5d2:	b2ad      	uxthmi	r5, r5
 800c5d4:	2f6f      	cmp	r7, #111	@ 0x6f
 800c5d6:	4853      	ldr	r0, [pc, #332]	@ (800c724 <_printf_i+0x238>)
 800c5d8:	6033      	str	r3, [r6, #0]
 800c5da:	bf14      	ite	ne
 800c5dc:	230a      	movne	r3, #10
 800c5de:	2308      	moveq	r3, #8
 800c5e0:	2100      	movs	r1, #0
 800c5e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c5e6:	6866      	ldr	r6, [r4, #4]
 800c5e8:	60a6      	str	r6, [r4, #8]
 800c5ea:	2e00      	cmp	r6, #0
 800c5ec:	bfa2      	ittt	ge
 800c5ee:	6821      	ldrge	r1, [r4, #0]
 800c5f0:	f021 0104 	bicge.w	r1, r1, #4
 800c5f4:	6021      	strge	r1, [r4, #0]
 800c5f6:	b90d      	cbnz	r5, 800c5fc <_printf_i+0x110>
 800c5f8:	2e00      	cmp	r6, #0
 800c5fa:	d04b      	beq.n	800c694 <_printf_i+0x1a8>
 800c5fc:	4616      	mov	r6, r2
 800c5fe:	fbb5 f1f3 	udiv	r1, r5, r3
 800c602:	fb03 5711 	mls	r7, r3, r1, r5
 800c606:	5dc7      	ldrb	r7, [r0, r7]
 800c608:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c60c:	462f      	mov	r7, r5
 800c60e:	42bb      	cmp	r3, r7
 800c610:	460d      	mov	r5, r1
 800c612:	d9f4      	bls.n	800c5fe <_printf_i+0x112>
 800c614:	2b08      	cmp	r3, #8
 800c616:	d10b      	bne.n	800c630 <_printf_i+0x144>
 800c618:	6823      	ldr	r3, [r4, #0]
 800c61a:	07df      	lsls	r7, r3, #31
 800c61c:	d508      	bpl.n	800c630 <_printf_i+0x144>
 800c61e:	6923      	ldr	r3, [r4, #16]
 800c620:	6861      	ldr	r1, [r4, #4]
 800c622:	4299      	cmp	r1, r3
 800c624:	bfde      	ittt	le
 800c626:	2330      	movle	r3, #48	@ 0x30
 800c628:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c62c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c630:	1b92      	subs	r2, r2, r6
 800c632:	6122      	str	r2, [r4, #16]
 800c634:	f8cd a000 	str.w	sl, [sp]
 800c638:	464b      	mov	r3, r9
 800c63a:	aa03      	add	r2, sp, #12
 800c63c:	4621      	mov	r1, r4
 800c63e:	4640      	mov	r0, r8
 800c640:	f7ff fee6 	bl	800c410 <_printf_common>
 800c644:	3001      	adds	r0, #1
 800c646:	d14a      	bne.n	800c6de <_printf_i+0x1f2>
 800c648:	f04f 30ff 	mov.w	r0, #4294967295
 800c64c:	b004      	add	sp, #16
 800c64e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c652:	6823      	ldr	r3, [r4, #0]
 800c654:	f043 0320 	orr.w	r3, r3, #32
 800c658:	6023      	str	r3, [r4, #0]
 800c65a:	4833      	ldr	r0, [pc, #204]	@ (800c728 <_printf_i+0x23c>)
 800c65c:	2778      	movs	r7, #120	@ 0x78
 800c65e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c662:	6823      	ldr	r3, [r4, #0]
 800c664:	6831      	ldr	r1, [r6, #0]
 800c666:	061f      	lsls	r7, r3, #24
 800c668:	f851 5b04 	ldr.w	r5, [r1], #4
 800c66c:	d402      	bmi.n	800c674 <_printf_i+0x188>
 800c66e:	065f      	lsls	r7, r3, #25
 800c670:	bf48      	it	mi
 800c672:	b2ad      	uxthmi	r5, r5
 800c674:	6031      	str	r1, [r6, #0]
 800c676:	07d9      	lsls	r1, r3, #31
 800c678:	bf44      	itt	mi
 800c67a:	f043 0320 	orrmi.w	r3, r3, #32
 800c67e:	6023      	strmi	r3, [r4, #0]
 800c680:	b11d      	cbz	r5, 800c68a <_printf_i+0x19e>
 800c682:	2310      	movs	r3, #16
 800c684:	e7ac      	b.n	800c5e0 <_printf_i+0xf4>
 800c686:	4827      	ldr	r0, [pc, #156]	@ (800c724 <_printf_i+0x238>)
 800c688:	e7e9      	b.n	800c65e <_printf_i+0x172>
 800c68a:	6823      	ldr	r3, [r4, #0]
 800c68c:	f023 0320 	bic.w	r3, r3, #32
 800c690:	6023      	str	r3, [r4, #0]
 800c692:	e7f6      	b.n	800c682 <_printf_i+0x196>
 800c694:	4616      	mov	r6, r2
 800c696:	e7bd      	b.n	800c614 <_printf_i+0x128>
 800c698:	6833      	ldr	r3, [r6, #0]
 800c69a:	6825      	ldr	r5, [r4, #0]
 800c69c:	6961      	ldr	r1, [r4, #20]
 800c69e:	1d18      	adds	r0, r3, #4
 800c6a0:	6030      	str	r0, [r6, #0]
 800c6a2:	062e      	lsls	r6, r5, #24
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	d501      	bpl.n	800c6ac <_printf_i+0x1c0>
 800c6a8:	6019      	str	r1, [r3, #0]
 800c6aa:	e002      	b.n	800c6b2 <_printf_i+0x1c6>
 800c6ac:	0668      	lsls	r0, r5, #25
 800c6ae:	d5fb      	bpl.n	800c6a8 <_printf_i+0x1bc>
 800c6b0:	8019      	strh	r1, [r3, #0]
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	6123      	str	r3, [r4, #16]
 800c6b6:	4616      	mov	r6, r2
 800c6b8:	e7bc      	b.n	800c634 <_printf_i+0x148>
 800c6ba:	6833      	ldr	r3, [r6, #0]
 800c6bc:	1d1a      	adds	r2, r3, #4
 800c6be:	6032      	str	r2, [r6, #0]
 800c6c0:	681e      	ldr	r6, [r3, #0]
 800c6c2:	6862      	ldr	r2, [r4, #4]
 800c6c4:	2100      	movs	r1, #0
 800c6c6:	4630      	mov	r0, r6
 800c6c8:	f7f3 fdba 	bl	8000240 <memchr>
 800c6cc:	b108      	cbz	r0, 800c6d2 <_printf_i+0x1e6>
 800c6ce:	1b80      	subs	r0, r0, r6
 800c6d0:	6060      	str	r0, [r4, #4]
 800c6d2:	6863      	ldr	r3, [r4, #4]
 800c6d4:	6123      	str	r3, [r4, #16]
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c6dc:	e7aa      	b.n	800c634 <_printf_i+0x148>
 800c6de:	6923      	ldr	r3, [r4, #16]
 800c6e0:	4632      	mov	r2, r6
 800c6e2:	4649      	mov	r1, r9
 800c6e4:	4640      	mov	r0, r8
 800c6e6:	47d0      	blx	sl
 800c6e8:	3001      	adds	r0, #1
 800c6ea:	d0ad      	beq.n	800c648 <_printf_i+0x15c>
 800c6ec:	6823      	ldr	r3, [r4, #0]
 800c6ee:	079b      	lsls	r3, r3, #30
 800c6f0:	d413      	bmi.n	800c71a <_printf_i+0x22e>
 800c6f2:	68e0      	ldr	r0, [r4, #12]
 800c6f4:	9b03      	ldr	r3, [sp, #12]
 800c6f6:	4298      	cmp	r0, r3
 800c6f8:	bfb8      	it	lt
 800c6fa:	4618      	movlt	r0, r3
 800c6fc:	e7a6      	b.n	800c64c <_printf_i+0x160>
 800c6fe:	2301      	movs	r3, #1
 800c700:	4632      	mov	r2, r6
 800c702:	4649      	mov	r1, r9
 800c704:	4640      	mov	r0, r8
 800c706:	47d0      	blx	sl
 800c708:	3001      	adds	r0, #1
 800c70a:	d09d      	beq.n	800c648 <_printf_i+0x15c>
 800c70c:	3501      	adds	r5, #1
 800c70e:	68e3      	ldr	r3, [r4, #12]
 800c710:	9903      	ldr	r1, [sp, #12]
 800c712:	1a5b      	subs	r3, r3, r1
 800c714:	42ab      	cmp	r3, r5
 800c716:	dcf2      	bgt.n	800c6fe <_printf_i+0x212>
 800c718:	e7eb      	b.n	800c6f2 <_printf_i+0x206>
 800c71a:	2500      	movs	r5, #0
 800c71c:	f104 0619 	add.w	r6, r4, #25
 800c720:	e7f5      	b.n	800c70e <_printf_i+0x222>
 800c722:	bf00      	nop
 800c724:	0800d3fa 	.word	0x0800d3fa
 800c728:	0800d40b 	.word	0x0800d40b

0800c72c <__sflush_r>:
 800c72c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c734:	0716      	lsls	r6, r2, #28
 800c736:	4605      	mov	r5, r0
 800c738:	460c      	mov	r4, r1
 800c73a:	d454      	bmi.n	800c7e6 <__sflush_r+0xba>
 800c73c:	684b      	ldr	r3, [r1, #4]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	dc02      	bgt.n	800c748 <__sflush_r+0x1c>
 800c742:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c744:	2b00      	cmp	r3, #0
 800c746:	dd48      	ble.n	800c7da <__sflush_r+0xae>
 800c748:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c74a:	2e00      	cmp	r6, #0
 800c74c:	d045      	beq.n	800c7da <__sflush_r+0xae>
 800c74e:	2300      	movs	r3, #0
 800c750:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c754:	682f      	ldr	r7, [r5, #0]
 800c756:	6a21      	ldr	r1, [r4, #32]
 800c758:	602b      	str	r3, [r5, #0]
 800c75a:	d030      	beq.n	800c7be <__sflush_r+0x92>
 800c75c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c75e:	89a3      	ldrh	r3, [r4, #12]
 800c760:	0759      	lsls	r1, r3, #29
 800c762:	d505      	bpl.n	800c770 <__sflush_r+0x44>
 800c764:	6863      	ldr	r3, [r4, #4]
 800c766:	1ad2      	subs	r2, r2, r3
 800c768:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c76a:	b10b      	cbz	r3, 800c770 <__sflush_r+0x44>
 800c76c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c76e:	1ad2      	subs	r2, r2, r3
 800c770:	2300      	movs	r3, #0
 800c772:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c774:	6a21      	ldr	r1, [r4, #32]
 800c776:	4628      	mov	r0, r5
 800c778:	47b0      	blx	r6
 800c77a:	1c43      	adds	r3, r0, #1
 800c77c:	89a3      	ldrh	r3, [r4, #12]
 800c77e:	d106      	bne.n	800c78e <__sflush_r+0x62>
 800c780:	6829      	ldr	r1, [r5, #0]
 800c782:	291d      	cmp	r1, #29
 800c784:	d82b      	bhi.n	800c7de <__sflush_r+0xb2>
 800c786:	4a2a      	ldr	r2, [pc, #168]	@ (800c830 <__sflush_r+0x104>)
 800c788:	410a      	asrs	r2, r1
 800c78a:	07d6      	lsls	r6, r2, #31
 800c78c:	d427      	bmi.n	800c7de <__sflush_r+0xb2>
 800c78e:	2200      	movs	r2, #0
 800c790:	6062      	str	r2, [r4, #4]
 800c792:	04d9      	lsls	r1, r3, #19
 800c794:	6922      	ldr	r2, [r4, #16]
 800c796:	6022      	str	r2, [r4, #0]
 800c798:	d504      	bpl.n	800c7a4 <__sflush_r+0x78>
 800c79a:	1c42      	adds	r2, r0, #1
 800c79c:	d101      	bne.n	800c7a2 <__sflush_r+0x76>
 800c79e:	682b      	ldr	r3, [r5, #0]
 800c7a0:	b903      	cbnz	r3, 800c7a4 <__sflush_r+0x78>
 800c7a2:	6560      	str	r0, [r4, #84]	@ 0x54
 800c7a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c7a6:	602f      	str	r7, [r5, #0]
 800c7a8:	b1b9      	cbz	r1, 800c7da <__sflush_r+0xae>
 800c7aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c7ae:	4299      	cmp	r1, r3
 800c7b0:	d002      	beq.n	800c7b8 <__sflush_r+0x8c>
 800c7b2:	4628      	mov	r0, r5
 800c7b4:	f7fe fbca 	bl	800af4c <_free_r>
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	6363      	str	r3, [r4, #52]	@ 0x34
 800c7bc:	e00d      	b.n	800c7da <__sflush_r+0xae>
 800c7be:	2301      	movs	r3, #1
 800c7c0:	4628      	mov	r0, r5
 800c7c2:	47b0      	blx	r6
 800c7c4:	4602      	mov	r2, r0
 800c7c6:	1c50      	adds	r0, r2, #1
 800c7c8:	d1c9      	bne.n	800c75e <__sflush_r+0x32>
 800c7ca:	682b      	ldr	r3, [r5, #0]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d0c6      	beq.n	800c75e <__sflush_r+0x32>
 800c7d0:	2b1d      	cmp	r3, #29
 800c7d2:	d001      	beq.n	800c7d8 <__sflush_r+0xac>
 800c7d4:	2b16      	cmp	r3, #22
 800c7d6:	d11e      	bne.n	800c816 <__sflush_r+0xea>
 800c7d8:	602f      	str	r7, [r5, #0]
 800c7da:	2000      	movs	r0, #0
 800c7dc:	e022      	b.n	800c824 <__sflush_r+0xf8>
 800c7de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c7e2:	b21b      	sxth	r3, r3
 800c7e4:	e01b      	b.n	800c81e <__sflush_r+0xf2>
 800c7e6:	690f      	ldr	r7, [r1, #16]
 800c7e8:	2f00      	cmp	r7, #0
 800c7ea:	d0f6      	beq.n	800c7da <__sflush_r+0xae>
 800c7ec:	0793      	lsls	r3, r2, #30
 800c7ee:	680e      	ldr	r6, [r1, #0]
 800c7f0:	bf08      	it	eq
 800c7f2:	694b      	ldreq	r3, [r1, #20]
 800c7f4:	600f      	str	r7, [r1, #0]
 800c7f6:	bf18      	it	ne
 800c7f8:	2300      	movne	r3, #0
 800c7fa:	eba6 0807 	sub.w	r8, r6, r7
 800c7fe:	608b      	str	r3, [r1, #8]
 800c800:	f1b8 0f00 	cmp.w	r8, #0
 800c804:	dde9      	ble.n	800c7da <__sflush_r+0xae>
 800c806:	6a21      	ldr	r1, [r4, #32]
 800c808:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c80a:	4643      	mov	r3, r8
 800c80c:	463a      	mov	r2, r7
 800c80e:	4628      	mov	r0, r5
 800c810:	47b0      	blx	r6
 800c812:	2800      	cmp	r0, #0
 800c814:	dc08      	bgt.n	800c828 <__sflush_r+0xfc>
 800c816:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c81a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c81e:	81a3      	strh	r3, [r4, #12]
 800c820:	f04f 30ff 	mov.w	r0, #4294967295
 800c824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c828:	4407      	add	r7, r0
 800c82a:	eba8 0800 	sub.w	r8, r8, r0
 800c82e:	e7e7      	b.n	800c800 <__sflush_r+0xd4>
 800c830:	dfbffffe 	.word	0xdfbffffe

0800c834 <_fflush_r>:
 800c834:	b538      	push	{r3, r4, r5, lr}
 800c836:	690b      	ldr	r3, [r1, #16]
 800c838:	4605      	mov	r5, r0
 800c83a:	460c      	mov	r4, r1
 800c83c:	b913      	cbnz	r3, 800c844 <_fflush_r+0x10>
 800c83e:	2500      	movs	r5, #0
 800c840:	4628      	mov	r0, r5
 800c842:	bd38      	pop	{r3, r4, r5, pc}
 800c844:	b118      	cbz	r0, 800c84e <_fflush_r+0x1a>
 800c846:	6a03      	ldr	r3, [r0, #32]
 800c848:	b90b      	cbnz	r3, 800c84e <_fflush_r+0x1a>
 800c84a:	f7fe f9b5 	bl	800abb8 <__sinit>
 800c84e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d0f3      	beq.n	800c83e <_fflush_r+0xa>
 800c856:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c858:	07d0      	lsls	r0, r2, #31
 800c85a:	d404      	bmi.n	800c866 <_fflush_r+0x32>
 800c85c:	0599      	lsls	r1, r3, #22
 800c85e:	d402      	bmi.n	800c866 <_fflush_r+0x32>
 800c860:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c862:	f7fe fb3a 	bl	800aeda <__retarget_lock_acquire_recursive>
 800c866:	4628      	mov	r0, r5
 800c868:	4621      	mov	r1, r4
 800c86a:	f7ff ff5f 	bl	800c72c <__sflush_r>
 800c86e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c870:	07da      	lsls	r2, r3, #31
 800c872:	4605      	mov	r5, r0
 800c874:	d4e4      	bmi.n	800c840 <_fflush_r+0xc>
 800c876:	89a3      	ldrh	r3, [r4, #12]
 800c878:	059b      	lsls	r3, r3, #22
 800c87a:	d4e1      	bmi.n	800c840 <_fflush_r+0xc>
 800c87c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c87e:	f7fe fb2d 	bl	800aedc <__retarget_lock_release_recursive>
 800c882:	e7dd      	b.n	800c840 <_fflush_r+0xc>

0800c884 <fiprintf>:
 800c884:	b40e      	push	{r1, r2, r3}
 800c886:	b503      	push	{r0, r1, lr}
 800c888:	4601      	mov	r1, r0
 800c88a:	ab03      	add	r3, sp, #12
 800c88c:	4805      	ldr	r0, [pc, #20]	@ (800c8a4 <fiprintf+0x20>)
 800c88e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c892:	6800      	ldr	r0, [r0, #0]
 800c894:	9301      	str	r3, [sp, #4]
 800c896:	f000 f8a3 	bl	800c9e0 <_vfiprintf_r>
 800c89a:	b002      	add	sp, #8
 800c89c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c8a0:	b003      	add	sp, #12
 800c8a2:	4770      	bx	lr
 800c8a4:	20000188 	.word	0x20000188

0800c8a8 <memmove>:
 800c8a8:	4288      	cmp	r0, r1
 800c8aa:	b510      	push	{r4, lr}
 800c8ac:	eb01 0402 	add.w	r4, r1, r2
 800c8b0:	d902      	bls.n	800c8b8 <memmove+0x10>
 800c8b2:	4284      	cmp	r4, r0
 800c8b4:	4623      	mov	r3, r4
 800c8b6:	d807      	bhi.n	800c8c8 <memmove+0x20>
 800c8b8:	1e43      	subs	r3, r0, #1
 800c8ba:	42a1      	cmp	r1, r4
 800c8bc:	d008      	beq.n	800c8d0 <memmove+0x28>
 800c8be:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c8c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c8c6:	e7f8      	b.n	800c8ba <memmove+0x12>
 800c8c8:	4402      	add	r2, r0
 800c8ca:	4601      	mov	r1, r0
 800c8cc:	428a      	cmp	r2, r1
 800c8ce:	d100      	bne.n	800c8d2 <memmove+0x2a>
 800c8d0:	bd10      	pop	{r4, pc}
 800c8d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c8d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c8da:	e7f7      	b.n	800c8cc <memmove+0x24>

0800c8dc <_sbrk_r>:
 800c8dc:	b538      	push	{r3, r4, r5, lr}
 800c8de:	4d06      	ldr	r5, [pc, #24]	@ (800c8f8 <_sbrk_r+0x1c>)
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	4604      	mov	r4, r0
 800c8e4:	4608      	mov	r0, r1
 800c8e6:	602b      	str	r3, [r5, #0]
 800c8e8:	f7f4 fde8 	bl	80014bc <_sbrk>
 800c8ec:	1c43      	adds	r3, r0, #1
 800c8ee:	d102      	bne.n	800c8f6 <_sbrk_r+0x1a>
 800c8f0:	682b      	ldr	r3, [r5, #0]
 800c8f2:	b103      	cbz	r3, 800c8f6 <_sbrk_r+0x1a>
 800c8f4:	6023      	str	r3, [r4, #0]
 800c8f6:	bd38      	pop	{r3, r4, r5, pc}
 800c8f8:	200020f0 	.word	0x200020f0

0800c8fc <abort>:
 800c8fc:	b508      	push	{r3, lr}
 800c8fe:	2006      	movs	r0, #6
 800c900:	f000 fa42 	bl	800cd88 <raise>
 800c904:	2001      	movs	r0, #1
 800c906:	f7f4 fd61 	bl	80013cc <_exit>

0800c90a <_calloc_r>:
 800c90a:	b570      	push	{r4, r5, r6, lr}
 800c90c:	fba1 5402 	umull	r5, r4, r1, r2
 800c910:	b93c      	cbnz	r4, 800c922 <_calloc_r+0x18>
 800c912:	4629      	mov	r1, r5
 800c914:	f7fe fec8 	bl	800b6a8 <_malloc_r>
 800c918:	4606      	mov	r6, r0
 800c91a:	b928      	cbnz	r0, 800c928 <_calloc_r+0x1e>
 800c91c:	2600      	movs	r6, #0
 800c91e:	4630      	mov	r0, r6
 800c920:	bd70      	pop	{r4, r5, r6, pc}
 800c922:	220c      	movs	r2, #12
 800c924:	6002      	str	r2, [r0, #0]
 800c926:	e7f9      	b.n	800c91c <_calloc_r+0x12>
 800c928:	462a      	mov	r2, r5
 800c92a:	4621      	mov	r1, r4
 800c92c:	f7fe f9ed 	bl	800ad0a <memset>
 800c930:	e7f5      	b.n	800c91e <_calloc_r+0x14>

0800c932 <_realloc_r>:
 800c932:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c936:	4680      	mov	r8, r0
 800c938:	4615      	mov	r5, r2
 800c93a:	460c      	mov	r4, r1
 800c93c:	b921      	cbnz	r1, 800c948 <_realloc_r+0x16>
 800c93e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c942:	4611      	mov	r1, r2
 800c944:	f7fe beb0 	b.w	800b6a8 <_malloc_r>
 800c948:	b92a      	cbnz	r2, 800c956 <_realloc_r+0x24>
 800c94a:	f7fe faff 	bl	800af4c <_free_r>
 800c94e:	2400      	movs	r4, #0
 800c950:	4620      	mov	r0, r4
 800c952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c956:	f000 fa33 	bl	800cdc0 <_malloc_usable_size_r>
 800c95a:	4285      	cmp	r5, r0
 800c95c:	4606      	mov	r6, r0
 800c95e:	d802      	bhi.n	800c966 <_realloc_r+0x34>
 800c960:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c964:	d8f4      	bhi.n	800c950 <_realloc_r+0x1e>
 800c966:	4629      	mov	r1, r5
 800c968:	4640      	mov	r0, r8
 800c96a:	f7fe fe9d 	bl	800b6a8 <_malloc_r>
 800c96e:	4607      	mov	r7, r0
 800c970:	2800      	cmp	r0, #0
 800c972:	d0ec      	beq.n	800c94e <_realloc_r+0x1c>
 800c974:	42b5      	cmp	r5, r6
 800c976:	462a      	mov	r2, r5
 800c978:	4621      	mov	r1, r4
 800c97a:	bf28      	it	cs
 800c97c:	4632      	movcs	r2, r6
 800c97e:	f7fe faae 	bl	800aede <memcpy>
 800c982:	4621      	mov	r1, r4
 800c984:	4640      	mov	r0, r8
 800c986:	f7fe fae1 	bl	800af4c <_free_r>
 800c98a:	463c      	mov	r4, r7
 800c98c:	e7e0      	b.n	800c950 <_realloc_r+0x1e>

0800c98e <__sfputc_r>:
 800c98e:	6893      	ldr	r3, [r2, #8]
 800c990:	3b01      	subs	r3, #1
 800c992:	2b00      	cmp	r3, #0
 800c994:	b410      	push	{r4}
 800c996:	6093      	str	r3, [r2, #8]
 800c998:	da08      	bge.n	800c9ac <__sfputc_r+0x1e>
 800c99a:	6994      	ldr	r4, [r2, #24]
 800c99c:	42a3      	cmp	r3, r4
 800c99e:	db01      	blt.n	800c9a4 <__sfputc_r+0x16>
 800c9a0:	290a      	cmp	r1, #10
 800c9a2:	d103      	bne.n	800c9ac <__sfputc_r+0x1e>
 800c9a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c9a8:	f000 b932 	b.w	800cc10 <__swbuf_r>
 800c9ac:	6813      	ldr	r3, [r2, #0]
 800c9ae:	1c58      	adds	r0, r3, #1
 800c9b0:	6010      	str	r0, [r2, #0]
 800c9b2:	7019      	strb	r1, [r3, #0]
 800c9b4:	4608      	mov	r0, r1
 800c9b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c9ba:	4770      	bx	lr

0800c9bc <__sfputs_r>:
 800c9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9be:	4606      	mov	r6, r0
 800c9c0:	460f      	mov	r7, r1
 800c9c2:	4614      	mov	r4, r2
 800c9c4:	18d5      	adds	r5, r2, r3
 800c9c6:	42ac      	cmp	r4, r5
 800c9c8:	d101      	bne.n	800c9ce <__sfputs_r+0x12>
 800c9ca:	2000      	movs	r0, #0
 800c9cc:	e007      	b.n	800c9de <__sfputs_r+0x22>
 800c9ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9d2:	463a      	mov	r2, r7
 800c9d4:	4630      	mov	r0, r6
 800c9d6:	f7ff ffda 	bl	800c98e <__sfputc_r>
 800c9da:	1c43      	adds	r3, r0, #1
 800c9dc:	d1f3      	bne.n	800c9c6 <__sfputs_r+0xa>
 800c9de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c9e0 <_vfiprintf_r>:
 800c9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9e4:	460d      	mov	r5, r1
 800c9e6:	b09d      	sub	sp, #116	@ 0x74
 800c9e8:	4614      	mov	r4, r2
 800c9ea:	4698      	mov	r8, r3
 800c9ec:	4606      	mov	r6, r0
 800c9ee:	b118      	cbz	r0, 800c9f8 <_vfiprintf_r+0x18>
 800c9f0:	6a03      	ldr	r3, [r0, #32]
 800c9f2:	b90b      	cbnz	r3, 800c9f8 <_vfiprintf_r+0x18>
 800c9f4:	f7fe f8e0 	bl	800abb8 <__sinit>
 800c9f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c9fa:	07d9      	lsls	r1, r3, #31
 800c9fc:	d405      	bmi.n	800ca0a <_vfiprintf_r+0x2a>
 800c9fe:	89ab      	ldrh	r3, [r5, #12]
 800ca00:	059a      	lsls	r2, r3, #22
 800ca02:	d402      	bmi.n	800ca0a <_vfiprintf_r+0x2a>
 800ca04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ca06:	f7fe fa68 	bl	800aeda <__retarget_lock_acquire_recursive>
 800ca0a:	89ab      	ldrh	r3, [r5, #12]
 800ca0c:	071b      	lsls	r3, r3, #28
 800ca0e:	d501      	bpl.n	800ca14 <_vfiprintf_r+0x34>
 800ca10:	692b      	ldr	r3, [r5, #16]
 800ca12:	b99b      	cbnz	r3, 800ca3c <_vfiprintf_r+0x5c>
 800ca14:	4629      	mov	r1, r5
 800ca16:	4630      	mov	r0, r6
 800ca18:	f000 f938 	bl	800cc8c <__swsetup_r>
 800ca1c:	b170      	cbz	r0, 800ca3c <_vfiprintf_r+0x5c>
 800ca1e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ca20:	07dc      	lsls	r4, r3, #31
 800ca22:	d504      	bpl.n	800ca2e <_vfiprintf_r+0x4e>
 800ca24:	f04f 30ff 	mov.w	r0, #4294967295
 800ca28:	b01d      	add	sp, #116	@ 0x74
 800ca2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca2e:	89ab      	ldrh	r3, [r5, #12]
 800ca30:	0598      	lsls	r0, r3, #22
 800ca32:	d4f7      	bmi.n	800ca24 <_vfiprintf_r+0x44>
 800ca34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ca36:	f7fe fa51 	bl	800aedc <__retarget_lock_release_recursive>
 800ca3a:	e7f3      	b.n	800ca24 <_vfiprintf_r+0x44>
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ca40:	2320      	movs	r3, #32
 800ca42:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ca46:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca4a:	2330      	movs	r3, #48	@ 0x30
 800ca4c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cbfc <_vfiprintf_r+0x21c>
 800ca50:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ca54:	f04f 0901 	mov.w	r9, #1
 800ca58:	4623      	mov	r3, r4
 800ca5a:	469a      	mov	sl, r3
 800ca5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca60:	b10a      	cbz	r2, 800ca66 <_vfiprintf_r+0x86>
 800ca62:	2a25      	cmp	r2, #37	@ 0x25
 800ca64:	d1f9      	bne.n	800ca5a <_vfiprintf_r+0x7a>
 800ca66:	ebba 0b04 	subs.w	fp, sl, r4
 800ca6a:	d00b      	beq.n	800ca84 <_vfiprintf_r+0xa4>
 800ca6c:	465b      	mov	r3, fp
 800ca6e:	4622      	mov	r2, r4
 800ca70:	4629      	mov	r1, r5
 800ca72:	4630      	mov	r0, r6
 800ca74:	f7ff ffa2 	bl	800c9bc <__sfputs_r>
 800ca78:	3001      	adds	r0, #1
 800ca7a:	f000 80a7 	beq.w	800cbcc <_vfiprintf_r+0x1ec>
 800ca7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ca80:	445a      	add	r2, fp
 800ca82:	9209      	str	r2, [sp, #36]	@ 0x24
 800ca84:	f89a 3000 	ldrb.w	r3, [sl]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	f000 809f 	beq.w	800cbcc <_vfiprintf_r+0x1ec>
 800ca8e:	2300      	movs	r3, #0
 800ca90:	f04f 32ff 	mov.w	r2, #4294967295
 800ca94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ca98:	f10a 0a01 	add.w	sl, sl, #1
 800ca9c:	9304      	str	r3, [sp, #16]
 800ca9e:	9307      	str	r3, [sp, #28]
 800caa0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800caa4:	931a      	str	r3, [sp, #104]	@ 0x68
 800caa6:	4654      	mov	r4, sl
 800caa8:	2205      	movs	r2, #5
 800caaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800caae:	4853      	ldr	r0, [pc, #332]	@ (800cbfc <_vfiprintf_r+0x21c>)
 800cab0:	f7f3 fbc6 	bl	8000240 <memchr>
 800cab4:	9a04      	ldr	r2, [sp, #16]
 800cab6:	b9d8      	cbnz	r0, 800caf0 <_vfiprintf_r+0x110>
 800cab8:	06d1      	lsls	r1, r2, #27
 800caba:	bf44      	itt	mi
 800cabc:	2320      	movmi	r3, #32
 800cabe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cac2:	0713      	lsls	r3, r2, #28
 800cac4:	bf44      	itt	mi
 800cac6:	232b      	movmi	r3, #43	@ 0x2b
 800cac8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cacc:	f89a 3000 	ldrb.w	r3, [sl]
 800cad0:	2b2a      	cmp	r3, #42	@ 0x2a
 800cad2:	d015      	beq.n	800cb00 <_vfiprintf_r+0x120>
 800cad4:	9a07      	ldr	r2, [sp, #28]
 800cad6:	4654      	mov	r4, sl
 800cad8:	2000      	movs	r0, #0
 800cada:	f04f 0c0a 	mov.w	ip, #10
 800cade:	4621      	mov	r1, r4
 800cae0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cae4:	3b30      	subs	r3, #48	@ 0x30
 800cae6:	2b09      	cmp	r3, #9
 800cae8:	d94b      	bls.n	800cb82 <_vfiprintf_r+0x1a2>
 800caea:	b1b0      	cbz	r0, 800cb1a <_vfiprintf_r+0x13a>
 800caec:	9207      	str	r2, [sp, #28]
 800caee:	e014      	b.n	800cb1a <_vfiprintf_r+0x13a>
 800caf0:	eba0 0308 	sub.w	r3, r0, r8
 800caf4:	fa09 f303 	lsl.w	r3, r9, r3
 800caf8:	4313      	orrs	r3, r2
 800cafa:	9304      	str	r3, [sp, #16]
 800cafc:	46a2      	mov	sl, r4
 800cafe:	e7d2      	b.n	800caa6 <_vfiprintf_r+0xc6>
 800cb00:	9b03      	ldr	r3, [sp, #12]
 800cb02:	1d19      	adds	r1, r3, #4
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	9103      	str	r1, [sp, #12]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	bfbb      	ittet	lt
 800cb0c:	425b      	neglt	r3, r3
 800cb0e:	f042 0202 	orrlt.w	r2, r2, #2
 800cb12:	9307      	strge	r3, [sp, #28]
 800cb14:	9307      	strlt	r3, [sp, #28]
 800cb16:	bfb8      	it	lt
 800cb18:	9204      	strlt	r2, [sp, #16]
 800cb1a:	7823      	ldrb	r3, [r4, #0]
 800cb1c:	2b2e      	cmp	r3, #46	@ 0x2e
 800cb1e:	d10a      	bne.n	800cb36 <_vfiprintf_r+0x156>
 800cb20:	7863      	ldrb	r3, [r4, #1]
 800cb22:	2b2a      	cmp	r3, #42	@ 0x2a
 800cb24:	d132      	bne.n	800cb8c <_vfiprintf_r+0x1ac>
 800cb26:	9b03      	ldr	r3, [sp, #12]
 800cb28:	1d1a      	adds	r2, r3, #4
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	9203      	str	r2, [sp, #12]
 800cb2e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cb32:	3402      	adds	r4, #2
 800cb34:	9305      	str	r3, [sp, #20]
 800cb36:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cc0c <_vfiprintf_r+0x22c>
 800cb3a:	7821      	ldrb	r1, [r4, #0]
 800cb3c:	2203      	movs	r2, #3
 800cb3e:	4650      	mov	r0, sl
 800cb40:	f7f3 fb7e 	bl	8000240 <memchr>
 800cb44:	b138      	cbz	r0, 800cb56 <_vfiprintf_r+0x176>
 800cb46:	9b04      	ldr	r3, [sp, #16]
 800cb48:	eba0 000a 	sub.w	r0, r0, sl
 800cb4c:	2240      	movs	r2, #64	@ 0x40
 800cb4e:	4082      	lsls	r2, r0
 800cb50:	4313      	orrs	r3, r2
 800cb52:	3401      	adds	r4, #1
 800cb54:	9304      	str	r3, [sp, #16]
 800cb56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb5a:	4829      	ldr	r0, [pc, #164]	@ (800cc00 <_vfiprintf_r+0x220>)
 800cb5c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cb60:	2206      	movs	r2, #6
 800cb62:	f7f3 fb6d 	bl	8000240 <memchr>
 800cb66:	2800      	cmp	r0, #0
 800cb68:	d03f      	beq.n	800cbea <_vfiprintf_r+0x20a>
 800cb6a:	4b26      	ldr	r3, [pc, #152]	@ (800cc04 <_vfiprintf_r+0x224>)
 800cb6c:	bb1b      	cbnz	r3, 800cbb6 <_vfiprintf_r+0x1d6>
 800cb6e:	9b03      	ldr	r3, [sp, #12]
 800cb70:	3307      	adds	r3, #7
 800cb72:	f023 0307 	bic.w	r3, r3, #7
 800cb76:	3308      	adds	r3, #8
 800cb78:	9303      	str	r3, [sp, #12]
 800cb7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb7c:	443b      	add	r3, r7
 800cb7e:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb80:	e76a      	b.n	800ca58 <_vfiprintf_r+0x78>
 800cb82:	fb0c 3202 	mla	r2, ip, r2, r3
 800cb86:	460c      	mov	r4, r1
 800cb88:	2001      	movs	r0, #1
 800cb8a:	e7a8      	b.n	800cade <_vfiprintf_r+0xfe>
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	3401      	adds	r4, #1
 800cb90:	9305      	str	r3, [sp, #20]
 800cb92:	4619      	mov	r1, r3
 800cb94:	f04f 0c0a 	mov.w	ip, #10
 800cb98:	4620      	mov	r0, r4
 800cb9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb9e:	3a30      	subs	r2, #48	@ 0x30
 800cba0:	2a09      	cmp	r2, #9
 800cba2:	d903      	bls.n	800cbac <_vfiprintf_r+0x1cc>
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d0c6      	beq.n	800cb36 <_vfiprintf_r+0x156>
 800cba8:	9105      	str	r1, [sp, #20]
 800cbaa:	e7c4      	b.n	800cb36 <_vfiprintf_r+0x156>
 800cbac:	fb0c 2101 	mla	r1, ip, r1, r2
 800cbb0:	4604      	mov	r4, r0
 800cbb2:	2301      	movs	r3, #1
 800cbb4:	e7f0      	b.n	800cb98 <_vfiprintf_r+0x1b8>
 800cbb6:	ab03      	add	r3, sp, #12
 800cbb8:	9300      	str	r3, [sp, #0]
 800cbba:	462a      	mov	r2, r5
 800cbbc:	4b12      	ldr	r3, [pc, #72]	@ (800cc08 <_vfiprintf_r+0x228>)
 800cbbe:	a904      	add	r1, sp, #16
 800cbc0:	4630      	mov	r0, r6
 800cbc2:	f3af 8000 	nop.w
 800cbc6:	4607      	mov	r7, r0
 800cbc8:	1c78      	adds	r0, r7, #1
 800cbca:	d1d6      	bne.n	800cb7a <_vfiprintf_r+0x19a>
 800cbcc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cbce:	07d9      	lsls	r1, r3, #31
 800cbd0:	d405      	bmi.n	800cbde <_vfiprintf_r+0x1fe>
 800cbd2:	89ab      	ldrh	r3, [r5, #12]
 800cbd4:	059a      	lsls	r2, r3, #22
 800cbd6:	d402      	bmi.n	800cbde <_vfiprintf_r+0x1fe>
 800cbd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cbda:	f7fe f97f 	bl	800aedc <__retarget_lock_release_recursive>
 800cbde:	89ab      	ldrh	r3, [r5, #12]
 800cbe0:	065b      	lsls	r3, r3, #25
 800cbe2:	f53f af1f 	bmi.w	800ca24 <_vfiprintf_r+0x44>
 800cbe6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cbe8:	e71e      	b.n	800ca28 <_vfiprintf_r+0x48>
 800cbea:	ab03      	add	r3, sp, #12
 800cbec:	9300      	str	r3, [sp, #0]
 800cbee:	462a      	mov	r2, r5
 800cbf0:	4b05      	ldr	r3, [pc, #20]	@ (800cc08 <_vfiprintf_r+0x228>)
 800cbf2:	a904      	add	r1, sp, #16
 800cbf4:	4630      	mov	r0, r6
 800cbf6:	f7ff fc79 	bl	800c4ec <_printf_i>
 800cbfa:	e7e4      	b.n	800cbc6 <_vfiprintf_r+0x1e6>
 800cbfc:	0800d3e9 	.word	0x0800d3e9
 800cc00:	0800d3f3 	.word	0x0800d3f3
 800cc04:	00000000 	.word	0x00000000
 800cc08:	0800c9bd 	.word	0x0800c9bd
 800cc0c:	0800d3ef 	.word	0x0800d3ef

0800cc10 <__swbuf_r>:
 800cc10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc12:	460e      	mov	r6, r1
 800cc14:	4614      	mov	r4, r2
 800cc16:	4605      	mov	r5, r0
 800cc18:	b118      	cbz	r0, 800cc22 <__swbuf_r+0x12>
 800cc1a:	6a03      	ldr	r3, [r0, #32]
 800cc1c:	b90b      	cbnz	r3, 800cc22 <__swbuf_r+0x12>
 800cc1e:	f7fd ffcb 	bl	800abb8 <__sinit>
 800cc22:	69a3      	ldr	r3, [r4, #24]
 800cc24:	60a3      	str	r3, [r4, #8]
 800cc26:	89a3      	ldrh	r3, [r4, #12]
 800cc28:	071a      	lsls	r2, r3, #28
 800cc2a:	d501      	bpl.n	800cc30 <__swbuf_r+0x20>
 800cc2c:	6923      	ldr	r3, [r4, #16]
 800cc2e:	b943      	cbnz	r3, 800cc42 <__swbuf_r+0x32>
 800cc30:	4621      	mov	r1, r4
 800cc32:	4628      	mov	r0, r5
 800cc34:	f000 f82a 	bl	800cc8c <__swsetup_r>
 800cc38:	b118      	cbz	r0, 800cc42 <__swbuf_r+0x32>
 800cc3a:	f04f 37ff 	mov.w	r7, #4294967295
 800cc3e:	4638      	mov	r0, r7
 800cc40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc42:	6823      	ldr	r3, [r4, #0]
 800cc44:	6922      	ldr	r2, [r4, #16]
 800cc46:	1a98      	subs	r0, r3, r2
 800cc48:	6963      	ldr	r3, [r4, #20]
 800cc4a:	b2f6      	uxtb	r6, r6
 800cc4c:	4283      	cmp	r3, r0
 800cc4e:	4637      	mov	r7, r6
 800cc50:	dc05      	bgt.n	800cc5e <__swbuf_r+0x4e>
 800cc52:	4621      	mov	r1, r4
 800cc54:	4628      	mov	r0, r5
 800cc56:	f7ff fded 	bl	800c834 <_fflush_r>
 800cc5a:	2800      	cmp	r0, #0
 800cc5c:	d1ed      	bne.n	800cc3a <__swbuf_r+0x2a>
 800cc5e:	68a3      	ldr	r3, [r4, #8]
 800cc60:	3b01      	subs	r3, #1
 800cc62:	60a3      	str	r3, [r4, #8]
 800cc64:	6823      	ldr	r3, [r4, #0]
 800cc66:	1c5a      	adds	r2, r3, #1
 800cc68:	6022      	str	r2, [r4, #0]
 800cc6a:	701e      	strb	r6, [r3, #0]
 800cc6c:	6962      	ldr	r2, [r4, #20]
 800cc6e:	1c43      	adds	r3, r0, #1
 800cc70:	429a      	cmp	r2, r3
 800cc72:	d004      	beq.n	800cc7e <__swbuf_r+0x6e>
 800cc74:	89a3      	ldrh	r3, [r4, #12]
 800cc76:	07db      	lsls	r3, r3, #31
 800cc78:	d5e1      	bpl.n	800cc3e <__swbuf_r+0x2e>
 800cc7a:	2e0a      	cmp	r6, #10
 800cc7c:	d1df      	bne.n	800cc3e <__swbuf_r+0x2e>
 800cc7e:	4621      	mov	r1, r4
 800cc80:	4628      	mov	r0, r5
 800cc82:	f7ff fdd7 	bl	800c834 <_fflush_r>
 800cc86:	2800      	cmp	r0, #0
 800cc88:	d0d9      	beq.n	800cc3e <__swbuf_r+0x2e>
 800cc8a:	e7d6      	b.n	800cc3a <__swbuf_r+0x2a>

0800cc8c <__swsetup_r>:
 800cc8c:	b538      	push	{r3, r4, r5, lr}
 800cc8e:	4b29      	ldr	r3, [pc, #164]	@ (800cd34 <__swsetup_r+0xa8>)
 800cc90:	4605      	mov	r5, r0
 800cc92:	6818      	ldr	r0, [r3, #0]
 800cc94:	460c      	mov	r4, r1
 800cc96:	b118      	cbz	r0, 800cca0 <__swsetup_r+0x14>
 800cc98:	6a03      	ldr	r3, [r0, #32]
 800cc9a:	b90b      	cbnz	r3, 800cca0 <__swsetup_r+0x14>
 800cc9c:	f7fd ff8c 	bl	800abb8 <__sinit>
 800cca0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cca4:	0719      	lsls	r1, r3, #28
 800cca6:	d422      	bmi.n	800ccee <__swsetup_r+0x62>
 800cca8:	06da      	lsls	r2, r3, #27
 800ccaa:	d407      	bmi.n	800ccbc <__swsetup_r+0x30>
 800ccac:	2209      	movs	r2, #9
 800ccae:	602a      	str	r2, [r5, #0]
 800ccb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ccb4:	81a3      	strh	r3, [r4, #12]
 800ccb6:	f04f 30ff 	mov.w	r0, #4294967295
 800ccba:	e033      	b.n	800cd24 <__swsetup_r+0x98>
 800ccbc:	0758      	lsls	r0, r3, #29
 800ccbe:	d512      	bpl.n	800cce6 <__swsetup_r+0x5a>
 800ccc0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ccc2:	b141      	cbz	r1, 800ccd6 <__swsetup_r+0x4a>
 800ccc4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ccc8:	4299      	cmp	r1, r3
 800ccca:	d002      	beq.n	800ccd2 <__swsetup_r+0x46>
 800cccc:	4628      	mov	r0, r5
 800ccce:	f7fe f93d 	bl	800af4c <_free_r>
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	6363      	str	r3, [r4, #52]	@ 0x34
 800ccd6:	89a3      	ldrh	r3, [r4, #12]
 800ccd8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ccdc:	81a3      	strh	r3, [r4, #12]
 800ccde:	2300      	movs	r3, #0
 800cce0:	6063      	str	r3, [r4, #4]
 800cce2:	6923      	ldr	r3, [r4, #16]
 800cce4:	6023      	str	r3, [r4, #0]
 800cce6:	89a3      	ldrh	r3, [r4, #12]
 800cce8:	f043 0308 	orr.w	r3, r3, #8
 800ccec:	81a3      	strh	r3, [r4, #12]
 800ccee:	6923      	ldr	r3, [r4, #16]
 800ccf0:	b94b      	cbnz	r3, 800cd06 <__swsetup_r+0x7a>
 800ccf2:	89a3      	ldrh	r3, [r4, #12]
 800ccf4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ccf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ccfc:	d003      	beq.n	800cd06 <__swsetup_r+0x7a>
 800ccfe:	4621      	mov	r1, r4
 800cd00:	4628      	mov	r0, r5
 800cd02:	f000 f88b 	bl	800ce1c <__smakebuf_r>
 800cd06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd0a:	f013 0201 	ands.w	r2, r3, #1
 800cd0e:	d00a      	beq.n	800cd26 <__swsetup_r+0x9a>
 800cd10:	2200      	movs	r2, #0
 800cd12:	60a2      	str	r2, [r4, #8]
 800cd14:	6962      	ldr	r2, [r4, #20]
 800cd16:	4252      	negs	r2, r2
 800cd18:	61a2      	str	r2, [r4, #24]
 800cd1a:	6922      	ldr	r2, [r4, #16]
 800cd1c:	b942      	cbnz	r2, 800cd30 <__swsetup_r+0xa4>
 800cd1e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cd22:	d1c5      	bne.n	800ccb0 <__swsetup_r+0x24>
 800cd24:	bd38      	pop	{r3, r4, r5, pc}
 800cd26:	0799      	lsls	r1, r3, #30
 800cd28:	bf58      	it	pl
 800cd2a:	6962      	ldrpl	r2, [r4, #20]
 800cd2c:	60a2      	str	r2, [r4, #8]
 800cd2e:	e7f4      	b.n	800cd1a <__swsetup_r+0x8e>
 800cd30:	2000      	movs	r0, #0
 800cd32:	e7f7      	b.n	800cd24 <__swsetup_r+0x98>
 800cd34:	20000188 	.word	0x20000188

0800cd38 <_raise_r>:
 800cd38:	291f      	cmp	r1, #31
 800cd3a:	b538      	push	{r3, r4, r5, lr}
 800cd3c:	4605      	mov	r5, r0
 800cd3e:	460c      	mov	r4, r1
 800cd40:	d904      	bls.n	800cd4c <_raise_r+0x14>
 800cd42:	2316      	movs	r3, #22
 800cd44:	6003      	str	r3, [r0, #0]
 800cd46:	f04f 30ff 	mov.w	r0, #4294967295
 800cd4a:	bd38      	pop	{r3, r4, r5, pc}
 800cd4c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cd4e:	b112      	cbz	r2, 800cd56 <_raise_r+0x1e>
 800cd50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cd54:	b94b      	cbnz	r3, 800cd6a <_raise_r+0x32>
 800cd56:	4628      	mov	r0, r5
 800cd58:	f000 f830 	bl	800cdbc <_getpid_r>
 800cd5c:	4622      	mov	r2, r4
 800cd5e:	4601      	mov	r1, r0
 800cd60:	4628      	mov	r0, r5
 800cd62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd66:	f000 b817 	b.w	800cd98 <_kill_r>
 800cd6a:	2b01      	cmp	r3, #1
 800cd6c:	d00a      	beq.n	800cd84 <_raise_r+0x4c>
 800cd6e:	1c59      	adds	r1, r3, #1
 800cd70:	d103      	bne.n	800cd7a <_raise_r+0x42>
 800cd72:	2316      	movs	r3, #22
 800cd74:	6003      	str	r3, [r0, #0]
 800cd76:	2001      	movs	r0, #1
 800cd78:	e7e7      	b.n	800cd4a <_raise_r+0x12>
 800cd7a:	2100      	movs	r1, #0
 800cd7c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cd80:	4620      	mov	r0, r4
 800cd82:	4798      	blx	r3
 800cd84:	2000      	movs	r0, #0
 800cd86:	e7e0      	b.n	800cd4a <_raise_r+0x12>

0800cd88 <raise>:
 800cd88:	4b02      	ldr	r3, [pc, #8]	@ (800cd94 <raise+0xc>)
 800cd8a:	4601      	mov	r1, r0
 800cd8c:	6818      	ldr	r0, [r3, #0]
 800cd8e:	f7ff bfd3 	b.w	800cd38 <_raise_r>
 800cd92:	bf00      	nop
 800cd94:	20000188 	.word	0x20000188

0800cd98 <_kill_r>:
 800cd98:	b538      	push	{r3, r4, r5, lr}
 800cd9a:	4d07      	ldr	r5, [pc, #28]	@ (800cdb8 <_kill_r+0x20>)
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	4604      	mov	r4, r0
 800cda0:	4608      	mov	r0, r1
 800cda2:	4611      	mov	r1, r2
 800cda4:	602b      	str	r3, [r5, #0]
 800cda6:	f7f4 fb01 	bl	80013ac <_kill>
 800cdaa:	1c43      	adds	r3, r0, #1
 800cdac:	d102      	bne.n	800cdb4 <_kill_r+0x1c>
 800cdae:	682b      	ldr	r3, [r5, #0]
 800cdb0:	b103      	cbz	r3, 800cdb4 <_kill_r+0x1c>
 800cdb2:	6023      	str	r3, [r4, #0]
 800cdb4:	bd38      	pop	{r3, r4, r5, pc}
 800cdb6:	bf00      	nop
 800cdb8:	200020f0 	.word	0x200020f0

0800cdbc <_getpid_r>:
 800cdbc:	f7f4 baee 	b.w	800139c <_getpid>

0800cdc0 <_malloc_usable_size_r>:
 800cdc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cdc4:	1f18      	subs	r0, r3, #4
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	bfbc      	itt	lt
 800cdca:	580b      	ldrlt	r3, [r1, r0]
 800cdcc:	18c0      	addlt	r0, r0, r3
 800cdce:	4770      	bx	lr

0800cdd0 <__swhatbuf_r>:
 800cdd0:	b570      	push	{r4, r5, r6, lr}
 800cdd2:	460c      	mov	r4, r1
 800cdd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdd8:	2900      	cmp	r1, #0
 800cdda:	b096      	sub	sp, #88	@ 0x58
 800cddc:	4615      	mov	r5, r2
 800cdde:	461e      	mov	r6, r3
 800cde0:	da0d      	bge.n	800cdfe <__swhatbuf_r+0x2e>
 800cde2:	89a3      	ldrh	r3, [r4, #12]
 800cde4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cde8:	f04f 0100 	mov.w	r1, #0
 800cdec:	bf14      	ite	ne
 800cdee:	2340      	movne	r3, #64	@ 0x40
 800cdf0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cdf4:	2000      	movs	r0, #0
 800cdf6:	6031      	str	r1, [r6, #0]
 800cdf8:	602b      	str	r3, [r5, #0]
 800cdfa:	b016      	add	sp, #88	@ 0x58
 800cdfc:	bd70      	pop	{r4, r5, r6, pc}
 800cdfe:	466a      	mov	r2, sp
 800ce00:	f000 f848 	bl	800ce94 <_fstat_r>
 800ce04:	2800      	cmp	r0, #0
 800ce06:	dbec      	blt.n	800cde2 <__swhatbuf_r+0x12>
 800ce08:	9901      	ldr	r1, [sp, #4]
 800ce0a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ce0e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ce12:	4259      	negs	r1, r3
 800ce14:	4159      	adcs	r1, r3
 800ce16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ce1a:	e7eb      	b.n	800cdf4 <__swhatbuf_r+0x24>

0800ce1c <__smakebuf_r>:
 800ce1c:	898b      	ldrh	r3, [r1, #12]
 800ce1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ce20:	079d      	lsls	r5, r3, #30
 800ce22:	4606      	mov	r6, r0
 800ce24:	460c      	mov	r4, r1
 800ce26:	d507      	bpl.n	800ce38 <__smakebuf_r+0x1c>
 800ce28:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ce2c:	6023      	str	r3, [r4, #0]
 800ce2e:	6123      	str	r3, [r4, #16]
 800ce30:	2301      	movs	r3, #1
 800ce32:	6163      	str	r3, [r4, #20]
 800ce34:	b003      	add	sp, #12
 800ce36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce38:	ab01      	add	r3, sp, #4
 800ce3a:	466a      	mov	r2, sp
 800ce3c:	f7ff ffc8 	bl	800cdd0 <__swhatbuf_r>
 800ce40:	9f00      	ldr	r7, [sp, #0]
 800ce42:	4605      	mov	r5, r0
 800ce44:	4639      	mov	r1, r7
 800ce46:	4630      	mov	r0, r6
 800ce48:	f7fe fc2e 	bl	800b6a8 <_malloc_r>
 800ce4c:	b948      	cbnz	r0, 800ce62 <__smakebuf_r+0x46>
 800ce4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce52:	059a      	lsls	r2, r3, #22
 800ce54:	d4ee      	bmi.n	800ce34 <__smakebuf_r+0x18>
 800ce56:	f023 0303 	bic.w	r3, r3, #3
 800ce5a:	f043 0302 	orr.w	r3, r3, #2
 800ce5e:	81a3      	strh	r3, [r4, #12]
 800ce60:	e7e2      	b.n	800ce28 <__smakebuf_r+0xc>
 800ce62:	89a3      	ldrh	r3, [r4, #12]
 800ce64:	6020      	str	r0, [r4, #0]
 800ce66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce6a:	81a3      	strh	r3, [r4, #12]
 800ce6c:	9b01      	ldr	r3, [sp, #4]
 800ce6e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ce72:	b15b      	cbz	r3, 800ce8c <__smakebuf_r+0x70>
 800ce74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce78:	4630      	mov	r0, r6
 800ce7a:	f000 f81d 	bl	800ceb8 <_isatty_r>
 800ce7e:	b128      	cbz	r0, 800ce8c <__smakebuf_r+0x70>
 800ce80:	89a3      	ldrh	r3, [r4, #12]
 800ce82:	f023 0303 	bic.w	r3, r3, #3
 800ce86:	f043 0301 	orr.w	r3, r3, #1
 800ce8a:	81a3      	strh	r3, [r4, #12]
 800ce8c:	89a3      	ldrh	r3, [r4, #12]
 800ce8e:	431d      	orrs	r5, r3
 800ce90:	81a5      	strh	r5, [r4, #12]
 800ce92:	e7cf      	b.n	800ce34 <__smakebuf_r+0x18>

0800ce94 <_fstat_r>:
 800ce94:	b538      	push	{r3, r4, r5, lr}
 800ce96:	4d07      	ldr	r5, [pc, #28]	@ (800ceb4 <_fstat_r+0x20>)
 800ce98:	2300      	movs	r3, #0
 800ce9a:	4604      	mov	r4, r0
 800ce9c:	4608      	mov	r0, r1
 800ce9e:	4611      	mov	r1, r2
 800cea0:	602b      	str	r3, [r5, #0]
 800cea2:	f7f4 fae3 	bl	800146c <_fstat>
 800cea6:	1c43      	adds	r3, r0, #1
 800cea8:	d102      	bne.n	800ceb0 <_fstat_r+0x1c>
 800ceaa:	682b      	ldr	r3, [r5, #0]
 800ceac:	b103      	cbz	r3, 800ceb0 <_fstat_r+0x1c>
 800ceae:	6023      	str	r3, [r4, #0]
 800ceb0:	bd38      	pop	{r3, r4, r5, pc}
 800ceb2:	bf00      	nop
 800ceb4:	200020f0 	.word	0x200020f0

0800ceb8 <_isatty_r>:
 800ceb8:	b538      	push	{r3, r4, r5, lr}
 800ceba:	4d06      	ldr	r5, [pc, #24]	@ (800ced4 <_isatty_r+0x1c>)
 800cebc:	2300      	movs	r3, #0
 800cebe:	4604      	mov	r4, r0
 800cec0:	4608      	mov	r0, r1
 800cec2:	602b      	str	r3, [r5, #0]
 800cec4:	f7f4 fae2 	bl	800148c <_isatty>
 800cec8:	1c43      	adds	r3, r0, #1
 800ceca:	d102      	bne.n	800ced2 <_isatty_r+0x1a>
 800cecc:	682b      	ldr	r3, [r5, #0]
 800cece:	b103      	cbz	r3, 800ced2 <_isatty_r+0x1a>
 800ced0:	6023      	str	r3, [r4, #0]
 800ced2:	bd38      	pop	{r3, r4, r5, pc}
 800ced4:	200020f0 	.word	0x200020f0

0800ced8 <_init>:
 800ced8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceda:	bf00      	nop
 800cedc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cede:	bc08      	pop	{r3}
 800cee0:	469e      	mov	lr, r3
 800cee2:	4770      	bx	lr

0800cee4 <_fini>:
 800cee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cee6:	bf00      	nop
 800cee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ceea:	bc08      	pop	{r3}
 800ceec:	469e      	mov	lr, r3
 800ceee:	4770      	bx	lr
