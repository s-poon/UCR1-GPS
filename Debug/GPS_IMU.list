
GPS_IMU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc80  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000052c  0800ce60  0800ce60  0000de60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d38c  0800d38c  0000f1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d38c  0800d38c  0000e38c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d394  0800d394  0000f1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d394  0800d394  0000e394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d398  0800d398  0000e398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800d39c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f10  200001d8  0800d574  0000f1d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200020e8  0800d574  000100e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003505b  00000000  00000000  0000f208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004932  00000000  00000000  00044263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00004818  00000000  00000000  00048b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000036f1  00000000  00000000  0004d3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c17c  00000000  00000000  00050aa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00032dfc  00000000  00000000  0007cc1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011f87e  00000000  00000000  000afa19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001cf297  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0001570c  00000000  00000000  001cf2dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  001e49e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800ce48 	.word	0x0800ce48

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001dc 	.word	0x200001dc
 800021c:	0800ce48 	.word	0x0800ce48

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <__aeabi_uldivmod>:
 8000bac:	b953      	cbnz	r3, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bae:	b94a      	cbnz	r2, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	bf08      	it	eq
 8000bb4:	2800      	cmpeq	r0, #0
 8000bb6:	bf1c      	itt	ne
 8000bb8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc0:	f000 b9a0 	b.w	8000f04 <__aeabi_idiv0>
 8000bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bcc:	f000 f83c 	bl	8000c48 <__udivmoddi4>
 8000bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd8:	b004      	add	sp, #16
 8000bda:	4770      	bx	lr

08000bdc <__aeabi_d2lz>:
 8000bdc:	b538      	push	{r3, r4, r5, lr}
 8000bde:	2200      	movs	r2, #0
 8000be0:	2300      	movs	r3, #0
 8000be2:	4604      	mov	r4, r0
 8000be4:	460d      	mov	r5, r1
 8000be6:	f7ff ff99 	bl	8000b1c <__aeabi_dcmplt>
 8000bea:	b928      	cbnz	r0, 8000bf8 <__aeabi_d2lz+0x1c>
 8000bec:	4620      	mov	r0, r4
 8000bee:	4629      	mov	r1, r5
 8000bf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000bf4:	f000 b80a 	b.w	8000c0c <__aeabi_d2ulz>
 8000bf8:	4620      	mov	r0, r4
 8000bfa:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000bfe:	f000 f805 	bl	8000c0c <__aeabi_d2ulz>
 8000c02:	4240      	negs	r0, r0
 8000c04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c08:	bd38      	pop	{r3, r4, r5, pc}
 8000c0a:	bf00      	nop

08000c0c <__aeabi_d2ulz>:
 8000c0c:	b5d0      	push	{r4, r6, r7, lr}
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c40 <__aeabi_d2ulz+0x34>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	4606      	mov	r6, r0
 8000c14:	460f      	mov	r7, r1
 8000c16:	f7ff fd0f 	bl	8000638 <__aeabi_dmul>
 8000c1a:	f7ff ffa7 	bl	8000b6c <__aeabi_d2uiz>
 8000c1e:	4604      	mov	r4, r0
 8000c20:	f7ff fc90 	bl	8000544 <__aeabi_ui2d>
 8000c24:	4b07      	ldr	r3, [pc, #28]	@ (8000c44 <__aeabi_d2ulz+0x38>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	f7ff fd06 	bl	8000638 <__aeabi_dmul>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	460b      	mov	r3, r1
 8000c30:	4630      	mov	r0, r6
 8000c32:	4639      	mov	r1, r7
 8000c34:	f7ff fb48 	bl	80002c8 <__aeabi_dsub>
 8000c38:	f7ff ff98 	bl	8000b6c <__aeabi_d2uiz>
 8000c3c:	4621      	mov	r1, r4
 8000c3e:	bdd0      	pop	{r4, r6, r7, pc}
 8000c40:	3df00000 	.word	0x3df00000
 8000c44:	41f00000 	.word	0x41f00000

08000c48 <__udivmoddi4>:
 8000c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c4c:	9d08      	ldr	r5, [sp, #32]
 8000c4e:	460c      	mov	r4, r1
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d14e      	bne.n	8000cf2 <__udivmoddi4+0xaa>
 8000c54:	4694      	mov	ip, r2
 8000c56:	458c      	cmp	ip, r1
 8000c58:	4686      	mov	lr, r0
 8000c5a:	fab2 f282 	clz	r2, r2
 8000c5e:	d962      	bls.n	8000d26 <__udivmoddi4+0xde>
 8000c60:	b14a      	cbz	r2, 8000c76 <__udivmoddi4+0x2e>
 8000c62:	f1c2 0320 	rsb	r3, r2, #32
 8000c66:	4091      	lsls	r1, r2
 8000c68:	fa20 f303 	lsr.w	r3, r0, r3
 8000c6c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c70:	4319      	orrs	r1, r3
 8000c72:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c7a:	fa1f f68c 	uxth.w	r6, ip
 8000c7e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c82:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c86:	fb07 1114 	mls	r1, r7, r4, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb04 f106 	mul.w	r1, r4, r6
 8000c92:	4299      	cmp	r1, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x64>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c9e:	f080 8112 	bcs.w	8000ec6 <__udivmoddi4+0x27e>
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	f240 810f 	bls.w	8000ec6 <__udivmoddi4+0x27e>
 8000ca8:	3c02      	subs	r4, #2
 8000caa:	4463      	add	r3, ip
 8000cac:	1a59      	subs	r1, r3, r1
 8000cae:	fa1f f38e 	uxth.w	r3, lr
 8000cb2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cb6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb00 f606 	mul.w	r6, r0, r6
 8000cc2:	429e      	cmp	r6, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x94>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cce:	f080 80fc 	bcs.w	8000eca <__udivmoddi4+0x282>
 8000cd2:	429e      	cmp	r6, r3
 8000cd4:	f240 80f9 	bls.w	8000eca <__udivmoddi4+0x282>
 8000cd8:	4463      	add	r3, ip
 8000cda:	3802      	subs	r0, #2
 8000cdc:	1b9b      	subs	r3, r3, r6
 8000cde:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	b11d      	cbz	r5, 8000cee <__udivmoddi4+0xa6>
 8000ce6:	40d3      	lsrs	r3, r2
 8000ce8:	2200      	movs	r2, #0
 8000cea:	e9c5 3200 	strd	r3, r2, [r5]
 8000cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d905      	bls.n	8000d02 <__udivmoddi4+0xba>
 8000cf6:	b10d      	cbz	r5, 8000cfc <__udivmoddi4+0xb4>
 8000cf8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	4608      	mov	r0, r1
 8000d00:	e7f5      	b.n	8000cee <__udivmoddi4+0xa6>
 8000d02:	fab3 f183 	clz	r1, r3
 8000d06:	2900      	cmp	r1, #0
 8000d08:	d146      	bne.n	8000d98 <__udivmoddi4+0x150>
 8000d0a:	42a3      	cmp	r3, r4
 8000d0c:	d302      	bcc.n	8000d14 <__udivmoddi4+0xcc>
 8000d0e:	4290      	cmp	r0, r2
 8000d10:	f0c0 80f0 	bcc.w	8000ef4 <__udivmoddi4+0x2ac>
 8000d14:	1a86      	subs	r6, r0, r2
 8000d16:	eb64 0303 	sbc.w	r3, r4, r3
 8000d1a:	2001      	movs	r0, #1
 8000d1c:	2d00      	cmp	r5, #0
 8000d1e:	d0e6      	beq.n	8000cee <__udivmoddi4+0xa6>
 8000d20:	e9c5 6300 	strd	r6, r3, [r5]
 8000d24:	e7e3      	b.n	8000cee <__udivmoddi4+0xa6>
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	f040 8090 	bne.w	8000e4c <__udivmoddi4+0x204>
 8000d2c:	eba1 040c 	sub.w	r4, r1, ip
 8000d30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d34:	fa1f f78c 	uxth.w	r7, ip
 8000d38:	2101      	movs	r1, #1
 8000d3a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d3e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d42:	fb08 4416 	mls	r4, r8, r6, r4
 8000d46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d4a:	fb07 f006 	mul.w	r0, r7, r6
 8000d4e:	4298      	cmp	r0, r3
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0x11c>
 8000d52:	eb1c 0303 	adds.w	r3, ip, r3
 8000d56:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x11a>
 8000d5c:	4298      	cmp	r0, r3
 8000d5e:	f200 80cd 	bhi.w	8000efc <__udivmoddi4+0x2b4>
 8000d62:	4626      	mov	r6, r4
 8000d64:	1a1c      	subs	r4, r3, r0
 8000d66:	fa1f f38e 	uxth.w	r3, lr
 8000d6a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d6e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d76:	fb00 f707 	mul.w	r7, r0, r7
 8000d7a:	429f      	cmp	r7, r3
 8000d7c:	d908      	bls.n	8000d90 <__udivmoddi4+0x148>
 8000d7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d82:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d86:	d202      	bcs.n	8000d8e <__udivmoddi4+0x146>
 8000d88:	429f      	cmp	r7, r3
 8000d8a:	f200 80b0 	bhi.w	8000eee <__udivmoddi4+0x2a6>
 8000d8e:	4620      	mov	r0, r4
 8000d90:	1bdb      	subs	r3, r3, r7
 8000d92:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d96:	e7a5      	b.n	8000ce4 <__udivmoddi4+0x9c>
 8000d98:	f1c1 0620 	rsb	r6, r1, #32
 8000d9c:	408b      	lsls	r3, r1
 8000d9e:	fa22 f706 	lsr.w	r7, r2, r6
 8000da2:	431f      	orrs	r7, r3
 8000da4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000da8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dac:	ea43 030c 	orr.w	r3, r3, ip
 8000db0:	40f4      	lsrs	r4, r6
 8000db2:	fa00 f801 	lsl.w	r8, r0, r1
 8000db6:	0c38      	lsrs	r0, r7, #16
 8000db8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dbc:	fbb4 fef0 	udiv	lr, r4, r0
 8000dc0:	fa1f fc87 	uxth.w	ip, r7
 8000dc4:	fb00 441e 	mls	r4, r0, lr, r4
 8000dc8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dcc:	fb0e f90c 	mul.w	r9, lr, ip
 8000dd0:	45a1      	cmp	r9, r4
 8000dd2:	fa02 f201 	lsl.w	r2, r2, r1
 8000dd6:	d90a      	bls.n	8000dee <__udivmoddi4+0x1a6>
 8000dd8:	193c      	adds	r4, r7, r4
 8000dda:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dde:	f080 8084 	bcs.w	8000eea <__udivmoddi4+0x2a2>
 8000de2:	45a1      	cmp	r9, r4
 8000de4:	f240 8081 	bls.w	8000eea <__udivmoddi4+0x2a2>
 8000de8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dec:	443c      	add	r4, r7
 8000dee:	eba4 0409 	sub.w	r4, r4, r9
 8000df2:	fa1f f983 	uxth.w	r9, r3
 8000df6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dfa:	fb00 4413 	mls	r4, r0, r3, r4
 8000dfe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e02:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e06:	45a4      	cmp	ip, r4
 8000e08:	d907      	bls.n	8000e1a <__udivmoddi4+0x1d2>
 8000e0a:	193c      	adds	r4, r7, r4
 8000e0c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e10:	d267      	bcs.n	8000ee2 <__udivmoddi4+0x29a>
 8000e12:	45a4      	cmp	ip, r4
 8000e14:	d965      	bls.n	8000ee2 <__udivmoddi4+0x29a>
 8000e16:	3b02      	subs	r3, #2
 8000e18:	443c      	add	r4, r7
 8000e1a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e1e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e22:	eba4 040c 	sub.w	r4, r4, ip
 8000e26:	429c      	cmp	r4, r3
 8000e28:	46ce      	mov	lr, r9
 8000e2a:	469c      	mov	ip, r3
 8000e2c:	d351      	bcc.n	8000ed2 <__udivmoddi4+0x28a>
 8000e2e:	d04e      	beq.n	8000ece <__udivmoddi4+0x286>
 8000e30:	b155      	cbz	r5, 8000e48 <__udivmoddi4+0x200>
 8000e32:	ebb8 030e 	subs.w	r3, r8, lr
 8000e36:	eb64 040c 	sbc.w	r4, r4, ip
 8000e3a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e3e:	40cb      	lsrs	r3, r1
 8000e40:	431e      	orrs	r6, r3
 8000e42:	40cc      	lsrs	r4, r1
 8000e44:	e9c5 6400 	strd	r6, r4, [r5]
 8000e48:	2100      	movs	r1, #0
 8000e4a:	e750      	b.n	8000cee <__udivmoddi4+0xa6>
 8000e4c:	f1c2 0320 	rsb	r3, r2, #32
 8000e50:	fa20 f103 	lsr.w	r1, r0, r3
 8000e54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e58:	fa24 f303 	lsr.w	r3, r4, r3
 8000e5c:	4094      	lsls	r4, r2
 8000e5e:	430c      	orrs	r4, r1
 8000e60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e64:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e68:	fa1f f78c 	uxth.w	r7, ip
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3110 	mls	r1, r8, r0, r3
 8000e74:	0c23      	lsrs	r3, r4, #16
 8000e76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e7a:	fb00 f107 	mul.w	r1, r0, r7
 8000e7e:	4299      	cmp	r1, r3
 8000e80:	d908      	bls.n	8000e94 <__udivmoddi4+0x24c>
 8000e82:	eb1c 0303 	adds.w	r3, ip, r3
 8000e86:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e8a:	d22c      	bcs.n	8000ee6 <__udivmoddi4+0x29e>
 8000e8c:	4299      	cmp	r1, r3
 8000e8e:	d92a      	bls.n	8000ee6 <__udivmoddi4+0x29e>
 8000e90:	3802      	subs	r0, #2
 8000e92:	4463      	add	r3, ip
 8000e94:	1a5b      	subs	r3, r3, r1
 8000e96:	b2a4      	uxth	r4, r4
 8000e98:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e9c:	fb08 3311 	mls	r3, r8, r1, r3
 8000ea0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ea4:	fb01 f307 	mul.w	r3, r1, r7
 8000ea8:	42a3      	cmp	r3, r4
 8000eaa:	d908      	bls.n	8000ebe <__udivmoddi4+0x276>
 8000eac:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000eb4:	d213      	bcs.n	8000ede <__udivmoddi4+0x296>
 8000eb6:	42a3      	cmp	r3, r4
 8000eb8:	d911      	bls.n	8000ede <__udivmoddi4+0x296>
 8000eba:	3902      	subs	r1, #2
 8000ebc:	4464      	add	r4, ip
 8000ebe:	1ae4      	subs	r4, r4, r3
 8000ec0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ec4:	e739      	b.n	8000d3a <__udivmoddi4+0xf2>
 8000ec6:	4604      	mov	r4, r0
 8000ec8:	e6f0      	b.n	8000cac <__udivmoddi4+0x64>
 8000eca:	4608      	mov	r0, r1
 8000ecc:	e706      	b.n	8000cdc <__udivmoddi4+0x94>
 8000ece:	45c8      	cmp	r8, r9
 8000ed0:	d2ae      	bcs.n	8000e30 <__udivmoddi4+0x1e8>
 8000ed2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ed6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eda:	3801      	subs	r0, #1
 8000edc:	e7a8      	b.n	8000e30 <__udivmoddi4+0x1e8>
 8000ede:	4631      	mov	r1, r6
 8000ee0:	e7ed      	b.n	8000ebe <__udivmoddi4+0x276>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	e799      	b.n	8000e1a <__udivmoddi4+0x1d2>
 8000ee6:	4630      	mov	r0, r6
 8000ee8:	e7d4      	b.n	8000e94 <__udivmoddi4+0x24c>
 8000eea:	46d6      	mov	lr, sl
 8000eec:	e77f      	b.n	8000dee <__udivmoddi4+0x1a6>
 8000eee:	4463      	add	r3, ip
 8000ef0:	3802      	subs	r0, #2
 8000ef2:	e74d      	b.n	8000d90 <__udivmoddi4+0x148>
 8000ef4:	4606      	mov	r6, r0
 8000ef6:	4623      	mov	r3, r4
 8000ef8:	4608      	mov	r0, r1
 8000efa:	e70f      	b.n	8000d1c <__udivmoddi4+0xd4>
 8000efc:	3e02      	subs	r6, #2
 8000efe:	4463      	add	r3, ip
 8000f00:	e730      	b.n	8000d64 <__udivmoddi4+0x11c>
 8000f02:	bf00      	nop

08000f04 <__aeabi_idiv0>:
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop

08000f08 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
    RTOS_Init();
 8000f0c:	f000 fc70 	bl	80017f0 <RTOS_Init>
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000f10:	4a04      	ldr	r2, [pc, #16]	@ (8000f24 <MX_FREERTOS_Init+0x1c>)
 8000f12:	2100      	movs	r1, #0
 8000f14:	4804      	ldr	r0, [pc, #16]	@ (8000f28 <MX_FREERTOS_Init+0x20>)
 8000f16:	f005 fce1 	bl	80068dc <osThreadNew>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	4a03      	ldr	r2, [pc, #12]	@ (8000f2c <MX_FREERTOS_Init+0x24>)
 8000f1e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000f20:	bf00      	nop
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	0800cecc 	.word	0x0800cecc
 8000f28:	08000f31 	.word	0x08000f31
 8000f2c:	200001f4 	.word	0x200001f4

08000f30 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f38:	2001      	movs	r0, #1
 8000f3a:	f005 fd61 	bl	8006a00 <osDelay>
 8000f3e:	e7fb      	b.n	8000f38 <StartDefaultTask+0x8>

08000f40 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000f44:	4b20      	ldr	r3, [pc, #128]	@ (8000fc8 <MX_FDCAN1_Init+0x88>)
 8000f46:	4a21      	ldr	r2, [pc, #132]	@ (8000fcc <MX_FDCAN1_Init+0x8c>)
 8000f48:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000f4a:	4b1f      	ldr	r3, [pc, #124]	@ (8000fc8 <MX_FDCAN1_Init+0x88>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8000f50:	4b1d      	ldr	r3, [pc, #116]	@ (8000fc8 <MX_FDCAN1_Init+0x88>)
 8000f52:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000f56:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_EXTERNAL_LOOPBACK;
 8000f58:	4b1b      	ldr	r3, [pc, #108]	@ (8000fc8 <MX_FDCAN1_Init+0x88>)
 8000f5a:	2204      	movs	r2, #4
 8000f5c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000f5e:	4b1a      	ldr	r3, [pc, #104]	@ (8000fc8 <MX_FDCAN1_Init+0x88>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000f64:	4b18      	ldr	r3, [pc, #96]	@ (8000fc8 <MX_FDCAN1_Init+0x88>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000f6a:	4b17      	ldr	r3, [pc, #92]	@ (8000fc8 <MX_FDCAN1_Init+0x88>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 8000f70:	4b15      	ldr	r3, [pc, #84]	@ (8000fc8 <MX_FDCAN1_Init+0x88>)
 8000f72:	2202      	movs	r2, #2
 8000f74:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 8000f76:	4b14      	ldr	r3, [pc, #80]	@ (8000fc8 <MX_FDCAN1_Init+0x88>)
 8000f78:	2202      	movs	r2, #2
 8000f7a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 31;
 8000f7c:	4b12      	ldr	r3, [pc, #72]	@ (8000fc8 <MX_FDCAN1_Init+0x88>)
 8000f7e:	221f      	movs	r2, #31
 8000f80:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 8;
 8000f82:	4b11      	ldr	r3, [pc, #68]	@ (8000fc8 <MX_FDCAN1_Init+0x88>)
 8000f84:	2208      	movs	r2, #8
 8000f86:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 2;
 8000f88:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc8 <MX_FDCAN1_Init+0x88>)
 8000f8a:	2202      	movs	r2, #2
 8000f8c:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc8 <MX_FDCAN1_Init+0x88>)
 8000f90:	2201      	movs	r2, #1
 8000f92:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 8000f94:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc8 <MX_FDCAN1_Init+0x88>)
 8000f96:	2205      	movs	r2, #5
 8000f98:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 8000f9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc8 <MX_FDCAN1_Init+0x88>)
 8000f9c:	2202      	movs	r2, #2
 8000f9e:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 8000fa0:	4b09      	ldr	r3, [pc, #36]	@ (8000fc8 <MX_FDCAN1_Init+0x88>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000fa6:	4b08      	ldr	r3, [pc, #32]	@ (8000fc8 <MX_FDCAN1_Init+0x88>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000fac:	4b06      	ldr	r3, [pc, #24]	@ (8000fc8 <MX_FDCAN1_Init+0x88>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000fb2:	4805      	ldr	r0, [pc, #20]	@ (8000fc8 <MX_FDCAN1_Init+0x88>)
 8000fb4:	f001 fafa 	bl	80025ac <HAL_FDCAN_Init>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8000fbe:	f000 f90f 	bl	80011e0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	200001f8 	.word	0x200001f8
 8000fcc:	40006400 	.word	0x40006400

08000fd0 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b09e      	sub	sp, #120	@ 0x78
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fe8:	f107 0310 	add.w	r3, r7, #16
 8000fec:	2254      	movs	r2, #84	@ 0x54
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f009 fe42 	bl	800ac7a <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a20      	ldr	r2, [pc, #128]	@ (800107c <HAL_FDCAN_MspInit+0xac>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d139      	bne.n	8001074 <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001000:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001004:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001006:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800100a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800100c:	f107 0310 	add.w	r3, r7, #16
 8001010:	4618      	mov	r0, r3
 8001012:	f002 fd0f 	bl	8003a34 <HAL_RCCEx_PeriphCLKConfig>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 800101c:	f000 f8e0 	bl	80011e0 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001020:	4b17      	ldr	r3, [pc, #92]	@ (8001080 <HAL_FDCAN_MspInit+0xb0>)
 8001022:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001024:	4a16      	ldr	r2, [pc, #88]	@ (8001080 <HAL_FDCAN_MspInit+0xb0>)
 8001026:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800102a:	6593      	str	r3, [r2, #88]	@ 0x58
 800102c:	4b14      	ldr	r3, [pc, #80]	@ (8001080 <HAL_FDCAN_MspInit+0xb0>)
 800102e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001030:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001038:	4b11      	ldr	r3, [pc, #68]	@ (8001080 <HAL_FDCAN_MspInit+0xb0>)
 800103a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800103c:	4a10      	ldr	r2, [pc, #64]	@ (8001080 <HAL_FDCAN_MspInit+0xb0>)
 800103e:	f043 0301 	orr.w	r3, r3, #1
 8001042:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001044:	4b0e      	ldr	r3, [pc, #56]	@ (8001080 <HAL_FDCAN_MspInit+0xb0>)
 8001046:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001048:	f003 0301 	and.w	r3, r3, #1
 800104c:	60bb      	str	r3, [r7, #8]
 800104e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001050:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001054:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001056:	2302      	movs	r3, #2
 8001058:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105e:	2300      	movs	r3, #0
 8001060:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001062:	2309      	movs	r3, #9
 8001064:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001066:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800106a:	4619      	mov	r1, r3
 800106c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001070:	f001 fd4a 	bl	8002b08 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8001074:	bf00      	nop
 8001076:	3778      	adds	r7, #120	@ 0x78
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40006400 	.word	0x40006400
 8001080:	40021000 	.word	0x40021000

08001084 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800108a:	4b1b      	ldr	r3, [pc, #108]	@ (80010f8 <MX_GPIO_Init+0x74>)
 800108c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800108e:	4a1a      	ldr	r2, [pc, #104]	@ (80010f8 <MX_GPIO_Init+0x74>)
 8001090:	f043 0320 	orr.w	r3, r3, #32
 8001094:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001096:	4b18      	ldr	r3, [pc, #96]	@ (80010f8 <MX_GPIO_Init+0x74>)
 8001098:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800109a:	f003 0320 	and.w	r3, r3, #32
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a2:	4b15      	ldr	r3, [pc, #84]	@ (80010f8 <MX_GPIO_Init+0x74>)
 80010a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010a6:	4a14      	ldr	r2, [pc, #80]	@ (80010f8 <MX_GPIO_Init+0x74>)
 80010a8:	f043 0301 	orr.w	r3, r3, #1
 80010ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ae:	4b12      	ldr	r3, [pc, #72]	@ (80010f8 <MX_GPIO_Init+0x74>)
 80010b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	60bb      	str	r3, [r7, #8]
 80010b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ba:	4b0f      	ldr	r3, [pc, #60]	@ (80010f8 <MX_GPIO_Init+0x74>)
 80010bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010be:	4a0e      	ldr	r2, [pc, #56]	@ (80010f8 <MX_GPIO_Init+0x74>)
 80010c0:	f043 0304 	orr.w	r3, r3, #4
 80010c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010c6:	4b0c      	ldr	r3, [pc, #48]	@ (80010f8 <MX_GPIO_Init+0x74>)
 80010c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ca:	f003 0304 	and.w	r3, r3, #4
 80010ce:	607b      	str	r3, [r7, #4]
 80010d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d2:	4b09      	ldr	r3, [pc, #36]	@ (80010f8 <MX_GPIO_Init+0x74>)
 80010d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010d6:	4a08      	ldr	r2, [pc, #32]	@ (80010f8 <MX_GPIO_Init+0x74>)
 80010d8:	f043 0302 	orr.w	r3, r3, #2
 80010dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010de:	4b06      	ldr	r3, [pc, #24]	@ (80010f8 <MX_GPIO_Init+0x74>)
 80010e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010e2:	f003 0302 	and.w	r3, r3, #2
 80010e6:	603b      	str	r3, [r7, #0]
 80010e8:	683b      	ldr	r3, [r7, #0]

}
 80010ea:	bf00      	nop
 80010ec:	3714      	adds	r7, #20
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	40021000 	.word	0x40021000

080010fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001100:	f001 f87d 	bl	80021fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001104:	f000 f810 	bl	8001128 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001108:	f7ff ffbc 	bl	8001084 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 800110c:	f7ff ff18 	bl	8000f40 <MX_FDCAN1_Init>
  MX_USART1_UART_Init();
 8001110:	f000 fa0c 	bl	800152c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001114:	f000 fa56 	bl	80015c4 <MX_USART2_UART_Init>
  // LOG_BESTPOS command

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001118:	f005 fb96 	bl	8006848 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800111c:	f7ff fef4 	bl	8000f08 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001120:	f005 fbb6 	bl	8006890 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001124:	bf00      	nop
 8001126:	e7fd      	b.n	8001124 <main+0x28>

08001128 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b094      	sub	sp, #80	@ 0x50
 800112c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800112e:	f107 0318 	add.w	r3, r7, #24
 8001132:	2238      	movs	r2, #56	@ 0x38
 8001134:	2100      	movs	r1, #0
 8001136:	4618      	mov	r0, r3
 8001138:	f009 fd9f 	bl	800ac7a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800113c:	1d3b      	adds	r3, r7, #4
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]
 8001144:	609a      	str	r2, [r3, #8]
 8001146:	60da      	str	r2, [r3, #12]
 8001148:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800114a:	2000      	movs	r0, #0
 800114c:	f001 fe5e 	bl	8002e0c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001150:	2301      	movs	r3, #1
 8001152:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001154:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001158:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800115a:	2302      	movs	r3, #2
 800115c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800115e:	2303      	movs	r3, #3
 8001160:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV3;
 8001162:	2303      	movs	r3, #3
 8001164:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001166:	2328      	movs	r3, #40	@ 0x28
 8001168:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800116a:	2302      	movs	r3, #2
 800116c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800116e:	2302      	movs	r3, #2
 8001170:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001172:	2302      	movs	r3, #2
 8001174:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001176:	f107 0318 	add.w	r3, r7, #24
 800117a:	4618      	mov	r0, r3
 800117c:	f001 fefa 	bl	8002f74 <HAL_RCC_OscConfig>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001186:	f000 f82b 	bl	80011e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800118a:	230f      	movs	r3, #15
 800118c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800118e:	2303      	movs	r3, #3
 8001190:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001192:	2300      	movs	r3, #0
 8001194:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001196:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800119a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800119c:	2300      	movs	r3, #0
 800119e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011a0:	1d3b      	adds	r3, r7, #4
 80011a2:	2104      	movs	r1, #4
 80011a4:	4618      	mov	r0, r3
 80011a6:	f002 f9f7 	bl	8003598 <HAL_RCC_ClockConfig>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80011b0:	f000 f816 	bl	80011e0 <Error_Handler>
  }
}
 80011b4:	bf00      	nop
 80011b6:	3750      	adds	r7, #80	@ 0x50
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a04      	ldr	r2, [pc, #16]	@ (80011dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d101      	bne.n	80011d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80011ce:	f001 f82f 	bl	8002230 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40001000 	.word	0x40001000

080011e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011e4:	b672      	cpsid	i
}
 80011e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011e8:	bf00      	nop
 80011ea:	e7fd      	b.n	80011e8 <Error_Handler+0x8>

080011ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f2:	4b12      	ldr	r3, [pc, #72]	@ (800123c <HAL_MspInit+0x50>)
 80011f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011f6:	4a11      	ldr	r2, [pc, #68]	@ (800123c <HAL_MspInit+0x50>)
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80011fe:	4b0f      	ldr	r3, [pc, #60]	@ (800123c <HAL_MspInit+0x50>)
 8001200:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800120a:	4b0c      	ldr	r3, [pc, #48]	@ (800123c <HAL_MspInit+0x50>)
 800120c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800120e:	4a0b      	ldr	r2, [pc, #44]	@ (800123c <HAL_MspInit+0x50>)
 8001210:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001214:	6593      	str	r3, [r2, #88]	@ 0x58
 8001216:	4b09      	ldr	r3, [pc, #36]	@ (800123c <HAL_MspInit+0x50>)
 8001218:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800121a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800121e:	603b      	str	r3, [r7, #0]
 8001220:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001222:	2200      	movs	r2, #0
 8001224:	210f      	movs	r1, #15
 8001226:	f06f 0001 	mvn.w	r0, #1
 800122a:	f001 f8d7 	bl	80023dc <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800122e:	f001 fe91 	bl	8002f54 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40021000 	.word	0x40021000

08001240 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08c      	sub	sp, #48	@ 0x30
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001248:	2300      	movs	r3, #0
 800124a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 800124c:	2300      	movs	r3, #0
 800124e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001250:	4b2d      	ldr	r3, [pc, #180]	@ (8001308 <HAL_InitTick+0xc8>)
 8001252:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001254:	4a2c      	ldr	r2, [pc, #176]	@ (8001308 <HAL_InitTick+0xc8>)
 8001256:	f043 0310 	orr.w	r3, r3, #16
 800125a:	6593      	str	r3, [r2, #88]	@ 0x58
 800125c:	4b2a      	ldr	r3, [pc, #168]	@ (8001308 <HAL_InitTick+0xc8>)
 800125e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001260:	f003 0310 	and.w	r3, r3, #16
 8001264:	60bb      	str	r3, [r7, #8]
 8001266:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001268:	f107 020c 	add.w	r2, r7, #12
 800126c:	f107 0310 	add.w	r3, r7, #16
 8001270:	4611      	mov	r1, r2
 8001272:	4618      	mov	r0, r3
 8001274:	f002 fb66 	bl	8003944 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001278:	f002 fb38 	bl	80038ec <HAL_RCC_GetPCLK1Freq>
 800127c:	4603      	mov	r3, r0
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001284:	4a21      	ldr	r2, [pc, #132]	@ (800130c <HAL_InitTick+0xcc>)
 8001286:	fba2 2303 	umull	r2, r3, r2, r3
 800128a:	0c9b      	lsrs	r3, r3, #18
 800128c:	3b01      	subs	r3, #1
 800128e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001290:	4b1f      	ldr	r3, [pc, #124]	@ (8001310 <HAL_InitTick+0xd0>)
 8001292:	4a20      	ldr	r2, [pc, #128]	@ (8001314 <HAL_InitTick+0xd4>)
 8001294:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001296:	4b1e      	ldr	r3, [pc, #120]	@ (8001310 <HAL_InitTick+0xd0>)
 8001298:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800129c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800129e:	4a1c      	ldr	r2, [pc, #112]	@ (8001310 <HAL_InitTick+0xd0>)
 80012a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012a2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80012a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001310 <HAL_InitTick+0xd0>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012aa:	4b19      	ldr	r3, [pc, #100]	@ (8001310 <HAL_InitTick+0xd0>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80012b0:	4817      	ldr	r0, [pc, #92]	@ (8001310 <HAL_InitTick+0xd0>)
 80012b2:	f002 fe0d 	bl	8003ed0 <HAL_TIM_Base_Init>
 80012b6:	4603      	mov	r3, r0
 80012b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80012bc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d11b      	bne.n	80012fc <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80012c4:	4812      	ldr	r0, [pc, #72]	@ (8001310 <HAL_InitTick+0xd0>)
 80012c6:	f002 fe65 	bl	8003f94 <HAL_TIM_Base_Start_IT>
 80012ca:	4603      	mov	r3, r0
 80012cc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80012d0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d111      	bne.n	80012fc <HAL_InitTick+0xbc>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80012d8:	2036      	movs	r0, #54	@ 0x36
 80012da:	f001 f899 	bl	8002410 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2b0f      	cmp	r3, #15
 80012e2:	d808      	bhi.n	80012f6 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80012e4:	2200      	movs	r2, #0
 80012e6:	6879      	ldr	r1, [r7, #4]
 80012e8:	2036      	movs	r0, #54	@ 0x36
 80012ea:	f001 f877 	bl	80023dc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001318 <HAL_InitTick+0xd8>)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6013      	str	r3, [r2, #0]
 80012f4:	e002      	b.n	80012fc <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80012fc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001300:	4618      	mov	r0, r3
 8001302:	3730      	adds	r7, #48	@ 0x30
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40021000 	.word	0x40021000
 800130c:	431bde83 	.word	0x431bde83
 8001310:	2000025c 	.word	0x2000025c
 8001314:	40001000 	.word	0x40001000
 8001318:	20000004 	.word	0x20000004

0800131c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001320:	bf00      	nop
 8001322:	e7fd      	b.n	8001320 <NMI_Handler+0x4>

08001324 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001328:	bf00      	nop
 800132a:	e7fd      	b.n	8001328 <HardFault_Handler+0x4>

0800132c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001330:	bf00      	nop
 8001332:	e7fd      	b.n	8001330 <MemManage_Handler+0x4>

08001334 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001338:	bf00      	nop
 800133a:	e7fd      	b.n	8001338 <BusFault_Handler+0x4>

0800133c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001340:	bf00      	nop
 8001342:	e7fd      	b.n	8001340 <UsageFault_Handler+0x4>

08001344 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001348:	bf00      	nop
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
	...

08001354 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001358:	4802      	ldr	r0, [pc, #8]	@ (8001364 <USART1_IRQHandler+0x10>)
 800135a:	f003 fa2f 	bl	80047bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	200002ac 	.word	0x200002ac

08001368 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800136c:	4802      	ldr	r0, [pc, #8]	@ (8001378 <TIM6_DAC_IRQHandler+0x10>)
 800136e:	f002 fe89 	bl	8004084 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	2000025c 	.word	0x2000025c

0800137c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  return 1;
 8001380:	2301      	movs	r3, #1
}
 8001382:	4618      	mov	r0, r3
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <_kill>:

int _kill(int pid, int sig)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001396:	f009 fd2d 	bl	800adf4 <__errno>
 800139a:	4603      	mov	r3, r0
 800139c:	2216      	movs	r2, #22
 800139e:	601a      	str	r2, [r3, #0]
  return -1;
 80013a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <_exit>:

void _exit (int status)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80013b4:	f04f 31ff 	mov.w	r1, #4294967295
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f7ff ffe7 	bl	800138c <_kill>
  while (1) {}    /* Make sure we hang here */
 80013be:	bf00      	nop
 80013c0:	e7fd      	b.n	80013be <_exit+0x12>

080013c2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b086      	sub	sp, #24
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	60f8      	str	r0, [r7, #12]
 80013ca:	60b9      	str	r1, [r7, #8]
 80013cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ce:	2300      	movs	r3, #0
 80013d0:	617b      	str	r3, [r7, #20]
 80013d2:	e00a      	b.n	80013ea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013d4:	f3af 8000 	nop.w
 80013d8:	4601      	mov	r1, r0
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	1c5a      	adds	r2, r3, #1
 80013de:	60ba      	str	r2, [r7, #8]
 80013e0:	b2ca      	uxtb	r2, r1
 80013e2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	3301      	adds	r3, #1
 80013e8:	617b      	str	r3, [r7, #20]
 80013ea:	697a      	ldr	r2, [r7, #20]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	dbf0      	blt.n	80013d4 <_read+0x12>
  }

  return len;
 80013f2:	687b      	ldr	r3, [r7, #4]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3718      	adds	r7, #24
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]
 800140c:	e009      	b.n	8001422 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	1c5a      	adds	r2, r3, #1
 8001412:	60ba      	str	r2, [r7, #8]
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	4618      	mov	r0, r3
 8001418:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	3301      	adds	r3, #1
 8001420:	617b      	str	r3, [r7, #20]
 8001422:	697a      	ldr	r2, [r7, #20]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	429a      	cmp	r2, r3
 8001428:	dbf1      	blt.n	800140e <_write+0x12>
  }
  return len;
 800142a:	687b      	ldr	r3, [r7, #4]
}
 800142c:	4618      	mov	r0, r3
 800142e:	3718      	adds	r7, #24
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <_close>:

int _close(int file)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800143c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001440:	4618      	mov	r0, r3
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800145c:	605a      	str	r2, [r3, #4]
  return 0;
 800145e:	2300      	movs	r3, #0
}
 8001460:	4618      	mov	r0, r3
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <_isatty>:

int _isatty(int file)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001474:	2301      	movs	r3, #1
}
 8001476:	4618      	mov	r0, r3
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr

08001482 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001482:	b480      	push	{r7}
 8001484:	b085      	sub	sp, #20
 8001486:	af00      	add	r7, sp, #0
 8001488:	60f8      	str	r0, [r7, #12]
 800148a:	60b9      	str	r1, [r7, #8]
 800148c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800148e:	2300      	movs	r3, #0
}
 8001490:	4618      	mov	r0, r3
 8001492:	3714      	adds	r7, #20
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014a4:	4a14      	ldr	r2, [pc, #80]	@ (80014f8 <_sbrk+0x5c>)
 80014a6:	4b15      	ldr	r3, [pc, #84]	@ (80014fc <_sbrk+0x60>)
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014b0:	4b13      	ldr	r3, [pc, #76]	@ (8001500 <_sbrk+0x64>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d102      	bne.n	80014be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014b8:	4b11      	ldr	r3, [pc, #68]	@ (8001500 <_sbrk+0x64>)
 80014ba:	4a12      	ldr	r2, [pc, #72]	@ (8001504 <_sbrk+0x68>)
 80014bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014be:	4b10      	ldr	r3, [pc, #64]	@ (8001500 <_sbrk+0x64>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4413      	add	r3, r2
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d207      	bcs.n	80014dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014cc:	f009 fc92 	bl	800adf4 <__errno>
 80014d0:	4603      	mov	r3, r0
 80014d2:	220c      	movs	r2, #12
 80014d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014d6:	f04f 33ff 	mov.w	r3, #4294967295
 80014da:	e009      	b.n	80014f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014dc:	4b08      	ldr	r3, [pc, #32]	@ (8001500 <_sbrk+0x64>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014e2:	4b07      	ldr	r3, [pc, #28]	@ (8001500 <_sbrk+0x64>)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4413      	add	r3, r2
 80014ea:	4a05      	ldr	r2, [pc, #20]	@ (8001500 <_sbrk+0x64>)
 80014ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014ee:	68fb      	ldr	r3, [r7, #12]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3718      	adds	r7, #24
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20020000 	.word	0x20020000
 80014fc:	00000400 	.word	0x00000400
 8001500:	200002a8 	.word	0x200002a8
 8001504:	200020e8 	.word	0x200020e8

08001508 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800150c:	4b06      	ldr	r3, [pc, #24]	@ (8001528 <SystemInit+0x20>)
 800150e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001512:	4a05      	ldr	r2, [pc, #20]	@ (8001528 <SystemInit+0x20>)
 8001514:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001518:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001530:	4b22      	ldr	r3, [pc, #136]	@ (80015bc <MX_USART1_UART_Init+0x90>)
 8001532:	4a23      	ldr	r2, [pc, #140]	@ (80015c0 <MX_USART1_UART_Init+0x94>)
 8001534:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8001536:	4b21      	ldr	r3, [pc, #132]	@ (80015bc <MX_USART1_UART_Init+0x90>)
 8001538:	f44f 22e1 	mov.w	r2, #460800	@ 0x70800
 800153c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800153e:	4b1f      	ldr	r3, [pc, #124]	@ (80015bc <MX_USART1_UART_Init+0x90>)
 8001540:	2200      	movs	r2, #0
 8001542:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001544:	4b1d      	ldr	r3, [pc, #116]	@ (80015bc <MX_USART1_UART_Init+0x90>)
 8001546:	2200      	movs	r2, #0
 8001548:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800154a:	4b1c      	ldr	r3, [pc, #112]	@ (80015bc <MX_USART1_UART_Init+0x90>)
 800154c:	2200      	movs	r2, #0
 800154e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001550:	4b1a      	ldr	r3, [pc, #104]	@ (80015bc <MX_USART1_UART_Init+0x90>)
 8001552:	220c      	movs	r2, #12
 8001554:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001556:	4b19      	ldr	r3, [pc, #100]	@ (80015bc <MX_USART1_UART_Init+0x90>)
 8001558:	2200      	movs	r2, #0
 800155a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800155c:	4b17      	ldr	r3, [pc, #92]	@ (80015bc <MX_USART1_UART_Init+0x90>)
 800155e:	2200      	movs	r2, #0
 8001560:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001562:	4b16      	ldr	r3, [pc, #88]	@ (80015bc <MX_USART1_UART_Init+0x90>)
 8001564:	2200      	movs	r2, #0
 8001566:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001568:	4b14      	ldr	r3, [pc, #80]	@ (80015bc <MX_USART1_UART_Init+0x90>)
 800156a:	2200      	movs	r2, #0
 800156c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800156e:	4b13      	ldr	r3, [pc, #76]	@ (80015bc <MX_USART1_UART_Init+0x90>)
 8001570:	2200      	movs	r2, #0
 8001572:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001574:	4811      	ldr	r0, [pc, #68]	@ (80015bc <MX_USART1_UART_Init+0x90>)
 8001576:	f002 fff7 	bl	8004568 <HAL_UART_Init>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001580:	f7ff fe2e 	bl	80011e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001584:	2100      	movs	r1, #0
 8001586:	480d      	ldr	r0, [pc, #52]	@ (80015bc <MX_USART1_UART_Init+0x90>)
 8001588:	f005 f84f 	bl	800662a <HAL_UARTEx_SetTxFifoThreshold>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001592:	f7ff fe25 	bl	80011e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001596:	2100      	movs	r1, #0
 8001598:	4808      	ldr	r0, [pc, #32]	@ (80015bc <MX_USART1_UART_Init+0x90>)
 800159a:	f005 f884 	bl	80066a6 <HAL_UARTEx_SetRxFifoThreshold>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80015a4:	f7ff fe1c 	bl	80011e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80015a8:	4804      	ldr	r0, [pc, #16]	@ (80015bc <MX_USART1_UART_Init+0x90>)
 80015aa:	f005 f805 	bl	80065b8 <HAL_UARTEx_DisableFifoMode>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80015b4:	f7ff fe14 	bl	80011e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015b8:	bf00      	nop
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	200002ac 	.word	0x200002ac
 80015c0:	40013800 	.word	0x40013800

080015c4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015c8:	4b22      	ldr	r3, [pc, #136]	@ (8001654 <MX_USART2_UART_Init+0x90>)
 80015ca:	4a23      	ldr	r2, [pc, #140]	@ (8001658 <MX_USART2_UART_Init+0x94>)
 80015cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015ce:	4b21      	ldr	r3, [pc, #132]	@ (8001654 <MX_USART2_UART_Init+0x90>)
 80015d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015d6:	4b1f      	ldr	r3, [pc, #124]	@ (8001654 <MX_USART2_UART_Init+0x90>)
 80015d8:	2200      	movs	r2, #0
 80015da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001654 <MX_USART2_UART_Init+0x90>)
 80015de:	2200      	movs	r2, #0
 80015e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001654 <MX_USART2_UART_Init+0x90>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001654 <MX_USART2_UART_Init+0x90>)
 80015ea:	220c      	movs	r2, #12
 80015ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ee:	4b19      	ldr	r3, [pc, #100]	@ (8001654 <MX_USART2_UART_Init+0x90>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015f4:	4b17      	ldr	r3, [pc, #92]	@ (8001654 <MX_USART2_UART_Init+0x90>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015fa:	4b16      	ldr	r3, [pc, #88]	@ (8001654 <MX_USART2_UART_Init+0x90>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001600:	4b14      	ldr	r3, [pc, #80]	@ (8001654 <MX_USART2_UART_Init+0x90>)
 8001602:	2200      	movs	r2, #0
 8001604:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001606:	4b13      	ldr	r3, [pc, #76]	@ (8001654 <MX_USART2_UART_Init+0x90>)
 8001608:	2200      	movs	r2, #0
 800160a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800160c:	4811      	ldr	r0, [pc, #68]	@ (8001654 <MX_USART2_UART_Init+0x90>)
 800160e:	f002 ffab 	bl	8004568 <HAL_UART_Init>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001618:	f7ff fde2 	bl	80011e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800161c:	2100      	movs	r1, #0
 800161e:	480d      	ldr	r0, [pc, #52]	@ (8001654 <MX_USART2_UART_Init+0x90>)
 8001620:	f005 f803 	bl	800662a <HAL_UARTEx_SetTxFifoThreshold>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800162a:	f7ff fdd9 	bl	80011e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800162e:	2100      	movs	r1, #0
 8001630:	4808      	ldr	r0, [pc, #32]	@ (8001654 <MX_USART2_UART_Init+0x90>)
 8001632:	f005 f838 	bl	80066a6 <HAL_UARTEx_SetRxFifoThreshold>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800163c:	f7ff fdd0 	bl	80011e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001640:	4804      	ldr	r0, [pc, #16]	@ (8001654 <MX_USART2_UART_Init+0x90>)
 8001642:	f004 ffb9 	bl	80065b8 <HAL_UARTEx_DisableFifoMode>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800164c:	f7ff fdc8 	bl	80011e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20000340 	.word	0x20000340
 8001658:	40004400 	.word	0x40004400

0800165c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b0a0      	sub	sp, #128	@ 0x80
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001664:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	609a      	str	r2, [r3, #8]
 8001670:	60da      	str	r2, [r3, #12]
 8001672:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001674:	f107 0318 	add.w	r3, r7, #24
 8001678:	2254      	movs	r2, #84	@ 0x54
 800167a:	2100      	movs	r1, #0
 800167c:	4618      	mov	r0, r3
 800167e:	f009 fafc 	bl	800ac7a <memset>
  if(uartHandle->Instance==USART1)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a41      	ldr	r2, [pc, #260]	@ (800178c <HAL_UART_MspInit+0x130>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d13e      	bne.n	800170a <HAL_UART_MspInit+0xae>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800168c:	2301      	movs	r3, #1
 800168e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001690:	2300      	movs	r3, #0
 8001692:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001694:	f107 0318 	add.w	r3, r7, #24
 8001698:	4618      	mov	r0, r3
 800169a:	f002 f9cb 	bl	8003a34 <HAL_RCCEx_PeriphCLKConfig>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80016a4:	f7ff fd9c 	bl	80011e0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016a8:	4b39      	ldr	r3, [pc, #228]	@ (8001790 <HAL_UART_MspInit+0x134>)
 80016aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016ac:	4a38      	ldr	r2, [pc, #224]	@ (8001790 <HAL_UART_MspInit+0x134>)
 80016ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016b2:	6613      	str	r3, [r2, #96]	@ 0x60
 80016b4:	4b36      	ldr	r3, [pc, #216]	@ (8001790 <HAL_UART_MspInit+0x134>)
 80016b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016bc:	617b      	str	r3, [r7, #20]
 80016be:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016c0:	4b33      	ldr	r3, [pc, #204]	@ (8001790 <HAL_UART_MspInit+0x134>)
 80016c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016c4:	4a32      	ldr	r2, [pc, #200]	@ (8001790 <HAL_UART_MspInit+0x134>)
 80016c6:	f043 0304 	orr.w	r3, r3, #4
 80016ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016cc:	4b30      	ldr	r3, [pc, #192]	@ (8001790 <HAL_UART_MspInit+0x134>)
 80016ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016d0:	f003 0304 	and.w	r3, r3, #4
 80016d4:	613b      	str	r3, [r7, #16]
 80016d6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80016d8:	2330      	movs	r3, #48	@ 0x30
 80016da:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016dc:	2302      	movs	r3, #2
 80016de:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e4:	2300      	movs	r3, #0
 80016e6:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016e8:	2307      	movs	r3, #7
 80016ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ec:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80016f0:	4619      	mov	r1, r3
 80016f2:	4828      	ldr	r0, [pc, #160]	@ (8001794 <HAL_UART_MspInit+0x138>)
 80016f4:	f001 fa08 	bl	8002b08 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80016f8:	2200      	movs	r2, #0
 80016fa:	2105      	movs	r1, #5
 80016fc:	2025      	movs	r0, #37	@ 0x25
 80016fe:	f000 fe6d 	bl	80023dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001702:	2025      	movs	r0, #37	@ 0x25
 8001704:	f000 fe84 	bl	8002410 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001708:	e03b      	b.n	8001782 <HAL_UART_MspInit+0x126>
  else if(uartHandle->Instance==USART2)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a22      	ldr	r2, [pc, #136]	@ (8001798 <HAL_UART_MspInit+0x13c>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d136      	bne.n	8001782 <HAL_UART_MspInit+0x126>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001714:	2302      	movs	r3, #2
 8001716:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001718:	2300      	movs	r3, #0
 800171a:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800171c:	f107 0318 	add.w	r3, r7, #24
 8001720:	4618      	mov	r0, r3
 8001722:	f002 f987 	bl	8003a34 <HAL_RCCEx_PeriphCLKConfig>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 800172c:	f7ff fd58 	bl	80011e0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001730:	4b17      	ldr	r3, [pc, #92]	@ (8001790 <HAL_UART_MspInit+0x134>)
 8001732:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001734:	4a16      	ldr	r2, [pc, #88]	@ (8001790 <HAL_UART_MspInit+0x134>)
 8001736:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800173a:	6593      	str	r3, [r2, #88]	@ 0x58
 800173c:	4b14      	ldr	r3, [pc, #80]	@ (8001790 <HAL_UART_MspInit+0x134>)
 800173e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001740:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001748:	4b11      	ldr	r3, [pc, #68]	@ (8001790 <HAL_UART_MspInit+0x134>)
 800174a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800174c:	4a10      	ldr	r2, [pc, #64]	@ (8001790 <HAL_UART_MspInit+0x134>)
 800174e:	f043 0301 	orr.w	r3, r3, #1
 8001752:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001754:	4b0e      	ldr	r3, [pc, #56]	@ (8001790 <HAL_UART_MspInit+0x134>)
 8001756:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001758:	f003 0301 	and.w	r3, r3, #1
 800175c:	60bb      	str	r3, [r7, #8]
 800175e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001760:	230c      	movs	r3, #12
 8001762:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001764:	2302      	movs	r3, #2
 8001766:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	2300      	movs	r3, #0
 800176a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176c:	2300      	movs	r3, #0
 800176e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001770:	2307      	movs	r3, #7
 8001772:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001774:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001778:	4619      	mov	r1, r3
 800177a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800177e:	f001 f9c3 	bl	8002b08 <HAL_GPIO_Init>
}
 8001782:	bf00      	nop
 8001784:	3780      	adds	r7, #128	@ 0x80
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40013800 	.word	0x40013800
 8001790:	40021000 	.word	0x40021000
 8001794:	48000800 	.word	0x48000800
 8001798:	40004400 	.word	0x40004400

0800179c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800179c:	480d      	ldr	r0, [pc, #52]	@ (80017d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800179e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017a0:	f7ff feb2 	bl	8001508 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017a4:	480c      	ldr	r0, [pc, #48]	@ (80017d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80017a6:	490d      	ldr	r1, [pc, #52]	@ (80017dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80017a8:	4a0d      	ldr	r2, [pc, #52]	@ (80017e0 <LoopForever+0xe>)
  movs r3, #0
 80017aa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80017ac:	e002      	b.n	80017b4 <LoopCopyDataInit>

080017ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017b2:	3304      	adds	r3, #4

080017b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017b8:	d3f9      	bcc.n	80017ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ba:	4a0a      	ldr	r2, [pc, #40]	@ (80017e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017bc:	4c0a      	ldr	r4, [pc, #40]	@ (80017e8 <LoopForever+0x16>)
  movs r3, #0
 80017be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017c0:	e001      	b.n	80017c6 <LoopFillZerobss>

080017c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017c4:	3204      	adds	r2, #4

080017c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017c8:	d3fb      	bcc.n	80017c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017ca:	f009 fb19 	bl	800ae00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017ce:	f7ff fc95 	bl	80010fc <main>

080017d2 <LoopForever>:

LoopForever:
    b LoopForever
 80017d2:	e7fe      	b.n	80017d2 <LoopForever>
  ldr   r0, =_estack
 80017d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017dc:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80017e0:	0800d39c 	.word	0x0800d39c
  ldr r2, =_sbss
 80017e4:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80017e8:	200020e8 	.word	0x200020e8

080017ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017ec:	e7fe      	b.n	80017ec <ADC1_2_IRQHandler>
	...

080017f0 <RTOS_Init>:
//double stdAltitude = 0;

struct ucr_01_gps_best_pos_t gpsData;


void RTOS_Init(void){
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
    gpsTaskHandle = osThreadNew(StartGPS, NULL, &gpsTask_attributes);
 80017f4:	4a08      	ldr	r2, [pc, #32]	@ (8001818 <RTOS_Init+0x28>)
 80017f6:	2100      	movs	r1, #0
 80017f8:	4808      	ldr	r0, [pc, #32]	@ (800181c <RTOS_Init+0x2c>)
 80017fa:	f005 f86f 	bl	80068dc <osThreadNew>
 80017fe:	4603      	mov	r3, r0
 8001800:	4a07      	ldr	r2, [pc, #28]	@ (8001820 <RTOS_Init+0x30>)
 8001802:	6013      	str	r3, [r2, #0]

    gpsSemaphoreHandle = osSemaphoreNew(1, 0, &gpsSemaphore_attributes);
 8001804:	4a07      	ldr	r2, [pc, #28]	@ (8001824 <RTOS_Init+0x34>)
 8001806:	2100      	movs	r1, #0
 8001808:	2001      	movs	r0, #1
 800180a:	f005 f914 	bl	8006a36 <osSemaphoreNew>
 800180e:	4603      	mov	r3, r0
 8001810:	4a05      	ldr	r2, [pc, #20]	@ (8001828 <RTOS_Init+0x38>)
 8001812:	6013      	str	r3, [r2, #0]
}
 8001814:	bf00      	nop
 8001816:	bd80      	pop	{r7, pc}
 8001818:	0800cf08 	.word	0x0800cf08
 800181c:	0800182d 	.word	0x0800182d
 8001820:	200003d4 	.word	0x200003d4
 8001824:	0800cf2c 	.word	0x0800cf2c
 8001828:	200003d8 	.word	0x200003d8

0800182c <StartGPS>:

void StartGPS(void *argument){
 800182c:	b5b0      	push	{r4, r5, r7, lr}
 800182e:	b0d4      	sub	sp, #336	@ 0x150
 8001830:	af00      	add	r7, sp, #0
 8001832:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8001836:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800183a:	6018      	str	r0, [r3, #0]
    HAL_FDCAN_Start(&hfdcan1);
 800183c:	4879      	ldr	r0, [pc, #484]	@ (8001a24 <StartGPS+0x1f8>)
 800183e:	f001 f80f 	bl	8002860 <HAL_FDCAN_Start>
    unsigned char start[] = "log bestposa ontime 0.1\r\n";
 8001842:	4b79      	ldr	r3, [pc, #484]	@ (8001a28 <StartGPS+0x1fc>)
 8001844:	f507 7496 	add.w	r4, r7, #300	@ 0x12c
 8001848:	461d      	mov	r5, r3
 800184a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800184c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800184e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001852:	c403      	stmia	r4!, {r0, r1}
 8001854:	8022      	strh	r2, [r4, #0]
    HAL_UART_Transmit (&huart1, start, sizeof(start), 10);
 8001856:	f507 7196 	add.w	r1, r7, #300	@ 0x12c
 800185a:	230a      	movs	r3, #10
 800185c:	221a      	movs	r2, #26
 800185e:	4873      	ldr	r0, [pc, #460]	@ (8001a2c <StartGPS+0x200>)
 8001860:	f002 fed2 	bl	8004608 <HAL_UART_Transmit>
    HAL_UART_Receive_IT(&huart1, temp, 1);
 8001864:	2201      	movs	r2, #1
 8001866:	4972      	ldr	r1, [pc, #456]	@ (8001a30 <StartGPS+0x204>)
 8001868:	4870      	ldr	r0, [pc, #448]	@ (8001a2c <StartGPS+0x200>)
 800186a:	f002 ff5b 	bl	8004724 <HAL_UART_Receive_IT>
    FDCAN_TxHeaderTypeDef TxHeader;
    TxHeader.Identifier = UCR_01_GPS_BEST_POS_FRAME_ID;
 800186e:	2350      	movs	r3, #80	@ 0x50
 8001870:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    TxHeader.IdType = FDCAN_STANDARD_ID;
 8001874:	2300      	movs	r3, #0
 8001876:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800187a:	2300      	movs	r3, #0
 800187c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    TxHeader.DataLength = FDCAN_DLC_BYTES_48;
 8001880:	230e      	movs	r3, #14
 8001882:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001886:	2300      	movs	r3, #0
 8001888:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 800188c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001890:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    TxHeader.FDFormat = FDCAN_FD_CAN;
 8001894:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001898:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800189c:	2300      	movs	r3, #0
 800189e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    TxHeader.MessageMarker = 0;
 80018a2:	2300      	movs	r3, #0
 80018a4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    while(1){
        osSemaphoreAcquire(gpsSemaphoreHandle, osWaitForever);
 80018a8:	4b62      	ldr	r3, [pc, #392]	@ (8001a34 <StartGPS+0x208>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f04f 31ff 	mov.w	r1, #4294967295
 80018b0:	4618      	mov	r0, r3
 80018b2:	f005 f949 	bl	8006b48 <osSemaphoreAcquire>
        char tempMsg[UARTBUFFERLENGTH];
        sprintf(tempMsg, strtok(FinalData, "#"));
 80018b6:	4960      	ldr	r1, [pc, #384]	@ (8001a38 <StartGPS+0x20c>)
 80018b8:	4860      	ldr	r0, [pc, #384]	@ (8001a3c <StartGPS+0x210>)
 80018ba:	f009 f9f9 	bl	800acb0 <strtok>
 80018be:	4602      	mov	r2, r0
 80018c0:	f107 0308 	add.w	r3, r7, #8
 80018c4:	4611      	mov	r1, r2
 80018c6:	4618      	mov	r0, r3
 80018c8:	f009 f964 	bl	800ab94 <siprintf>
        if(memcmp("BESTPOSA", tempMsg, 8) == 0){
 80018cc:	f107 0308 	add.w	r3, r7, #8
 80018d0:	2208      	movs	r2, #8
 80018d2:	4619      	mov	r1, r3
 80018d4:	485a      	ldr	r0, [pc, #360]	@ (8001a40 <StartGPS+0x214>)
 80018d6:	f009 f9c0 	bl	800ac5a <memcmp>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d1e3      	bne.n	80018a8 <StartGPS+0x7c>
    //      sprintf(gpsData, tempMsg);
            char *token = strtok(tempMsg, ",");
 80018e0:	f107 0308 	add.w	r3, r7, #8
 80018e4:	4957      	ldr	r1, [pc, #348]	@ (8001a44 <StartGPS+0x218>)
 80018e6:	4618      	mov	r0, r3
 80018e8:	f009 f9e2 	bl	800acb0 <strtok>
 80018ec:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
            int index = 0;
 80018f0:	2300      	movs	r3, #0
 80018f2:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
            while(token != NULL){
 80018f6:	e080      	b.n	80019fa <StartGPS+0x1ce>
                token = strtok(NULL, ",");
 80018f8:	4952      	ldr	r1, [pc, #328]	@ (8001a44 <StartGPS+0x218>)
 80018fa:	2000      	movs	r0, #0
 80018fc:	f009 f9d8 	bl	800acb0 <strtok>
 8001900:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
                switch(index){
 8001904:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8001908:	3b03      	subs	r3, #3
 800190a:	2b0f      	cmp	r3, #15
 800190c:	d86c      	bhi.n	80019e8 <StartGPS+0x1bc>
 800190e:	a201      	add	r2, pc, #4	@ (adr r2, 8001914 <StartGPS+0xe8>)
 8001910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001914:	080019e9 	.word	0x080019e9
 8001918:	080019e9 	.word	0x080019e9
 800191c:	080019e9 	.word	0x080019e9
 8001920:	080019e9 	.word	0x080019e9
 8001924:	080019e9 	.word	0x080019e9
 8001928:	080019e9 	.word	0x080019e9
 800192c:	080019e9 	.word	0x080019e9
 8001930:	08001955 	.word	0x08001955
 8001934:	08001971 	.word	0x08001971
 8001938:	08001989 	.word	0x08001989
 800193c:	080019e9 	.word	0x080019e9
 8001940:	080019e9 	.word	0x080019e9
 8001944:	080019a1 	.word	0x080019a1
 8001948:	080019b9 	.word	0x080019b9
 800194c:	080019d1 	.word	0x080019d1
 8001950:	080019e9 	.word	0x080019e9
                        break;
                    case 9:
                        // pos type
                        break;
                    case 10:
                        gpsData.latitude++;
 8001954:	4b3c      	ldr	r3, [pc, #240]	@ (8001a48 <StartGPS+0x21c>)
 8001956:	e9d3 0100 	ldrd	r0, r1, [r3]
 800195a:	f04f 0200 	mov.w	r2, #0
 800195e:	4b3b      	ldr	r3, [pc, #236]	@ (8001a4c <StartGPS+0x220>)
 8001960:	f7fe fcb4 	bl	80002cc <__adddf3>
 8001964:	4602      	mov	r2, r0
 8001966:	460b      	mov	r3, r1
 8001968:	4937      	ldr	r1, [pc, #220]	@ (8001a48 <StartGPS+0x21c>)
 800196a:	e9c1 2300 	strd	r2, r3, [r1]
                        break;
 800196e:	e03b      	b.n	80019e8 <StartGPS+0x1bc>
                    case 11:
                        gpsData.longitude = atof(token);
 8001970:	f8d7 014c 	ldr.w	r0, [r7, #332]	@ 0x14c
 8001974:	f008 fa38 	bl	8009de8 <atof>
 8001978:	eeb0 7a40 	vmov.f32	s14, s0
 800197c:	eef0 7a60 	vmov.f32	s15, s1
 8001980:	4b31      	ldr	r3, [pc, #196]	@ (8001a48 <StartGPS+0x21c>)
 8001982:	ed83 7b02 	vstr	d7, [r3, #8]
                        break;
 8001986:	e02f      	b.n	80019e8 <StartGPS+0x1bc>
                    case 12:
                        gpsData.altitude = atof(token);
 8001988:	f8d7 014c 	ldr.w	r0, [r7, #332]	@ 0x14c
 800198c:	f008 fa2c 	bl	8009de8 <atof>
 8001990:	eeb0 7a40 	vmov.f32	s14, s0
 8001994:	eef0 7a60 	vmov.f32	s15, s1
 8001998:	4b2b      	ldr	r3, [pc, #172]	@ (8001a48 <StartGPS+0x21c>)
 800199a:	ed83 7b04 	vstr	d7, [r3, #16]
                        break;
 800199e:	e023      	b.n	80019e8 <StartGPS+0x1bc>
                    case 15:
                        gpsData.std_latitude = atof(token);
 80019a0:	f8d7 014c 	ldr.w	r0, [r7, #332]	@ 0x14c
 80019a4:	f008 fa20 	bl	8009de8 <atof>
 80019a8:	eeb0 7a40 	vmov.f32	s14, s0
 80019ac:	eef0 7a60 	vmov.f32	s15, s1
 80019b0:	4b25      	ldr	r3, [pc, #148]	@ (8001a48 <StartGPS+0x21c>)
 80019b2:	ed83 7b06 	vstr	d7, [r3, #24]
                        break;
 80019b6:	e017      	b.n	80019e8 <StartGPS+0x1bc>
                    case 16:
                        gpsData.std_longitude = atof(token);
 80019b8:	f8d7 014c 	ldr.w	r0, [r7, #332]	@ 0x14c
 80019bc:	f008 fa14 	bl	8009de8 <atof>
 80019c0:	eeb0 7a40 	vmov.f32	s14, s0
 80019c4:	eef0 7a60 	vmov.f32	s15, s1
 80019c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001a48 <StartGPS+0x21c>)
 80019ca:	ed83 7b08 	vstr	d7, [r3, #32]
                        break;
 80019ce:	e00b      	b.n	80019e8 <StartGPS+0x1bc>
                    case 17:
                        gpsData.std_altitude = atof(token);
 80019d0:	f8d7 014c 	ldr.w	r0, [r7, #332]	@ 0x14c
 80019d4:	f008 fa08 	bl	8009de8 <atof>
 80019d8:	eeb0 7a40 	vmov.f32	s14, s0
 80019dc:	eef0 7a60 	vmov.f32	s15, s1
 80019e0:	4b19      	ldr	r3, [pc, #100]	@ (8001a48 <StartGPS+0x21c>)
 80019e2:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
                        break;
 80019e6:	bf00      	nop
                    case 18:
                        // base station id
                        break;
                }
                index ++;
 80019e8:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80019ec:	3301      	adds	r3, #1
 80019ee:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
                if(index == 18){
 80019f2:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80019f6:	2b12      	cmp	r3, #18
 80019f8:	d005      	beq.n	8001a06 <StartGPS+0x1da>
            while(token != NULL){
 80019fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	f47f af7a 	bne.w	80018f8 <StartGPS+0xcc>
 8001a04:	e000      	b.n	8001a08 <StartGPS+0x1dc>
                    break;
 8001a06:	bf00      	nop
                }

            }
            ucr_01_gps_best_pos_pack(canTxData, &gpsData, UCR_01_GPS_BEST_POS_LENGTH);
 8001a08:	2230      	movs	r2, #48	@ 0x30
 8001a0a:	490f      	ldr	r1, [pc, #60]	@ (8001a48 <StartGPS+0x21c>)
 8001a0c:	4810      	ldr	r0, [pc, #64]	@ (8001a50 <StartGPS+0x224>)
 8001a0e:	f000 f8a7 	bl	8001b60 <ucr_01_gps_best_pos_pack>
            if(HAL_OK != HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, canTxData)){
 8001a12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001a16:	4a0e      	ldr	r2, [pc, #56]	@ (8001a50 <StartGPS+0x224>)
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4802      	ldr	r0, [pc, #8]	@ (8001a24 <StartGPS+0x1f8>)
 8001a1c:	f000 ff48 	bl	80028b0 <HAL_FDCAN_AddMessageToTxFifoQ>
    while(1){
 8001a20:	e742      	b.n	80018a8 <StartGPS+0x7c>
 8001a22:	bf00      	nop
 8001a24:	200001f8 	.word	0x200001f8
 8001a28:	0800ce98 	.word	0x0800ce98
 8001a2c:	200002ac 	.word	0x200002ac
 8001a30:	20000444 	.word	0x20000444
 8001a34:	200003d8 	.word	0x200003d8
 8001a38:	0800ce84 	.word	0x0800ce84
 8001a3c:	20000548 	.word	0x20000548
 8001a40:	0800ce88 	.word	0x0800ce88
 8001a44:	0800ce94 	.word	0x0800ce94
 8001a48:	20000410 	.word	0x20000410
 8001a4c:	3ff00000 	.word	0x3ff00000
 8001a50:	200003dc 	.word	0x200003dc

08001a54 <HAL_UART_RxCpltCallback>:
//    gpsData[Size] = '\0';
//    gpsData[0] = '\0';
//    HAL_UARTEx_ReceiveToIdle_IT(&huart1, gpsData, UARTBUFFERLENGTH);
//}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
    if(temp[0] == '\n'){
 8001a5c:	4b15      	ldr	r3, [pc, #84]	@ (8001ab4 <HAL_UART_RxCpltCallback+0x60>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	2b0a      	cmp	r3, #10
 8001a62:	d10f      	bne.n	8001a84 <HAL_UART_RxCpltCallback+0x30>
        memcpy(FinalData, RxData, pos);
 8001a64:	4b14      	ldr	r3, [pc, #80]	@ (8001ab8 <HAL_UART_RxCpltCallback+0x64>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	461a      	mov	r2, r3
 8001a6a:	4914      	ldr	r1, [pc, #80]	@ (8001abc <HAL_UART_RxCpltCallback+0x68>)
 8001a6c:	4814      	ldr	r0, [pc, #80]	@ (8001ac0 <HAL_UART_RxCpltCallback+0x6c>)
 8001a6e:	f009 f9ee 	bl	800ae4e <memcpy>
        pos = 0;
 8001a72:	4b11      	ldr	r3, [pc, #68]	@ (8001ab8 <HAL_UART_RxCpltCallback+0x64>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	701a      	strb	r2, [r3, #0]
        osSemaphoreRelease(gpsSemaphoreHandle);
 8001a78:	4b12      	ldr	r3, [pc, #72]	@ (8001ac4 <HAL_UART_RxCpltCallback+0x70>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f005 f8b5 	bl	8006bec <osSemaphoreRelease>
 8001a82:	e00d      	b.n	8001aa0 <HAL_UART_RxCpltCallback+0x4c>
    }else{
        memcpy(RxData + pos, temp, 1);
 8001a84:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab8 <HAL_UART_RxCpltCallback+0x64>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	461a      	mov	r2, r3
 8001a8a:	4b0c      	ldr	r3, [pc, #48]	@ (8001abc <HAL_UART_RxCpltCallback+0x68>)
 8001a8c:	4413      	add	r3, r2
 8001a8e:	4a09      	ldr	r2, [pc, #36]	@ (8001ab4 <HAL_UART_RxCpltCallback+0x60>)
 8001a90:	7812      	ldrb	r2, [r2, #0]
 8001a92:	701a      	strb	r2, [r3, #0]
        pos++;
 8001a94:	4b08      	ldr	r3, [pc, #32]	@ (8001ab8 <HAL_UART_RxCpltCallback+0x64>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	b2da      	uxtb	r2, r3
 8001a9c:	4b06      	ldr	r3, [pc, #24]	@ (8001ab8 <HAL_UART_RxCpltCallback+0x64>)
 8001a9e:	701a      	strb	r2, [r3, #0]
    }
    HAL_UART_Receive_IT(&huart1, temp, 1);
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	4904      	ldr	r1, [pc, #16]	@ (8001ab4 <HAL_UART_RxCpltCallback+0x60>)
 8001aa4:	4808      	ldr	r0, [pc, #32]	@ (8001ac8 <HAL_UART_RxCpltCallback+0x74>)
 8001aa6:	f002 fe3d 	bl	8004724 <HAL_UART_Receive_IT>
}
 8001aaa:	bf00      	nop
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	20000444 	.word	0x20000444
 8001ab8:	20000440 	.word	0x20000440
 8001abc:	20000448 	.word	0x20000448
 8001ac0:	20000548 	.word	0x20000548
 8001ac4:	200003d8 	.word	0x200003d8
 8001ac8:	200002ac 	.word	0x200002ac

08001acc <pack_left_shift_u64>:

static inline uint8_t pack_left_shift_u64(
    uint64_t value,
    uint8_t shift,
    uint8_t mask)
{
 8001acc:	b4f0      	push	{r4, r5, r6, r7}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001ad6:	4611      	mov	r1, r2
 8001ad8:	461a      	mov	r2, r3
 8001ada:	460b      	mov	r3, r1
 8001adc:	71fb      	strb	r3, [r7, #7]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	71bb      	strb	r3, [r7, #6]
    return (uint8_t)((uint8_t)(value << shift) & mask);
 8001ae2:	79f9      	ldrb	r1, [r7, #7]
 8001ae4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ae8:	f1a1 0620 	sub.w	r6, r1, #32
 8001aec:	f1c1 0020 	rsb	r0, r1, #32
 8001af0:	fa03 f501 	lsl.w	r5, r3, r1
 8001af4:	fa02 f606 	lsl.w	r6, r2, r6
 8001af8:	4335      	orrs	r5, r6
 8001afa:	fa22 f000 	lsr.w	r0, r2, r0
 8001afe:	4305      	orrs	r5, r0
 8001b00:	fa02 f401 	lsl.w	r4, r2, r1
 8001b04:	b2e2      	uxtb	r2, r4
 8001b06:	79bb      	ldrb	r3, [r7, #6]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	b2db      	uxtb	r3, r3
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3710      	adds	r7, #16
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bcf0      	pop	{r4, r5, r6, r7}
 8001b14:	4770      	bx	lr

08001b16 <pack_right_shift_u64>:

static inline uint8_t pack_right_shift_u64(
    uint64_t value,
    uint8_t shift,
    uint8_t mask)
{
 8001b16:	b4f0      	push	{r4, r5, r6, r7}
 8001b18:	b084      	sub	sp, #16
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001b20:	4611      	mov	r1, r2
 8001b22:	461a      	mov	r2, r3
 8001b24:	460b      	mov	r3, r1
 8001b26:	71fb      	strb	r3, [r7, #7]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	71bb      	strb	r3, [r7, #6]
    return (uint8_t)((uint8_t)(value >> shift) & mask);
 8001b2c:	79f9      	ldrb	r1, [r7, #7]
 8001b2e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b32:	f1c1 0620 	rsb	r6, r1, #32
 8001b36:	f1a1 0020 	sub.w	r0, r1, #32
 8001b3a:	fa22 f401 	lsr.w	r4, r2, r1
 8001b3e:	fa03 f606 	lsl.w	r6, r3, r6
 8001b42:	4334      	orrs	r4, r6
 8001b44:	fa23 f000 	lsr.w	r0, r3, r0
 8001b48:	4304      	orrs	r4, r0
 8001b4a:	fa23 f501 	lsr.w	r5, r3, r1
 8001b4e:	b2e2      	uxtb	r2, r4
 8001b50:	79bb      	ldrb	r3, [r7, #6]
 8001b52:	4013      	ands	r3, r2
 8001b54:	b2db      	uxtb	r3, r3
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bcf0      	pop	{r4, r5, r6, r7}
 8001b5e:	4770      	bx	lr

08001b60 <ucr_01_gps_best_pos_pack>:

int ucr_01_gps_best_pos_pack(
    uint8_t *dst_p,
    const struct ucr_01_gps_best_pos_t *src_p,
    size_t size)
{
 8001b60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b64:	b096      	sub	sp, #88	@ 0x58
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6278      	str	r0, [r7, #36]	@ 0x24
 8001b6a:	6239      	str	r1, [r7, #32]
 8001b6c:	61fa      	str	r2, [r7, #28]
    uint64_t longitude;
    uint64_t std_altitude;
    uint64_t std_latitude;
    uint64_t std_longitude;

    if (size < 48u) {
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	2b2f      	cmp	r3, #47	@ 0x2f
 8001b72:	d802      	bhi.n	8001b7a <ucr_01_gps_best_pos_pack+0x1a>
        return (-EINVAL);
 8001b74:	f06f 0315 	mvn.w	r3, #21
 8001b78:	e33c      	b.n	80021f4 <ucr_01_gps_best_pos_pack+0x694>
    }

    memset(&dst_p[0], 0, 48);
 8001b7a:	2230      	movs	r2, #48	@ 0x30
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001b80:	f009 f87b 	bl	800ac7a <memset>

    memcpy(&latitude, &src_p->latitude, sizeof(latitude));
 8001b84:	6a3b      	ldr	r3, [r7, #32]
 8001b86:	681c      	ldr	r4, [r3, #0]
 8001b88:	685d      	ldr	r5, [r3, #4]
 8001b8a:	4622      	mov	r2, r4
 8001b8c:	462b      	mov	r3, r5
 8001b8e:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    dst_p[0] |= pack_left_shift_u64(latitude, 0u, 0xffu);
 8001b92:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001b96:	23ff      	movs	r3, #255	@ 0xff
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f7ff ff97 	bl	8001acc <pack_left_shift_u64>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	b2da      	uxtb	r2, r3
 8001baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bac:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_right_shift_u64(latitude, 8u, 0xffu);
 8001bae:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001bb2:	23ff      	movs	r3, #255	@ 0xff
 8001bb4:	2208      	movs	r2, #8
 8001bb6:	f7ff ffae 	bl	8001b16 <pack_right_shift_u64>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	781a      	ldrb	r2, [r3, #0]
 8001bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	b2d2      	uxtb	r2, r2
 8001bcc:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_right_shift_u64(latitude, 16u, 0xffu);
 8001bce:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001bd2:	23ff      	movs	r3, #255	@ 0xff
 8001bd4:	2210      	movs	r2, #16
 8001bd6:	f7ff ff9e 	bl	8001b16 <pack_right_shift_u64>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	4619      	mov	r1, r3
 8001bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be0:	3302      	adds	r3, #2
 8001be2:	781a      	ldrb	r2, [r3, #0]
 8001be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be6:	3302      	adds	r3, #2
 8001be8:	430a      	orrs	r2, r1
 8001bea:	b2d2      	uxtb	r2, r2
 8001bec:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_right_shift_u64(latitude, 24u, 0xffu);
 8001bee:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001bf2:	23ff      	movs	r3, #255	@ 0xff
 8001bf4:	2218      	movs	r2, #24
 8001bf6:	f7ff ff8e 	bl	8001b16 <pack_right_shift_u64>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c00:	3303      	adds	r3, #3
 8001c02:	781a      	ldrb	r2, [r3, #0]
 8001c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c06:	3303      	adds	r3, #3
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	b2d2      	uxtb	r2, r2
 8001c0c:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_right_shift_u64(latitude, 32u, 0xffu);
 8001c0e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001c12:	23ff      	movs	r3, #255	@ 0xff
 8001c14:	2220      	movs	r2, #32
 8001c16:	f7ff ff7e 	bl	8001b16 <pack_right_shift_u64>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c20:	3304      	adds	r3, #4
 8001c22:	781a      	ldrb	r2, [r3, #0]
 8001c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c26:	3304      	adds	r3, #4
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	b2d2      	uxtb	r2, r2
 8001c2c:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_right_shift_u64(latitude, 40u, 0xffu);
 8001c2e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001c32:	23ff      	movs	r3, #255	@ 0xff
 8001c34:	2228      	movs	r2, #40	@ 0x28
 8001c36:	f7ff ff6e 	bl	8001b16 <pack_right_shift_u64>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c40:	3305      	adds	r3, #5
 8001c42:	781a      	ldrb	r2, [r3, #0]
 8001c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c46:	3305      	adds	r3, #5
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	b2d2      	uxtb	r2, r2
 8001c4c:	701a      	strb	r2, [r3, #0]
    dst_p[6] |= pack_right_shift_u64(latitude, 48u, 0xffu);
 8001c4e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001c52:	23ff      	movs	r3, #255	@ 0xff
 8001c54:	2230      	movs	r2, #48	@ 0x30
 8001c56:	f7ff ff5e 	bl	8001b16 <pack_right_shift_u64>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c60:	3306      	adds	r3, #6
 8001c62:	781a      	ldrb	r2, [r3, #0]
 8001c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c66:	3306      	adds	r3, #6
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	b2d2      	uxtb	r2, r2
 8001c6c:	701a      	strb	r2, [r3, #0]
    dst_p[7] |= pack_right_shift_u64(latitude, 56u, 0xffu);
 8001c6e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001c72:	23ff      	movs	r3, #255	@ 0xff
 8001c74:	2238      	movs	r2, #56	@ 0x38
 8001c76:	f7ff ff4e 	bl	8001b16 <pack_right_shift_u64>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c80:	3307      	adds	r3, #7
 8001c82:	781a      	ldrb	r2, [r3, #0]
 8001c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c86:	3307      	adds	r3, #7
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	b2d2      	uxtb	r2, r2
 8001c8c:	701a      	strb	r2, [r3, #0]
    memcpy(&longitude, &src_p->longitude, sizeof(longitude));
 8001c8e:	6a3b      	ldr	r3, [r7, #32]
 8001c90:	3308      	adds	r3, #8
 8001c92:	f8d3 8000 	ldr.w	r8, [r3]
 8001c96:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8001c9a:	4642      	mov	r2, r8
 8001c9c:	464b      	mov	r3, r9
 8001c9e:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    dst_p[8] |= pack_left_shift_u64(longitude, 0u, 0xffu);
 8001ca2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001ca6:	23ff      	movs	r3, #255	@ 0xff
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f7ff ff0f 	bl	8001acc <pack_left_shift_u64>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb4:	3308      	adds	r3, #8
 8001cb6:	781a      	ldrb	r2, [r3, #0]
 8001cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cba:	3308      	adds	r3, #8
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	b2d2      	uxtb	r2, r2
 8001cc0:	701a      	strb	r2, [r3, #0]
    dst_p[9] |= pack_right_shift_u64(longitude, 8u, 0xffu);
 8001cc2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001cc6:	23ff      	movs	r3, #255	@ 0xff
 8001cc8:	2208      	movs	r2, #8
 8001cca:	f7ff ff24 	bl	8001b16 <pack_right_shift_u64>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd4:	3309      	adds	r3, #9
 8001cd6:	781a      	ldrb	r2, [r3, #0]
 8001cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cda:	3309      	adds	r3, #9
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	b2d2      	uxtb	r2, r2
 8001ce0:	701a      	strb	r2, [r3, #0]
    dst_p[10] |= pack_right_shift_u64(longitude, 16u, 0xffu);
 8001ce2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001ce6:	23ff      	movs	r3, #255	@ 0xff
 8001ce8:	2210      	movs	r2, #16
 8001cea:	f7ff ff14 	bl	8001b16 <pack_right_shift_u64>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf4:	330a      	adds	r3, #10
 8001cf6:	781a      	ldrb	r2, [r3, #0]
 8001cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cfa:	330a      	adds	r3, #10
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	b2d2      	uxtb	r2, r2
 8001d00:	701a      	strb	r2, [r3, #0]
    dst_p[11] |= pack_right_shift_u64(longitude, 24u, 0xffu);
 8001d02:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001d06:	23ff      	movs	r3, #255	@ 0xff
 8001d08:	2218      	movs	r2, #24
 8001d0a:	f7ff ff04 	bl	8001b16 <pack_right_shift_u64>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	4619      	mov	r1, r3
 8001d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d14:	330b      	adds	r3, #11
 8001d16:	781a      	ldrb	r2, [r3, #0]
 8001d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d1a:	330b      	adds	r3, #11
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	b2d2      	uxtb	r2, r2
 8001d20:	701a      	strb	r2, [r3, #0]
    dst_p[12] |= pack_right_shift_u64(longitude, 32u, 0xffu);
 8001d22:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001d26:	23ff      	movs	r3, #255	@ 0xff
 8001d28:	2220      	movs	r2, #32
 8001d2a:	f7ff fef4 	bl	8001b16 <pack_right_shift_u64>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	4619      	mov	r1, r3
 8001d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d34:	330c      	adds	r3, #12
 8001d36:	781a      	ldrb	r2, [r3, #0]
 8001d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d3a:	330c      	adds	r3, #12
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	b2d2      	uxtb	r2, r2
 8001d40:	701a      	strb	r2, [r3, #0]
    dst_p[13] |= pack_right_shift_u64(longitude, 40u, 0xffu);
 8001d42:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001d46:	23ff      	movs	r3, #255	@ 0xff
 8001d48:	2228      	movs	r2, #40	@ 0x28
 8001d4a:	f7ff fee4 	bl	8001b16 <pack_right_shift_u64>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	4619      	mov	r1, r3
 8001d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d54:	330d      	adds	r3, #13
 8001d56:	781a      	ldrb	r2, [r3, #0]
 8001d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5a:	330d      	adds	r3, #13
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	b2d2      	uxtb	r2, r2
 8001d60:	701a      	strb	r2, [r3, #0]
    dst_p[14] |= pack_right_shift_u64(longitude, 48u, 0xffu);
 8001d62:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001d66:	23ff      	movs	r3, #255	@ 0xff
 8001d68:	2230      	movs	r2, #48	@ 0x30
 8001d6a:	f7ff fed4 	bl	8001b16 <pack_right_shift_u64>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	4619      	mov	r1, r3
 8001d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d74:	330e      	adds	r3, #14
 8001d76:	781a      	ldrb	r2, [r3, #0]
 8001d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d7a:	330e      	adds	r3, #14
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	b2d2      	uxtb	r2, r2
 8001d80:	701a      	strb	r2, [r3, #0]
    dst_p[15] |= pack_right_shift_u64(longitude, 56u, 0xffu);
 8001d82:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001d86:	23ff      	movs	r3, #255	@ 0xff
 8001d88:	2238      	movs	r2, #56	@ 0x38
 8001d8a:	f7ff fec4 	bl	8001b16 <pack_right_shift_u64>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	4619      	mov	r1, r3
 8001d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d94:	330f      	adds	r3, #15
 8001d96:	781a      	ldrb	r2, [r3, #0]
 8001d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d9a:	330f      	adds	r3, #15
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	b2d2      	uxtb	r2, r2
 8001da0:	701a      	strb	r2, [r3, #0]
    memcpy(&altitude, &src_p->altitude, sizeof(altitude));
 8001da2:	6a3b      	ldr	r3, [r7, #32]
 8001da4:	3310      	adds	r3, #16
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	613a      	str	r2, [r7, #16]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	617b      	str	r3, [r7, #20]
 8001dae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001db2:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    dst_p[16] |= pack_left_shift_u64(altitude, 0u, 0xffu);
 8001db6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001dba:	23ff      	movs	r3, #255	@ 0xff
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f7ff fe85 	bl	8001acc <pack_left_shift_u64>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc8:	3310      	adds	r3, #16
 8001dca:	781a      	ldrb	r2, [r3, #0]
 8001dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dce:	3310      	adds	r3, #16
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	b2d2      	uxtb	r2, r2
 8001dd4:	701a      	strb	r2, [r3, #0]
    dst_p[17] |= pack_right_shift_u64(altitude, 8u, 0xffu);
 8001dd6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001dda:	23ff      	movs	r3, #255	@ 0xff
 8001ddc:	2208      	movs	r2, #8
 8001dde:	f7ff fe9a 	bl	8001b16 <pack_right_shift_u64>
 8001de2:	4603      	mov	r3, r0
 8001de4:	4619      	mov	r1, r3
 8001de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de8:	3311      	adds	r3, #17
 8001dea:	781a      	ldrb	r2, [r3, #0]
 8001dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dee:	3311      	adds	r3, #17
 8001df0:	430a      	orrs	r2, r1
 8001df2:	b2d2      	uxtb	r2, r2
 8001df4:	701a      	strb	r2, [r3, #0]
    dst_p[18] |= pack_right_shift_u64(altitude, 16u, 0xffu);
 8001df6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001dfa:	23ff      	movs	r3, #255	@ 0xff
 8001dfc:	2210      	movs	r2, #16
 8001dfe:	f7ff fe8a 	bl	8001b16 <pack_right_shift_u64>
 8001e02:	4603      	mov	r3, r0
 8001e04:	4619      	mov	r1, r3
 8001e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e08:	3312      	adds	r3, #18
 8001e0a:	781a      	ldrb	r2, [r3, #0]
 8001e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e0e:	3312      	adds	r3, #18
 8001e10:	430a      	orrs	r2, r1
 8001e12:	b2d2      	uxtb	r2, r2
 8001e14:	701a      	strb	r2, [r3, #0]
    dst_p[19] |= pack_right_shift_u64(altitude, 24u, 0xffu);
 8001e16:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001e1a:	23ff      	movs	r3, #255	@ 0xff
 8001e1c:	2218      	movs	r2, #24
 8001e1e:	f7ff fe7a 	bl	8001b16 <pack_right_shift_u64>
 8001e22:	4603      	mov	r3, r0
 8001e24:	4619      	mov	r1, r3
 8001e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e28:	3313      	adds	r3, #19
 8001e2a:	781a      	ldrb	r2, [r3, #0]
 8001e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e2e:	3313      	adds	r3, #19
 8001e30:	430a      	orrs	r2, r1
 8001e32:	b2d2      	uxtb	r2, r2
 8001e34:	701a      	strb	r2, [r3, #0]
    dst_p[20] |= pack_right_shift_u64(altitude, 32u, 0xffu);
 8001e36:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001e3a:	23ff      	movs	r3, #255	@ 0xff
 8001e3c:	2220      	movs	r2, #32
 8001e3e:	f7ff fe6a 	bl	8001b16 <pack_right_shift_u64>
 8001e42:	4603      	mov	r3, r0
 8001e44:	4619      	mov	r1, r3
 8001e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e48:	3314      	adds	r3, #20
 8001e4a:	781a      	ldrb	r2, [r3, #0]
 8001e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e4e:	3314      	adds	r3, #20
 8001e50:	430a      	orrs	r2, r1
 8001e52:	b2d2      	uxtb	r2, r2
 8001e54:	701a      	strb	r2, [r3, #0]
    dst_p[21] |= pack_right_shift_u64(altitude, 40u, 0xffu);
 8001e56:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001e5a:	23ff      	movs	r3, #255	@ 0xff
 8001e5c:	2228      	movs	r2, #40	@ 0x28
 8001e5e:	f7ff fe5a 	bl	8001b16 <pack_right_shift_u64>
 8001e62:	4603      	mov	r3, r0
 8001e64:	4619      	mov	r1, r3
 8001e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e68:	3315      	adds	r3, #21
 8001e6a:	781a      	ldrb	r2, [r3, #0]
 8001e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e6e:	3315      	adds	r3, #21
 8001e70:	430a      	orrs	r2, r1
 8001e72:	b2d2      	uxtb	r2, r2
 8001e74:	701a      	strb	r2, [r3, #0]
    dst_p[22] |= pack_right_shift_u64(altitude, 48u, 0xffu);
 8001e76:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001e7a:	23ff      	movs	r3, #255	@ 0xff
 8001e7c:	2230      	movs	r2, #48	@ 0x30
 8001e7e:	f7ff fe4a 	bl	8001b16 <pack_right_shift_u64>
 8001e82:	4603      	mov	r3, r0
 8001e84:	4619      	mov	r1, r3
 8001e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e88:	3316      	adds	r3, #22
 8001e8a:	781a      	ldrb	r2, [r3, #0]
 8001e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e8e:	3316      	adds	r3, #22
 8001e90:	430a      	orrs	r2, r1
 8001e92:	b2d2      	uxtb	r2, r2
 8001e94:	701a      	strb	r2, [r3, #0]
    dst_p[23] |= pack_right_shift_u64(altitude, 56u, 0xffu);
 8001e96:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001e9a:	23ff      	movs	r3, #255	@ 0xff
 8001e9c:	2238      	movs	r2, #56	@ 0x38
 8001e9e:	f7ff fe3a 	bl	8001b16 <pack_right_shift_u64>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea8:	3317      	adds	r3, #23
 8001eaa:	781a      	ldrb	r2, [r3, #0]
 8001eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eae:	3317      	adds	r3, #23
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	b2d2      	uxtb	r2, r2
 8001eb4:	701a      	strb	r2, [r3, #0]
    memcpy(&std_latitude, &src_p->std_latitude, sizeof(std_latitude));
 8001eb6:	6a3b      	ldr	r3, [r7, #32]
 8001eb8:	3318      	adds	r3, #24
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	60ba      	str	r2, [r7, #8]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	60fb      	str	r3, [r7, #12]
 8001ec2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ec6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    dst_p[24] |= pack_left_shift_u64(std_latitude, 0u, 0xffu);
 8001eca:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001ece:	23ff      	movs	r3, #255	@ 0xff
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f7ff fdfb 	bl	8001acc <pack_left_shift_u64>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	4619      	mov	r1, r3
 8001eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001edc:	3318      	adds	r3, #24
 8001ede:	781a      	ldrb	r2, [r3, #0]
 8001ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee2:	3318      	adds	r3, #24
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	b2d2      	uxtb	r2, r2
 8001ee8:	701a      	strb	r2, [r3, #0]
    dst_p[25] |= pack_right_shift_u64(std_latitude, 8u, 0xffu);
 8001eea:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001eee:	23ff      	movs	r3, #255	@ 0xff
 8001ef0:	2208      	movs	r2, #8
 8001ef2:	f7ff fe10 	bl	8001b16 <pack_right_shift_u64>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	4619      	mov	r1, r3
 8001efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001efc:	3319      	adds	r3, #25
 8001efe:	781a      	ldrb	r2, [r3, #0]
 8001f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f02:	3319      	adds	r3, #25
 8001f04:	430a      	orrs	r2, r1
 8001f06:	b2d2      	uxtb	r2, r2
 8001f08:	701a      	strb	r2, [r3, #0]
    dst_p[26] |= pack_right_shift_u64(std_latitude, 16u, 0xffu);
 8001f0a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001f0e:	23ff      	movs	r3, #255	@ 0xff
 8001f10:	2210      	movs	r2, #16
 8001f12:	f7ff fe00 	bl	8001b16 <pack_right_shift_u64>
 8001f16:	4603      	mov	r3, r0
 8001f18:	4619      	mov	r1, r3
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f1c:	331a      	adds	r3, #26
 8001f1e:	781a      	ldrb	r2, [r3, #0]
 8001f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f22:	331a      	adds	r3, #26
 8001f24:	430a      	orrs	r2, r1
 8001f26:	b2d2      	uxtb	r2, r2
 8001f28:	701a      	strb	r2, [r3, #0]
    dst_p[27] |= pack_right_shift_u64(std_latitude, 24u, 0xffu);
 8001f2a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001f2e:	23ff      	movs	r3, #255	@ 0xff
 8001f30:	2218      	movs	r2, #24
 8001f32:	f7ff fdf0 	bl	8001b16 <pack_right_shift_u64>
 8001f36:	4603      	mov	r3, r0
 8001f38:	4619      	mov	r1, r3
 8001f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f3c:	331b      	adds	r3, #27
 8001f3e:	781a      	ldrb	r2, [r3, #0]
 8001f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f42:	331b      	adds	r3, #27
 8001f44:	430a      	orrs	r2, r1
 8001f46:	b2d2      	uxtb	r2, r2
 8001f48:	701a      	strb	r2, [r3, #0]
    dst_p[28] |= pack_right_shift_u64(std_latitude, 32u, 0xffu);
 8001f4a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001f4e:	23ff      	movs	r3, #255	@ 0xff
 8001f50:	2220      	movs	r2, #32
 8001f52:	f7ff fde0 	bl	8001b16 <pack_right_shift_u64>
 8001f56:	4603      	mov	r3, r0
 8001f58:	4619      	mov	r1, r3
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f5c:	331c      	adds	r3, #28
 8001f5e:	781a      	ldrb	r2, [r3, #0]
 8001f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f62:	331c      	adds	r3, #28
 8001f64:	430a      	orrs	r2, r1
 8001f66:	b2d2      	uxtb	r2, r2
 8001f68:	701a      	strb	r2, [r3, #0]
    dst_p[29] |= pack_right_shift_u64(std_latitude, 40u, 0xffu);
 8001f6a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001f6e:	23ff      	movs	r3, #255	@ 0xff
 8001f70:	2228      	movs	r2, #40	@ 0x28
 8001f72:	f7ff fdd0 	bl	8001b16 <pack_right_shift_u64>
 8001f76:	4603      	mov	r3, r0
 8001f78:	4619      	mov	r1, r3
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f7c:	331d      	adds	r3, #29
 8001f7e:	781a      	ldrb	r2, [r3, #0]
 8001f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f82:	331d      	adds	r3, #29
 8001f84:	430a      	orrs	r2, r1
 8001f86:	b2d2      	uxtb	r2, r2
 8001f88:	701a      	strb	r2, [r3, #0]
    dst_p[30] |= pack_right_shift_u64(std_latitude, 48u, 0xffu);
 8001f8a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001f8e:	23ff      	movs	r3, #255	@ 0xff
 8001f90:	2230      	movs	r2, #48	@ 0x30
 8001f92:	f7ff fdc0 	bl	8001b16 <pack_right_shift_u64>
 8001f96:	4603      	mov	r3, r0
 8001f98:	4619      	mov	r1, r3
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f9c:	331e      	adds	r3, #30
 8001f9e:	781a      	ldrb	r2, [r3, #0]
 8001fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa2:	331e      	adds	r3, #30
 8001fa4:	430a      	orrs	r2, r1
 8001fa6:	b2d2      	uxtb	r2, r2
 8001fa8:	701a      	strb	r2, [r3, #0]
    dst_p[31] |= pack_right_shift_u64(std_latitude, 56u, 0xffu);
 8001faa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001fae:	23ff      	movs	r3, #255	@ 0xff
 8001fb0:	2238      	movs	r2, #56	@ 0x38
 8001fb2:	f7ff fdb0 	bl	8001b16 <pack_right_shift_u64>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	4619      	mov	r1, r3
 8001fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fbc:	331f      	adds	r3, #31
 8001fbe:	781a      	ldrb	r2, [r3, #0]
 8001fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc2:	331f      	adds	r3, #31
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	b2d2      	uxtb	r2, r2
 8001fc8:	701a      	strb	r2, [r3, #0]
    memcpy(&std_longitude, &src_p->std_longitude, sizeof(std_longitude));
 8001fca:	6a3b      	ldr	r3, [r7, #32]
 8001fcc:	3320      	adds	r3, #32
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	603a      	str	r2, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	607b      	str	r3, [r7, #4]
 8001fd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001fda:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    dst_p[32] |= pack_left_shift_u64(std_longitude, 0u, 0xffu);
 8001fde:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001fe2:	23ff      	movs	r3, #255	@ 0xff
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f7ff fd71 	bl	8001acc <pack_left_shift_u64>
 8001fea:	4603      	mov	r3, r0
 8001fec:	4619      	mov	r1, r3
 8001fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff0:	3320      	adds	r3, #32
 8001ff2:	781a      	ldrb	r2, [r3, #0]
 8001ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff6:	3320      	adds	r3, #32
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	b2d2      	uxtb	r2, r2
 8001ffc:	701a      	strb	r2, [r3, #0]
    dst_p[33] |= pack_right_shift_u64(std_longitude, 8u, 0xffu);
 8001ffe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002002:	23ff      	movs	r3, #255	@ 0xff
 8002004:	2208      	movs	r2, #8
 8002006:	f7ff fd86 	bl	8001b16 <pack_right_shift_u64>
 800200a:	4603      	mov	r3, r0
 800200c:	4619      	mov	r1, r3
 800200e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002010:	3321      	adds	r3, #33	@ 0x21
 8002012:	781a      	ldrb	r2, [r3, #0]
 8002014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002016:	3321      	adds	r3, #33	@ 0x21
 8002018:	430a      	orrs	r2, r1
 800201a:	b2d2      	uxtb	r2, r2
 800201c:	701a      	strb	r2, [r3, #0]
    dst_p[34] |= pack_right_shift_u64(std_longitude, 16u, 0xffu);
 800201e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002022:	23ff      	movs	r3, #255	@ 0xff
 8002024:	2210      	movs	r2, #16
 8002026:	f7ff fd76 	bl	8001b16 <pack_right_shift_u64>
 800202a:	4603      	mov	r3, r0
 800202c:	4619      	mov	r1, r3
 800202e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002030:	3322      	adds	r3, #34	@ 0x22
 8002032:	781a      	ldrb	r2, [r3, #0]
 8002034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002036:	3322      	adds	r3, #34	@ 0x22
 8002038:	430a      	orrs	r2, r1
 800203a:	b2d2      	uxtb	r2, r2
 800203c:	701a      	strb	r2, [r3, #0]
    dst_p[35] |= pack_right_shift_u64(std_longitude, 24u, 0xffu);
 800203e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002042:	23ff      	movs	r3, #255	@ 0xff
 8002044:	2218      	movs	r2, #24
 8002046:	f7ff fd66 	bl	8001b16 <pack_right_shift_u64>
 800204a:	4603      	mov	r3, r0
 800204c:	4619      	mov	r1, r3
 800204e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002050:	3323      	adds	r3, #35	@ 0x23
 8002052:	781a      	ldrb	r2, [r3, #0]
 8002054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002056:	3323      	adds	r3, #35	@ 0x23
 8002058:	430a      	orrs	r2, r1
 800205a:	b2d2      	uxtb	r2, r2
 800205c:	701a      	strb	r2, [r3, #0]
    dst_p[36] |= pack_right_shift_u64(std_longitude, 32u, 0xffu);
 800205e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002062:	23ff      	movs	r3, #255	@ 0xff
 8002064:	2220      	movs	r2, #32
 8002066:	f7ff fd56 	bl	8001b16 <pack_right_shift_u64>
 800206a:	4603      	mov	r3, r0
 800206c:	4619      	mov	r1, r3
 800206e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002070:	3324      	adds	r3, #36	@ 0x24
 8002072:	781a      	ldrb	r2, [r3, #0]
 8002074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002076:	3324      	adds	r3, #36	@ 0x24
 8002078:	430a      	orrs	r2, r1
 800207a:	b2d2      	uxtb	r2, r2
 800207c:	701a      	strb	r2, [r3, #0]
    dst_p[37] |= pack_right_shift_u64(std_longitude, 40u, 0xffu);
 800207e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002082:	23ff      	movs	r3, #255	@ 0xff
 8002084:	2228      	movs	r2, #40	@ 0x28
 8002086:	f7ff fd46 	bl	8001b16 <pack_right_shift_u64>
 800208a:	4603      	mov	r3, r0
 800208c:	4619      	mov	r1, r3
 800208e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002090:	3325      	adds	r3, #37	@ 0x25
 8002092:	781a      	ldrb	r2, [r3, #0]
 8002094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002096:	3325      	adds	r3, #37	@ 0x25
 8002098:	430a      	orrs	r2, r1
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	701a      	strb	r2, [r3, #0]
    dst_p[38] |= pack_right_shift_u64(std_longitude, 48u, 0xffu);
 800209e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80020a2:	23ff      	movs	r3, #255	@ 0xff
 80020a4:	2230      	movs	r2, #48	@ 0x30
 80020a6:	f7ff fd36 	bl	8001b16 <pack_right_shift_u64>
 80020aa:	4603      	mov	r3, r0
 80020ac:	4619      	mov	r1, r3
 80020ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b0:	3326      	adds	r3, #38	@ 0x26
 80020b2:	781a      	ldrb	r2, [r3, #0]
 80020b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b6:	3326      	adds	r3, #38	@ 0x26
 80020b8:	430a      	orrs	r2, r1
 80020ba:	b2d2      	uxtb	r2, r2
 80020bc:	701a      	strb	r2, [r3, #0]
    dst_p[39] |= pack_right_shift_u64(std_longitude, 56u, 0xffu);
 80020be:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80020c2:	23ff      	movs	r3, #255	@ 0xff
 80020c4:	2238      	movs	r2, #56	@ 0x38
 80020c6:	f7ff fd26 	bl	8001b16 <pack_right_shift_u64>
 80020ca:	4603      	mov	r3, r0
 80020cc:	4619      	mov	r1, r3
 80020ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d0:	3327      	adds	r3, #39	@ 0x27
 80020d2:	781a      	ldrb	r2, [r3, #0]
 80020d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d6:	3327      	adds	r3, #39	@ 0x27
 80020d8:	430a      	orrs	r2, r1
 80020da:	b2d2      	uxtb	r2, r2
 80020dc:	701a      	strb	r2, [r3, #0]
    memcpy(&std_altitude, &src_p->std_altitude, sizeof(std_altitude));
 80020de:	6a3b      	ldr	r3, [r7, #32]
 80020e0:	3328      	adds	r3, #40	@ 0x28
 80020e2:	f8d3 a000 	ldr.w	sl, [r3]
 80020e6:	f8d3 b004 	ldr.w	fp, [r3, #4]
 80020ea:	4652      	mov	r2, sl
 80020ec:	465b      	mov	r3, fp
 80020ee:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    dst_p[40] |= pack_left_shift_u64(std_altitude, 0u, 0xffu);
 80020f2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80020f6:	23ff      	movs	r3, #255	@ 0xff
 80020f8:	2200      	movs	r2, #0
 80020fa:	f7ff fce7 	bl	8001acc <pack_left_shift_u64>
 80020fe:	4603      	mov	r3, r0
 8002100:	4619      	mov	r1, r3
 8002102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002104:	3328      	adds	r3, #40	@ 0x28
 8002106:	781a      	ldrb	r2, [r3, #0]
 8002108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800210a:	3328      	adds	r3, #40	@ 0x28
 800210c:	430a      	orrs	r2, r1
 800210e:	b2d2      	uxtb	r2, r2
 8002110:	701a      	strb	r2, [r3, #0]
    dst_p[41] |= pack_right_shift_u64(std_altitude, 8u, 0xffu);
 8002112:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002116:	23ff      	movs	r3, #255	@ 0xff
 8002118:	2208      	movs	r2, #8
 800211a:	f7ff fcfc 	bl	8001b16 <pack_right_shift_u64>
 800211e:	4603      	mov	r3, r0
 8002120:	4619      	mov	r1, r3
 8002122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002124:	3329      	adds	r3, #41	@ 0x29
 8002126:	781a      	ldrb	r2, [r3, #0]
 8002128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800212a:	3329      	adds	r3, #41	@ 0x29
 800212c:	430a      	orrs	r2, r1
 800212e:	b2d2      	uxtb	r2, r2
 8002130:	701a      	strb	r2, [r3, #0]
    dst_p[42] |= pack_right_shift_u64(std_altitude, 16u, 0xffu);
 8002132:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002136:	23ff      	movs	r3, #255	@ 0xff
 8002138:	2210      	movs	r2, #16
 800213a:	f7ff fcec 	bl	8001b16 <pack_right_shift_u64>
 800213e:	4603      	mov	r3, r0
 8002140:	4619      	mov	r1, r3
 8002142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002144:	332a      	adds	r3, #42	@ 0x2a
 8002146:	781a      	ldrb	r2, [r3, #0]
 8002148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800214a:	332a      	adds	r3, #42	@ 0x2a
 800214c:	430a      	orrs	r2, r1
 800214e:	b2d2      	uxtb	r2, r2
 8002150:	701a      	strb	r2, [r3, #0]
    dst_p[43] |= pack_right_shift_u64(std_altitude, 24u, 0xffu);
 8002152:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002156:	23ff      	movs	r3, #255	@ 0xff
 8002158:	2218      	movs	r2, #24
 800215a:	f7ff fcdc 	bl	8001b16 <pack_right_shift_u64>
 800215e:	4603      	mov	r3, r0
 8002160:	4619      	mov	r1, r3
 8002162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002164:	332b      	adds	r3, #43	@ 0x2b
 8002166:	781a      	ldrb	r2, [r3, #0]
 8002168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800216a:	332b      	adds	r3, #43	@ 0x2b
 800216c:	430a      	orrs	r2, r1
 800216e:	b2d2      	uxtb	r2, r2
 8002170:	701a      	strb	r2, [r3, #0]
    dst_p[44] |= pack_right_shift_u64(std_altitude, 32u, 0xffu);
 8002172:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002176:	23ff      	movs	r3, #255	@ 0xff
 8002178:	2220      	movs	r2, #32
 800217a:	f7ff fccc 	bl	8001b16 <pack_right_shift_u64>
 800217e:	4603      	mov	r3, r0
 8002180:	4619      	mov	r1, r3
 8002182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002184:	332c      	adds	r3, #44	@ 0x2c
 8002186:	781a      	ldrb	r2, [r3, #0]
 8002188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800218a:	332c      	adds	r3, #44	@ 0x2c
 800218c:	430a      	orrs	r2, r1
 800218e:	b2d2      	uxtb	r2, r2
 8002190:	701a      	strb	r2, [r3, #0]
    dst_p[45] |= pack_right_shift_u64(std_altitude, 40u, 0xffu);
 8002192:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002196:	23ff      	movs	r3, #255	@ 0xff
 8002198:	2228      	movs	r2, #40	@ 0x28
 800219a:	f7ff fcbc 	bl	8001b16 <pack_right_shift_u64>
 800219e:	4603      	mov	r3, r0
 80021a0:	4619      	mov	r1, r3
 80021a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a4:	332d      	adds	r3, #45	@ 0x2d
 80021a6:	781a      	ldrb	r2, [r3, #0]
 80021a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021aa:	332d      	adds	r3, #45	@ 0x2d
 80021ac:	430a      	orrs	r2, r1
 80021ae:	b2d2      	uxtb	r2, r2
 80021b0:	701a      	strb	r2, [r3, #0]
    dst_p[46] |= pack_right_shift_u64(std_altitude, 48u, 0xffu);
 80021b2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80021b6:	23ff      	movs	r3, #255	@ 0xff
 80021b8:	2230      	movs	r2, #48	@ 0x30
 80021ba:	f7ff fcac 	bl	8001b16 <pack_right_shift_u64>
 80021be:	4603      	mov	r3, r0
 80021c0:	4619      	mov	r1, r3
 80021c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c4:	332e      	adds	r3, #46	@ 0x2e
 80021c6:	781a      	ldrb	r2, [r3, #0]
 80021c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ca:	332e      	adds	r3, #46	@ 0x2e
 80021cc:	430a      	orrs	r2, r1
 80021ce:	b2d2      	uxtb	r2, r2
 80021d0:	701a      	strb	r2, [r3, #0]
    dst_p[47] |= pack_right_shift_u64(std_altitude, 56u, 0xffu);
 80021d2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80021d6:	23ff      	movs	r3, #255	@ 0xff
 80021d8:	2238      	movs	r2, #56	@ 0x38
 80021da:	f7ff fc9c 	bl	8001b16 <pack_right_shift_u64>
 80021de:	4603      	mov	r3, r0
 80021e0:	4619      	mov	r1, r3
 80021e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e4:	332f      	adds	r3, #47	@ 0x2f
 80021e6:	781a      	ldrb	r2, [r3, #0]
 80021e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ea:	332f      	adds	r3, #47	@ 0x2f
 80021ec:	430a      	orrs	r2, r1
 80021ee:	b2d2      	uxtb	r2, r2
 80021f0:	701a      	strb	r2, [r3, #0]

    return (48);
 80021f2:	2330      	movs	r3, #48	@ 0x30
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3758      	adds	r7, #88	@ 0x58
 80021f8:	46bd      	mov	sp, r7
 80021fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080021fe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b082      	sub	sp, #8
 8002202:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002204:	2300      	movs	r3, #0
 8002206:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002208:	2003      	movs	r0, #3
 800220a:	f000 f8dc 	bl	80023c6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800220e:	200f      	movs	r0, #15
 8002210:	f7ff f816 	bl	8001240 <HAL_InitTick>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d002      	beq.n	8002220 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	71fb      	strb	r3, [r7, #7]
 800221e:	e001      	b.n	8002224 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002220:	f7fe ffe4 	bl	80011ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002224:	79fb      	ldrb	r3, [r7, #7]

}
 8002226:	4618      	mov	r0, r3
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
	...

08002230 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002234:	4b05      	ldr	r3, [pc, #20]	@ (800224c <HAL_IncTick+0x1c>)
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	4b05      	ldr	r3, [pc, #20]	@ (8002250 <HAL_IncTick+0x20>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4413      	add	r3, r2
 800223e:	4a03      	ldr	r2, [pc, #12]	@ (800224c <HAL_IncTick+0x1c>)
 8002240:	6013      	str	r3, [r2, #0]
}
 8002242:	bf00      	nop
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	20000648 	.word	0x20000648
 8002250:	20000008 	.word	0x20000008

08002254 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  return uwTick;
 8002258:	4b03      	ldr	r3, [pc, #12]	@ (8002268 <HAL_GetTick+0x14>)
 800225a:	681b      	ldr	r3, [r3, #0]
}
 800225c:	4618      	mov	r0, r3
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	20000648 	.word	0x20000648

0800226c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f003 0307 	and.w	r3, r3, #7
 800227a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800227c:	4b0c      	ldr	r3, [pc, #48]	@ (80022b0 <__NVIC_SetPriorityGrouping+0x44>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002282:	68ba      	ldr	r2, [r7, #8]
 8002284:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002288:	4013      	ands	r3, r2
 800228a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002294:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002298:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800229c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800229e:	4a04      	ldr	r2, [pc, #16]	@ (80022b0 <__NVIC_SetPriorityGrouping+0x44>)
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	60d3      	str	r3, [r2, #12]
}
 80022a4:	bf00      	nop
 80022a6:	3714      	adds	r7, #20
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	e000ed00 	.word	0xe000ed00

080022b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022b8:	4b04      	ldr	r3, [pc, #16]	@ (80022cc <__NVIC_GetPriorityGrouping+0x18>)
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	0a1b      	lsrs	r3, r3, #8
 80022be:	f003 0307 	and.w	r3, r3, #7
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	e000ed00 	.word	0xe000ed00

080022d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	db0b      	blt.n	80022fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022e2:	79fb      	ldrb	r3, [r7, #7]
 80022e4:	f003 021f 	and.w	r2, r3, #31
 80022e8:	4907      	ldr	r1, [pc, #28]	@ (8002308 <__NVIC_EnableIRQ+0x38>)
 80022ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ee:	095b      	lsrs	r3, r3, #5
 80022f0:	2001      	movs	r0, #1
 80022f2:	fa00 f202 	lsl.w	r2, r0, r2
 80022f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	e000e100 	.word	0xe000e100

0800230c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	6039      	str	r1, [r7, #0]
 8002316:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231c:	2b00      	cmp	r3, #0
 800231e:	db0a      	blt.n	8002336 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	b2da      	uxtb	r2, r3
 8002324:	490c      	ldr	r1, [pc, #48]	@ (8002358 <__NVIC_SetPriority+0x4c>)
 8002326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232a:	0112      	lsls	r2, r2, #4
 800232c:	b2d2      	uxtb	r2, r2
 800232e:	440b      	add	r3, r1
 8002330:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002334:	e00a      	b.n	800234c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	b2da      	uxtb	r2, r3
 800233a:	4908      	ldr	r1, [pc, #32]	@ (800235c <__NVIC_SetPriority+0x50>)
 800233c:	79fb      	ldrb	r3, [r7, #7]
 800233e:	f003 030f 	and.w	r3, r3, #15
 8002342:	3b04      	subs	r3, #4
 8002344:	0112      	lsls	r2, r2, #4
 8002346:	b2d2      	uxtb	r2, r2
 8002348:	440b      	add	r3, r1
 800234a:	761a      	strb	r2, [r3, #24]
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr
 8002358:	e000e100 	.word	0xe000e100
 800235c:	e000ed00 	.word	0xe000ed00

08002360 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002360:	b480      	push	{r7}
 8002362:	b089      	sub	sp, #36	@ 0x24
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	f1c3 0307 	rsb	r3, r3, #7
 800237a:	2b04      	cmp	r3, #4
 800237c:	bf28      	it	cs
 800237e:	2304      	movcs	r3, #4
 8002380:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	3304      	adds	r3, #4
 8002386:	2b06      	cmp	r3, #6
 8002388:	d902      	bls.n	8002390 <NVIC_EncodePriority+0x30>
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	3b03      	subs	r3, #3
 800238e:	e000      	b.n	8002392 <NVIC_EncodePriority+0x32>
 8002390:	2300      	movs	r3, #0
 8002392:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002394:	f04f 32ff 	mov.w	r2, #4294967295
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	fa02 f303 	lsl.w	r3, r2, r3
 800239e:	43da      	mvns	r2, r3
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	401a      	ands	r2, r3
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023a8:	f04f 31ff 	mov.w	r1, #4294967295
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	fa01 f303 	lsl.w	r3, r1, r3
 80023b2:	43d9      	mvns	r1, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b8:	4313      	orrs	r3, r2
         );
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3724      	adds	r7, #36	@ 0x24
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr

080023c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b082      	sub	sp, #8
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f7ff ff4c 	bl	800226c <__NVIC_SetPriorityGrouping>
}
 80023d4:	bf00      	nop
 80023d6:	3708      	adds	r7, #8
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	4603      	mov	r3, r0
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
 80023e8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023ea:	f7ff ff63 	bl	80022b4 <__NVIC_GetPriorityGrouping>
 80023ee:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	68b9      	ldr	r1, [r7, #8]
 80023f4:	6978      	ldr	r0, [r7, #20]
 80023f6:	f7ff ffb3 	bl	8002360 <NVIC_EncodePriority>
 80023fa:	4602      	mov	r2, r0
 80023fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002400:	4611      	mov	r1, r2
 8002402:	4618      	mov	r0, r3
 8002404:	f7ff ff82 	bl	800230c <__NVIC_SetPriority>
}
 8002408:	bf00      	nop
 800240a:	3718      	adds	r7, #24
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	4603      	mov	r3, r0
 8002418:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800241a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241e:	4618      	mov	r0, r3
 8002420:	f7ff ff56 	bl	80022d0 <__NVIC_EnableIRQ>
}
 8002424:	bf00      	nop
 8002426:	3708      	adds	r7, #8
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002434:	2300      	movs	r3, #0
 8002436:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800243e:	b2db      	uxtb	r3, r3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d005      	beq.n	8002450 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2204      	movs	r2, #4
 8002448:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	73fb      	strb	r3, [r7, #15]
 800244e:	e037      	b.n	80024c0 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f022 020e 	bic.w	r2, r2, #14
 800245e:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800246a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800246e:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f022 0201 	bic.w	r2, r2, #1
 800247e:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002484:	f003 021f 	and.w	r2, r3, #31
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248c:	2101      	movs	r1, #1
 800248e:	fa01 f202 	lsl.w	r2, r1, r2
 8002492:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800249c:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00c      	beq.n	80024c0 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80024b4:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80024be:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80024d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3714      	adds	r7, #20
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b084      	sub	sp, #16
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024e6:	2300      	movs	r3, #0
 80024e8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d00d      	beq.n	8002512 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2204      	movs	r2, #4
 80024fa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	73fb      	strb	r3, [r7, #15]
 8002510:	e047      	b.n	80025a2 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f022 020e 	bic.w	r2, r2, #14
 8002520:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f022 0201 	bic.w	r2, r2, #1
 8002530:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800253c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002540:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002546:	f003 021f 	and.w	r2, r3, #31
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800254e:	2101      	movs	r1, #1
 8002550:	fa01 f202 	lsl.w	r2, r1, r2
 8002554:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800255e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002564:	2b00      	cmp	r3, #0
 8002566:	d00c      	beq.n	8002582 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002572:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002576:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002580:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2201      	movs	r2, #1
 8002586:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002596:	2b00      	cmp	r3, #0
 8002598:	d003      	beq.n	80025a2 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	4798      	blx	r3
    }
  }
  return status;
 80025a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3710      	adds	r7, #16
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e147      	b.n	800284e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d106      	bne.n	80025d8 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f7fe fcfc 	bl	8000fd0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	699a      	ldr	r2, [r3, #24]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f022 0210 	bic.w	r2, r2, #16
 80025e6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025e8:	f7ff fe34 	bl	8002254 <HAL_GetTick>
 80025ec:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80025ee:	e012      	b.n	8002616 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80025f0:	f7ff fe30 	bl	8002254 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b0a      	cmp	r3, #10
 80025fc:	d90b      	bls.n	8002616 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002602:	f043 0201 	orr.w	r2, r3, #1
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2203      	movs	r2, #3
 800260e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e11b      	b.n	800284e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	f003 0308 	and.w	r3, r3, #8
 8002620:	2b08      	cmp	r3, #8
 8002622:	d0e5      	beq.n	80025f0 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	699a      	ldr	r2, [r3, #24]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f042 0201 	orr.w	r2, r2, #1
 8002632:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002634:	f7ff fe0e 	bl	8002254 <HAL_GetTick>
 8002638:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800263a:	e012      	b.n	8002662 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800263c:	f7ff fe0a 	bl	8002254 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b0a      	cmp	r3, #10
 8002648:	d90b      	bls.n	8002662 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800264e:	f043 0201 	orr.w	r2, r3, #1
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2203      	movs	r2, #3
 800265a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e0f5      	b.n	800284e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	2b00      	cmp	r3, #0
 800266e:	d0e5      	beq.n	800263c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	699a      	ldr	r2, [r3, #24]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f042 0202 	orr.w	r2, r2, #2
 800267e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a74      	ldr	r2, [pc, #464]	@ (8002858 <HAL_FDCAN_Init+0x2ac>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d103      	bne.n	8002692 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800268a:	4a74      	ldr	r2, [pc, #464]	@ (800285c <HAL_FDCAN_Init+0x2b0>)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	7c1b      	ldrb	r3, [r3, #16]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d108      	bne.n	80026ac <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	699a      	ldr	r2, [r3, #24]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80026a8:	619a      	str	r2, [r3, #24]
 80026aa:	e007      	b.n	80026bc <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	699a      	ldr	r2, [r3, #24]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80026ba:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	7c5b      	ldrb	r3, [r3, #17]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d108      	bne.n	80026d6 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	699a      	ldr	r2, [r3, #24]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80026d2:	619a      	str	r2, [r3, #24]
 80026d4:	e007      	b.n	80026e6 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	699a      	ldr	r2, [r3, #24]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80026e4:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	7c9b      	ldrb	r3, [r3, #18]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d108      	bne.n	8002700 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	699a      	ldr	r2, [r3, #24]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80026fc:	619a      	str	r2, [r3, #24]
 80026fe:	e007      	b.n	8002710 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	699a      	ldr	r2, [r3, #24]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800270e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	689a      	ldr	r2, [r3, #8]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	430a      	orrs	r2, r1
 8002724:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	699a      	ldr	r2, [r3, #24]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8002734:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	691a      	ldr	r2, [r3, #16]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f022 0210 	bic.w	r2, r2, #16
 8002744:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d108      	bne.n	8002760 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	699a      	ldr	r2, [r3, #24]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f042 0204 	orr.w	r2, r2, #4
 800275c:	619a      	str	r2, [r3, #24]
 800275e:	e02c      	b.n	80027ba <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d028      	beq.n	80027ba <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	2b02      	cmp	r3, #2
 800276e:	d01c      	beq.n	80027aa <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	699a      	ldr	r2, [r3, #24]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800277e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	691a      	ldr	r2, [r3, #16]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f042 0210 	orr.w	r2, r2, #16
 800278e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	2b03      	cmp	r3, #3
 8002796:	d110      	bne.n	80027ba <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	699a      	ldr	r2, [r3, #24]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f042 0220 	orr.w	r2, r2, #32
 80027a6:	619a      	str	r2, [r3, #24]
 80027a8:	e007      	b.n	80027ba <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	699a      	ldr	r2, [r3, #24]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f042 0220 	orr.w	r2, r2, #32
 80027b8:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	3b01      	subs	r3, #1
 80027c0:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	3b01      	subs	r3, #1
 80027c8:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80027ca:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a1b      	ldr	r3, [r3, #32]
 80027d0:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80027d2:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	3b01      	subs	r3, #1
 80027dc:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80027e2:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80027e4:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80027ee:	d115      	bne.n	800281c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027f4:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027fa:	3b01      	subs	r3, #1
 80027fc:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80027fe:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002804:	3b01      	subs	r3, #1
 8002806:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002808:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002810:	3b01      	subs	r3, #1
 8002812:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002818:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800281a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	430a      	orrs	r2, r1
 800282e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 f880 	bl	8002938 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	40006400 	.word	0x40006400
 800285c:	40006500 	.word	0x40006500

08002860 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800286e:	b2db      	uxtb	r3, r3
 8002870:	2b01      	cmp	r3, #1
 8002872:	d110      	bne.n	8002896 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2202      	movs	r2, #2
 8002878:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	699a      	ldr	r2, [r3, #24]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f022 0201 	bic.w	r2, r2, #1
 800288a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8002892:	2300      	movs	r3, #0
 8002894:	e006      	b.n	80028a4 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800289a:	f043 0204 	orr.w	r2, r3, #4
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
  }
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b086      	sub	sp, #24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d12c      	bne.n	8002922 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80028d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d007      	beq.n	80028e8 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028dc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e023      	b.n	8002930 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80028f0:	0c1b      	lsrs	r3, r3, #16
 80028f2:	f003 0303 	and.w	r3, r3, #3
 80028f6:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	68b9      	ldr	r1, [r7, #8]
 80028fe:	68f8      	ldr	r0, [r7, #12]
 8002900:	f000 f886 	bl	8002a10 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2101      	movs	r1, #1
 800290a:	697a      	ldr	r2, [r7, #20]
 800290c:	fa01 f202 	lsl.w	r2, r1, r2
 8002910:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8002914:	2201      	movs	r2, #1
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	409a      	lsls	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 800291e:	2300      	movs	r3, #0
 8002920:	e006      	b.n	8002930 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002926:	f043 0208 	orr.w	r2, r3, #8
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
  }
}
 8002930:	4618      	mov	r0, r3
 8002932:	3718      	adds	r7, #24
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002940:	4b30      	ldr	r3, [pc, #192]	@ (8002a04 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8002942:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a2f      	ldr	r2, [pc, #188]	@ (8002a08 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d103      	bne.n	8002956 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8002954:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a2c      	ldr	r2, [pc, #176]	@ (8002a0c <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d103      	bne.n	8002968 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 8002966:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	68ba      	ldr	r2, [r7, #8]
 800296c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002976:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800297e:	041a      	lsls	r2, r3, #16
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	430a      	orrs	r2, r1
 8002986:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800299c:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029a4:	061a      	lsls	r2, r3, #24
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	430a      	orrs	r2, r1
 80029ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	60fb      	str	r3, [r7, #12]
 80029dc:	e005      	b.n	80029ea <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	3304      	adds	r3, #4
 80029e8:	60fb      	str	r3, [r7, #12]
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d3f3      	bcc.n	80029de <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 80029f6:	bf00      	nop
 80029f8:	bf00      	nop
 80029fa:	3714      	adds	r7, #20
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr
 8002a04:	4000a400 	.word	0x4000a400
 8002a08:	40006800 	.word	0x40006800
 8002a0c:	40006c00 	.word	0x40006c00

08002a10 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b089      	sub	sp, #36	@ 0x24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
 8002a1c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d10a      	bne.n	8002a3c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8002a2e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002a36:	4313      	orrs	r3, r2
 8002a38:	61fb      	str	r3, [r7, #28]
 8002a3a:	e00a      	b.n	8002a52 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8002a44:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8002a4a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002a4c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002a50:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002a5c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8002a62:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8002a68:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002a70:	4313      	orrs	r3, r2
 8002a72:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	00db      	lsls	r3, r3, #3
 8002a7e:	4413      	add	r3, r2
 8002a80:	00db      	lsls	r3, r3, #3
 8002a82:	440b      	add	r3, r1
 8002a84:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	69fa      	ldr	r2, [r7, #28]
 8002a8a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	3304      	adds	r3, #4
 8002a90:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	3304      	adds	r3, #4
 8002a9c:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	617b      	str	r3, [r7, #20]
 8002aa2:	e020      	b.n	8002ae6 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	3303      	adds	r3, #3
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	4413      	add	r3, r2
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	3302      	adds	r3, #2
 8002ab4:	6879      	ldr	r1, [r7, #4]
 8002ab6:	440b      	add	r3, r1
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002abc:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	6879      	ldr	r1, [r7, #4]
 8002ac4:	440b      	add	r3, r1
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002aca:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8002acc:	6879      	ldr	r1, [r7, #4]
 8002ace:	697a      	ldr	r2, [r7, #20]
 8002ad0:	440a      	add	r2, r1
 8002ad2:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002ad4:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	3304      	adds	r3, #4
 8002ade:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	3304      	adds	r3, #4
 8002ae4:	617b      	str	r3, [r7, #20]
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	4a06      	ldr	r2, [pc, #24]	@ (8002b04 <FDCAN_CopyMessageToRAM+0xf4>)
 8002aec:	5cd3      	ldrb	r3, [r2, r3]
 8002aee:	461a      	mov	r2, r3
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d3d6      	bcc.n	8002aa4 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8002af6:	bf00      	nop
 8002af8:	bf00      	nop
 8002afa:	3724      	adds	r7, #36	@ 0x24
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr
 8002b04:	0800cf3c 	.word	0x0800cf3c

08002b08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b087      	sub	sp, #28
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002b12:	2300      	movs	r3, #0
 8002b14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002b16:	e15a      	b.n	8002dce <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	2101      	movs	r1, #1
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	fa01 f303 	lsl.w	r3, r1, r3
 8002b24:	4013      	ands	r3, r2
 8002b26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	f000 814c 	beq.w	8002dc8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f003 0303 	and.w	r3, r3, #3
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d005      	beq.n	8002b48 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d130      	bne.n	8002baa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	2203      	movs	r2, #3
 8002b54:	fa02 f303 	lsl.w	r3, r2, r3
 8002b58:	43db      	mvns	r3, r3
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	68da      	ldr	r2, [r3, #12]
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b7e:	2201      	movs	r2, #1
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	fa02 f303 	lsl.w	r3, r2, r3
 8002b86:	43db      	mvns	r3, r3
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	091b      	lsrs	r3, r3, #4
 8002b94:	f003 0201 	and.w	r2, r3, #1
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9e:	693a      	ldr	r2, [r7, #16]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	693a      	ldr	r2, [r7, #16]
 8002ba8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f003 0303 	and.w	r3, r3, #3
 8002bb2:	2b03      	cmp	r3, #3
 8002bb4:	d017      	beq.n	8002be6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	2203      	movs	r2, #3
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	43db      	mvns	r3, r3
 8002bc8:	693a      	ldr	r2, [r7, #16]
 8002bca:	4013      	ands	r3, r2
 8002bcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	689a      	ldr	r2, [r3, #8]
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f003 0303 	and.w	r3, r3, #3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d123      	bne.n	8002c3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	08da      	lsrs	r2, r3, #3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	3208      	adds	r2, #8
 8002bfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bfe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	220f      	movs	r2, #15
 8002c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0e:	43db      	mvns	r3, r3
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	4013      	ands	r3, r2
 8002c14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	691a      	ldr	r2, [r3, #16]
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	f003 0307 	and.w	r3, r3, #7
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	fa02 f303 	lsl.w	r3, r2, r3
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	08da      	lsrs	r2, r3, #3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	3208      	adds	r2, #8
 8002c34:	6939      	ldr	r1, [r7, #16]
 8002c36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	2203      	movs	r2, #3
 8002c46:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4a:	43db      	mvns	r3, r3
 8002c4c:	693a      	ldr	r2, [r7, #16]
 8002c4e:	4013      	ands	r3, r2
 8002c50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f003 0203 	and.w	r2, r3, #3
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	005b      	lsls	r3, r3, #1
 8002c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f000 80a6 	beq.w	8002dc8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c7c:	4b5b      	ldr	r3, [pc, #364]	@ (8002dec <HAL_GPIO_Init+0x2e4>)
 8002c7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c80:	4a5a      	ldr	r2, [pc, #360]	@ (8002dec <HAL_GPIO_Init+0x2e4>)
 8002c82:	f043 0301 	orr.w	r3, r3, #1
 8002c86:	6613      	str	r3, [r2, #96]	@ 0x60
 8002c88:	4b58      	ldr	r3, [pc, #352]	@ (8002dec <HAL_GPIO_Init+0x2e4>)
 8002c8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c8c:	f003 0301 	and.w	r3, r3, #1
 8002c90:	60bb      	str	r3, [r7, #8]
 8002c92:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c94:	4a56      	ldr	r2, [pc, #344]	@ (8002df0 <HAL_GPIO_Init+0x2e8>)
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	089b      	lsrs	r3, r3, #2
 8002c9a:	3302      	adds	r3, #2
 8002c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	f003 0303 	and.w	r3, r3, #3
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	220f      	movs	r2, #15
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	693a      	ldr	r2, [r7, #16]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002cbe:	d01f      	beq.n	8002d00 <HAL_GPIO_Init+0x1f8>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a4c      	ldr	r2, [pc, #304]	@ (8002df4 <HAL_GPIO_Init+0x2ec>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d019      	beq.n	8002cfc <HAL_GPIO_Init+0x1f4>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a4b      	ldr	r2, [pc, #300]	@ (8002df8 <HAL_GPIO_Init+0x2f0>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d013      	beq.n	8002cf8 <HAL_GPIO_Init+0x1f0>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4a4a      	ldr	r2, [pc, #296]	@ (8002dfc <HAL_GPIO_Init+0x2f4>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d00d      	beq.n	8002cf4 <HAL_GPIO_Init+0x1ec>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a49      	ldr	r2, [pc, #292]	@ (8002e00 <HAL_GPIO_Init+0x2f8>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d007      	beq.n	8002cf0 <HAL_GPIO_Init+0x1e8>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4a48      	ldr	r2, [pc, #288]	@ (8002e04 <HAL_GPIO_Init+0x2fc>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d101      	bne.n	8002cec <HAL_GPIO_Init+0x1e4>
 8002ce8:	2305      	movs	r3, #5
 8002cea:	e00a      	b.n	8002d02 <HAL_GPIO_Init+0x1fa>
 8002cec:	2306      	movs	r3, #6
 8002cee:	e008      	b.n	8002d02 <HAL_GPIO_Init+0x1fa>
 8002cf0:	2304      	movs	r3, #4
 8002cf2:	e006      	b.n	8002d02 <HAL_GPIO_Init+0x1fa>
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e004      	b.n	8002d02 <HAL_GPIO_Init+0x1fa>
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	e002      	b.n	8002d02 <HAL_GPIO_Init+0x1fa>
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e000      	b.n	8002d02 <HAL_GPIO_Init+0x1fa>
 8002d00:	2300      	movs	r3, #0
 8002d02:	697a      	ldr	r2, [r7, #20]
 8002d04:	f002 0203 	and.w	r2, r2, #3
 8002d08:	0092      	lsls	r2, r2, #2
 8002d0a:	4093      	lsls	r3, r2
 8002d0c:	693a      	ldr	r2, [r7, #16]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d12:	4937      	ldr	r1, [pc, #220]	@ (8002df0 <HAL_GPIO_Init+0x2e8>)
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	089b      	lsrs	r3, r3, #2
 8002d18:	3302      	adds	r3, #2
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d20:	4b39      	ldr	r3, [pc, #228]	@ (8002e08 <HAL_GPIO_Init+0x300>)
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	43db      	mvns	r3, r3
 8002d2a:	693a      	ldr	r2, [r7, #16]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d003      	beq.n	8002d44 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002d3c:	693a      	ldr	r2, [r7, #16]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d44:	4a30      	ldr	r2, [pc, #192]	@ (8002e08 <HAL_GPIO_Init+0x300>)
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002d4a:	4b2f      	ldr	r3, [pc, #188]	@ (8002e08 <HAL_GPIO_Init+0x300>)
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	43db      	mvns	r3, r3
 8002d54:	693a      	ldr	r2, [r7, #16]
 8002d56:	4013      	ands	r3, r2
 8002d58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d003      	beq.n	8002d6e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002d66:	693a      	ldr	r2, [r7, #16]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d6e:	4a26      	ldr	r2, [pc, #152]	@ (8002e08 <HAL_GPIO_Init+0x300>)
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002d74:	4b24      	ldr	r3, [pc, #144]	@ (8002e08 <HAL_GPIO_Init+0x300>)
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	43db      	mvns	r3, r3
 8002d7e:	693a      	ldr	r2, [r7, #16]
 8002d80:	4013      	ands	r3, r2
 8002d82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d003      	beq.n	8002d98 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002d90:	693a      	ldr	r2, [r7, #16]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d98:	4a1b      	ldr	r2, [pc, #108]	@ (8002e08 <HAL_GPIO_Init+0x300>)
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002d9e:	4b1a      	ldr	r3, [pc, #104]	@ (8002e08 <HAL_GPIO_Init+0x300>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	43db      	mvns	r3, r3
 8002da8:	693a      	ldr	r2, [r7, #16]
 8002daa:	4013      	ands	r3, r2
 8002dac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d003      	beq.n	8002dc2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002dba:	693a      	ldr	r2, [r7, #16]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002dc2:	4a11      	ldr	r2, [pc, #68]	@ (8002e08 <HAL_GPIO_Init+0x300>)
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	3301      	adds	r3, #1
 8002dcc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	f47f ae9d 	bne.w	8002b18 <HAL_GPIO_Init+0x10>
  }
}
 8002dde:	bf00      	nop
 8002de0:	bf00      	nop
 8002de2:	371c      	adds	r7, #28
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr
 8002dec:	40021000 	.word	0x40021000
 8002df0:	40010000 	.word	0x40010000
 8002df4:	48000400 	.word	0x48000400
 8002df8:	48000800 	.word	0x48000800
 8002dfc:	48000c00 	.word	0x48000c00
 8002e00:	48001000 	.word	0x48001000
 8002e04:	48001400 	.word	0x48001400
 8002e08:	40010400 	.word	0x40010400

08002e0c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d141      	bne.n	8002e9e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e1a:	4b4b      	ldr	r3, [pc, #300]	@ (8002f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002e22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e26:	d131      	bne.n	8002e8c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e28:	4b47      	ldr	r3, [pc, #284]	@ (8002f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e2e:	4a46      	ldr	r2, [pc, #280]	@ (8002f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e34:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e38:	4b43      	ldr	r3, [pc, #268]	@ (8002f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002e40:	4a41      	ldr	r2, [pc, #260]	@ (8002f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e46:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e48:	4b40      	ldr	r3, [pc, #256]	@ (8002f4c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2232      	movs	r2, #50	@ 0x32
 8002e4e:	fb02 f303 	mul.w	r3, r2, r3
 8002e52:	4a3f      	ldr	r2, [pc, #252]	@ (8002f50 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002e54:	fba2 2303 	umull	r2, r3, r2, r3
 8002e58:	0c9b      	lsrs	r3, r3, #18
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e5e:	e002      	b.n	8002e66 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	3b01      	subs	r3, #1
 8002e64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e66:	4b38      	ldr	r3, [pc, #224]	@ (8002f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e72:	d102      	bne.n	8002e7a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1f2      	bne.n	8002e60 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e7a:	4b33      	ldr	r3, [pc, #204]	@ (8002f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e86:	d158      	bne.n	8002f3a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e057      	b.n	8002f3c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e8c:	4b2e      	ldr	r3, [pc, #184]	@ (8002f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e92:	4a2d      	ldr	r2, [pc, #180]	@ (8002f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e98:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002e9c:	e04d      	b.n	8002f3a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ea4:	d141      	bne.n	8002f2a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ea6:	4b28      	ldr	r3, [pc, #160]	@ (8002f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002eae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002eb2:	d131      	bne.n	8002f18 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002eb4:	4b24      	ldr	r3, [pc, #144]	@ (8002f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002eba:	4a23      	ldr	r2, [pc, #140]	@ (8002f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ebc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ec0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ec4:	4b20      	ldr	r3, [pc, #128]	@ (8002f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ecc:	4a1e      	ldr	r2, [pc, #120]	@ (8002f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ece:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ed2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ed4:	4b1d      	ldr	r3, [pc, #116]	@ (8002f4c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2232      	movs	r2, #50	@ 0x32
 8002eda:	fb02 f303 	mul.w	r3, r2, r3
 8002ede:	4a1c      	ldr	r2, [pc, #112]	@ (8002f50 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee4:	0c9b      	lsrs	r3, r3, #18
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002eea:	e002      	b.n	8002ef2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ef2:	4b15      	ldr	r3, [pc, #84]	@ (8002f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002efa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002efe:	d102      	bne.n	8002f06 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1f2      	bne.n	8002eec <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f06:	4b10      	ldr	r3, [pc, #64]	@ (8002f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f12:	d112      	bne.n	8002f3a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e011      	b.n	8002f3c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f18:	4b0b      	ldr	r3, [pc, #44]	@ (8002f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f1e:	4a0a      	ldr	r2, [pc, #40]	@ (8002f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f24:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002f28:	e007      	b.n	8002f3a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f2a:	4b07      	ldr	r3, [pc, #28]	@ (8002f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f32:	4a05      	ldr	r2, [pc, #20]	@ (8002f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f34:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f38:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3714      	adds	r7, #20
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr
 8002f48:	40007000 	.word	0x40007000
 8002f4c:	20000000 	.word	0x20000000
 8002f50:	431bde83 	.word	0x431bde83

08002f54 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002f58:	4b05      	ldr	r3, [pc, #20]	@ (8002f70 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	4a04      	ldr	r2, [pc, #16]	@ (8002f70 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002f5e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f62:	6093      	str	r3, [r2, #8]
}
 8002f64:	bf00      	nop
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	40007000 	.word	0x40007000

08002f74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b088      	sub	sp, #32
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e2fe      	b.n	8003584 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d075      	beq.n	800307e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f92:	4b97      	ldr	r3, [pc, #604]	@ (80031f0 <HAL_RCC_OscConfig+0x27c>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f003 030c 	and.w	r3, r3, #12
 8002f9a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f9c:	4b94      	ldr	r3, [pc, #592]	@ (80031f0 <HAL_RCC_OscConfig+0x27c>)
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	f003 0303 	and.w	r3, r3, #3
 8002fa4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	2b0c      	cmp	r3, #12
 8002faa:	d102      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x3e>
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	2b03      	cmp	r3, #3
 8002fb0:	d002      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x44>
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	2b08      	cmp	r3, #8
 8002fb6:	d10b      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fb8:	4b8d      	ldr	r3, [pc, #564]	@ (80031f0 <HAL_RCC_OscConfig+0x27c>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d05b      	beq.n	800307c <HAL_RCC_OscConfig+0x108>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d157      	bne.n	800307c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e2d9      	b.n	8003584 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fd8:	d106      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x74>
 8002fda:	4b85      	ldr	r3, [pc, #532]	@ (80031f0 <HAL_RCC_OscConfig+0x27c>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a84      	ldr	r2, [pc, #528]	@ (80031f0 <HAL_RCC_OscConfig+0x27c>)
 8002fe0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fe4:	6013      	str	r3, [r2, #0]
 8002fe6:	e01d      	b.n	8003024 <HAL_RCC_OscConfig+0xb0>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ff0:	d10c      	bne.n	800300c <HAL_RCC_OscConfig+0x98>
 8002ff2:	4b7f      	ldr	r3, [pc, #508]	@ (80031f0 <HAL_RCC_OscConfig+0x27c>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a7e      	ldr	r2, [pc, #504]	@ (80031f0 <HAL_RCC_OscConfig+0x27c>)
 8002ff8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ffc:	6013      	str	r3, [r2, #0]
 8002ffe:	4b7c      	ldr	r3, [pc, #496]	@ (80031f0 <HAL_RCC_OscConfig+0x27c>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a7b      	ldr	r2, [pc, #492]	@ (80031f0 <HAL_RCC_OscConfig+0x27c>)
 8003004:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003008:	6013      	str	r3, [r2, #0]
 800300a:	e00b      	b.n	8003024 <HAL_RCC_OscConfig+0xb0>
 800300c:	4b78      	ldr	r3, [pc, #480]	@ (80031f0 <HAL_RCC_OscConfig+0x27c>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a77      	ldr	r2, [pc, #476]	@ (80031f0 <HAL_RCC_OscConfig+0x27c>)
 8003012:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003016:	6013      	str	r3, [r2, #0]
 8003018:	4b75      	ldr	r3, [pc, #468]	@ (80031f0 <HAL_RCC_OscConfig+0x27c>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a74      	ldr	r2, [pc, #464]	@ (80031f0 <HAL_RCC_OscConfig+0x27c>)
 800301e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003022:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d013      	beq.n	8003054 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800302c:	f7ff f912 	bl	8002254 <HAL_GetTick>
 8003030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003032:	e008      	b.n	8003046 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003034:	f7ff f90e 	bl	8002254 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b64      	cmp	r3, #100	@ 0x64
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e29e      	b.n	8003584 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003046:	4b6a      	ldr	r3, [pc, #424]	@ (80031f0 <HAL_RCC_OscConfig+0x27c>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d0f0      	beq.n	8003034 <HAL_RCC_OscConfig+0xc0>
 8003052:	e014      	b.n	800307e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003054:	f7ff f8fe 	bl	8002254 <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800305a:	e008      	b.n	800306e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800305c:	f7ff f8fa 	bl	8002254 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b64      	cmp	r3, #100	@ 0x64
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e28a      	b.n	8003584 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800306e:	4b60      	ldr	r3, [pc, #384]	@ (80031f0 <HAL_RCC_OscConfig+0x27c>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1f0      	bne.n	800305c <HAL_RCC_OscConfig+0xe8>
 800307a:	e000      	b.n	800307e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800307c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d075      	beq.n	8003176 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800308a:	4b59      	ldr	r3, [pc, #356]	@ (80031f0 <HAL_RCC_OscConfig+0x27c>)
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f003 030c 	and.w	r3, r3, #12
 8003092:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003094:	4b56      	ldr	r3, [pc, #344]	@ (80031f0 <HAL_RCC_OscConfig+0x27c>)
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	f003 0303 	and.w	r3, r3, #3
 800309c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	2b0c      	cmp	r3, #12
 80030a2:	d102      	bne.n	80030aa <HAL_RCC_OscConfig+0x136>
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d002      	beq.n	80030b0 <HAL_RCC_OscConfig+0x13c>
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	2b04      	cmp	r3, #4
 80030ae:	d11f      	bne.n	80030f0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030b0:	4b4f      	ldr	r3, [pc, #316]	@ (80031f0 <HAL_RCC_OscConfig+0x27c>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d005      	beq.n	80030c8 <HAL_RCC_OscConfig+0x154>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d101      	bne.n	80030c8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e25d      	b.n	8003584 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030c8:	4b49      	ldr	r3, [pc, #292]	@ (80031f0 <HAL_RCC_OscConfig+0x27c>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	061b      	lsls	r3, r3, #24
 80030d6:	4946      	ldr	r1, [pc, #280]	@ (80031f0 <HAL_RCC_OscConfig+0x27c>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80030dc:	4b45      	ldr	r3, [pc, #276]	@ (80031f4 <HAL_RCC_OscConfig+0x280>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7fe f8ad 	bl	8001240 <HAL_InitTick>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d043      	beq.n	8003174 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e249      	b.n	8003584 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d023      	beq.n	8003140 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030f8:	4b3d      	ldr	r3, [pc, #244]	@ (80031f0 <HAL_RCC_OscConfig+0x27c>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a3c      	ldr	r2, [pc, #240]	@ (80031f0 <HAL_RCC_OscConfig+0x27c>)
 80030fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003102:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003104:	f7ff f8a6 	bl	8002254 <HAL_GetTick>
 8003108:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800310a:	e008      	b.n	800311e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800310c:	f7ff f8a2 	bl	8002254 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b02      	cmp	r3, #2
 8003118:	d901      	bls.n	800311e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e232      	b.n	8003584 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800311e:	4b34      	ldr	r3, [pc, #208]	@ (80031f0 <HAL_RCC_OscConfig+0x27c>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003126:	2b00      	cmp	r3, #0
 8003128:	d0f0      	beq.n	800310c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800312a:	4b31      	ldr	r3, [pc, #196]	@ (80031f0 <HAL_RCC_OscConfig+0x27c>)
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	061b      	lsls	r3, r3, #24
 8003138:	492d      	ldr	r1, [pc, #180]	@ (80031f0 <HAL_RCC_OscConfig+0x27c>)
 800313a:	4313      	orrs	r3, r2
 800313c:	604b      	str	r3, [r1, #4]
 800313e:	e01a      	b.n	8003176 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003140:	4b2b      	ldr	r3, [pc, #172]	@ (80031f0 <HAL_RCC_OscConfig+0x27c>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a2a      	ldr	r2, [pc, #168]	@ (80031f0 <HAL_RCC_OscConfig+0x27c>)
 8003146:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800314a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800314c:	f7ff f882 	bl	8002254 <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003152:	e008      	b.n	8003166 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003154:	f7ff f87e 	bl	8002254 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b02      	cmp	r3, #2
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e20e      	b.n	8003584 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003166:	4b22      	ldr	r3, [pc, #136]	@ (80031f0 <HAL_RCC_OscConfig+0x27c>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1f0      	bne.n	8003154 <HAL_RCC_OscConfig+0x1e0>
 8003172:	e000      	b.n	8003176 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003174:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0308 	and.w	r3, r3, #8
 800317e:	2b00      	cmp	r3, #0
 8003180:	d041      	beq.n	8003206 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d01c      	beq.n	80031c4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800318a:	4b19      	ldr	r3, [pc, #100]	@ (80031f0 <HAL_RCC_OscConfig+0x27c>)
 800318c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003190:	4a17      	ldr	r2, [pc, #92]	@ (80031f0 <HAL_RCC_OscConfig+0x27c>)
 8003192:	f043 0301 	orr.w	r3, r3, #1
 8003196:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800319a:	f7ff f85b 	bl	8002254 <HAL_GetTick>
 800319e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031a0:	e008      	b.n	80031b4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031a2:	f7ff f857 	bl	8002254 <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d901      	bls.n	80031b4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e1e7      	b.n	8003584 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031b4:	4b0e      	ldr	r3, [pc, #56]	@ (80031f0 <HAL_RCC_OscConfig+0x27c>)
 80031b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d0ef      	beq.n	80031a2 <HAL_RCC_OscConfig+0x22e>
 80031c2:	e020      	b.n	8003206 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031c4:	4b0a      	ldr	r3, [pc, #40]	@ (80031f0 <HAL_RCC_OscConfig+0x27c>)
 80031c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031ca:	4a09      	ldr	r2, [pc, #36]	@ (80031f0 <HAL_RCC_OscConfig+0x27c>)
 80031cc:	f023 0301 	bic.w	r3, r3, #1
 80031d0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031d4:	f7ff f83e 	bl	8002254 <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031da:	e00d      	b.n	80031f8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031dc:	f7ff f83a 	bl	8002254 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d906      	bls.n	80031f8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e1ca      	b.n	8003584 <HAL_RCC_OscConfig+0x610>
 80031ee:	bf00      	nop
 80031f0:	40021000 	.word	0x40021000
 80031f4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031f8:	4b8c      	ldr	r3, [pc, #560]	@ (800342c <HAL_RCC_OscConfig+0x4b8>)
 80031fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1ea      	bne.n	80031dc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0304 	and.w	r3, r3, #4
 800320e:	2b00      	cmp	r3, #0
 8003210:	f000 80a6 	beq.w	8003360 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003214:	2300      	movs	r3, #0
 8003216:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003218:	4b84      	ldr	r3, [pc, #528]	@ (800342c <HAL_RCC_OscConfig+0x4b8>)
 800321a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800321c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d101      	bne.n	8003228 <HAL_RCC_OscConfig+0x2b4>
 8003224:	2301      	movs	r3, #1
 8003226:	e000      	b.n	800322a <HAL_RCC_OscConfig+0x2b6>
 8003228:	2300      	movs	r3, #0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00d      	beq.n	800324a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800322e:	4b7f      	ldr	r3, [pc, #508]	@ (800342c <HAL_RCC_OscConfig+0x4b8>)
 8003230:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003232:	4a7e      	ldr	r2, [pc, #504]	@ (800342c <HAL_RCC_OscConfig+0x4b8>)
 8003234:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003238:	6593      	str	r3, [r2, #88]	@ 0x58
 800323a:	4b7c      	ldr	r3, [pc, #496]	@ (800342c <HAL_RCC_OscConfig+0x4b8>)
 800323c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800323e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003242:	60fb      	str	r3, [r7, #12]
 8003244:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003246:	2301      	movs	r3, #1
 8003248:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800324a:	4b79      	ldr	r3, [pc, #484]	@ (8003430 <HAL_RCC_OscConfig+0x4bc>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003252:	2b00      	cmp	r3, #0
 8003254:	d118      	bne.n	8003288 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003256:	4b76      	ldr	r3, [pc, #472]	@ (8003430 <HAL_RCC_OscConfig+0x4bc>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a75      	ldr	r2, [pc, #468]	@ (8003430 <HAL_RCC_OscConfig+0x4bc>)
 800325c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003260:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003262:	f7fe fff7 	bl	8002254 <HAL_GetTick>
 8003266:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003268:	e008      	b.n	800327c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800326a:	f7fe fff3 	bl	8002254 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	2b02      	cmp	r3, #2
 8003276:	d901      	bls.n	800327c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e183      	b.n	8003584 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800327c:	4b6c      	ldr	r3, [pc, #432]	@ (8003430 <HAL_RCC_OscConfig+0x4bc>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003284:	2b00      	cmp	r3, #0
 8003286:	d0f0      	beq.n	800326a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d108      	bne.n	80032a2 <HAL_RCC_OscConfig+0x32e>
 8003290:	4b66      	ldr	r3, [pc, #408]	@ (800342c <HAL_RCC_OscConfig+0x4b8>)
 8003292:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003296:	4a65      	ldr	r2, [pc, #404]	@ (800342c <HAL_RCC_OscConfig+0x4b8>)
 8003298:	f043 0301 	orr.w	r3, r3, #1
 800329c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80032a0:	e024      	b.n	80032ec <HAL_RCC_OscConfig+0x378>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	2b05      	cmp	r3, #5
 80032a8:	d110      	bne.n	80032cc <HAL_RCC_OscConfig+0x358>
 80032aa:	4b60      	ldr	r3, [pc, #384]	@ (800342c <HAL_RCC_OscConfig+0x4b8>)
 80032ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032b0:	4a5e      	ldr	r2, [pc, #376]	@ (800342c <HAL_RCC_OscConfig+0x4b8>)
 80032b2:	f043 0304 	orr.w	r3, r3, #4
 80032b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80032ba:	4b5c      	ldr	r3, [pc, #368]	@ (800342c <HAL_RCC_OscConfig+0x4b8>)
 80032bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032c0:	4a5a      	ldr	r2, [pc, #360]	@ (800342c <HAL_RCC_OscConfig+0x4b8>)
 80032c2:	f043 0301 	orr.w	r3, r3, #1
 80032c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80032ca:	e00f      	b.n	80032ec <HAL_RCC_OscConfig+0x378>
 80032cc:	4b57      	ldr	r3, [pc, #348]	@ (800342c <HAL_RCC_OscConfig+0x4b8>)
 80032ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032d2:	4a56      	ldr	r2, [pc, #344]	@ (800342c <HAL_RCC_OscConfig+0x4b8>)
 80032d4:	f023 0301 	bic.w	r3, r3, #1
 80032d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80032dc:	4b53      	ldr	r3, [pc, #332]	@ (800342c <HAL_RCC_OscConfig+0x4b8>)
 80032de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032e2:	4a52      	ldr	r2, [pc, #328]	@ (800342c <HAL_RCC_OscConfig+0x4b8>)
 80032e4:	f023 0304 	bic.w	r3, r3, #4
 80032e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d016      	beq.n	8003322 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f4:	f7fe ffae 	bl	8002254 <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032fa:	e00a      	b.n	8003312 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032fc:	f7fe ffaa 	bl	8002254 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	f241 3288 	movw	r2, #5000	@ 0x1388
 800330a:	4293      	cmp	r3, r2
 800330c:	d901      	bls.n	8003312 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e138      	b.n	8003584 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003312:	4b46      	ldr	r3, [pc, #280]	@ (800342c <HAL_RCC_OscConfig+0x4b8>)
 8003314:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	2b00      	cmp	r3, #0
 800331e:	d0ed      	beq.n	80032fc <HAL_RCC_OscConfig+0x388>
 8003320:	e015      	b.n	800334e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003322:	f7fe ff97 	bl	8002254 <HAL_GetTick>
 8003326:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003328:	e00a      	b.n	8003340 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800332a:	f7fe ff93 	bl	8002254 <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003338:	4293      	cmp	r3, r2
 800333a:	d901      	bls.n	8003340 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e121      	b.n	8003584 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003340:	4b3a      	ldr	r3, [pc, #232]	@ (800342c <HAL_RCC_OscConfig+0x4b8>)
 8003342:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1ed      	bne.n	800332a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800334e:	7ffb      	ldrb	r3, [r7, #31]
 8003350:	2b01      	cmp	r3, #1
 8003352:	d105      	bne.n	8003360 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003354:	4b35      	ldr	r3, [pc, #212]	@ (800342c <HAL_RCC_OscConfig+0x4b8>)
 8003356:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003358:	4a34      	ldr	r2, [pc, #208]	@ (800342c <HAL_RCC_OscConfig+0x4b8>)
 800335a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800335e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0320 	and.w	r3, r3, #32
 8003368:	2b00      	cmp	r3, #0
 800336a:	d03c      	beq.n	80033e6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d01c      	beq.n	80033ae <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003374:	4b2d      	ldr	r3, [pc, #180]	@ (800342c <HAL_RCC_OscConfig+0x4b8>)
 8003376:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800337a:	4a2c      	ldr	r2, [pc, #176]	@ (800342c <HAL_RCC_OscConfig+0x4b8>)
 800337c:	f043 0301 	orr.w	r3, r3, #1
 8003380:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003384:	f7fe ff66 	bl	8002254 <HAL_GetTick>
 8003388:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800338a:	e008      	b.n	800339e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800338c:	f7fe ff62 	bl	8002254 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b02      	cmp	r3, #2
 8003398:	d901      	bls.n	800339e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e0f2      	b.n	8003584 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800339e:	4b23      	ldr	r3, [pc, #140]	@ (800342c <HAL_RCC_OscConfig+0x4b8>)
 80033a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80033a4:	f003 0302 	and.w	r3, r3, #2
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d0ef      	beq.n	800338c <HAL_RCC_OscConfig+0x418>
 80033ac:	e01b      	b.n	80033e6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80033ae:	4b1f      	ldr	r3, [pc, #124]	@ (800342c <HAL_RCC_OscConfig+0x4b8>)
 80033b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80033b4:	4a1d      	ldr	r2, [pc, #116]	@ (800342c <HAL_RCC_OscConfig+0x4b8>)
 80033b6:	f023 0301 	bic.w	r3, r3, #1
 80033ba:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033be:	f7fe ff49 	bl	8002254 <HAL_GetTick>
 80033c2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80033c4:	e008      	b.n	80033d8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033c6:	f7fe ff45 	bl	8002254 <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d901      	bls.n	80033d8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e0d5      	b.n	8003584 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80033d8:	4b14      	ldr	r3, [pc, #80]	@ (800342c <HAL_RCC_OscConfig+0x4b8>)
 80033da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1ef      	bne.n	80033c6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	69db      	ldr	r3, [r3, #28]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	f000 80c9 	beq.w	8003582 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033f0:	4b0e      	ldr	r3, [pc, #56]	@ (800342c <HAL_RCC_OscConfig+0x4b8>)
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f003 030c 	and.w	r3, r3, #12
 80033f8:	2b0c      	cmp	r3, #12
 80033fa:	f000 8083 	beq.w	8003504 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	69db      	ldr	r3, [r3, #28]
 8003402:	2b02      	cmp	r3, #2
 8003404:	d15e      	bne.n	80034c4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003406:	4b09      	ldr	r3, [pc, #36]	@ (800342c <HAL_RCC_OscConfig+0x4b8>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a08      	ldr	r2, [pc, #32]	@ (800342c <HAL_RCC_OscConfig+0x4b8>)
 800340c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003410:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003412:	f7fe ff1f 	bl	8002254 <HAL_GetTick>
 8003416:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003418:	e00c      	b.n	8003434 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800341a:	f7fe ff1b 	bl	8002254 <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	2b02      	cmp	r3, #2
 8003426:	d905      	bls.n	8003434 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e0ab      	b.n	8003584 <HAL_RCC_OscConfig+0x610>
 800342c:	40021000 	.word	0x40021000
 8003430:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003434:	4b55      	ldr	r3, [pc, #340]	@ (800358c <HAL_RCC_OscConfig+0x618>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d1ec      	bne.n	800341a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003440:	4b52      	ldr	r3, [pc, #328]	@ (800358c <HAL_RCC_OscConfig+0x618>)
 8003442:	68da      	ldr	r2, [r3, #12]
 8003444:	4b52      	ldr	r3, [pc, #328]	@ (8003590 <HAL_RCC_OscConfig+0x61c>)
 8003446:	4013      	ands	r3, r2
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	6a11      	ldr	r1, [r2, #32]
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003450:	3a01      	subs	r2, #1
 8003452:	0112      	lsls	r2, r2, #4
 8003454:	4311      	orrs	r1, r2
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800345a:	0212      	lsls	r2, r2, #8
 800345c:	4311      	orrs	r1, r2
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003462:	0852      	lsrs	r2, r2, #1
 8003464:	3a01      	subs	r2, #1
 8003466:	0552      	lsls	r2, r2, #21
 8003468:	4311      	orrs	r1, r2
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800346e:	0852      	lsrs	r2, r2, #1
 8003470:	3a01      	subs	r2, #1
 8003472:	0652      	lsls	r2, r2, #25
 8003474:	4311      	orrs	r1, r2
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800347a:	06d2      	lsls	r2, r2, #27
 800347c:	430a      	orrs	r2, r1
 800347e:	4943      	ldr	r1, [pc, #268]	@ (800358c <HAL_RCC_OscConfig+0x618>)
 8003480:	4313      	orrs	r3, r2
 8003482:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003484:	4b41      	ldr	r3, [pc, #260]	@ (800358c <HAL_RCC_OscConfig+0x618>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a40      	ldr	r2, [pc, #256]	@ (800358c <HAL_RCC_OscConfig+0x618>)
 800348a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800348e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003490:	4b3e      	ldr	r3, [pc, #248]	@ (800358c <HAL_RCC_OscConfig+0x618>)
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	4a3d      	ldr	r2, [pc, #244]	@ (800358c <HAL_RCC_OscConfig+0x618>)
 8003496:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800349a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800349c:	f7fe feda 	bl	8002254 <HAL_GetTick>
 80034a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034a2:	e008      	b.n	80034b6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034a4:	f7fe fed6 	bl	8002254 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e066      	b.n	8003584 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034b6:	4b35      	ldr	r3, [pc, #212]	@ (800358c <HAL_RCC_OscConfig+0x618>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d0f0      	beq.n	80034a4 <HAL_RCC_OscConfig+0x530>
 80034c2:	e05e      	b.n	8003582 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034c4:	4b31      	ldr	r3, [pc, #196]	@ (800358c <HAL_RCC_OscConfig+0x618>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a30      	ldr	r2, [pc, #192]	@ (800358c <HAL_RCC_OscConfig+0x618>)
 80034ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80034ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d0:	f7fe fec0 	bl	8002254 <HAL_GetTick>
 80034d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034d6:	e008      	b.n	80034ea <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034d8:	f7fe febc 	bl	8002254 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e04c      	b.n	8003584 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034ea:	4b28      	ldr	r3, [pc, #160]	@ (800358c <HAL_RCC_OscConfig+0x618>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1f0      	bne.n	80034d8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80034f6:	4b25      	ldr	r3, [pc, #148]	@ (800358c <HAL_RCC_OscConfig+0x618>)
 80034f8:	68da      	ldr	r2, [r3, #12]
 80034fa:	4924      	ldr	r1, [pc, #144]	@ (800358c <HAL_RCC_OscConfig+0x618>)
 80034fc:	4b25      	ldr	r3, [pc, #148]	@ (8003594 <HAL_RCC_OscConfig+0x620>)
 80034fe:	4013      	ands	r3, r2
 8003500:	60cb      	str	r3, [r1, #12]
 8003502:	e03e      	b.n	8003582 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	69db      	ldr	r3, [r3, #28]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d101      	bne.n	8003510 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e039      	b.n	8003584 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003510:	4b1e      	ldr	r3, [pc, #120]	@ (800358c <HAL_RCC_OscConfig+0x618>)
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	f003 0203 	and.w	r2, r3, #3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a1b      	ldr	r3, [r3, #32]
 8003520:	429a      	cmp	r2, r3
 8003522:	d12c      	bne.n	800357e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800352e:	3b01      	subs	r3, #1
 8003530:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003532:	429a      	cmp	r2, r3
 8003534:	d123      	bne.n	800357e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003540:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003542:	429a      	cmp	r2, r3
 8003544:	d11b      	bne.n	800357e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003550:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003552:	429a      	cmp	r2, r3
 8003554:	d113      	bne.n	800357e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003560:	085b      	lsrs	r3, r3, #1
 8003562:	3b01      	subs	r3, #1
 8003564:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003566:	429a      	cmp	r2, r3
 8003568:	d109      	bne.n	800357e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003574:	085b      	lsrs	r3, r3, #1
 8003576:	3b01      	subs	r3, #1
 8003578:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800357a:	429a      	cmp	r2, r3
 800357c:	d001      	beq.n	8003582 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e000      	b.n	8003584 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003582:	2300      	movs	r3, #0
}
 8003584:	4618      	mov	r0, r3
 8003586:	3720      	adds	r7, #32
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}
 800358c:	40021000 	.word	0x40021000
 8003590:	019f800c 	.word	0x019f800c
 8003594:	feeefffc 	.word	0xfeeefffc

08003598 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b086      	sub	sp, #24
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80035a2:	2300      	movs	r3, #0
 80035a4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d101      	bne.n	80035b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e11e      	b.n	80037ee <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035b0:	4b91      	ldr	r3, [pc, #580]	@ (80037f8 <HAL_RCC_ClockConfig+0x260>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 030f 	and.w	r3, r3, #15
 80035b8:	683a      	ldr	r2, [r7, #0]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d910      	bls.n	80035e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035be:	4b8e      	ldr	r3, [pc, #568]	@ (80037f8 <HAL_RCC_ClockConfig+0x260>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f023 020f 	bic.w	r2, r3, #15
 80035c6:	498c      	ldr	r1, [pc, #560]	@ (80037f8 <HAL_RCC_ClockConfig+0x260>)
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ce:	4b8a      	ldr	r3, [pc, #552]	@ (80037f8 <HAL_RCC_ClockConfig+0x260>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 030f 	and.w	r3, r3, #15
 80035d6:	683a      	ldr	r2, [r7, #0]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d001      	beq.n	80035e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e106      	b.n	80037ee <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0301 	and.w	r3, r3, #1
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d073      	beq.n	80036d4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	2b03      	cmp	r3, #3
 80035f2:	d129      	bne.n	8003648 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035f4:	4b81      	ldr	r3, [pc, #516]	@ (80037fc <HAL_RCC_ClockConfig+0x264>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d101      	bne.n	8003604 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e0f4      	b.n	80037ee <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003604:	f000 f9d0 	bl	80039a8 <RCC_GetSysClockFreqFromPLLSource>
 8003608:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	4a7c      	ldr	r2, [pc, #496]	@ (8003800 <HAL_RCC_ClockConfig+0x268>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d93f      	bls.n	8003692 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003612:	4b7a      	ldr	r3, [pc, #488]	@ (80037fc <HAL_RCC_ClockConfig+0x264>)
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d009      	beq.n	8003632 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003626:	2b00      	cmp	r3, #0
 8003628:	d033      	beq.n	8003692 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800362e:	2b00      	cmp	r3, #0
 8003630:	d12f      	bne.n	8003692 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003632:	4b72      	ldr	r3, [pc, #456]	@ (80037fc <HAL_RCC_ClockConfig+0x264>)
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800363a:	4a70      	ldr	r2, [pc, #448]	@ (80037fc <HAL_RCC_ClockConfig+0x264>)
 800363c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003640:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003642:	2380      	movs	r3, #128	@ 0x80
 8003644:	617b      	str	r3, [r7, #20]
 8003646:	e024      	b.n	8003692 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	2b02      	cmp	r3, #2
 800364e:	d107      	bne.n	8003660 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003650:	4b6a      	ldr	r3, [pc, #424]	@ (80037fc <HAL_RCC_ClockConfig+0x264>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d109      	bne.n	8003670 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e0c6      	b.n	80037ee <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003660:	4b66      	ldr	r3, [pc, #408]	@ (80037fc <HAL_RCC_ClockConfig+0x264>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003668:	2b00      	cmp	r3, #0
 800366a:	d101      	bne.n	8003670 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e0be      	b.n	80037ee <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003670:	f000 f8ce 	bl	8003810 <HAL_RCC_GetSysClockFreq>
 8003674:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	4a61      	ldr	r2, [pc, #388]	@ (8003800 <HAL_RCC_ClockConfig+0x268>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d909      	bls.n	8003692 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800367e:	4b5f      	ldr	r3, [pc, #380]	@ (80037fc <HAL_RCC_ClockConfig+0x264>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003686:	4a5d      	ldr	r2, [pc, #372]	@ (80037fc <HAL_RCC_ClockConfig+0x264>)
 8003688:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800368c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800368e:	2380      	movs	r3, #128	@ 0x80
 8003690:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003692:	4b5a      	ldr	r3, [pc, #360]	@ (80037fc <HAL_RCC_ClockConfig+0x264>)
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f023 0203 	bic.w	r2, r3, #3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	4957      	ldr	r1, [pc, #348]	@ (80037fc <HAL_RCC_ClockConfig+0x264>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036a4:	f7fe fdd6 	bl	8002254 <HAL_GetTick>
 80036a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036aa:	e00a      	b.n	80036c2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036ac:	f7fe fdd2 	bl	8002254 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e095      	b.n	80037ee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036c2:	4b4e      	ldr	r3, [pc, #312]	@ (80037fc <HAL_RCC_ClockConfig+0x264>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f003 020c 	and.w	r2, r3, #12
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d1eb      	bne.n	80036ac <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0302 	and.w	r3, r3, #2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d023      	beq.n	8003728 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0304 	and.w	r3, r3, #4
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d005      	beq.n	80036f8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036ec:	4b43      	ldr	r3, [pc, #268]	@ (80037fc <HAL_RCC_ClockConfig+0x264>)
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	4a42      	ldr	r2, [pc, #264]	@ (80037fc <HAL_RCC_ClockConfig+0x264>)
 80036f2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80036f6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0308 	and.w	r3, r3, #8
 8003700:	2b00      	cmp	r3, #0
 8003702:	d007      	beq.n	8003714 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003704:	4b3d      	ldr	r3, [pc, #244]	@ (80037fc <HAL_RCC_ClockConfig+0x264>)
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800370c:	4a3b      	ldr	r2, [pc, #236]	@ (80037fc <HAL_RCC_ClockConfig+0x264>)
 800370e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003712:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003714:	4b39      	ldr	r3, [pc, #228]	@ (80037fc <HAL_RCC_ClockConfig+0x264>)
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	4936      	ldr	r1, [pc, #216]	@ (80037fc <HAL_RCC_ClockConfig+0x264>)
 8003722:	4313      	orrs	r3, r2
 8003724:	608b      	str	r3, [r1, #8]
 8003726:	e008      	b.n	800373a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	2b80      	cmp	r3, #128	@ 0x80
 800372c:	d105      	bne.n	800373a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800372e:	4b33      	ldr	r3, [pc, #204]	@ (80037fc <HAL_RCC_ClockConfig+0x264>)
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	4a32      	ldr	r2, [pc, #200]	@ (80037fc <HAL_RCC_ClockConfig+0x264>)
 8003734:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003738:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800373a:	4b2f      	ldr	r3, [pc, #188]	@ (80037f8 <HAL_RCC_ClockConfig+0x260>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 030f 	and.w	r3, r3, #15
 8003742:	683a      	ldr	r2, [r7, #0]
 8003744:	429a      	cmp	r2, r3
 8003746:	d21d      	bcs.n	8003784 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003748:	4b2b      	ldr	r3, [pc, #172]	@ (80037f8 <HAL_RCC_ClockConfig+0x260>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f023 020f 	bic.w	r2, r3, #15
 8003750:	4929      	ldr	r1, [pc, #164]	@ (80037f8 <HAL_RCC_ClockConfig+0x260>)
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	4313      	orrs	r3, r2
 8003756:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003758:	f7fe fd7c 	bl	8002254 <HAL_GetTick>
 800375c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800375e:	e00a      	b.n	8003776 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003760:	f7fe fd78 	bl	8002254 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800376e:	4293      	cmp	r3, r2
 8003770:	d901      	bls.n	8003776 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e03b      	b.n	80037ee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003776:	4b20      	ldr	r3, [pc, #128]	@ (80037f8 <HAL_RCC_ClockConfig+0x260>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 030f 	and.w	r3, r3, #15
 800377e:	683a      	ldr	r2, [r7, #0]
 8003780:	429a      	cmp	r2, r3
 8003782:	d1ed      	bne.n	8003760 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0304 	and.w	r3, r3, #4
 800378c:	2b00      	cmp	r3, #0
 800378e:	d008      	beq.n	80037a2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003790:	4b1a      	ldr	r3, [pc, #104]	@ (80037fc <HAL_RCC_ClockConfig+0x264>)
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	4917      	ldr	r1, [pc, #92]	@ (80037fc <HAL_RCC_ClockConfig+0x264>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0308 	and.w	r3, r3, #8
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d009      	beq.n	80037c2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037ae:	4b13      	ldr	r3, [pc, #76]	@ (80037fc <HAL_RCC_ClockConfig+0x264>)
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	00db      	lsls	r3, r3, #3
 80037bc:	490f      	ldr	r1, [pc, #60]	@ (80037fc <HAL_RCC_ClockConfig+0x264>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80037c2:	f000 f825 	bl	8003810 <HAL_RCC_GetSysClockFreq>
 80037c6:	4602      	mov	r2, r0
 80037c8:	4b0c      	ldr	r3, [pc, #48]	@ (80037fc <HAL_RCC_ClockConfig+0x264>)
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	091b      	lsrs	r3, r3, #4
 80037ce:	f003 030f 	and.w	r3, r3, #15
 80037d2:	490c      	ldr	r1, [pc, #48]	@ (8003804 <HAL_RCC_ClockConfig+0x26c>)
 80037d4:	5ccb      	ldrb	r3, [r1, r3]
 80037d6:	f003 031f 	and.w	r3, r3, #31
 80037da:	fa22 f303 	lsr.w	r3, r2, r3
 80037de:	4a0a      	ldr	r2, [pc, #40]	@ (8003808 <HAL_RCC_ClockConfig+0x270>)
 80037e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80037e2:	4b0a      	ldr	r3, [pc, #40]	@ (800380c <HAL_RCC_ClockConfig+0x274>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7fd fd2a 	bl	8001240 <HAL_InitTick>
 80037ec:	4603      	mov	r3, r0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3718      	adds	r7, #24
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	40022000 	.word	0x40022000
 80037fc:	40021000 	.word	0x40021000
 8003800:	04c4b400 	.word	0x04c4b400
 8003804:	0800cef0 	.word	0x0800cef0
 8003808:	20000000 	.word	0x20000000
 800380c:	20000004 	.word	0x20000004

08003810 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003810:	b480      	push	{r7}
 8003812:	b087      	sub	sp, #28
 8003814:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003816:	4b2c      	ldr	r3, [pc, #176]	@ (80038c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f003 030c 	and.w	r3, r3, #12
 800381e:	2b04      	cmp	r3, #4
 8003820:	d102      	bne.n	8003828 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003822:	4b2a      	ldr	r3, [pc, #168]	@ (80038cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003824:	613b      	str	r3, [r7, #16]
 8003826:	e047      	b.n	80038b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003828:	4b27      	ldr	r3, [pc, #156]	@ (80038c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f003 030c 	and.w	r3, r3, #12
 8003830:	2b08      	cmp	r3, #8
 8003832:	d102      	bne.n	800383a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003834:	4b26      	ldr	r3, [pc, #152]	@ (80038d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003836:	613b      	str	r3, [r7, #16]
 8003838:	e03e      	b.n	80038b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800383a:	4b23      	ldr	r3, [pc, #140]	@ (80038c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f003 030c 	and.w	r3, r3, #12
 8003842:	2b0c      	cmp	r3, #12
 8003844:	d136      	bne.n	80038b4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003846:	4b20      	ldr	r3, [pc, #128]	@ (80038c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	f003 0303 	and.w	r3, r3, #3
 800384e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003850:	4b1d      	ldr	r3, [pc, #116]	@ (80038c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	091b      	lsrs	r3, r3, #4
 8003856:	f003 030f 	and.w	r3, r3, #15
 800385a:	3301      	adds	r3, #1
 800385c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2b03      	cmp	r3, #3
 8003862:	d10c      	bne.n	800387e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003864:	4a1a      	ldr	r2, [pc, #104]	@ (80038d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	fbb2 f3f3 	udiv	r3, r2, r3
 800386c:	4a16      	ldr	r2, [pc, #88]	@ (80038c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800386e:	68d2      	ldr	r2, [r2, #12]
 8003870:	0a12      	lsrs	r2, r2, #8
 8003872:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003876:	fb02 f303 	mul.w	r3, r2, r3
 800387a:	617b      	str	r3, [r7, #20]
      break;
 800387c:	e00c      	b.n	8003898 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800387e:	4a13      	ldr	r2, [pc, #76]	@ (80038cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	fbb2 f3f3 	udiv	r3, r2, r3
 8003886:	4a10      	ldr	r2, [pc, #64]	@ (80038c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003888:	68d2      	ldr	r2, [r2, #12]
 800388a:	0a12      	lsrs	r2, r2, #8
 800388c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003890:	fb02 f303 	mul.w	r3, r2, r3
 8003894:	617b      	str	r3, [r7, #20]
      break;
 8003896:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003898:	4b0b      	ldr	r3, [pc, #44]	@ (80038c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	0e5b      	lsrs	r3, r3, #25
 800389e:	f003 0303 	and.w	r3, r3, #3
 80038a2:	3301      	adds	r3, #1
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b0:	613b      	str	r3, [r7, #16]
 80038b2:	e001      	b.n	80038b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80038b4:	2300      	movs	r3, #0
 80038b6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80038b8:	693b      	ldr	r3, [r7, #16]
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	371c      	adds	r7, #28
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	40021000 	.word	0x40021000
 80038cc:	00f42400 	.word	0x00f42400
 80038d0:	016e3600 	.word	0x016e3600

080038d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038d4:	b480      	push	{r7}
 80038d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038d8:	4b03      	ldr	r3, [pc, #12]	@ (80038e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80038da:	681b      	ldr	r3, [r3, #0]
}
 80038dc:	4618      	mov	r0, r3
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	20000000 	.word	0x20000000

080038ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80038f0:	f7ff fff0 	bl	80038d4 <HAL_RCC_GetHCLKFreq>
 80038f4:	4602      	mov	r2, r0
 80038f6:	4b06      	ldr	r3, [pc, #24]	@ (8003910 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	0a1b      	lsrs	r3, r3, #8
 80038fc:	f003 0307 	and.w	r3, r3, #7
 8003900:	4904      	ldr	r1, [pc, #16]	@ (8003914 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003902:	5ccb      	ldrb	r3, [r1, r3]
 8003904:	f003 031f 	and.w	r3, r3, #31
 8003908:	fa22 f303 	lsr.w	r3, r2, r3
}
 800390c:	4618      	mov	r0, r3
 800390e:	bd80      	pop	{r7, pc}
 8003910:	40021000 	.word	0x40021000
 8003914:	0800cf00 	.word	0x0800cf00

08003918 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800391c:	f7ff ffda 	bl	80038d4 <HAL_RCC_GetHCLKFreq>
 8003920:	4602      	mov	r2, r0
 8003922:	4b06      	ldr	r3, [pc, #24]	@ (800393c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	0adb      	lsrs	r3, r3, #11
 8003928:	f003 0307 	and.w	r3, r3, #7
 800392c:	4904      	ldr	r1, [pc, #16]	@ (8003940 <HAL_RCC_GetPCLK2Freq+0x28>)
 800392e:	5ccb      	ldrb	r3, [r1, r3]
 8003930:	f003 031f 	and.w	r3, r3, #31
 8003934:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003938:	4618      	mov	r0, r3
 800393a:	bd80      	pop	{r7, pc}
 800393c:	40021000 	.word	0x40021000
 8003940:	0800cf00 	.word	0x0800cf00

08003944 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	220f      	movs	r2, #15
 8003952:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003954:	4b12      	ldr	r3, [pc, #72]	@ (80039a0 <HAL_RCC_GetClockConfig+0x5c>)
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f003 0203 	and.w	r2, r3, #3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003960:	4b0f      	ldr	r3, [pc, #60]	@ (80039a0 <HAL_RCC_GetClockConfig+0x5c>)
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800396c:	4b0c      	ldr	r3, [pc, #48]	@ (80039a0 <HAL_RCC_GetClockConfig+0x5c>)
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003978:	4b09      	ldr	r3, [pc, #36]	@ (80039a0 <HAL_RCC_GetClockConfig+0x5c>)
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	08db      	lsrs	r3, r3, #3
 800397e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003986:	4b07      	ldr	r3, [pc, #28]	@ (80039a4 <HAL_RCC_GetClockConfig+0x60>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 020f 	and.w	r2, r3, #15
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	601a      	str	r2, [r3, #0]
}
 8003992:	bf00      	nop
 8003994:	370c      	adds	r7, #12
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	40021000 	.word	0x40021000
 80039a4:	40022000 	.word	0x40022000

080039a8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b087      	sub	sp, #28
 80039ac:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80039ae:	4b1e      	ldr	r3, [pc, #120]	@ (8003a28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	f003 0303 	and.w	r3, r3, #3
 80039b6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80039b8:	4b1b      	ldr	r3, [pc, #108]	@ (8003a28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	091b      	lsrs	r3, r3, #4
 80039be:	f003 030f 	and.w	r3, r3, #15
 80039c2:	3301      	adds	r3, #1
 80039c4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	2b03      	cmp	r3, #3
 80039ca:	d10c      	bne.n	80039e6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039cc:	4a17      	ldr	r2, [pc, #92]	@ (8003a2c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d4:	4a14      	ldr	r2, [pc, #80]	@ (8003a28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80039d6:	68d2      	ldr	r2, [r2, #12]
 80039d8:	0a12      	lsrs	r2, r2, #8
 80039da:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80039de:	fb02 f303 	mul.w	r3, r2, r3
 80039e2:	617b      	str	r3, [r7, #20]
    break;
 80039e4:	e00c      	b.n	8003a00 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039e6:	4a12      	ldr	r2, [pc, #72]	@ (8003a30 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ee:	4a0e      	ldr	r2, [pc, #56]	@ (8003a28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80039f0:	68d2      	ldr	r2, [r2, #12]
 80039f2:	0a12      	lsrs	r2, r2, #8
 80039f4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80039f8:	fb02 f303 	mul.w	r3, r2, r3
 80039fc:	617b      	str	r3, [r7, #20]
    break;
 80039fe:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a00:	4b09      	ldr	r3, [pc, #36]	@ (8003a28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	0e5b      	lsrs	r3, r3, #25
 8003a06:	f003 0303 	and.w	r3, r3, #3
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	005b      	lsls	r3, r3, #1
 8003a0e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003a10:	697a      	ldr	r2, [r7, #20]
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a18:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003a1a:	687b      	ldr	r3, [r7, #4]
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	371c      	adds	r7, #28
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr
 8003a28:	40021000 	.word	0x40021000
 8003a2c:	016e3600 	.word	0x016e3600
 8003a30:	00f42400 	.word	0x00f42400

08003a34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a40:	2300      	movs	r3, #0
 8003a42:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f000 8098 	beq.w	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a52:	2300      	movs	r3, #0
 8003a54:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a56:	4b43      	ldr	r3, [pc, #268]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10d      	bne.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a62:	4b40      	ldr	r3, [pc, #256]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a66:	4a3f      	ldr	r2, [pc, #252]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a6e:	4b3d      	ldr	r3, [pc, #244]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a76:	60bb      	str	r3, [r7, #8]
 8003a78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a7e:	4b3a      	ldr	r3, [pc, #232]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a39      	ldr	r2, [pc, #228]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a88:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a8a:	f7fe fbe3 	bl	8002254 <HAL_GetTick>
 8003a8e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a90:	e009      	b.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a92:	f7fe fbdf 	bl	8002254 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d902      	bls.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	74fb      	strb	r3, [r7, #19]
        break;
 8003aa4:	e005      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003aa6:	4b30      	ldr	r3, [pc, #192]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d0ef      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003ab2:	7cfb      	ldrb	r3, [r7, #19]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d159      	bne.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003ab8:	4b2a      	ldr	r3, [pc, #168]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003abe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ac2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d01e      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ace:	697a      	ldr	r2, [r7, #20]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d019      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ad4:	4b23      	ldr	r3, [pc, #140]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ada:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ade:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ae0:	4b20      	ldr	r3, [pc, #128]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ae6:	4a1f      	ldr	r2, [pc, #124]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ae8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003aec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003af0:	4b1c      	ldr	r3, [pc, #112]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003af6:	4a1b      	ldr	r2, [pc, #108]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003af8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003afc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b00:	4a18      	ldr	r2, [pc, #96]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d016      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b12:	f7fe fb9f 	bl	8002254 <HAL_GetTick>
 8003b16:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b18:	e00b      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b1a:	f7fe fb9b 	bl	8002254 <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d902      	bls.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	74fb      	strb	r3, [r7, #19]
            break;
 8003b30:	e006      	b.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b32:	4b0c      	ldr	r3, [pc, #48]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b38:	f003 0302 	and.w	r3, r3, #2
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d0ec      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003b40:	7cfb      	ldrb	r3, [r7, #19]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d10b      	bne.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b46:	4b07      	ldr	r3, [pc, #28]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b4c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b54:	4903      	ldr	r1, [pc, #12]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003b5c:	e008      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b5e:	7cfb      	ldrb	r3, [r7, #19]
 8003b60:	74bb      	strb	r3, [r7, #18]
 8003b62:	e005      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003b64:	40021000 	.word	0x40021000
 8003b68:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b6c:	7cfb      	ldrb	r3, [r7, #19]
 8003b6e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b70:	7c7b      	ldrb	r3, [r7, #17]
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d105      	bne.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b76:	4ba7      	ldr	r3, [pc, #668]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b7a:	4aa6      	ldr	r2, [pc, #664]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b80:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00a      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b8e:	4ba1      	ldr	r3, [pc, #644]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b94:	f023 0203 	bic.w	r2, r3, #3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	499d      	ldr	r1, [pc, #628]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0302 	and.w	r3, r3, #2
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00a      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003bb0:	4b98      	ldr	r3, [pc, #608]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bb6:	f023 020c 	bic.w	r2, r3, #12
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	4995      	ldr	r1, [pc, #596]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0304 	and.w	r3, r3, #4
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00a      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003bd2:	4b90      	ldr	r3, [pc, #576]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bd8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	498c      	ldr	r1, [pc, #560]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0308 	and.w	r3, r3, #8
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00a      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003bf4:	4b87      	ldr	r3, [pc, #540]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bfa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	4984      	ldr	r1, [pc, #528]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c04:	4313      	orrs	r3, r2
 8003c06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0310 	and.w	r3, r3, #16
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00a      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c16:	4b7f      	ldr	r3, [pc, #508]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c1c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	695b      	ldr	r3, [r3, #20]
 8003c24:	497b      	ldr	r1, [pc, #492]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0320 	and.w	r3, r3, #32
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00a      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c38:	4b76      	ldr	r3, [pc, #472]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c3e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	4973      	ldr	r1, [pc, #460]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00a      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c5a:	4b6e      	ldr	r3, [pc, #440]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c60:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	69db      	ldr	r3, [r3, #28]
 8003c68:	496a      	ldr	r1, [pc, #424]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d00a      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c7c:	4b65      	ldr	r3, [pc, #404]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c82:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a1b      	ldr	r3, [r3, #32]
 8003c8a:	4962      	ldr	r1, [pc, #392]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00a      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c9e:	4b5d      	ldr	r3, [pc, #372]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ca4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cac:	4959      	ldr	r1, [pc, #356]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d00a      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003cc0:	4b54      	ldr	r3, [pc, #336]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003cc6:	f023 0203 	bic.w	r2, r3, #3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cce:	4951      	ldr	r1, [pc, #324]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00a      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ce2:	4b4c      	ldr	r3, [pc, #304]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ce8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cf0:	4948      	ldr	r1, [pc, #288]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d015      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d04:	4b43      	ldr	r3, [pc, #268]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d0a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d12:	4940      	ldr	r1, [pc, #256]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d22:	d105      	bne.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d24:	4b3b      	ldr	r3, [pc, #236]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	4a3a      	ldr	r2, [pc, #232]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d2e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d015      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d3c:	4b35      	ldr	r3, [pc, #212]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d42:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d4a:	4932      	ldr	r1, [pc, #200]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d56:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d5a:	d105      	bne.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d5c:	4b2d      	ldr	r3, [pc, #180]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	4a2c      	ldr	r2, [pc, #176]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d66:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d015      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003d74:	4b27      	ldr	r3, [pc, #156]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d7a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d82:	4924      	ldr	r1, [pc, #144]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d92:	d105      	bne.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d94:	4b1f      	ldr	r3, [pc, #124]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	4a1e      	ldr	r2, [pc, #120]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d9e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d015      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003dac:	4b19      	ldr	r3, [pc, #100]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003db2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dba:	4916      	ldr	r1, [pc, #88]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dc6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003dca:	d105      	bne.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dcc:	4b11      	ldr	r3, [pc, #68]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	4a10      	ldr	r2, [pc, #64]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003dd6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d019      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003de4:	4b0b      	ldr	r3, [pc, #44]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df2:	4908      	ldr	r1, [pc, #32]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dfe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e02:	d109      	bne.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e04:	4b03      	ldr	r3, [pc, #12]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	4a02      	ldr	r2, [pc, #8]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e0e:	60d3      	str	r3, [r2, #12]
 8003e10:	e002      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003e12:	bf00      	nop
 8003e14:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d015      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003e24:	4b29      	ldr	r3, [pc, #164]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e2a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e32:	4926      	ldr	r1, [pc, #152]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e3e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e42:	d105      	bne.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003e44:	4b21      	ldr	r3, [pc, #132]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	4a20      	ldr	r2, [pc, #128]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e4e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d015      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003e5c:	4b1b      	ldr	r3, [pc, #108]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e62:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e6a:	4918      	ldr	r1, [pc, #96]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e7a:	d105      	bne.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003e7c:	4b13      	ldr	r3, [pc, #76]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	4a12      	ldr	r2, [pc, #72]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e86:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d015      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003e94:	4b0d      	ldr	r3, [pc, #52]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e96:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003e9a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ea2:	490a      	ldr	r1, [pc, #40]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003eae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003eb2:	d105      	bne.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003eb4:	4b05      	ldr	r3, [pc, #20]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	4a04      	ldr	r2, [pc, #16]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003eba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ebe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003ec0:	7cbb      	ldrb	r3, [r7, #18]
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3718      	adds	r7, #24
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	40021000 	.word	0x40021000

08003ed0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e049      	b.n	8003f76 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d106      	bne.n	8003efc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 f841 	bl	8003f7e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2202      	movs	r2, #2
 8003f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	3304      	adds	r3, #4
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	4610      	mov	r0, r2
 8003f10:	f000 fa30 	bl	8004374 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3708      	adds	r7, #8
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003f7e:	b480      	push	{r7}
 8003f80:	b083      	sub	sp, #12
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003f86:	bf00      	nop
 8003f88:	370c      	adds	r7, #12
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
	...

08003f94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b085      	sub	sp, #20
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d001      	beq.n	8003fac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e054      	b.n	8004056 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2202      	movs	r2, #2
 8003fb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68da      	ldr	r2, [r3, #12]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f042 0201 	orr.w	r2, r2, #1
 8003fc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a26      	ldr	r2, [pc, #152]	@ (8004064 <HAL_TIM_Base_Start_IT+0xd0>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d022      	beq.n	8004014 <HAL_TIM_Base_Start_IT+0x80>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fd6:	d01d      	beq.n	8004014 <HAL_TIM_Base_Start_IT+0x80>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a22      	ldr	r2, [pc, #136]	@ (8004068 <HAL_TIM_Base_Start_IT+0xd4>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d018      	beq.n	8004014 <HAL_TIM_Base_Start_IT+0x80>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a21      	ldr	r2, [pc, #132]	@ (800406c <HAL_TIM_Base_Start_IT+0xd8>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d013      	beq.n	8004014 <HAL_TIM_Base_Start_IT+0x80>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a1f      	ldr	r2, [pc, #124]	@ (8004070 <HAL_TIM_Base_Start_IT+0xdc>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d00e      	beq.n	8004014 <HAL_TIM_Base_Start_IT+0x80>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a1e      	ldr	r2, [pc, #120]	@ (8004074 <HAL_TIM_Base_Start_IT+0xe0>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d009      	beq.n	8004014 <HAL_TIM_Base_Start_IT+0x80>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a1c      	ldr	r2, [pc, #112]	@ (8004078 <HAL_TIM_Base_Start_IT+0xe4>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d004      	beq.n	8004014 <HAL_TIM_Base_Start_IT+0x80>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a1b      	ldr	r2, [pc, #108]	@ (800407c <HAL_TIM_Base_Start_IT+0xe8>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d115      	bne.n	8004040 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	689a      	ldr	r2, [r3, #8]
 800401a:	4b19      	ldr	r3, [pc, #100]	@ (8004080 <HAL_TIM_Base_Start_IT+0xec>)
 800401c:	4013      	ands	r3, r2
 800401e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2b06      	cmp	r3, #6
 8004024:	d015      	beq.n	8004052 <HAL_TIM_Base_Start_IT+0xbe>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800402c:	d011      	beq.n	8004052 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f042 0201 	orr.w	r2, r2, #1
 800403c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800403e:	e008      	b.n	8004052 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f042 0201 	orr.w	r2, r2, #1
 800404e:	601a      	str	r2, [r3, #0]
 8004050:	e000      	b.n	8004054 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004052:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3714      	adds	r7, #20
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	40012c00 	.word	0x40012c00
 8004068:	40000400 	.word	0x40000400
 800406c:	40000800 	.word	0x40000800
 8004070:	40000c00 	.word	0x40000c00
 8004074:	40013400 	.word	0x40013400
 8004078:	40014000 	.word	0x40014000
 800407c:	40015000 	.word	0x40015000
 8004080:	00010007 	.word	0x00010007

08004084 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d020      	beq.n	80040e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f003 0302 	and.w	r3, r3, #2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d01b      	beq.n	80040e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f06f 0202 	mvn.w	r2, #2
 80040b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2201      	movs	r2, #1
 80040be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	f003 0303 	and.w	r3, r3, #3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d003      	beq.n	80040d6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 f931 	bl	8004336 <HAL_TIM_IC_CaptureCallback>
 80040d4:	e005      	b.n	80040e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 f923 	bl	8004322 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 f934 	bl	800434a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	f003 0304 	and.w	r3, r3, #4
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d020      	beq.n	8004134 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f003 0304 	and.w	r3, r3, #4
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d01b      	beq.n	8004134 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f06f 0204 	mvn.w	r2, #4
 8004104:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2202      	movs	r2, #2
 800410a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004116:	2b00      	cmp	r3, #0
 8004118:	d003      	beq.n	8004122 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 f90b 	bl	8004336 <HAL_TIM_IC_CaptureCallback>
 8004120:	e005      	b.n	800412e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 f8fd 	bl	8004322 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f000 f90e 	bl	800434a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	f003 0308 	and.w	r3, r3, #8
 800413a:	2b00      	cmp	r3, #0
 800413c:	d020      	beq.n	8004180 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f003 0308 	and.w	r3, r3, #8
 8004144:	2b00      	cmp	r3, #0
 8004146:	d01b      	beq.n	8004180 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f06f 0208 	mvn.w	r2, #8
 8004150:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2204      	movs	r2, #4
 8004156:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	69db      	ldr	r3, [r3, #28]
 800415e:	f003 0303 	and.w	r3, r3, #3
 8004162:	2b00      	cmp	r3, #0
 8004164:	d003      	beq.n	800416e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 f8e5 	bl	8004336 <HAL_TIM_IC_CaptureCallback>
 800416c:	e005      	b.n	800417a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 f8d7 	bl	8004322 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f000 f8e8 	bl	800434a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	f003 0310 	and.w	r3, r3, #16
 8004186:	2b00      	cmp	r3, #0
 8004188:	d020      	beq.n	80041cc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f003 0310 	and.w	r3, r3, #16
 8004190:	2b00      	cmp	r3, #0
 8004192:	d01b      	beq.n	80041cc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f06f 0210 	mvn.w	r2, #16
 800419c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2208      	movs	r2, #8
 80041a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	69db      	ldr	r3, [r3, #28]
 80041aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d003      	beq.n	80041ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 f8bf 	bl	8004336 <HAL_TIM_IC_CaptureCallback>
 80041b8:	e005      	b.n	80041c6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 f8b1 	bl	8004322 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f000 f8c2 	bl	800434a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00c      	beq.n	80041f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f003 0301 	and.w	r3, r3, #1
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d007      	beq.n	80041f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f06f 0201 	mvn.w	r2, #1
 80041e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f7fc ffe6 	bl	80011bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d104      	bne.n	8004204 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00c      	beq.n	800421e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800420a:	2b00      	cmp	r3, #0
 800420c:	d007      	beq.n	800421e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004216:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 f969 	bl	80044f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00c      	beq.n	8004242 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800422e:	2b00      	cmp	r3, #0
 8004230:	d007      	beq.n	8004242 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800423a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f000 f961 	bl	8004504 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004248:	2b00      	cmp	r3, #0
 800424a:	d00c      	beq.n	8004266 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004252:	2b00      	cmp	r3, #0
 8004254:	d007      	beq.n	8004266 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800425e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f000 f87c 	bl	800435e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	f003 0320 	and.w	r3, r3, #32
 800426c:	2b00      	cmp	r3, #0
 800426e:	d00c      	beq.n	800428a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f003 0320 	and.w	r3, r3, #32
 8004276:	2b00      	cmp	r3, #0
 8004278:	d007      	beq.n	800428a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f06f 0220 	mvn.w	r2, #32
 8004282:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 f929 	bl	80044dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d00c      	beq.n	80042ae <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d007      	beq.n	80042ae <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80042a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f000 f935 	bl	8004518 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d00c      	beq.n	80042d2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d007      	beq.n	80042d2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80042ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f000 f92d 	bl	800452c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d00c      	beq.n	80042f6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d007      	beq.n	80042f6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80042ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f000 f925 	bl	8004540 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d00c      	beq.n	800431a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d007      	beq.n	800431a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8004312:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f000 f91d 	bl	8004554 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800431a:	bf00      	nop
 800431c:	3710      	adds	r7, #16
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}

08004322 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004322:	b480      	push	{r7}
 8004324:	b083      	sub	sp, #12
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800432a:	bf00      	nop
 800432c:	370c      	adds	r7, #12
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr

08004336 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004336:	b480      	push	{r7}
 8004338:	b083      	sub	sp, #12
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800433e:	bf00      	nop
 8004340:	370c      	adds	r7, #12
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr

0800434a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800434a:	b480      	push	{r7}
 800434c:	b083      	sub	sp, #12
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004352:	bf00      	nop
 8004354:	370c      	adds	r7, #12
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr

0800435e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800435e:	b480      	push	{r7}
 8004360:	b083      	sub	sp, #12
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004366:	bf00      	nop
 8004368:	370c      	adds	r7, #12
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
	...

08004374 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004374:	b480      	push	{r7}
 8004376:	b085      	sub	sp, #20
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a4c      	ldr	r2, [pc, #304]	@ (80044b8 <TIM_Base_SetConfig+0x144>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d017      	beq.n	80043bc <TIM_Base_SetConfig+0x48>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004392:	d013      	beq.n	80043bc <TIM_Base_SetConfig+0x48>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a49      	ldr	r2, [pc, #292]	@ (80044bc <TIM_Base_SetConfig+0x148>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d00f      	beq.n	80043bc <TIM_Base_SetConfig+0x48>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a48      	ldr	r2, [pc, #288]	@ (80044c0 <TIM_Base_SetConfig+0x14c>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d00b      	beq.n	80043bc <TIM_Base_SetConfig+0x48>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a47      	ldr	r2, [pc, #284]	@ (80044c4 <TIM_Base_SetConfig+0x150>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d007      	beq.n	80043bc <TIM_Base_SetConfig+0x48>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a46      	ldr	r2, [pc, #280]	@ (80044c8 <TIM_Base_SetConfig+0x154>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d003      	beq.n	80043bc <TIM_Base_SetConfig+0x48>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a45      	ldr	r2, [pc, #276]	@ (80044cc <TIM_Base_SetConfig+0x158>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d108      	bne.n	80043ce <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a39      	ldr	r2, [pc, #228]	@ (80044b8 <TIM_Base_SetConfig+0x144>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d023      	beq.n	800441e <TIM_Base_SetConfig+0xaa>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043dc:	d01f      	beq.n	800441e <TIM_Base_SetConfig+0xaa>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a36      	ldr	r2, [pc, #216]	@ (80044bc <TIM_Base_SetConfig+0x148>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d01b      	beq.n	800441e <TIM_Base_SetConfig+0xaa>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a35      	ldr	r2, [pc, #212]	@ (80044c0 <TIM_Base_SetConfig+0x14c>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d017      	beq.n	800441e <TIM_Base_SetConfig+0xaa>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a34      	ldr	r2, [pc, #208]	@ (80044c4 <TIM_Base_SetConfig+0x150>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d013      	beq.n	800441e <TIM_Base_SetConfig+0xaa>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a33      	ldr	r2, [pc, #204]	@ (80044c8 <TIM_Base_SetConfig+0x154>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d00f      	beq.n	800441e <TIM_Base_SetConfig+0xaa>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a33      	ldr	r2, [pc, #204]	@ (80044d0 <TIM_Base_SetConfig+0x15c>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d00b      	beq.n	800441e <TIM_Base_SetConfig+0xaa>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a32      	ldr	r2, [pc, #200]	@ (80044d4 <TIM_Base_SetConfig+0x160>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d007      	beq.n	800441e <TIM_Base_SetConfig+0xaa>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a31      	ldr	r2, [pc, #196]	@ (80044d8 <TIM_Base_SetConfig+0x164>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d003      	beq.n	800441e <TIM_Base_SetConfig+0xaa>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a2c      	ldr	r2, [pc, #176]	@ (80044cc <TIM_Base_SetConfig+0x158>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d108      	bne.n	8004430 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004424:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	4313      	orrs	r3, r2
 800442e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	695b      	ldr	r3, [r3, #20]
 800443a:	4313      	orrs	r3, r2
 800443c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	689a      	ldr	r2, [r3, #8]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a18      	ldr	r2, [pc, #96]	@ (80044b8 <TIM_Base_SetConfig+0x144>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d013      	beq.n	8004484 <TIM_Base_SetConfig+0x110>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a1a      	ldr	r2, [pc, #104]	@ (80044c8 <TIM_Base_SetConfig+0x154>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d00f      	beq.n	8004484 <TIM_Base_SetConfig+0x110>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a1a      	ldr	r2, [pc, #104]	@ (80044d0 <TIM_Base_SetConfig+0x15c>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d00b      	beq.n	8004484 <TIM_Base_SetConfig+0x110>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a19      	ldr	r2, [pc, #100]	@ (80044d4 <TIM_Base_SetConfig+0x160>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d007      	beq.n	8004484 <TIM_Base_SetConfig+0x110>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a18      	ldr	r2, [pc, #96]	@ (80044d8 <TIM_Base_SetConfig+0x164>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d003      	beq.n	8004484 <TIM_Base_SetConfig+0x110>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a13      	ldr	r2, [pc, #76]	@ (80044cc <TIM_Base_SetConfig+0x158>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d103      	bne.n	800448c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	691a      	ldr	r2, [r3, #16]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	f003 0301 	and.w	r3, r3, #1
 800449a:	2b01      	cmp	r3, #1
 800449c:	d105      	bne.n	80044aa <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	f023 0201 	bic.w	r2, r3, #1
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	611a      	str	r2, [r3, #16]
  }
}
 80044aa:	bf00      	nop
 80044ac:	3714      	adds	r7, #20
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	40012c00 	.word	0x40012c00
 80044bc:	40000400 	.word	0x40000400
 80044c0:	40000800 	.word	0x40000800
 80044c4:	40000c00 	.word	0x40000c00
 80044c8:	40013400 	.word	0x40013400
 80044cc:	40015000 	.word	0x40015000
 80044d0:	40014000 	.word	0x40014000
 80044d4:	40014400 	.word	0x40014400
 80044d8:	40014800 	.word	0x40014800

080044dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044e4:	bf00      	nop
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr

080044f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044f8:	bf00      	nop
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004520:	bf00      	nop
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004534:	bf00      	nop
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004548:	bf00      	nop
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800455c:	bf00      	nop
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d101      	bne.n	800457a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e042      	b.n	8004600 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004580:	2b00      	cmp	r3, #0
 8004582:	d106      	bne.n	8004592 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f7fd f865 	bl	800165c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2224      	movs	r2, #36	@ 0x24
 8004596:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f022 0201 	bic.w	r2, r2, #1
 80045a8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d002      	beq.n	80045b8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 ff42 	bl	800543c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f000 fc43 	bl	8004e44 <UART_SetConfig>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d101      	bne.n	80045c8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e01b      	b.n	8004600 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	685a      	ldr	r2, [r3, #4]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80045d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	689a      	ldr	r2, [r3, #8]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80045e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f042 0201 	orr.w	r2, r2, #1
 80045f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f000 ffc1 	bl	8005580 <UART_CheckIdleState>
 80045fe:	4603      	mov	r3, r0
}
 8004600:	4618      	mov	r0, r3
 8004602:	3708      	adds	r7, #8
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b08a      	sub	sp, #40	@ 0x28
 800460c:	af02      	add	r7, sp, #8
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	603b      	str	r3, [r7, #0]
 8004614:	4613      	mov	r3, r2
 8004616:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800461e:	2b20      	cmp	r3, #32
 8004620:	d17b      	bne.n	800471a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d002      	beq.n	800462e <HAL_UART_Transmit+0x26>
 8004628:	88fb      	ldrh	r3, [r7, #6]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d101      	bne.n	8004632 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e074      	b.n	800471c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2221      	movs	r2, #33	@ 0x21
 800463e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004642:	f7fd fe07 	bl	8002254 <HAL_GetTick>
 8004646:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	88fa      	ldrh	r2, [r7, #6]
 800464c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	88fa      	ldrh	r2, [r7, #6]
 8004654:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004660:	d108      	bne.n	8004674 <HAL_UART_Transmit+0x6c>
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	691b      	ldr	r3, [r3, #16]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d104      	bne.n	8004674 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800466a:	2300      	movs	r3, #0
 800466c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	61bb      	str	r3, [r7, #24]
 8004672:	e003      	b.n	800467c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004678:	2300      	movs	r3, #0
 800467a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800467c:	e030      	b.n	80046e0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	9300      	str	r3, [sp, #0]
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	2200      	movs	r2, #0
 8004686:	2180      	movs	r1, #128	@ 0x80
 8004688:	68f8      	ldr	r0, [r7, #12]
 800468a:	f001 f823 	bl	80056d4 <UART_WaitOnFlagUntilTimeout>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d005      	beq.n	80046a0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2220      	movs	r2, #32
 8004698:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800469c:	2303      	movs	r3, #3
 800469e:	e03d      	b.n	800471c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d10b      	bne.n	80046be <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	881b      	ldrh	r3, [r3, #0]
 80046aa:	461a      	mov	r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046b4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	3302      	adds	r3, #2
 80046ba:	61bb      	str	r3, [r7, #24]
 80046bc:	e007      	b.n	80046ce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	781a      	ldrb	r2, [r3, #0]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	3301      	adds	r3, #1
 80046cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	3b01      	subs	r3, #1
 80046d8:	b29a      	uxth	r2, r3
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d1c8      	bne.n	800467e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	9300      	str	r3, [sp, #0]
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	2200      	movs	r2, #0
 80046f4:	2140      	movs	r1, #64	@ 0x40
 80046f6:	68f8      	ldr	r0, [r7, #12]
 80046f8:	f000 ffec 	bl	80056d4 <UART_WaitOnFlagUntilTimeout>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d005      	beq.n	800470e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2220      	movs	r2, #32
 8004706:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e006      	b.n	800471c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2220      	movs	r2, #32
 8004712:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004716:	2300      	movs	r3, #0
 8004718:	e000      	b.n	800471c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800471a:	2302      	movs	r3, #2
  }
}
 800471c:	4618      	mov	r0, r3
 800471e:	3720      	adds	r7, #32
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b08a      	sub	sp, #40	@ 0x28
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	4613      	mov	r3, r2
 8004730:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004738:	2b20      	cmp	r3, #32
 800473a:	d137      	bne.n	80047ac <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d002      	beq.n	8004748 <HAL_UART_Receive_IT+0x24>
 8004742:	88fb      	ldrh	r3, [r7, #6]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d101      	bne.n	800474c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e030      	b.n	80047ae <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2200      	movs	r2, #0
 8004750:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a18      	ldr	r2, [pc, #96]	@ (80047b8 <HAL_UART_Receive_IT+0x94>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d01f      	beq.n	800479c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d018      	beq.n	800479c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	e853 3f00 	ldrex	r3, [r3]
 8004776:	613b      	str	r3, [r7, #16]
   return(result);
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800477e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	461a      	mov	r2, r3
 8004786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004788:	623b      	str	r3, [r7, #32]
 800478a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800478c:	69f9      	ldr	r1, [r7, #28]
 800478e:	6a3a      	ldr	r2, [r7, #32]
 8004790:	e841 2300 	strex	r3, r2, [r1]
 8004794:	61bb      	str	r3, [r7, #24]
   return(result);
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1e6      	bne.n	800476a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800479c:	88fb      	ldrh	r3, [r7, #6]
 800479e:	461a      	mov	r2, r3
 80047a0:	68b9      	ldr	r1, [r7, #8]
 80047a2:	68f8      	ldr	r0, [r7, #12]
 80047a4:	f001 f804 	bl	80057b0 <UART_Start_Receive_IT>
 80047a8:	4603      	mov	r3, r0
 80047aa:	e000      	b.n	80047ae <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80047ac:	2302      	movs	r3, #2
  }
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3728      	adds	r7, #40	@ 0x28
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	40008000 	.word	0x40008000

080047bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b0ba      	sub	sp, #232	@ 0xe8
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	69db      	ldr	r3, [r3, #28]
 80047ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80047e2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80047e6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80047ea:	4013      	ands	r3, r2
 80047ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80047f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d11b      	bne.n	8004830 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80047f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047fc:	f003 0320 	and.w	r3, r3, #32
 8004800:	2b00      	cmp	r3, #0
 8004802:	d015      	beq.n	8004830 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004804:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004808:	f003 0320 	and.w	r3, r3, #32
 800480c:	2b00      	cmp	r3, #0
 800480e:	d105      	bne.n	800481c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004810:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004814:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004818:	2b00      	cmp	r3, #0
 800481a:	d009      	beq.n	8004830 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004820:	2b00      	cmp	r3, #0
 8004822:	f000 82e3 	beq.w	8004dec <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	4798      	blx	r3
      }
      return;
 800482e:	e2dd      	b.n	8004dec <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004830:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004834:	2b00      	cmp	r3, #0
 8004836:	f000 8123 	beq.w	8004a80 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800483a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800483e:	4b8d      	ldr	r3, [pc, #564]	@ (8004a74 <HAL_UART_IRQHandler+0x2b8>)
 8004840:	4013      	ands	r3, r2
 8004842:	2b00      	cmp	r3, #0
 8004844:	d106      	bne.n	8004854 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004846:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800484a:	4b8b      	ldr	r3, [pc, #556]	@ (8004a78 <HAL_UART_IRQHandler+0x2bc>)
 800484c:	4013      	ands	r3, r2
 800484e:	2b00      	cmp	r3, #0
 8004850:	f000 8116 	beq.w	8004a80 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004858:	f003 0301 	and.w	r3, r3, #1
 800485c:	2b00      	cmp	r3, #0
 800485e:	d011      	beq.n	8004884 <HAL_UART_IRQHandler+0xc8>
 8004860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004864:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004868:	2b00      	cmp	r3, #0
 800486a:	d00b      	beq.n	8004884 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2201      	movs	r2, #1
 8004872:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800487a:	f043 0201 	orr.w	r2, r3, #1
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004884:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	2b00      	cmp	r3, #0
 800488e:	d011      	beq.n	80048b4 <HAL_UART_IRQHandler+0xf8>
 8004890:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004894:	f003 0301 	and.w	r3, r3, #1
 8004898:	2b00      	cmp	r3, #0
 800489a:	d00b      	beq.n	80048b4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2202      	movs	r2, #2
 80048a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048aa:	f043 0204 	orr.w	r2, r3, #4
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80048b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048b8:	f003 0304 	and.w	r3, r3, #4
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d011      	beq.n	80048e4 <HAL_UART_IRQHandler+0x128>
 80048c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048c4:	f003 0301 	and.w	r3, r3, #1
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d00b      	beq.n	80048e4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2204      	movs	r2, #4
 80048d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048da:	f043 0202 	orr.w	r2, r3, #2
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80048e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048e8:	f003 0308 	and.w	r3, r3, #8
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d017      	beq.n	8004920 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80048f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048f4:	f003 0320 	and.w	r3, r3, #32
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d105      	bne.n	8004908 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80048fc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004900:	4b5c      	ldr	r3, [pc, #368]	@ (8004a74 <HAL_UART_IRQHandler+0x2b8>)
 8004902:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004904:	2b00      	cmp	r3, #0
 8004906:	d00b      	beq.n	8004920 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2208      	movs	r2, #8
 800490e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004916:	f043 0208 	orr.w	r2, r3, #8
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004924:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004928:	2b00      	cmp	r3, #0
 800492a:	d012      	beq.n	8004952 <HAL_UART_IRQHandler+0x196>
 800492c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004930:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d00c      	beq.n	8004952 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004940:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004948:	f043 0220 	orr.w	r2, r3, #32
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004958:	2b00      	cmp	r3, #0
 800495a:	f000 8249 	beq.w	8004df0 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800495e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004962:	f003 0320 	and.w	r3, r3, #32
 8004966:	2b00      	cmp	r3, #0
 8004968:	d013      	beq.n	8004992 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800496a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800496e:	f003 0320 	and.w	r3, r3, #32
 8004972:	2b00      	cmp	r3, #0
 8004974:	d105      	bne.n	8004982 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004976:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800497a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d007      	beq.n	8004992 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004986:	2b00      	cmp	r3, #0
 8004988:	d003      	beq.n	8004992 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004998:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049a6:	2b40      	cmp	r3, #64	@ 0x40
 80049a8:	d005      	beq.n	80049b6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80049aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049ae:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d054      	beq.n	8004a60 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f001 f81c 	bl	80059f4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049c6:	2b40      	cmp	r3, #64	@ 0x40
 80049c8:	d146      	bne.n	8004a58 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	3308      	adds	r3, #8
 80049d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80049d8:	e853 3f00 	ldrex	r3, [r3]
 80049dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80049e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80049e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	3308      	adds	r3, #8
 80049f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80049f6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80049fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004a02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004a06:	e841 2300 	strex	r3, r2, [r1]
 8004a0a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004a0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d1d9      	bne.n	80049ca <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d017      	beq.n	8004a50 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a26:	4a15      	ldr	r2, [pc, #84]	@ (8004a7c <HAL_UART_IRQHandler+0x2c0>)
 8004a28:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a30:	4618      	mov	r0, r3
 8004a32:	f7fd fd54 	bl	80024de <HAL_DMA_Abort_IT>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d019      	beq.n	8004a70 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8004a4a:	4610      	mov	r0, r2
 8004a4c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a4e:	e00f      	b.n	8004a70 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f000 f9e1 	bl	8004e18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a56:	e00b      	b.n	8004a70 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f000 f9dd 	bl	8004e18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a5e:	e007      	b.n	8004a70 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f000 f9d9 	bl	8004e18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8004a6e:	e1bf      	b.n	8004df0 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a70:	bf00      	nop
    return;
 8004a72:	e1bd      	b.n	8004df0 <HAL_UART_IRQHandler+0x634>
 8004a74:	10000001 	.word	0x10000001
 8004a78:	04000120 	.word	0x04000120
 8004a7c:	08005ac1 	.word	0x08005ac1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	f040 8153 	bne.w	8004d30 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a8e:	f003 0310 	and.w	r3, r3, #16
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	f000 814c 	beq.w	8004d30 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a9c:	f003 0310 	and.w	r3, r3, #16
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	f000 8145 	beq.w	8004d30 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2210      	movs	r2, #16
 8004aac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ab8:	2b40      	cmp	r3, #64	@ 0x40
 8004aba:	f040 80bb 	bne.w	8004c34 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004acc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	f000 818f 	beq.w	8004df4 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004adc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	f080 8187 	bcs.w	8004df4 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004aec:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0320 	and.w	r3, r3, #32
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	f040 8087 	bne.w	8004c12 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004b10:	e853 3f00 	ldrex	r3, [r3]
 8004b14:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004b18:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004b1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	461a      	mov	r2, r3
 8004b2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004b2e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004b32:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b36:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004b3a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004b3e:	e841 2300 	strex	r3, r2, [r1]
 8004b42:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004b46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d1da      	bne.n	8004b04 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	3308      	adds	r3, #8
 8004b54:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b56:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b58:	e853 3f00 	ldrex	r3, [r3]
 8004b5c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004b5e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004b60:	f023 0301 	bic.w	r3, r3, #1
 8004b64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	3308      	adds	r3, #8
 8004b6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004b72:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004b76:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b78:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004b7a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004b7e:	e841 2300 	strex	r3, r2, [r1]
 8004b82:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004b84:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d1e1      	bne.n	8004b4e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	3308      	adds	r3, #8
 8004b90:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b92:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b94:	e853 3f00 	ldrex	r3, [r3]
 8004b98:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004b9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ba0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	3308      	adds	r3, #8
 8004baa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004bae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004bb0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004bb4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004bb6:	e841 2300 	strex	r3, r2, [r1]
 8004bba:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004bbc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1e3      	bne.n	8004b8a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2220      	movs	r2, #32
 8004bc6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bd8:	e853 3f00 	ldrex	r3, [r3]
 8004bdc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004bde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004be0:	f023 0310 	bic.w	r3, r3, #16
 8004be4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	461a      	mov	r2, r3
 8004bee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004bf2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004bf4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004bf8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004bfa:	e841 2300 	strex	r3, r2, [r1]
 8004bfe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004c00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d1e4      	bne.n	8004bd0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f7fd fc0d 	bl	800242c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2202      	movs	r2, #2
 8004c16:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 f8fd 	bl	8004e2c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004c32:	e0df      	b.n	8004df4 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	f000 80d1 	beq.w	8004df8 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8004c56:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	f000 80cc 	beq.w	8004df8 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c68:	e853 3f00 	ldrex	r3, [r3]
 8004c6c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004c6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c74:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004c82:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c84:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c86:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004c88:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c8a:	e841 2300 	strex	r3, r2, [r1]
 8004c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d1e4      	bne.n	8004c60 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	3308      	adds	r3, #8
 8004c9c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca0:	e853 3f00 	ldrex	r3, [r3]
 8004ca4:	623b      	str	r3, [r7, #32]
   return(result);
 8004ca6:	6a3b      	ldr	r3, [r7, #32]
 8004ca8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004cac:	f023 0301 	bic.w	r3, r3, #1
 8004cb0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	3308      	adds	r3, #8
 8004cba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004cbe:	633a      	str	r2, [r7, #48]	@ 0x30
 8004cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004cc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cc6:	e841 2300 	strex	r3, r2, [r1]
 8004cca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d1e1      	bne.n	8004c96 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2220      	movs	r2, #32
 8004cd6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	e853 3f00 	ldrex	r3, [r3]
 8004cf2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f023 0310 	bic.w	r3, r3, #16
 8004cfa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	461a      	mov	r2, r3
 8004d04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004d08:	61fb      	str	r3, [r7, #28]
 8004d0a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d0c:	69b9      	ldr	r1, [r7, #24]
 8004d0e:	69fa      	ldr	r2, [r7, #28]
 8004d10:	e841 2300 	strex	r3, r2, [r1]
 8004d14:	617b      	str	r3, [r7, #20]
   return(result);
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d1e4      	bne.n	8004ce6 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2202      	movs	r2, #2
 8004d20:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d22:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004d26:	4619      	mov	r1, r3
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f000 f87f 	bl	8004e2c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004d2e:	e063      	b.n	8004df8 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004d30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d00e      	beq.n	8004d5a <HAL_UART_IRQHandler+0x59e>
 8004d3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d40:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d008      	beq.n	8004d5a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004d50:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f001 fc12 	bl	800657c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004d58:	e051      	b.n	8004dfe <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004d5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d014      	beq.n	8004d90 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004d66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d105      	bne.n	8004d7e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004d72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d008      	beq.n	8004d90 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d03a      	beq.n	8004dfc <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	4798      	blx	r3
    }
    return;
 8004d8e:	e035      	b.n	8004dfc <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004d90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d009      	beq.n	8004db0 <HAL_UART_IRQHandler+0x5f4>
 8004d9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004da0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d003      	beq.n	8004db0 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f000 fe9f 	bl	8005aec <UART_EndTransmit_IT>
    return;
 8004dae:	e026      	b.n	8004dfe <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004db0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004db4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d009      	beq.n	8004dd0 <HAL_UART_IRQHandler+0x614>
 8004dbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dc0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d003      	beq.n	8004dd0 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f001 fbeb 	bl	80065a4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004dce:	e016      	b.n	8004dfe <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004dd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dd4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d010      	beq.n	8004dfe <HAL_UART_IRQHandler+0x642>
 8004ddc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	da0c      	bge.n	8004dfe <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f001 fbd3 	bl	8006590 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004dea:	e008      	b.n	8004dfe <HAL_UART_IRQHandler+0x642>
      return;
 8004dec:	bf00      	nop
 8004dee:	e006      	b.n	8004dfe <HAL_UART_IRQHandler+0x642>
    return;
 8004df0:	bf00      	nop
 8004df2:	e004      	b.n	8004dfe <HAL_UART_IRQHandler+0x642>
      return;
 8004df4:	bf00      	nop
 8004df6:	e002      	b.n	8004dfe <HAL_UART_IRQHandler+0x642>
      return;
 8004df8:	bf00      	nop
 8004dfa:	e000      	b.n	8004dfe <HAL_UART_IRQHandler+0x642>
    return;
 8004dfc:	bf00      	nop
  }
}
 8004dfe:	37e8      	adds	r7, #232	@ 0xe8
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b083      	sub	sp, #12
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004e0c:	bf00      	nop
 8004e0e:	370c      	adds	r7, #12
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004e20:	bf00      	nop
 8004e22:	370c      	adds	r7, #12
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr

08004e2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b083      	sub	sp, #12
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	460b      	mov	r3, r1
 8004e36:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e38:	bf00      	nop
 8004e3a:	370c      	adds	r7, #12
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e48:	b08c      	sub	sp, #48	@ 0x30
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	689a      	ldr	r2, [r3, #8]
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	691b      	ldr	r3, [r3, #16]
 8004e5c:	431a      	orrs	r2, r3
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	695b      	ldr	r3, [r3, #20]
 8004e62:	431a      	orrs	r2, r3
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	69db      	ldr	r3, [r3, #28]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	4baa      	ldr	r3, [pc, #680]	@ (800511c <UART_SetConfig+0x2d8>)
 8004e74:	4013      	ands	r3, r2
 8004e76:	697a      	ldr	r2, [r7, #20]
 8004e78:	6812      	ldr	r2, [r2, #0]
 8004e7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e7c:	430b      	orrs	r3, r1
 8004e7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	68da      	ldr	r2, [r3, #12]
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	430a      	orrs	r2, r1
 8004e94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a9f      	ldr	r2, [pc, #636]	@ (8005120 <UART_SetConfig+0x2dc>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d004      	beq.n	8004eb0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	6a1b      	ldr	r3, [r3, #32]
 8004eaa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004eac:	4313      	orrs	r3, r2
 8004eae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004eba:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004ebe:	697a      	ldr	r2, [r7, #20]
 8004ec0:	6812      	ldr	r2, [r2, #0]
 8004ec2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ec4:	430b      	orrs	r3, r1
 8004ec6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ece:	f023 010f 	bic.w	r1, r3, #15
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	430a      	orrs	r2, r1
 8004edc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a90      	ldr	r2, [pc, #576]	@ (8005124 <UART_SetConfig+0x2e0>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d125      	bne.n	8004f34 <UART_SetConfig+0xf0>
 8004ee8:	4b8f      	ldr	r3, [pc, #572]	@ (8005128 <UART_SetConfig+0x2e4>)
 8004eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eee:	f003 0303 	and.w	r3, r3, #3
 8004ef2:	2b03      	cmp	r3, #3
 8004ef4:	d81a      	bhi.n	8004f2c <UART_SetConfig+0xe8>
 8004ef6:	a201      	add	r2, pc, #4	@ (adr r2, 8004efc <UART_SetConfig+0xb8>)
 8004ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004efc:	08004f0d 	.word	0x08004f0d
 8004f00:	08004f1d 	.word	0x08004f1d
 8004f04:	08004f15 	.word	0x08004f15
 8004f08:	08004f25 	.word	0x08004f25
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f12:	e116      	b.n	8005142 <UART_SetConfig+0x2fe>
 8004f14:	2302      	movs	r3, #2
 8004f16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f1a:	e112      	b.n	8005142 <UART_SetConfig+0x2fe>
 8004f1c:	2304      	movs	r3, #4
 8004f1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f22:	e10e      	b.n	8005142 <UART_SetConfig+0x2fe>
 8004f24:	2308      	movs	r3, #8
 8004f26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f2a:	e10a      	b.n	8005142 <UART_SetConfig+0x2fe>
 8004f2c:	2310      	movs	r3, #16
 8004f2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f32:	e106      	b.n	8005142 <UART_SetConfig+0x2fe>
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a7c      	ldr	r2, [pc, #496]	@ (800512c <UART_SetConfig+0x2e8>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d138      	bne.n	8004fb0 <UART_SetConfig+0x16c>
 8004f3e:	4b7a      	ldr	r3, [pc, #488]	@ (8005128 <UART_SetConfig+0x2e4>)
 8004f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f44:	f003 030c 	and.w	r3, r3, #12
 8004f48:	2b0c      	cmp	r3, #12
 8004f4a:	d82d      	bhi.n	8004fa8 <UART_SetConfig+0x164>
 8004f4c:	a201      	add	r2, pc, #4	@ (adr r2, 8004f54 <UART_SetConfig+0x110>)
 8004f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f52:	bf00      	nop
 8004f54:	08004f89 	.word	0x08004f89
 8004f58:	08004fa9 	.word	0x08004fa9
 8004f5c:	08004fa9 	.word	0x08004fa9
 8004f60:	08004fa9 	.word	0x08004fa9
 8004f64:	08004f99 	.word	0x08004f99
 8004f68:	08004fa9 	.word	0x08004fa9
 8004f6c:	08004fa9 	.word	0x08004fa9
 8004f70:	08004fa9 	.word	0x08004fa9
 8004f74:	08004f91 	.word	0x08004f91
 8004f78:	08004fa9 	.word	0x08004fa9
 8004f7c:	08004fa9 	.word	0x08004fa9
 8004f80:	08004fa9 	.word	0x08004fa9
 8004f84:	08004fa1 	.word	0x08004fa1
 8004f88:	2300      	movs	r3, #0
 8004f8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f8e:	e0d8      	b.n	8005142 <UART_SetConfig+0x2fe>
 8004f90:	2302      	movs	r3, #2
 8004f92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f96:	e0d4      	b.n	8005142 <UART_SetConfig+0x2fe>
 8004f98:	2304      	movs	r3, #4
 8004f9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f9e:	e0d0      	b.n	8005142 <UART_SetConfig+0x2fe>
 8004fa0:	2308      	movs	r3, #8
 8004fa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fa6:	e0cc      	b.n	8005142 <UART_SetConfig+0x2fe>
 8004fa8:	2310      	movs	r3, #16
 8004faa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fae:	e0c8      	b.n	8005142 <UART_SetConfig+0x2fe>
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a5e      	ldr	r2, [pc, #376]	@ (8005130 <UART_SetConfig+0x2ec>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d125      	bne.n	8005006 <UART_SetConfig+0x1c2>
 8004fba:	4b5b      	ldr	r3, [pc, #364]	@ (8005128 <UART_SetConfig+0x2e4>)
 8004fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fc0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004fc4:	2b30      	cmp	r3, #48	@ 0x30
 8004fc6:	d016      	beq.n	8004ff6 <UART_SetConfig+0x1b2>
 8004fc8:	2b30      	cmp	r3, #48	@ 0x30
 8004fca:	d818      	bhi.n	8004ffe <UART_SetConfig+0x1ba>
 8004fcc:	2b20      	cmp	r3, #32
 8004fce:	d00a      	beq.n	8004fe6 <UART_SetConfig+0x1a2>
 8004fd0:	2b20      	cmp	r3, #32
 8004fd2:	d814      	bhi.n	8004ffe <UART_SetConfig+0x1ba>
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d002      	beq.n	8004fde <UART_SetConfig+0x19a>
 8004fd8:	2b10      	cmp	r3, #16
 8004fda:	d008      	beq.n	8004fee <UART_SetConfig+0x1aa>
 8004fdc:	e00f      	b.n	8004ffe <UART_SetConfig+0x1ba>
 8004fde:	2300      	movs	r3, #0
 8004fe0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fe4:	e0ad      	b.n	8005142 <UART_SetConfig+0x2fe>
 8004fe6:	2302      	movs	r3, #2
 8004fe8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fec:	e0a9      	b.n	8005142 <UART_SetConfig+0x2fe>
 8004fee:	2304      	movs	r3, #4
 8004ff0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ff4:	e0a5      	b.n	8005142 <UART_SetConfig+0x2fe>
 8004ff6:	2308      	movs	r3, #8
 8004ff8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ffc:	e0a1      	b.n	8005142 <UART_SetConfig+0x2fe>
 8004ffe:	2310      	movs	r3, #16
 8005000:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005004:	e09d      	b.n	8005142 <UART_SetConfig+0x2fe>
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a4a      	ldr	r2, [pc, #296]	@ (8005134 <UART_SetConfig+0x2f0>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d125      	bne.n	800505c <UART_SetConfig+0x218>
 8005010:	4b45      	ldr	r3, [pc, #276]	@ (8005128 <UART_SetConfig+0x2e4>)
 8005012:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005016:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800501a:	2bc0      	cmp	r3, #192	@ 0xc0
 800501c:	d016      	beq.n	800504c <UART_SetConfig+0x208>
 800501e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005020:	d818      	bhi.n	8005054 <UART_SetConfig+0x210>
 8005022:	2b80      	cmp	r3, #128	@ 0x80
 8005024:	d00a      	beq.n	800503c <UART_SetConfig+0x1f8>
 8005026:	2b80      	cmp	r3, #128	@ 0x80
 8005028:	d814      	bhi.n	8005054 <UART_SetConfig+0x210>
 800502a:	2b00      	cmp	r3, #0
 800502c:	d002      	beq.n	8005034 <UART_SetConfig+0x1f0>
 800502e:	2b40      	cmp	r3, #64	@ 0x40
 8005030:	d008      	beq.n	8005044 <UART_SetConfig+0x200>
 8005032:	e00f      	b.n	8005054 <UART_SetConfig+0x210>
 8005034:	2300      	movs	r3, #0
 8005036:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800503a:	e082      	b.n	8005142 <UART_SetConfig+0x2fe>
 800503c:	2302      	movs	r3, #2
 800503e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005042:	e07e      	b.n	8005142 <UART_SetConfig+0x2fe>
 8005044:	2304      	movs	r3, #4
 8005046:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800504a:	e07a      	b.n	8005142 <UART_SetConfig+0x2fe>
 800504c:	2308      	movs	r3, #8
 800504e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005052:	e076      	b.n	8005142 <UART_SetConfig+0x2fe>
 8005054:	2310      	movs	r3, #16
 8005056:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800505a:	e072      	b.n	8005142 <UART_SetConfig+0x2fe>
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a35      	ldr	r2, [pc, #212]	@ (8005138 <UART_SetConfig+0x2f4>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d12a      	bne.n	80050bc <UART_SetConfig+0x278>
 8005066:	4b30      	ldr	r3, [pc, #192]	@ (8005128 <UART_SetConfig+0x2e4>)
 8005068:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800506c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005070:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005074:	d01a      	beq.n	80050ac <UART_SetConfig+0x268>
 8005076:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800507a:	d81b      	bhi.n	80050b4 <UART_SetConfig+0x270>
 800507c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005080:	d00c      	beq.n	800509c <UART_SetConfig+0x258>
 8005082:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005086:	d815      	bhi.n	80050b4 <UART_SetConfig+0x270>
 8005088:	2b00      	cmp	r3, #0
 800508a:	d003      	beq.n	8005094 <UART_SetConfig+0x250>
 800508c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005090:	d008      	beq.n	80050a4 <UART_SetConfig+0x260>
 8005092:	e00f      	b.n	80050b4 <UART_SetConfig+0x270>
 8005094:	2300      	movs	r3, #0
 8005096:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800509a:	e052      	b.n	8005142 <UART_SetConfig+0x2fe>
 800509c:	2302      	movs	r3, #2
 800509e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050a2:	e04e      	b.n	8005142 <UART_SetConfig+0x2fe>
 80050a4:	2304      	movs	r3, #4
 80050a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050aa:	e04a      	b.n	8005142 <UART_SetConfig+0x2fe>
 80050ac:	2308      	movs	r3, #8
 80050ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050b2:	e046      	b.n	8005142 <UART_SetConfig+0x2fe>
 80050b4:	2310      	movs	r3, #16
 80050b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050ba:	e042      	b.n	8005142 <UART_SetConfig+0x2fe>
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a17      	ldr	r2, [pc, #92]	@ (8005120 <UART_SetConfig+0x2dc>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d13a      	bne.n	800513c <UART_SetConfig+0x2f8>
 80050c6:	4b18      	ldr	r3, [pc, #96]	@ (8005128 <UART_SetConfig+0x2e4>)
 80050c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050cc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80050d0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80050d4:	d01a      	beq.n	800510c <UART_SetConfig+0x2c8>
 80050d6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80050da:	d81b      	bhi.n	8005114 <UART_SetConfig+0x2d0>
 80050dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050e0:	d00c      	beq.n	80050fc <UART_SetConfig+0x2b8>
 80050e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050e6:	d815      	bhi.n	8005114 <UART_SetConfig+0x2d0>
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d003      	beq.n	80050f4 <UART_SetConfig+0x2b0>
 80050ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050f0:	d008      	beq.n	8005104 <UART_SetConfig+0x2c0>
 80050f2:	e00f      	b.n	8005114 <UART_SetConfig+0x2d0>
 80050f4:	2300      	movs	r3, #0
 80050f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050fa:	e022      	b.n	8005142 <UART_SetConfig+0x2fe>
 80050fc:	2302      	movs	r3, #2
 80050fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005102:	e01e      	b.n	8005142 <UART_SetConfig+0x2fe>
 8005104:	2304      	movs	r3, #4
 8005106:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800510a:	e01a      	b.n	8005142 <UART_SetConfig+0x2fe>
 800510c:	2308      	movs	r3, #8
 800510e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005112:	e016      	b.n	8005142 <UART_SetConfig+0x2fe>
 8005114:	2310      	movs	r3, #16
 8005116:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800511a:	e012      	b.n	8005142 <UART_SetConfig+0x2fe>
 800511c:	cfff69f3 	.word	0xcfff69f3
 8005120:	40008000 	.word	0x40008000
 8005124:	40013800 	.word	0x40013800
 8005128:	40021000 	.word	0x40021000
 800512c:	40004400 	.word	0x40004400
 8005130:	40004800 	.word	0x40004800
 8005134:	40004c00 	.word	0x40004c00
 8005138:	40005000 	.word	0x40005000
 800513c:	2310      	movs	r3, #16
 800513e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4aae      	ldr	r2, [pc, #696]	@ (8005400 <UART_SetConfig+0x5bc>)
 8005148:	4293      	cmp	r3, r2
 800514a:	f040 8097 	bne.w	800527c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800514e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005152:	2b08      	cmp	r3, #8
 8005154:	d823      	bhi.n	800519e <UART_SetConfig+0x35a>
 8005156:	a201      	add	r2, pc, #4	@ (adr r2, 800515c <UART_SetConfig+0x318>)
 8005158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800515c:	08005181 	.word	0x08005181
 8005160:	0800519f 	.word	0x0800519f
 8005164:	08005189 	.word	0x08005189
 8005168:	0800519f 	.word	0x0800519f
 800516c:	0800518f 	.word	0x0800518f
 8005170:	0800519f 	.word	0x0800519f
 8005174:	0800519f 	.word	0x0800519f
 8005178:	0800519f 	.word	0x0800519f
 800517c:	08005197 	.word	0x08005197
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005180:	f7fe fbb4 	bl	80038ec <HAL_RCC_GetPCLK1Freq>
 8005184:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005186:	e010      	b.n	80051aa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005188:	4b9e      	ldr	r3, [pc, #632]	@ (8005404 <UART_SetConfig+0x5c0>)
 800518a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800518c:	e00d      	b.n	80051aa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800518e:	f7fe fb3f 	bl	8003810 <HAL_RCC_GetSysClockFreq>
 8005192:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005194:	e009      	b.n	80051aa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005196:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800519a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800519c:	e005      	b.n	80051aa <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800519e:	2300      	movs	r3, #0
 80051a0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80051a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80051aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f000 8130 	beq.w	8005412 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051b6:	4a94      	ldr	r2, [pc, #592]	@ (8005408 <UART_SetConfig+0x5c4>)
 80051b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051bc:	461a      	mov	r2, r3
 80051be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80051c4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	685a      	ldr	r2, [r3, #4]
 80051ca:	4613      	mov	r3, r2
 80051cc:	005b      	lsls	r3, r3, #1
 80051ce:	4413      	add	r3, r2
 80051d0:	69ba      	ldr	r2, [r7, #24]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d305      	bcc.n	80051e2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80051dc:	69ba      	ldr	r2, [r7, #24]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d903      	bls.n	80051ea <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80051e8:	e113      	b.n	8005412 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ec:	2200      	movs	r2, #0
 80051ee:	60bb      	str	r3, [r7, #8]
 80051f0:	60fa      	str	r2, [r7, #12]
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051f6:	4a84      	ldr	r2, [pc, #528]	@ (8005408 <UART_SetConfig+0x5c4>)
 80051f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	2200      	movs	r2, #0
 8005200:	603b      	str	r3, [r7, #0]
 8005202:	607a      	str	r2, [r7, #4]
 8005204:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005208:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800520c:	f7fb fcce 	bl	8000bac <__aeabi_uldivmod>
 8005210:	4602      	mov	r2, r0
 8005212:	460b      	mov	r3, r1
 8005214:	4610      	mov	r0, r2
 8005216:	4619      	mov	r1, r3
 8005218:	f04f 0200 	mov.w	r2, #0
 800521c:	f04f 0300 	mov.w	r3, #0
 8005220:	020b      	lsls	r3, r1, #8
 8005222:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005226:	0202      	lsls	r2, r0, #8
 8005228:	6979      	ldr	r1, [r7, #20]
 800522a:	6849      	ldr	r1, [r1, #4]
 800522c:	0849      	lsrs	r1, r1, #1
 800522e:	2000      	movs	r0, #0
 8005230:	460c      	mov	r4, r1
 8005232:	4605      	mov	r5, r0
 8005234:	eb12 0804 	adds.w	r8, r2, r4
 8005238:	eb43 0905 	adc.w	r9, r3, r5
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	469a      	mov	sl, r3
 8005244:	4693      	mov	fp, r2
 8005246:	4652      	mov	r2, sl
 8005248:	465b      	mov	r3, fp
 800524a:	4640      	mov	r0, r8
 800524c:	4649      	mov	r1, r9
 800524e:	f7fb fcad 	bl	8000bac <__aeabi_uldivmod>
 8005252:	4602      	mov	r2, r0
 8005254:	460b      	mov	r3, r1
 8005256:	4613      	mov	r3, r2
 8005258:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800525a:	6a3b      	ldr	r3, [r7, #32]
 800525c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005260:	d308      	bcc.n	8005274 <UART_SetConfig+0x430>
 8005262:	6a3b      	ldr	r3, [r7, #32]
 8005264:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005268:	d204      	bcs.n	8005274 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	6a3a      	ldr	r2, [r7, #32]
 8005270:	60da      	str	r2, [r3, #12]
 8005272:	e0ce      	b.n	8005412 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800527a:	e0ca      	b.n	8005412 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	69db      	ldr	r3, [r3, #28]
 8005280:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005284:	d166      	bne.n	8005354 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005286:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800528a:	2b08      	cmp	r3, #8
 800528c:	d827      	bhi.n	80052de <UART_SetConfig+0x49a>
 800528e:	a201      	add	r2, pc, #4	@ (adr r2, 8005294 <UART_SetConfig+0x450>)
 8005290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005294:	080052b9 	.word	0x080052b9
 8005298:	080052c1 	.word	0x080052c1
 800529c:	080052c9 	.word	0x080052c9
 80052a0:	080052df 	.word	0x080052df
 80052a4:	080052cf 	.word	0x080052cf
 80052a8:	080052df 	.word	0x080052df
 80052ac:	080052df 	.word	0x080052df
 80052b0:	080052df 	.word	0x080052df
 80052b4:	080052d7 	.word	0x080052d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052b8:	f7fe fb18 	bl	80038ec <HAL_RCC_GetPCLK1Freq>
 80052bc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80052be:	e014      	b.n	80052ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052c0:	f7fe fb2a 	bl	8003918 <HAL_RCC_GetPCLK2Freq>
 80052c4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80052c6:	e010      	b.n	80052ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052c8:	4b4e      	ldr	r3, [pc, #312]	@ (8005404 <UART_SetConfig+0x5c0>)
 80052ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80052cc:	e00d      	b.n	80052ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052ce:	f7fe fa9f 	bl	8003810 <HAL_RCC_GetSysClockFreq>
 80052d2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80052d4:	e009      	b.n	80052ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80052dc:	e005      	b.n	80052ea <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80052de:	2300      	movs	r3, #0
 80052e0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80052e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	f000 8090 	beq.w	8005412 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052f6:	4a44      	ldr	r2, [pc, #272]	@ (8005408 <UART_SetConfig+0x5c4>)
 80052f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052fc:	461a      	mov	r2, r3
 80052fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005300:	fbb3 f3f2 	udiv	r3, r3, r2
 8005304:	005a      	lsls	r2, r3, #1
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	085b      	lsrs	r3, r3, #1
 800530c:	441a      	add	r2, r3
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	fbb2 f3f3 	udiv	r3, r2, r3
 8005316:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005318:	6a3b      	ldr	r3, [r7, #32]
 800531a:	2b0f      	cmp	r3, #15
 800531c:	d916      	bls.n	800534c <UART_SetConfig+0x508>
 800531e:	6a3b      	ldr	r3, [r7, #32]
 8005320:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005324:	d212      	bcs.n	800534c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005326:	6a3b      	ldr	r3, [r7, #32]
 8005328:	b29b      	uxth	r3, r3
 800532a:	f023 030f 	bic.w	r3, r3, #15
 800532e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005330:	6a3b      	ldr	r3, [r7, #32]
 8005332:	085b      	lsrs	r3, r3, #1
 8005334:	b29b      	uxth	r3, r3
 8005336:	f003 0307 	and.w	r3, r3, #7
 800533a:	b29a      	uxth	r2, r3
 800533c:	8bfb      	ldrh	r3, [r7, #30]
 800533e:	4313      	orrs	r3, r2
 8005340:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	8bfa      	ldrh	r2, [r7, #30]
 8005348:	60da      	str	r2, [r3, #12]
 800534a:	e062      	b.n	8005412 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005352:	e05e      	b.n	8005412 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005354:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005358:	2b08      	cmp	r3, #8
 800535a:	d828      	bhi.n	80053ae <UART_SetConfig+0x56a>
 800535c:	a201      	add	r2, pc, #4	@ (adr r2, 8005364 <UART_SetConfig+0x520>)
 800535e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005362:	bf00      	nop
 8005364:	08005389 	.word	0x08005389
 8005368:	08005391 	.word	0x08005391
 800536c:	08005399 	.word	0x08005399
 8005370:	080053af 	.word	0x080053af
 8005374:	0800539f 	.word	0x0800539f
 8005378:	080053af 	.word	0x080053af
 800537c:	080053af 	.word	0x080053af
 8005380:	080053af 	.word	0x080053af
 8005384:	080053a7 	.word	0x080053a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005388:	f7fe fab0 	bl	80038ec <HAL_RCC_GetPCLK1Freq>
 800538c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800538e:	e014      	b.n	80053ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005390:	f7fe fac2 	bl	8003918 <HAL_RCC_GetPCLK2Freq>
 8005394:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005396:	e010      	b.n	80053ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005398:	4b1a      	ldr	r3, [pc, #104]	@ (8005404 <UART_SetConfig+0x5c0>)
 800539a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800539c:	e00d      	b.n	80053ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800539e:	f7fe fa37 	bl	8003810 <HAL_RCC_GetSysClockFreq>
 80053a2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80053a4:	e009      	b.n	80053ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80053ac:	e005      	b.n	80053ba <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80053ae:	2300      	movs	r3, #0
 80053b0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80053b8:	bf00      	nop
    }

    if (pclk != 0U)
 80053ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d028      	beq.n	8005412 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053c4:	4a10      	ldr	r2, [pc, #64]	@ (8005408 <UART_SetConfig+0x5c4>)
 80053c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053ca:	461a      	mov	r2, r3
 80053cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ce:	fbb3 f2f2 	udiv	r2, r3, r2
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	085b      	lsrs	r3, r3, #1
 80053d8:	441a      	add	r2, r3
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	fbb2 f3f3 	udiv	r3, r2, r3
 80053e2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053e4:	6a3b      	ldr	r3, [r7, #32]
 80053e6:	2b0f      	cmp	r3, #15
 80053e8:	d910      	bls.n	800540c <UART_SetConfig+0x5c8>
 80053ea:	6a3b      	ldr	r3, [r7, #32]
 80053ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053f0:	d20c      	bcs.n	800540c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80053f2:	6a3b      	ldr	r3, [r7, #32]
 80053f4:	b29a      	uxth	r2, r3
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	60da      	str	r2, [r3, #12]
 80053fc:	e009      	b.n	8005412 <UART_SetConfig+0x5ce>
 80053fe:	bf00      	nop
 8005400:	40008000 	.word	0x40008000
 8005404:	00f42400 	.word	0x00f42400
 8005408:	0800cf4c 	.word	0x0800cf4c
      }
      else
      {
        ret = HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	2201      	movs	r2, #1
 8005416:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	2201      	movs	r2, #1
 800541e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	2200      	movs	r2, #0
 8005426:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	2200      	movs	r2, #0
 800542c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800542e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005432:	4618      	mov	r0, r3
 8005434:	3730      	adds	r7, #48	@ 0x30
 8005436:	46bd      	mov	sp, r7
 8005438:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800543c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005448:	f003 0308 	and.w	r3, r3, #8
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00a      	beq.n	8005466 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	430a      	orrs	r2, r1
 8005464:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800546a:	f003 0301 	and.w	r3, r3, #1
 800546e:	2b00      	cmp	r3, #0
 8005470:	d00a      	beq.n	8005488 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	430a      	orrs	r2, r1
 8005486:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800548c:	f003 0302 	and.w	r3, r3, #2
 8005490:	2b00      	cmp	r3, #0
 8005492:	d00a      	beq.n	80054aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	430a      	orrs	r2, r1
 80054a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ae:	f003 0304 	and.w	r3, r3, #4
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d00a      	beq.n	80054cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	430a      	orrs	r2, r1
 80054ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054d0:	f003 0310 	and.w	r3, r3, #16
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d00a      	beq.n	80054ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	430a      	orrs	r2, r1
 80054ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054f2:	f003 0320 	and.w	r3, r3, #32
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00a      	beq.n	8005510 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	430a      	orrs	r2, r1
 800550e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005514:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005518:	2b00      	cmp	r3, #0
 800551a:	d01a      	beq.n	8005552 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	430a      	orrs	r2, r1
 8005530:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005536:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800553a:	d10a      	bne.n	8005552 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	430a      	orrs	r2, r1
 8005550:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005556:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00a      	beq.n	8005574 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	430a      	orrs	r2, r1
 8005572:	605a      	str	r2, [r3, #4]
  }
}
 8005574:	bf00      	nop
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b098      	sub	sp, #96	@ 0x60
 8005584:	af02      	add	r7, sp, #8
 8005586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005590:	f7fc fe60 	bl	8002254 <HAL_GetTick>
 8005594:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0308 	and.w	r3, r3, #8
 80055a0:	2b08      	cmp	r3, #8
 80055a2:	d12f      	bne.n	8005604 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80055a8:	9300      	str	r3, [sp, #0]
 80055aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055ac:	2200      	movs	r2, #0
 80055ae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 f88e 	bl	80056d4 <UART_WaitOnFlagUntilTimeout>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d022      	beq.n	8005604 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055c6:	e853 3f00 	ldrex	r3, [r3]
 80055ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80055cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	461a      	mov	r2, r3
 80055da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80055dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80055de:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80055e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80055e4:	e841 2300 	strex	r3, r2, [r1]
 80055e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80055ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d1e6      	bne.n	80055be <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2220      	movs	r2, #32
 80055f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005600:	2303      	movs	r3, #3
 8005602:	e063      	b.n	80056cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 0304 	and.w	r3, r3, #4
 800560e:	2b04      	cmp	r3, #4
 8005610:	d149      	bne.n	80056a6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005612:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005616:	9300      	str	r3, [sp, #0]
 8005618:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800561a:	2200      	movs	r2, #0
 800561c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f000 f857 	bl	80056d4 <UART_WaitOnFlagUntilTimeout>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d03c      	beq.n	80056a6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005634:	e853 3f00 	ldrex	r3, [r3]
 8005638:	623b      	str	r3, [r7, #32]
   return(result);
 800563a:	6a3b      	ldr	r3, [r7, #32]
 800563c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005640:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	461a      	mov	r2, r3
 8005648:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800564a:	633b      	str	r3, [r7, #48]	@ 0x30
 800564c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005650:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005652:	e841 2300 	strex	r3, r2, [r1]
 8005656:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800565a:	2b00      	cmp	r3, #0
 800565c:	d1e6      	bne.n	800562c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	3308      	adds	r3, #8
 8005664:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	e853 3f00 	ldrex	r3, [r3]
 800566c:	60fb      	str	r3, [r7, #12]
   return(result);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f023 0301 	bic.w	r3, r3, #1
 8005674:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	3308      	adds	r3, #8
 800567c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800567e:	61fa      	str	r2, [r7, #28]
 8005680:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005682:	69b9      	ldr	r1, [r7, #24]
 8005684:	69fa      	ldr	r2, [r7, #28]
 8005686:	e841 2300 	strex	r3, r2, [r1]
 800568a:	617b      	str	r3, [r7, #20]
   return(result);
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d1e5      	bne.n	800565e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2220      	movs	r2, #32
 8005696:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056a2:	2303      	movs	r3, #3
 80056a4:	e012      	b.n	80056cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2220      	movs	r2, #32
 80056aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2220      	movs	r2, #32
 80056b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80056ca:	2300      	movs	r3, #0
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3758      	adds	r7, #88	@ 0x58
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}

080056d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	60b9      	str	r1, [r7, #8]
 80056de:	603b      	str	r3, [r7, #0]
 80056e0:	4613      	mov	r3, r2
 80056e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056e4:	e04f      	b.n	8005786 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056e6:	69bb      	ldr	r3, [r7, #24]
 80056e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ec:	d04b      	beq.n	8005786 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056ee:	f7fc fdb1 	bl	8002254 <HAL_GetTick>
 80056f2:	4602      	mov	r2, r0
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	69ba      	ldr	r2, [r7, #24]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d302      	bcc.n	8005704 <UART_WaitOnFlagUntilTimeout+0x30>
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d101      	bne.n	8005708 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005704:	2303      	movs	r3, #3
 8005706:	e04e      	b.n	80057a6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 0304 	and.w	r3, r3, #4
 8005712:	2b00      	cmp	r3, #0
 8005714:	d037      	beq.n	8005786 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	2b80      	cmp	r3, #128	@ 0x80
 800571a:	d034      	beq.n	8005786 <UART_WaitOnFlagUntilTimeout+0xb2>
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	2b40      	cmp	r3, #64	@ 0x40
 8005720:	d031      	beq.n	8005786 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	69db      	ldr	r3, [r3, #28]
 8005728:	f003 0308 	and.w	r3, r3, #8
 800572c:	2b08      	cmp	r3, #8
 800572e:	d110      	bne.n	8005752 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2208      	movs	r2, #8
 8005736:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005738:	68f8      	ldr	r0, [r7, #12]
 800573a:	f000 f95b 	bl	80059f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2208      	movs	r2, #8
 8005742:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2200      	movs	r2, #0
 800574a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e029      	b.n	80057a6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	69db      	ldr	r3, [r3, #28]
 8005758:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800575c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005760:	d111      	bne.n	8005786 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800576a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800576c:	68f8      	ldr	r0, [r7, #12]
 800576e:	f000 f941 	bl	80059f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2220      	movs	r2, #32
 8005776:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2200      	movs	r2, #0
 800577e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e00f      	b.n	80057a6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	69da      	ldr	r2, [r3, #28]
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	4013      	ands	r3, r2
 8005790:	68ba      	ldr	r2, [r7, #8]
 8005792:	429a      	cmp	r2, r3
 8005794:	bf0c      	ite	eq
 8005796:	2301      	moveq	r3, #1
 8005798:	2300      	movne	r3, #0
 800579a:	b2db      	uxtb	r3, r3
 800579c:	461a      	mov	r2, r3
 800579e:	79fb      	ldrb	r3, [r7, #7]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d0a0      	beq.n	80056e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057a4:	2300      	movs	r3, #0
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3710      	adds	r7, #16
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
	...

080057b0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b0a3      	sub	sp, #140	@ 0x8c
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	4613      	mov	r3, r2
 80057bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	68ba      	ldr	r2, [r7, #8]
 80057c2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	88fa      	ldrh	r2, [r7, #6]
 80057c8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	88fa      	ldrh	r2, [r7, #6]
 80057d0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2200      	movs	r2, #0
 80057d8:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057e2:	d10e      	bne.n	8005802 <UART_Start_Receive_IT+0x52>
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	691b      	ldr	r3, [r3, #16]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d105      	bne.n	80057f8 <UART_Start_Receive_IT+0x48>
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80057f2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80057f6:	e02d      	b.n	8005854 <UART_Start_Receive_IT+0xa4>
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	22ff      	movs	r2, #255	@ 0xff
 80057fc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005800:	e028      	b.n	8005854 <UART_Start_Receive_IT+0xa4>
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d10d      	bne.n	8005826 <UART_Start_Receive_IT+0x76>
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d104      	bne.n	800581c <UART_Start_Receive_IT+0x6c>
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	22ff      	movs	r2, #255	@ 0xff
 8005816:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800581a:	e01b      	b.n	8005854 <UART_Start_Receive_IT+0xa4>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	227f      	movs	r2, #127	@ 0x7f
 8005820:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005824:	e016      	b.n	8005854 <UART_Start_Receive_IT+0xa4>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800582e:	d10d      	bne.n	800584c <UART_Start_Receive_IT+0x9c>
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	691b      	ldr	r3, [r3, #16]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d104      	bne.n	8005842 <UART_Start_Receive_IT+0x92>
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	227f      	movs	r2, #127	@ 0x7f
 800583c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005840:	e008      	b.n	8005854 <UART_Start_Receive_IT+0xa4>
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	223f      	movs	r2, #63	@ 0x3f
 8005846:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800584a:	e003      	b.n	8005854 <UART_Start_Receive_IT+0xa4>
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2200      	movs	r2, #0
 8005850:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2200      	movs	r2, #0
 8005858:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2222      	movs	r2, #34	@ 0x22
 8005860:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	3308      	adds	r3, #8
 800586a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800586e:	e853 3f00 	ldrex	r3, [r3]
 8005872:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8005874:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005876:	f043 0301 	orr.w	r3, r3, #1
 800587a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	3308      	adds	r3, #8
 8005884:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8005888:	673a      	str	r2, [r7, #112]	@ 0x70
 800588a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800588c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800588e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8005890:	e841 2300 	strex	r3, r2, [r1]
 8005894:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8005896:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005898:	2b00      	cmp	r3, #0
 800589a:	d1e3      	bne.n	8005864 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80058a4:	d14f      	bne.n	8005946 <UART_Start_Receive_IT+0x196>
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80058ac:	88fa      	ldrh	r2, [r7, #6]
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d349      	bcc.n	8005946 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058ba:	d107      	bne.n	80058cc <UART_Start_Receive_IT+0x11c>
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	691b      	ldr	r3, [r3, #16]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d103      	bne.n	80058cc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	4a47      	ldr	r2, [pc, #284]	@ (80059e4 <UART_Start_Receive_IT+0x234>)
 80058c8:	675a      	str	r2, [r3, #116]	@ 0x74
 80058ca:	e002      	b.n	80058d2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	4a46      	ldr	r2, [pc, #280]	@ (80059e8 <UART_Start_Receive_IT+0x238>)
 80058d0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d01a      	beq.n	8005910 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80058e2:	e853 3f00 	ldrex	r3, [r3]
 80058e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80058e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058ee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	461a      	mov	r2, r3
 80058f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80058fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80058fe:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005900:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005902:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005904:	e841 2300 	strex	r3, r2, [r1]
 8005908:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800590a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800590c:	2b00      	cmp	r3, #0
 800590e:	d1e4      	bne.n	80058da <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	3308      	adds	r3, #8
 8005916:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005918:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800591a:	e853 3f00 	ldrex	r3, [r3]
 800591e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005922:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005926:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	3308      	adds	r3, #8
 800592e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005930:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005932:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005934:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005936:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005938:	e841 2300 	strex	r3, r2, [r1]
 800593c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800593e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005940:	2b00      	cmp	r3, #0
 8005942:	d1e5      	bne.n	8005910 <UART_Start_Receive_IT+0x160>
 8005944:	e046      	b.n	80059d4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800594e:	d107      	bne.n	8005960 <UART_Start_Receive_IT+0x1b0>
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	691b      	ldr	r3, [r3, #16]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d103      	bne.n	8005960 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	4a24      	ldr	r2, [pc, #144]	@ (80059ec <UART_Start_Receive_IT+0x23c>)
 800595c:	675a      	str	r2, [r3, #116]	@ 0x74
 800595e:	e002      	b.n	8005966 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	4a23      	ldr	r2, [pc, #140]	@ (80059f0 <UART_Start_Receive_IT+0x240>)
 8005964:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d019      	beq.n	80059a2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005976:	e853 3f00 	ldrex	r3, [r3]
 800597a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800597c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800597e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8005982:	677b      	str	r3, [r7, #116]	@ 0x74
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	461a      	mov	r2, r3
 800598a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800598c:	637b      	str	r3, [r7, #52]	@ 0x34
 800598e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005990:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005992:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005994:	e841 2300 	strex	r3, r2, [r1]
 8005998:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800599a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800599c:	2b00      	cmp	r3, #0
 800599e:	d1e6      	bne.n	800596e <UART_Start_Receive_IT+0x1be>
 80059a0:	e018      	b.n	80059d4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	e853 3f00 	ldrex	r3, [r3]
 80059ae:	613b      	str	r3, [r7, #16]
   return(result);
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	f043 0320 	orr.w	r3, r3, #32
 80059b6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	461a      	mov	r2, r3
 80059be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80059c0:	623b      	str	r3, [r7, #32]
 80059c2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c4:	69f9      	ldr	r1, [r7, #28]
 80059c6:	6a3a      	ldr	r2, [r7, #32]
 80059c8:	e841 2300 	strex	r3, r2, [r1]
 80059cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d1e6      	bne.n	80059a2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	378c      	adds	r7, #140	@ 0x8c
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop
 80059e4:	08006215 	.word	0x08006215
 80059e8:	08005eb5 	.word	0x08005eb5
 80059ec:	08005cfd 	.word	0x08005cfd
 80059f0:	08005b45 	.word	0x08005b45

080059f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b095      	sub	sp, #84	@ 0x54
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a04:	e853 3f00 	ldrex	r3, [r3]
 8005a08:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a10:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	461a      	mov	r2, r3
 8005a18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a1a:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a1c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a1e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005a20:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a22:	e841 2300 	strex	r3, r2, [r1]
 8005a26:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d1e6      	bne.n	80059fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	3308      	adds	r3, #8
 8005a34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a36:	6a3b      	ldr	r3, [r7, #32]
 8005a38:	e853 3f00 	ldrex	r3, [r3]
 8005a3c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a44:	f023 0301 	bic.w	r3, r3, #1
 8005a48:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	3308      	adds	r3, #8
 8005a50:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a52:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a54:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a56:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a5a:	e841 2300 	strex	r3, r2, [r1]
 8005a5e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d1e3      	bne.n	8005a2e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d118      	bne.n	8005aa0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	e853 3f00 	ldrex	r3, [r3]
 8005a7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	f023 0310 	bic.w	r3, r3, #16
 8005a82:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	461a      	mov	r2, r3
 8005a8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a8c:	61bb      	str	r3, [r7, #24]
 8005a8e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a90:	6979      	ldr	r1, [r7, #20]
 8005a92:	69ba      	ldr	r2, [r7, #24]
 8005a94:	e841 2300 	strex	r3, r2, [r1]
 8005a98:	613b      	str	r3, [r7, #16]
   return(result);
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d1e6      	bne.n	8005a6e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2220      	movs	r2, #32
 8005aa4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005ab4:	bf00      	nop
 8005ab6:	3754      	adds	r7, #84	@ 0x54
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b084      	sub	sp, #16
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005acc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ade:	68f8      	ldr	r0, [r7, #12]
 8005ae0:	f7ff f99a 	bl	8004e18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ae4:	bf00      	nop
 8005ae6:	3710      	adds	r7, #16
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}

08005aec <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b088      	sub	sp, #32
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	e853 3f00 	ldrex	r3, [r3]
 8005b00:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b08:	61fb      	str	r3, [r7, #28]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	461a      	mov	r2, r3
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	61bb      	str	r3, [r7, #24]
 8005b14:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b16:	6979      	ldr	r1, [r7, #20]
 8005b18:	69ba      	ldr	r2, [r7, #24]
 8005b1a:	e841 2300 	strex	r3, r2, [r1]
 8005b1e:	613b      	str	r3, [r7, #16]
   return(result);
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d1e6      	bne.n	8005af4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2220      	movs	r2, #32
 8005b2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f7ff f965 	bl	8004e04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b3a:	bf00      	nop
 8005b3c:	3720      	adds	r7, #32
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
	...

08005b44 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b09c      	sub	sp, #112	@ 0x70
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005b52:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005b5c:	2b22      	cmp	r3, #34	@ 0x22
 8005b5e:	f040 80be 	bne.w	8005cde <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b68:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005b6c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005b70:	b2d9      	uxtb	r1, r3
 8005b72:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005b76:	b2da      	uxtb	r2, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b7c:	400a      	ands	r2, r1
 8005b7e:	b2d2      	uxtb	r2, r2
 8005b80:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b86:	1c5a      	adds	r2, r3, #1
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	3b01      	subs	r3, #1
 8005b96:	b29a      	uxth	r2, r3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	f040 80a1 	bne.w	8005cee <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005bb4:	e853 3f00 	ldrex	r3, [r3]
 8005bb8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005bba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005bbc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005bc0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005bca:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005bcc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005bd0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005bd2:	e841 2300 	strex	r3, r2, [r1]
 8005bd6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005bd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d1e6      	bne.n	8005bac <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	3308      	adds	r3, #8
 8005be4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005be8:	e853 3f00 	ldrex	r3, [r3]
 8005bec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005bee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bf0:	f023 0301 	bic.w	r3, r3, #1
 8005bf4:	667b      	str	r3, [r7, #100]	@ 0x64
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	3308      	adds	r3, #8
 8005bfc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005bfe:	647a      	str	r2, [r7, #68]	@ 0x44
 8005c00:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c02:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005c04:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c06:	e841 2300 	strex	r3, r2, [r1]
 8005c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005c0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d1e5      	bne.n	8005bde <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2220      	movs	r2, #32
 8005c16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a33      	ldr	r2, [pc, #204]	@ (8005cf8 <UART_RxISR_8BIT+0x1b4>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d01f      	beq.n	8005c70 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d018      	beq.n	8005c70 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c46:	e853 3f00 	ldrex	r3, [r3]
 8005c4a:	623b      	str	r3, [r7, #32]
   return(result);
 8005c4c:	6a3b      	ldr	r3, [r7, #32]
 8005c4e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005c52:	663b      	str	r3, [r7, #96]	@ 0x60
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	461a      	mov	r2, r3
 8005c5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005c5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c60:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c64:	e841 2300 	strex	r3, r2, [r1]
 8005c68:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d1e6      	bne.n	8005c3e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d12e      	bne.n	8005cd6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	e853 3f00 	ldrex	r3, [r3]
 8005c8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f023 0310 	bic.w	r3, r3, #16
 8005c92:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	461a      	mov	r2, r3
 8005c9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c9c:	61fb      	str	r3, [r7, #28]
 8005c9e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca0:	69b9      	ldr	r1, [r7, #24]
 8005ca2:	69fa      	ldr	r2, [r7, #28]
 8005ca4:	e841 2300 	strex	r3, r2, [r1]
 8005ca8:	617b      	str	r3, [r7, #20]
   return(result);
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d1e6      	bne.n	8005c7e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	69db      	ldr	r3, [r3, #28]
 8005cb6:	f003 0310 	and.w	r3, r3, #16
 8005cba:	2b10      	cmp	r3, #16
 8005cbc:	d103      	bne.n	8005cc6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	2210      	movs	r2, #16
 8005cc4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005ccc:	4619      	mov	r1, r3
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f7ff f8ac 	bl	8004e2c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005cd4:	e00b      	b.n	8005cee <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f7fb febc 	bl	8001a54 <HAL_UART_RxCpltCallback>
}
 8005cdc:	e007      	b.n	8005cee <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	699a      	ldr	r2, [r3, #24]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f042 0208 	orr.w	r2, r2, #8
 8005cec:	619a      	str	r2, [r3, #24]
}
 8005cee:	bf00      	nop
 8005cf0:	3770      	adds	r7, #112	@ 0x70
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	40008000 	.word	0x40008000

08005cfc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b09c      	sub	sp, #112	@ 0x70
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005d0a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005d14:	2b22      	cmp	r3, #34	@ 0x22
 8005d16:	f040 80be 	bne.w	8005e96 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d20:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d28:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005d2a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8005d2e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005d32:	4013      	ands	r3, r2
 8005d34:	b29a      	uxth	r2, r3
 8005d36:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005d38:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d3e:	1c9a      	adds	r2, r3, #2
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	3b01      	subs	r3, #1
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	f040 80a1 	bne.w	8005ea6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d6c:	e853 3f00 	ldrex	r3, [r3]
 8005d70:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005d72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d78:	667b      	str	r3, [r7, #100]	@ 0x64
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	461a      	mov	r2, r3
 8005d80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d82:	657b      	str	r3, [r7, #84]	@ 0x54
 8005d84:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d86:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005d88:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005d8a:	e841 2300 	strex	r3, r2, [r1]
 8005d8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005d90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d1e6      	bne.n	8005d64 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	3308      	adds	r3, #8
 8005d9c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005da0:	e853 3f00 	ldrex	r3, [r3]
 8005da4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005da8:	f023 0301 	bic.w	r3, r3, #1
 8005dac:	663b      	str	r3, [r7, #96]	@ 0x60
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	3308      	adds	r3, #8
 8005db4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005db6:	643a      	str	r2, [r7, #64]	@ 0x40
 8005db8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005dbc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005dbe:	e841 2300 	strex	r3, r2, [r1]
 8005dc2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d1e5      	bne.n	8005d96 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2220      	movs	r2, #32
 8005dce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a33      	ldr	r2, [pc, #204]	@ (8005eb0 <UART_RxISR_16BIT+0x1b4>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d01f      	beq.n	8005e28 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d018      	beq.n	8005e28 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dfc:	6a3b      	ldr	r3, [r7, #32]
 8005dfe:	e853 3f00 	ldrex	r3, [r3]
 8005e02:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005e0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	461a      	mov	r2, r3
 8005e12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e16:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e1c:	e841 2300 	strex	r3, r2, [r1]
 8005e20:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d1e6      	bne.n	8005df6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d12e      	bne.n	8005e8e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	e853 3f00 	ldrex	r3, [r3]
 8005e42:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	f023 0310 	bic.w	r3, r3, #16
 8005e4a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	461a      	mov	r2, r3
 8005e52:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005e54:	61bb      	str	r3, [r7, #24]
 8005e56:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e58:	6979      	ldr	r1, [r7, #20]
 8005e5a:	69ba      	ldr	r2, [r7, #24]
 8005e5c:	e841 2300 	strex	r3, r2, [r1]
 8005e60:	613b      	str	r3, [r7, #16]
   return(result);
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d1e6      	bne.n	8005e36 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	69db      	ldr	r3, [r3, #28]
 8005e6e:	f003 0310 	and.w	r3, r3, #16
 8005e72:	2b10      	cmp	r3, #16
 8005e74:	d103      	bne.n	8005e7e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	2210      	movs	r2, #16
 8005e7c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005e84:	4619      	mov	r1, r3
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f7fe ffd0 	bl	8004e2c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005e8c:	e00b      	b.n	8005ea6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f7fb fde0 	bl	8001a54 <HAL_UART_RxCpltCallback>
}
 8005e94:	e007      	b.n	8005ea6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	699a      	ldr	r2, [r3, #24]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f042 0208 	orr.w	r2, r2, #8
 8005ea4:	619a      	str	r2, [r3, #24]
}
 8005ea6:	bf00      	nop
 8005ea8:	3770      	adds	r7, #112	@ 0x70
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	40008000 	.word	0x40008000

08005eb4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b0ac      	sub	sp, #176	@ 0xb0
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005ec2:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	69db      	ldr	r3, [r3, #28]
 8005ecc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005eea:	2b22      	cmp	r3, #34	@ 0x22
 8005eec:	f040 8182 	bne.w	80061f4 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005ef6:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005efa:	e125      	b.n	8006148 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f02:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005f06:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8005f0a:	b2d9      	uxtb	r1, r3
 8005f0c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8005f10:	b2da      	uxtb	r2, r3
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f16:	400a      	ands	r2, r1
 8005f18:	b2d2      	uxtb	r2, r2
 8005f1a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f20:	1c5a      	adds	r2, r3, #1
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	3b01      	subs	r3, #1
 8005f30:	b29a      	uxth	r2, r3
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	69db      	ldr	r3, [r3, #28]
 8005f3e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005f42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005f46:	f003 0307 	and.w	r3, r3, #7
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d053      	beq.n	8005ff6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005f4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005f52:	f003 0301 	and.w	r3, r3, #1
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d011      	beq.n	8005f7e <UART_RxISR_8BIT_FIFOEN+0xca>
 8005f5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005f5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d00b      	beq.n	8005f7e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f74:	f043 0201 	orr.w	r2, r3, #1
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005f82:	f003 0302 	and.w	r3, r3, #2
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d011      	beq.n	8005fae <UART_RxISR_8BIT_FIFOEN+0xfa>
 8005f8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005f8e:	f003 0301 	and.w	r3, r3, #1
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d00b      	beq.n	8005fae <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	2202      	movs	r2, #2
 8005f9c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fa4:	f043 0204 	orr.w	r2, r3, #4
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005fae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005fb2:	f003 0304 	and.w	r3, r3, #4
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d011      	beq.n	8005fde <UART_RxISR_8BIT_FIFOEN+0x12a>
 8005fba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005fbe:	f003 0301 	and.w	r3, r3, #1
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d00b      	beq.n	8005fde <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	2204      	movs	r2, #4
 8005fcc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fd4:	f043 0202 	orr.w	r2, r3, #2
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d006      	beq.n	8005ff6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f7fe ff15 	bl	8004e18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	f040 80a2 	bne.w	8006148 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800600a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800600c:	e853 3f00 	ldrex	r3, [r3]
 8006010:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8006012:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006014:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006018:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	461a      	mov	r2, r3
 8006022:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006026:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006028:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800602a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800602c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800602e:	e841 2300 	strex	r3, r2, [r1]
 8006032:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8006034:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006036:	2b00      	cmp	r3, #0
 8006038:	d1e4      	bne.n	8006004 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	3308      	adds	r3, #8
 8006040:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006042:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006044:	e853 3f00 	ldrex	r3, [r3]
 8006048:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800604a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800604c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006050:	f023 0301 	bic.w	r3, r3, #1
 8006054:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	3308      	adds	r3, #8
 800605e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006062:	66ba      	str	r2, [r7, #104]	@ 0x68
 8006064:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006066:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8006068:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800606a:	e841 2300 	strex	r3, r2, [r1]
 800606e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8006070:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006072:	2b00      	cmp	r3, #0
 8006074:	d1e1      	bne.n	800603a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2220      	movs	r2, #32
 800607a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a5f      	ldr	r2, [pc, #380]	@ (800620c <UART_RxISR_8BIT_FIFOEN+0x358>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d021      	beq.n	80060d8 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d01a      	beq.n	80060d8 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80060aa:	e853 3f00 	ldrex	r3, [r3]
 80060ae:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80060b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80060b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80060b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	461a      	mov	r2, r3
 80060c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80060c4:	657b      	str	r3, [r7, #84]	@ 0x54
 80060c6:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80060ca:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80060cc:	e841 2300 	strex	r3, r2, [r1]
 80060d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80060d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d1e4      	bne.n	80060a2 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d130      	bne.n	8006142 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2200      	movs	r2, #0
 80060e4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060ee:	e853 3f00 	ldrex	r3, [r3]
 80060f2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80060f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f6:	f023 0310 	bic.w	r3, r3, #16
 80060fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	461a      	mov	r2, r3
 8006104:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006108:	643b      	str	r3, [r7, #64]	@ 0x40
 800610a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800610c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800610e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006110:	e841 2300 	strex	r3, r2, [r1]
 8006114:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006118:	2b00      	cmp	r3, #0
 800611a:	d1e4      	bne.n	80060e6 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	69db      	ldr	r3, [r3, #28]
 8006122:	f003 0310 	and.w	r3, r3, #16
 8006126:	2b10      	cmp	r3, #16
 8006128:	d103      	bne.n	8006132 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	2210      	movs	r2, #16
 8006130:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006138:	4619      	mov	r1, r3
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f7fe fe76 	bl	8004e2c <HAL_UARTEx_RxEventCallback>
 8006140:	e002      	b.n	8006148 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f7fb fc86 	bl	8001a54 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006148:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800614c:	2b00      	cmp	r3, #0
 800614e:	d006      	beq.n	800615e <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8006150:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006154:	f003 0320 	and.w	r3, r3, #32
 8006158:	2b00      	cmp	r3, #0
 800615a:	f47f aecf 	bne.w	8005efc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006164:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006168:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800616c:	2b00      	cmp	r3, #0
 800616e:	d049      	beq.n	8006204 <UART_RxISR_8BIT_FIFOEN+0x350>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006176:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800617a:	429a      	cmp	r2, r3
 800617c:	d242      	bcs.n	8006204 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	3308      	adds	r3, #8
 8006184:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006186:	6a3b      	ldr	r3, [r7, #32]
 8006188:	e853 3f00 	ldrex	r3, [r3]
 800618c:	61fb      	str	r3, [r7, #28]
   return(result);
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006194:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	3308      	adds	r3, #8
 800619e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80061a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80061a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80061a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061aa:	e841 2300 	strex	r3, r2, [r1]
 80061ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80061b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d1e3      	bne.n	800617e <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	4a15      	ldr	r2, [pc, #84]	@ (8006210 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80061ba:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	e853 3f00 	ldrex	r3, [r3]
 80061c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	f043 0320 	orr.w	r3, r3, #32
 80061d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	461a      	mov	r2, r3
 80061da:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80061de:	61bb      	str	r3, [r7, #24]
 80061e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e2:	6979      	ldr	r1, [r7, #20]
 80061e4:	69ba      	ldr	r2, [r7, #24]
 80061e6:	e841 2300 	strex	r3, r2, [r1]
 80061ea:	613b      	str	r3, [r7, #16]
   return(result);
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d1e4      	bne.n	80061bc <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80061f2:	e007      	b.n	8006204 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	699a      	ldr	r2, [r3, #24]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f042 0208 	orr.w	r2, r2, #8
 8006202:	619a      	str	r2, [r3, #24]
}
 8006204:	bf00      	nop
 8006206:	37b0      	adds	r7, #176	@ 0xb0
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}
 800620c:	40008000 	.word	0x40008000
 8006210:	08005b45 	.word	0x08005b45

08006214 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b0ae      	sub	sp, #184	@ 0xb8
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006222:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	69db      	ldr	r3, [r3, #28]
 800622c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800624a:	2b22      	cmp	r3, #34	@ 0x22
 800624c:	f040 8186 	bne.w	800655c <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006256:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800625a:	e129      	b.n	80064b0 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006262:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800626a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800626e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8006272:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8006276:	4013      	ands	r3, r2
 8006278:	b29a      	uxth	r2, r3
 800627a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800627e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006284:	1c9a      	adds	r2, r3, #2
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006290:	b29b      	uxth	r3, r3
 8006292:	3b01      	subs	r3, #1
 8006294:	b29a      	uxth	r2, r3
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	69db      	ldr	r3, [r3, #28]
 80062a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80062a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80062aa:	f003 0307 	and.w	r3, r3, #7
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d053      	beq.n	800635a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80062b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80062b6:	f003 0301 	and.w	r3, r3, #1
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d011      	beq.n	80062e2 <UART_RxISR_16BIT_FIFOEN+0xce>
 80062be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80062c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d00b      	beq.n	80062e2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2201      	movs	r2, #1
 80062d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062d8:	f043 0201 	orr.w	r2, r3, #1
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80062e6:	f003 0302 	and.w	r3, r3, #2
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d011      	beq.n	8006312 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80062ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80062f2:	f003 0301 	and.w	r3, r3, #1
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d00b      	beq.n	8006312 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	2202      	movs	r2, #2
 8006300:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006308:	f043 0204 	orr.w	r2, r3, #4
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006312:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006316:	f003 0304 	and.w	r3, r3, #4
 800631a:	2b00      	cmp	r3, #0
 800631c:	d011      	beq.n	8006342 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800631e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006322:	f003 0301 	and.w	r3, r3, #1
 8006326:	2b00      	cmp	r3, #0
 8006328:	d00b      	beq.n	8006342 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	2204      	movs	r2, #4
 8006330:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006338:	f043 0202 	orr.w	r2, r3, #2
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006348:	2b00      	cmp	r3, #0
 800634a:	d006      	beq.n	800635a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f7fe fd63 	bl	8004e18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006360:	b29b      	uxth	r3, r3
 8006362:	2b00      	cmp	r3, #0
 8006364:	f040 80a4 	bne.w	80064b0 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800636e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006370:	e853 3f00 	ldrex	r3, [r3]
 8006374:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006376:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006378:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800637c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	461a      	mov	r2, r3
 8006386:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800638a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800638e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006390:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006392:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006396:	e841 2300 	strex	r3, r2, [r1]
 800639a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800639c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d1e2      	bne.n	8006368 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	3308      	adds	r3, #8
 80063a8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80063ac:	e853 3f00 	ldrex	r3, [r3]
 80063b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80063b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80063b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80063b8:	f023 0301 	bic.w	r3, r3, #1
 80063bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	3308      	adds	r3, #8
 80063c6:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80063ca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80063cc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ce:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80063d0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80063d2:	e841 2300 	strex	r3, r2, [r1]
 80063d6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80063d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d1e1      	bne.n	80063a2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2220      	movs	r2, #32
 80063e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a5f      	ldr	r2, [pc, #380]	@ (8006574 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d021      	beq.n	8006440 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006406:	2b00      	cmp	r3, #0
 8006408:	d01a      	beq.n	8006440 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006410:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006412:	e853 3f00 	ldrex	r3, [r3]
 8006416:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006418:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800641a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800641e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	461a      	mov	r2, r3
 8006428:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800642c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800642e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006430:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006432:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006434:	e841 2300 	strex	r3, r2, [r1]
 8006438:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800643a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800643c:	2b00      	cmp	r3, #0
 800643e:	d1e4      	bne.n	800640a <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006444:	2b01      	cmp	r3, #1
 8006446:	d130      	bne.n	80064aa <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006456:	e853 3f00 	ldrex	r3, [r3]
 800645a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800645c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800645e:	f023 0310 	bic.w	r3, r3, #16
 8006462:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	461a      	mov	r2, r3
 800646c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006470:	647b      	str	r3, [r7, #68]	@ 0x44
 8006472:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006474:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006476:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006478:	e841 2300 	strex	r3, r2, [r1]
 800647c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800647e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006480:	2b00      	cmp	r3, #0
 8006482:	d1e4      	bne.n	800644e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	69db      	ldr	r3, [r3, #28]
 800648a:	f003 0310 	and.w	r3, r3, #16
 800648e:	2b10      	cmp	r3, #16
 8006490:	d103      	bne.n	800649a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	2210      	movs	r2, #16
 8006498:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80064a0:	4619      	mov	r1, r3
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f7fe fcc2 	bl	8004e2c <HAL_UARTEx_RxEventCallback>
 80064a8:	e002      	b.n	80064b0 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f7fb fad2 	bl	8001a54 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80064b0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d006      	beq.n	80064c6 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 80064b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80064bc:	f003 0320 	and.w	r3, r3, #32
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	f47f aecb 	bne.w	800625c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80064cc:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80064d0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d049      	beq.n	800656c <UART_RxISR_16BIT_FIFOEN+0x358>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80064de:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d242      	bcs.n	800656c <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	3308      	adds	r3, #8
 80064ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f0:	e853 3f00 	ldrex	r3, [r3]
 80064f4:	623b      	str	r3, [r7, #32]
   return(result);
 80064f6:	6a3b      	ldr	r3, [r7, #32]
 80064f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80064fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	3308      	adds	r3, #8
 8006506:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800650a:	633a      	str	r2, [r7, #48]	@ 0x30
 800650c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800650e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006510:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006512:	e841 2300 	strex	r3, r2, [r1]
 8006516:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800651a:	2b00      	cmp	r3, #0
 800651c:	d1e3      	bne.n	80064e6 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4a15      	ldr	r2, [pc, #84]	@ (8006578 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8006522:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	e853 3f00 	ldrex	r3, [r3]
 8006530:	60fb      	str	r3, [r7, #12]
   return(result);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f043 0320 	orr.w	r3, r3, #32
 8006538:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	461a      	mov	r2, r3
 8006542:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006546:	61fb      	str	r3, [r7, #28]
 8006548:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800654a:	69b9      	ldr	r1, [r7, #24]
 800654c:	69fa      	ldr	r2, [r7, #28]
 800654e:	e841 2300 	strex	r3, r2, [r1]
 8006552:	617b      	str	r3, [r7, #20]
   return(result);
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d1e4      	bne.n	8006524 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800655a:	e007      	b.n	800656c <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	699a      	ldr	r2, [r3, #24]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f042 0208 	orr.w	r2, r2, #8
 800656a:	619a      	str	r2, [r3, #24]
}
 800656c:	bf00      	nop
 800656e:	37b8      	adds	r7, #184	@ 0xb8
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}
 8006574:	40008000 	.word	0x40008000
 8006578:	08005cfd 	.word	0x08005cfd

0800657c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006584:	bf00      	nop
 8006586:	370c      	adds	r7, #12
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006590:	b480      	push	{r7}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006598:	bf00      	nop
 800659a:	370c      	adds	r7, #12
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b083      	sub	sp, #12
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80065ac:	bf00      	nop
 80065ae:	370c      	adds	r7, #12
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b085      	sub	sp, #20
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d101      	bne.n	80065ce <HAL_UARTEx_DisableFifoMode+0x16>
 80065ca:	2302      	movs	r3, #2
 80065cc:	e027      	b.n	800661e <HAL_UARTEx_DisableFifoMode+0x66>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2201      	movs	r2, #1
 80065d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2224      	movs	r2, #36	@ 0x24
 80065da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f022 0201 	bic.w	r2, r2, #1
 80065f4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80065fc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2220      	movs	r2, #32
 8006610:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2200      	movs	r2, #0
 8006618:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800661c:	2300      	movs	r3, #0
}
 800661e:	4618      	mov	r0, r3
 8006620:	3714      	adds	r7, #20
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr

0800662a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800662a:	b580      	push	{r7, lr}
 800662c:	b084      	sub	sp, #16
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
 8006632:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800663a:	2b01      	cmp	r3, #1
 800663c:	d101      	bne.n	8006642 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800663e:	2302      	movs	r3, #2
 8006640:	e02d      	b.n	800669e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2201      	movs	r2, #1
 8006646:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2224      	movs	r2, #36	@ 0x24
 800664e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f022 0201 	bic.w	r2, r2, #1
 8006668:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	683a      	ldr	r2, [r7, #0]
 800667a:	430a      	orrs	r2, r1
 800667c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 f850 	bl	8006724 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	68fa      	ldr	r2, [r7, #12]
 800668a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2220      	movs	r2, #32
 8006690:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800669c:	2300      	movs	r3, #0
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3710      	adds	r7, #16
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}

080066a6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80066a6:	b580      	push	{r7, lr}
 80066a8:	b084      	sub	sp, #16
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
 80066ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d101      	bne.n	80066be <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80066ba:	2302      	movs	r3, #2
 80066bc:	e02d      	b.n	800671a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2201      	movs	r2, #1
 80066c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2224      	movs	r2, #36	@ 0x24
 80066ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f022 0201 	bic.w	r2, r2, #1
 80066e4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	683a      	ldr	r2, [r7, #0]
 80066f6:	430a      	orrs	r2, r1
 80066f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 f812 	bl	8006724 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	68fa      	ldr	r2, [r7, #12]
 8006706:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2220      	movs	r2, #32
 800670c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006718:	2300      	movs	r3, #0
}
 800671a:	4618      	mov	r0, r3
 800671c:	3710      	adds	r7, #16
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}
	...

08006724 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006724:	b480      	push	{r7}
 8006726:	b085      	sub	sp, #20
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006730:	2b00      	cmp	r3, #0
 8006732:	d108      	bne.n	8006746 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2201      	movs	r2, #1
 8006738:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2201      	movs	r2, #1
 8006740:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006744:	e031      	b.n	80067aa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006746:	2308      	movs	r3, #8
 8006748:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800674a:	2308      	movs	r3, #8
 800674c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	689b      	ldr	r3, [r3, #8]
 8006754:	0e5b      	lsrs	r3, r3, #25
 8006756:	b2db      	uxtb	r3, r3
 8006758:	f003 0307 	and.w	r3, r3, #7
 800675c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	0f5b      	lsrs	r3, r3, #29
 8006766:	b2db      	uxtb	r3, r3
 8006768:	f003 0307 	and.w	r3, r3, #7
 800676c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800676e:	7bbb      	ldrb	r3, [r7, #14]
 8006770:	7b3a      	ldrb	r2, [r7, #12]
 8006772:	4911      	ldr	r1, [pc, #68]	@ (80067b8 <UARTEx_SetNbDataToProcess+0x94>)
 8006774:	5c8a      	ldrb	r2, [r1, r2]
 8006776:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800677a:	7b3a      	ldrb	r2, [r7, #12]
 800677c:	490f      	ldr	r1, [pc, #60]	@ (80067bc <UARTEx_SetNbDataToProcess+0x98>)
 800677e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006780:	fb93 f3f2 	sdiv	r3, r3, r2
 8006784:	b29a      	uxth	r2, r3
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800678c:	7bfb      	ldrb	r3, [r7, #15]
 800678e:	7b7a      	ldrb	r2, [r7, #13]
 8006790:	4909      	ldr	r1, [pc, #36]	@ (80067b8 <UARTEx_SetNbDataToProcess+0x94>)
 8006792:	5c8a      	ldrb	r2, [r1, r2]
 8006794:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006798:	7b7a      	ldrb	r2, [r7, #13]
 800679a:	4908      	ldr	r1, [pc, #32]	@ (80067bc <UARTEx_SetNbDataToProcess+0x98>)
 800679c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800679e:	fb93 f3f2 	sdiv	r3, r3, r2
 80067a2:	b29a      	uxth	r2, r3
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80067aa:	bf00      	nop
 80067ac:	3714      	adds	r7, #20
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr
 80067b6:	bf00      	nop
 80067b8:	0800cf64 	.word	0x0800cf64
 80067bc:	0800cf6c 	.word	0x0800cf6c

080067c0 <__NVIC_SetPriority>:
{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	4603      	mov	r3, r0
 80067c8:	6039      	str	r1, [r7, #0]
 80067ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80067cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	db0a      	blt.n	80067ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	b2da      	uxtb	r2, r3
 80067d8:	490c      	ldr	r1, [pc, #48]	@ (800680c <__NVIC_SetPriority+0x4c>)
 80067da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067de:	0112      	lsls	r2, r2, #4
 80067e0:	b2d2      	uxtb	r2, r2
 80067e2:	440b      	add	r3, r1
 80067e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80067e8:	e00a      	b.n	8006800 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	b2da      	uxtb	r2, r3
 80067ee:	4908      	ldr	r1, [pc, #32]	@ (8006810 <__NVIC_SetPriority+0x50>)
 80067f0:	79fb      	ldrb	r3, [r7, #7]
 80067f2:	f003 030f 	and.w	r3, r3, #15
 80067f6:	3b04      	subs	r3, #4
 80067f8:	0112      	lsls	r2, r2, #4
 80067fa:	b2d2      	uxtb	r2, r2
 80067fc:	440b      	add	r3, r1
 80067fe:	761a      	strb	r2, [r3, #24]
}
 8006800:	bf00      	nop
 8006802:	370c      	adds	r7, #12
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr
 800680c:	e000e100 	.word	0xe000e100
 8006810:	e000ed00 	.word	0xe000ed00

08006814 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006814:	b580      	push	{r7, lr}
 8006816:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006818:	4b05      	ldr	r3, [pc, #20]	@ (8006830 <SysTick_Handler+0x1c>)
 800681a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800681c:	f002 f968 	bl	8008af0 <xTaskGetSchedulerState>
 8006820:	4603      	mov	r3, r0
 8006822:	2b01      	cmp	r3, #1
 8006824:	d001      	beq.n	800682a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006826:	f003 f85f 	bl	80098e8 <xPortSysTickHandler>
  }
}
 800682a:	bf00      	nop
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop
 8006830:	e000e010 	.word	0xe000e010

08006834 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006834:	b580      	push	{r7, lr}
 8006836:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006838:	2100      	movs	r1, #0
 800683a:	f06f 0004 	mvn.w	r0, #4
 800683e:	f7ff ffbf 	bl	80067c0 <__NVIC_SetPriority>
#endif
}
 8006842:	bf00      	nop
 8006844:	bd80      	pop	{r7, pc}
	...

08006848 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800684e:	f3ef 8305 	mrs	r3, IPSR
 8006852:	603b      	str	r3, [r7, #0]
  return(result);
 8006854:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006856:	2b00      	cmp	r3, #0
 8006858:	d003      	beq.n	8006862 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800685a:	f06f 0305 	mvn.w	r3, #5
 800685e:	607b      	str	r3, [r7, #4]
 8006860:	e00c      	b.n	800687c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006862:	4b0a      	ldr	r3, [pc, #40]	@ (800688c <osKernelInitialize+0x44>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d105      	bne.n	8006876 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800686a:	4b08      	ldr	r3, [pc, #32]	@ (800688c <osKernelInitialize+0x44>)
 800686c:	2201      	movs	r2, #1
 800686e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006870:	2300      	movs	r3, #0
 8006872:	607b      	str	r3, [r7, #4]
 8006874:	e002      	b.n	800687c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006876:	f04f 33ff 	mov.w	r3, #4294967295
 800687a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800687c:	687b      	ldr	r3, [r7, #4]
}
 800687e:	4618      	mov	r0, r3
 8006880:	370c      	adds	r7, #12
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr
 800688a:	bf00      	nop
 800688c:	2000064c 	.word	0x2000064c

08006890 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006890:	b580      	push	{r7, lr}
 8006892:	b082      	sub	sp, #8
 8006894:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006896:	f3ef 8305 	mrs	r3, IPSR
 800689a:	603b      	str	r3, [r7, #0]
  return(result);
 800689c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d003      	beq.n	80068aa <osKernelStart+0x1a>
    stat = osErrorISR;
 80068a2:	f06f 0305 	mvn.w	r3, #5
 80068a6:	607b      	str	r3, [r7, #4]
 80068a8:	e010      	b.n	80068cc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80068aa:	4b0b      	ldr	r3, [pc, #44]	@ (80068d8 <osKernelStart+0x48>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d109      	bne.n	80068c6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80068b2:	f7ff ffbf 	bl	8006834 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80068b6:	4b08      	ldr	r3, [pc, #32]	@ (80068d8 <osKernelStart+0x48>)
 80068b8:	2202      	movs	r2, #2
 80068ba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80068bc:	f001 fcca 	bl	8008254 <vTaskStartScheduler>
      stat = osOK;
 80068c0:	2300      	movs	r3, #0
 80068c2:	607b      	str	r3, [r7, #4]
 80068c4:	e002      	b.n	80068cc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80068c6:	f04f 33ff 	mov.w	r3, #4294967295
 80068ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80068cc:	687b      	ldr	r3, [r7, #4]
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3708      	adds	r7, #8
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	bf00      	nop
 80068d8:	2000064c 	.word	0x2000064c

080068dc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80068dc:	b580      	push	{r7, lr}
 80068de:	b08e      	sub	sp, #56	@ 0x38
 80068e0:	af04      	add	r7, sp, #16
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	60b9      	str	r1, [r7, #8]
 80068e6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80068e8:	2300      	movs	r3, #0
 80068ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068ec:	f3ef 8305 	mrs	r3, IPSR
 80068f0:	617b      	str	r3, [r7, #20]
  return(result);
 80068f2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d17e      	bne.n	80069f6 <osThreadNew+0x11a>
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d07b      	beq.n	80069f6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80068fe:	2380      	movs	r3, #128	@ 0x80
 8006900:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006902:	2318      	movs	r3, #24
 8006904:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006906:	2300      	movs	r3, #0
 8006908:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800690a:	f04f 33ff 	mov.w	r3, #4294967295
 800690e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d045      	beq.n	80069a2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d002      	beq.n	8006924 <osThreadNew+0x48>
        name = attr->name;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	699b      	ldr	r3, [r3, #24]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d002      	beq.n	8006932 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	699b      	ldr	r3, [r3, #24]
 8006930:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006932:	69fb      	ldr	r3, [r7, #28]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d008      	beq.n	800694a <osThreadNew+0x6e>
 8006938:	69fb      	ldr	r3, [r7, #28]
 800693a:	2b38      	cmp	r3, #56	@ 0x38
 800693c:	d805      	bhi.n	800694a <osThreadNew+0x6e>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	f003 0301 	and.w	r3, r3, #1
 8006946:	2b00      	cmp	r3, #0
 8006948:	d001      	beq.n	800694e <osThreadNew+0x72>
        return (NULL);
 800694a:	2300      	movs	r3, #0
 800694c:	e054      	b.n	80069f8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	695b      	ldr	r3, [r3, #20]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d003      	beq.n	800695e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	695b      	ldr	r3, [r3, #20]
 800695a:	089b      	lsrs	r3, r3, #2
 800695c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d00e      	beq.n	8006984 <osThreadNew+0xa8>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	68db      	ldr	r3, [r3, #12]
 800696a:	2b5b      	cmp	r3, #91	@ 0x5b
 800696c:	d90a      	bls.n	8006984 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006972:	2b00      	cmp	r3, #0
 8006974:	d006      	beq.n	8006984 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	695b      	ldr	r3, [r3, #20]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d002      	beq.n	8006984 <osThreadNew+0xa8>
        mem = 1;
 800697e:	2301      	movs	r3, #1
 8006980:	61bb      	str	r3, [r7, #24]
 8006982:	e010      	b.n	80069a6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d10c      	bne.n	80069a6 <osThreadNew+0xca>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d108      	bne.n	80069a6 <osThreadNew+0xca>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	691b      	ldr	r3, [r3, #16]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d104      	bne.n	80069a6 <osThreadNew+0xca>
          mem = 0;
 800699c:	2300      	movs	r3, #0
 800699e:	61bb      	str	r3, [r7, #24]
 80069a0:	e001      	b.n	80069a6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80069a2:	2300      	movs	r3, #0
 80069a4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80069a6:	69bb      	ldr	r3, [r7, #24]
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d110      	bne.n	80069ce <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80069b4:	9202      	str	r2, [sp, #8]
 80069b6:	9301      	str	r3, [sp, #4]
 80069b8:	69fb      	ldr	r3, [r7, #28]
 80069ba:	9300      	str	r3, [sp, #0]
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	6a3a      	ldr	r2, [r7, #32]
 80069c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80069c2:	68f8      	ldr	r0, [r7, #12]
 80069c4:	f001 fa6a 	bl	8007e9c <xTaskCreateStatic>
 80069c8:	4603      	mov	r3, r0
 80069ca:	613b      	str	r3, [r7, #16]
 80069cc:	e013      	b.n	80069f6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80069ce:	69bb      	ldr	r3, [r7, #24]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d110      	bne.n	80069f6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80069d4:	6a3b      	ldr	r3, [r7, #32]
 80069d6:	b29a      	uxth	r2, r3
 80069d8:	f107 0310 	add.w	r3, r7, #16
 80069dc:	9301      	str	r3, [sp, #4]
 80069de:	69fb      	ldr	r3, [r7, #28]
 80069e0:	9300      	str	r3, [sp, #0]
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80069e6:	68f8      	ldr	r0, [r7, #12]
 80069e8:	f001 fab8 	bl	8007f5c <xTaskCreate>
 80069ec:	4603      	mov	r3, r0
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d001      	beq.n	80069f6 <osThreadNew+0x11a>
            hTask = NULL;
 80069f2:	2300      	movs	r3, #0
 80069f4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80069f6:	693b      	ldr	r3, [r7, #16]
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3728      	adds	r7, #40	@ 0x28
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b084      	sub	sp, #16
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a08:	f3ef 8305 	mrs	r3, IPSR
 8006a0c:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a0e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d003      	beq.n	8006a1c <osDelay+0x1c>
    stat = osErrorISR;
 8006a14:	f06f 0305 	mvn.w	r3, #5
 8006a18:	60fb      	str	r3, [r7, #12]
 8006a1a:	e007      	b.n	8006a2c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d002      	beq.n	8006a2c <osDelay+0x2c>
      vTaskDelay(ticks);
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f001 fbde 	bl	80081e8 <vTaskDelay>
    }
  }

  return (stat);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3710      	adds	r7, #16
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}

08006a36 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006a36:	b580      	push	{r7, lr}
 8006a38:	b08a      	sub	sp, #40	@ 0x28
 8006a3a:	af02      	add	r7, sp, #8
 8006a3c:	60f8      	str	r0, [r7, #12]
 8006a3e:	60b9      	str	r1, [r7, #8]
 8006a40:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8006a42:	2300      	movs	r3, #0
 8006a44:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a46:	f3ef 8305 	mrs	r3, IPSR
 8006a4a:	613b      	str	r3, [r7, #16]
  return(result);
 8006a4c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d175      	bne.n	8006b3e <osSemaphoreNew+0x108>
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d072      	beq.n	8006b3e <osSemaphoreNew+0x108>
 8006a58:	68ba      	ldr	r2, [r7, #8]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d86e      	bhi.n	8006b3e <osSemaphoreNew+0x108>
    mem = -1;
 8006a60:	f04f 33ff 	mov.w	r3, #4294967295
 8006a64:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d015      	beq.n	8006a98 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d006      	beq.n	8006a82 <osSemaphoreNew+0x4c>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	2b4f      	cmp	r3, #79	@ 0x4f
 8006a7a:	d902      	bls.n	8006a82 <osSemaphoreNew+0x4c>
        mem = 1;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	61bb      	str	r3, [r7, #24]
 8006a80:	e00c      	b.n	8006a9c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d108      	bne.n	8006a9c <osSemaphoreNew+0x66>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d104      	bne.n	8006a9c <osSemaphoreNew+0x66>
          mem = 0;
 8006a92:	2300      	movs	r3, #0
 8006a94:	61bb      	str	r3, [r7, #24]
 8006a96:	e001      	b.n	8006a9c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8006a9c:	69bb      	ldr	r3, [r7, #24]
 8006a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aa2:	d04c      	beq.n	8006b3e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d128      	bne.n	8006afc <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8006aaa:	69bb      	ldr	r3, [r7, #24]
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d10a      	bne.n	8006ac6 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	2203      	movs	r2, #3
 8006ab6:	9200      	str	r2, [sp, #0]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	2100      	movs	r1, #0
 8006abc:	2001      	movs	r0, #1
 8006abe:	f000 fa2b 	bl	8006f18 <xQueueGenericCreateStatic>
 8006ac2:	61f8      	str	r0, [r7, #28]
 8006ac4:	e005      	b.n	8006ad2 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8006ac6:	2203      	movs	r2, #3
 8006ac8:	2100      	movs	r1, #0
 8006aca:	2001      	movs	r0, #1
 8006acc:	f000 faa1 	bl	8007012 <xQueueGenericCreate>
 8006ad0:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006ad2:	69fb      	ldr	r3, [r7, #28]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d022      	beq.n	8006b1e <osSemaphoreNew+0xe8>
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d01f      	beq.n	8006b1e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006ade:	2300      	movs	r3, #0
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	2100      	movs	r1, #0
 8006ae4:	69f8      	ldr	r0, [r7, #28]
 8006ae6:	f000 fb61 	bl	80071ac <xQueueGenericSend>
 8006aea:	4603      	mov	r3, r0
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d016      	beq.n	8006b1e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8006af0:	69f8      	ldr	r0, [r7, #28]
 8006af2:	f000 ffff 	bl	8007af4 <vQueueDelete>
            hSemaphore = NULL;
 8006af6:	2300      	movs	r3, #0
 8006af8:	61fb      	str	r3, [r7, #28]
 8006afa:	e010      	b.n	8006b1e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8006afc:	69bb      	ldr	r3, [r7, #24]
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d108      	bne.n	8006b14 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	461a      	mov	r2, r3
 8006b08:	68b9      	ldr	r1, [r7, #8]
 8006b0a:	68f8      	ldr	r0, [r7, #12]
 8006b0c:	f000 fadf 	bl	80070ce <xQueueCreateCountingSemaphoreStatic>
 8006b10:	61f8      	str	r0, [r7, #28]
 8006b12:	e004      	b.n	8006b1e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006b14:	68b9      	ldr	r1, [r7, #8]
 8006b16:	68f8      	ldr	r0, [r7, #12]
 8006b18:	f000 fb12 	bl	8007140 <xQueueCreateCountingSemaphore>
 8006b1c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006b1e:	69fb      	ldr	r3, [r7, #28]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d00c      	beq.n	8006b3e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d003      	beq.n	8006b32 <osSemaphoreNew+0xfc>
          name = attr->name;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	617b      	str	r3, [r7, #20]
 8006b30:	e001      	b.n	8006b36 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8006b32:	2300      	movs	r3, #0
 8006b34:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8006b36:	6979      	ldr	r1, [r7, #20]
 8006b38:	69f8      	ldr	r0, [r7, #28]
 8006b3a:	f001 f927 	bl	8007d8c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8006b3e:	69fb      	ldr	r3, [r7, #28]
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3720      	adds	r7, #32
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b086      	sub	sp, #24
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006b56:	2300      	movs	r3, #0
 8006b58:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d103      	bne.n	8006b68 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8006b60:	f06f 0303 	mvn.w	r3, #3
 8006b64:	617b      	str	r3, [r7, #20]
 8006b66:	e039      	b.n	8006bdc <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b68:	f3ef 8305 	mrs	r3, IPSR
 8006b6c:	60fb      	str	r3, [r7, #12]
  return(result);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d022      	beq.n	8006bba <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d003      	beq.n	8006b82 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8006b7a:	f06f 0303 	mvn.w	r3, #3
 8006b7e:	617b      	str	r3, [r7, #20]
 8006b80:	e02c      	b.n	8006bdc <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8006b82:	2300      	movs	r3, #0
 8006b84:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006b86:	f107 0308 	add.w	r3, r7, #8
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	2100      	movs	r1, #0
 8006b8e:	6938      	ldr	r0, [r7, #16]
 8006b90:	f000 ff2e 	bl	80079f0 <xQueueReceiveFromISR>
 8006b94:	4603      	mov	r3, r0
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d003      	beq.n	8006ba2 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8006b9a:	f06f 0302 	mvn.w	r3, #2
 8006b9e:	617b      	str	r3, [r7, #20]
 8006ba0:	e01c      	b.n	8006bdc <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d019      	beq.n	8006bdc <osSemaphoreAcquire+0x94>
 8006ba8:	4b0f      	ldr	r3, [pc, #60]	@ (8006be8 <osSemaphoreAcquire+0xa0>)
 8006baa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bae:	601a      	str	r2, [r3, #0]
 8006bb0:	f3bf 8f4f 	dsb	sy
 8006bb4:	f3bf 8f6f 	isb	sy
 8006bb8:	e010      	b.n	8006bdc <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8006bba:	6839      	ldr	r1, [r7, #0]
 8006bbc:	6938      	ldr	r0, [r7, #16]
 8006bbe:	f000 fe07 	bl	80077d0 <xQueueSemaphoreTake>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d009      	beq.n	8006bdc <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d003      	beq.n	8006bd6 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8006bce:	f06f 0301 	mvn.w	r3, #1
 8006bd2:	617b      	str	r3, [r7, #20]
 8006bd4:	e002      	b.n	8006bdc <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8006bd6:	f06f 0302 	mvn.w	r3, #2
 8006bda:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006bdc:	697b      	ldr	r3, [r7, #20]
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3718      	adds	r7, #24
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
 8006be6:	bf00      	nop
 8006be8:	e000ed04 	.word	0xe000ed04

08006bec <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b086      	sub	sp, #24
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d103      	bne.n	8006c0a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8006c02:	f06f 0303 	mvn.w	r3, #3
 8006c06:	617b      	str	r3, [r7, #20]
 8006c08:	e02c      	b.n	8006c64 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c0a:	f3ef 8305 	mrs	r3, IPSR
 8006c0e:	60fb      	str	r3, [r7, #12]
  return(result);
 8006c10:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d01a      	beq.n	8006c4c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8006c16:	2300      	movs	r3, #0
 8006c18:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006c1a:	f107 0308 	add.w	r3, r7, #8
 8006c1e:	4619      	mov	r1, r3
 8006c20:	6938      	ldr	r0, [r7, #16]
 8006c22:	f000 fc63 	bl	80074ec <xQueueGiveFromISR>
 8006c26:	4603      	mov	r3, r0
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d003      	beq.n	8006c34 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8006c2c:	f06f 0302 	mvn.w	r3, #2
 8006c30:	617b      	str	r3, [r7, #20]
 8006c32:	e017      	b.n	8006c64 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d014      	beq.n	8006c64 <osSemaphoreRelease+0x78>
 8006c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8006c70 <osSemaphoreRelease+0x84>)
 8006c3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c40:	601a      	str	r2, [r3, #0]
 8006c42:	f3bf 8f4f 	dsb	sy
 8006c46:	f3bf 8f6f 	isb	sy
 8006c4a:	e00b      	b.n	8006c64 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	2200      	movs	r2, #0
 8006c50:	2100      	movs	r1, #0
 8006c52:	6938      	ldr	r0, [r7, #16]
 8006c54:	f000 faaa 	bl	80071ac <xQueueGenericSend>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d002      	beq.n	8006c64 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8006c5e:	f06f 0302 	mvn.w	r3, #2
 8006c62:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8006c64:	697b      	ldr	r3, [r7, #20]
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3718      	adds	r7, #24
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
 8006c6e:	bf00      	nop
 8006c70:	e000ed04 	.word	0xe000ed04

08006c74 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006c74:	b480      	push	{r7}
 8006c76:	b085      	sub	sp, #20
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	60f8      	str	r0, [r7, #12]
 8006c7c:	60b9      	str	r1, [r7, #8]
 8006c7e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	4a07      	ldr	r2, [pc, #28]	@ (8006ca0 <vApplicationGetIdleTaskMemory+0x2c>)
 8006c84:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	4a06      	ldr	r2, [pc, #24]	@ (8006ca4 <vApplicationGetIdleTaskMemory+0x30>)
 8006c8a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2280      	movs	r2, #128	@ 0x80
 8006c90:	601a      	str	r2, [r3, #0]
}
 8006c92:	bf00      	nop
 8006c94:	3714      	adds	r7, #20
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr
 8006c9e:	bf00      	nop
 8006ca0:	20000650 	.word	0x20000650
 8006ca4:	200006ac 	.word	0x200006ac

08006ca8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006ca8:	b480      	push	{r7}
 8006caa:	b085      	sub	sp, #20
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	60f8      	str	r0, [r7, #12]
 8006cb0:	60b9      	str	r1, [r7, #8]
 8006cb2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	4a07      	ldr	r2, [pc, #28]	@ (8006cd4 <vApplicationGetTimerTaskMemory+0x2c>)
 8006cb8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	4a06      	ldr	r2, [pc, #24]	@ (8006cd8 <vApplicationGetTimerTaskMemory+0x30>)
 8006cbe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006cc6:	601a      	str	r2, [r3, #0]
}
 8006cc8:	bf00      	nop
 8006cca:	3714      	adds	r7, #20
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr
 8006cd4:	200008ac 	.word	0x200008ac
 8006cd8:	20000908 	.word	0x20000908

08006cdc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b083      	sub	sp, #12
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f103 0208 	add.w	r2, r3, #8
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8006cf4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f103 0208 	add.w	r2, r3, #8
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f103 0208 	add.w	r2, r3, #8
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006d10:	bf00      	nop
 8006d12:	370c      	adds	r7, #12
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006d2a:	bf00      	nop
 8006d2c:	370c      	adds	r7, #12
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr

08006d36 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d36:	b480      	push	{r7}
 8006d38:	b085      	sub	sp, #20
 8006d3a:	af00      	add	r7, sp, #0
 8006d3c:	6078      	str	r0, [r7, #4]
 8006d3e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	68fa      	ldr	r2, [r7, #12]
 8006d4a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	689a      	ldr	r2, [r3, #8]
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	683a      	ldr	r2, [r7, #0]
 8006d5a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	683a      	ldr	r2, [r7, #0]
 8006d60:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	687a      	ldr	r2, [r7, #4]
 8006d66:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	1c5a      	adds	r2, r3, #1
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	601a      	str	r2, [r3, #0]
}
 8006d72:	bf00      	nop
 8006d74:	3714      	adds	r7, #20
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr

08006d7e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d7e:	b480      	push	{r7}
 8006d80:	b085      	sub	sp, #20
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	6078      	str	r0, [r7, #4]
 8006d86:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d94:	d103      	bne.n	8006d9e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	691b      	ldr	r3, [r3, #16]
 8006d9a:	60fb      	str	r3, [r7, #12]
 8006d9c:	e00c      	b.n	8006db8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	3308      	adds	r3, #8
 8006da2:	60fb      	str	r3, [r7, #12]
 8006da4:	e002      	b.n	8006dac <vListInsert+0x2e>
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	60fb      	str	r3, [r7, #12]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	68ba      	ldr	r2, [r7, #8]
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d2f6      	bcs.n	8006da6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	685a      	ldr	r2, [r3, #4]
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	683a      	ldr	r2, [r7, #0]
 8006dc6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	68fa      	ldr	r2, [r7, #12]
 8006dcc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	683a      	ldr	r2, [r7, #0]
 8006dd2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	1c5a      	adds	r2, r3, #1
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	601a      	str	r2, [r3, #0]
}
 8006de4:	bf00      	nop
 8006de6:	3714      	adds	r7, #20
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr

08006df0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006df0:	b480      	push	{r7}
 8006df2:	b085      	sub	sp, #20
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	691b      	ldr	r3, [r3, #16]
 8006dfc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	6892      	ldr	r2, [r2, #8]
 8006e06:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	6852      	ldr	r2, [r2, #4]
 8006e10:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d103      	bne.n	8006e24 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	689a      	ldr	r2, [r3, #8]
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	1e5a      	subs	r2, r3, #1
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3714      	adds	r7, #20
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d10b      	bne.n	8006e70 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006e58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e5c:	f383 8811 	msr	BASEPRI, r3
 8006e60:	f3bf 8f6f 	isb	sy
 8006e64:	f3bf 8f4f 	dsb	sy
 8006e68:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006e6a:	bf00      	nop
 8006e6c:	bf00      	nop
 8006e6e:	e7fd      	b.n	8006e6c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006e70:	f002 fcaa 	bl	80097c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e7c:	68f9      	ldr	r1, [r7, #12]
 8006e7e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006e80:	fb01 f303 	mul.w	r3, r1, r3
 8006e84:	441a      	add	r2, r3
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ea0:	3b01      	subs	r3, #1
 8006ea2:	68f9      	ldr	r1, [r7, #12]
 8006ea4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006ea6:	fb01 f303 	mul.w	r3, r1, r3
 8006eaa:	441a      	add	r2, r3
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	22ff      	movs	r2, #255	@ 0xff
 8006eb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	22ff      	movs	r2, #255	@ 0xff
 8006ebc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d114      	bne.n	8006ef0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	691b      	ldr	r3, [r3, #16]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d01a      	beq.n	8006f04 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	3310      	adds	r3, #16
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f001 fc4c 	bl	8008770 <xTaskRemoveFromEventList>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d012      	beq.n	8006f04 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006ede:	4b0d      	ldr	r3, [pc, #52]	@ (8006f14 <xQueueGenericReset+0xd0>)
 8006ee0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ee4:	601a      	str	r2, [r3, #0]
 8006ee6:	f3bf 8f4f 	dsb	sy
 8006eea:	f3bf 8f6f 	isb	sy
 8006eee:	e009      	b.n	8006f04 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	3310      	adds	r3, #16
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f7ff fef1 	bl	8006cdc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	3324      	adds	r3, #36	@ 0x24
 8006efe:	4618      	mov	r0, r3
 8006f00:	f7ff feec 	bl	8006cdc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006f04:	f002 fc92 	bl	800982c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006f08:	2301      	movs	r3, #1
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3710      	adds	r7, #16
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}
 8006f12:	bf00      	nop
 8006f14:	e000ed04 	.word	0xe000ed04

08006f18 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b08e      	sub	sp, #56	@ 0x38
 8006f1c:	af02      	add	r7, sp, #8
 8006f1e:	60f8      	str	r0, [r7, #12]
 8006f20:	60b9      	str	r1, [r7, #8]
 8006f22:	607a      	str	r2, [r7, #4]
 8006f24:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d10b      	bne.n	8006f44 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006f2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f30:	f383 8811 	msr	BASEPRI, r3
 8006f34:	f3bf 8f6f 	isb	sy
 8006f38:	f3bf 8f4f 	dsb	sy
 8006f3c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006f3e:	bf00      	nop
 8006f40:	bf00      	nop
 8006f42:	e7fd      	b.n	8006f40 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d10b      	bne.n	8006f62 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006f4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f4e:	f383 8811 	msr	BASEPRI, r3
 8006f52:	f3bf 8f6f 	isb	sy
 8006f56:	f3bf 8f4f 	dsb	sy
 8006f5a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006f5c:	bf00      	nop
 8006f5e:	bf00      	nop
 8006f60:	e7fd      	b.n	8006f5e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d002      	beq.n	8006f6e <xQueueGenericCreateStatic+0x56>
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d001      	beq.n	8006f72 <xQueueGenericCreateStatic+0x5a>
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e000      	b.n	8006f74 <xQueueGenericCreateStatic+0x5c>
 8006f72:	2300      	movs	r3, #0
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d10b      	bne.n	8006f90 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006f78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f7c:	f383 8811 	msr	BASEPRI, r3
 8006f80:	f3bf 8f6f 	isb	sy
 8006f84:	f3bf 8f4f 	dsb	sy
 8006f88:	623b      	str	r3, [r7, #32]
}
 8006f8a:	bf00      	nop
 8006f8c:	bf00      	nop
 8006f8e:	e7fd      	b.n	8006f8c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d102      	bne.n	8006f9c <xQueueGenericCreateStatic+0x84>
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d101      	bne.n	8006fa0 <xQueueGenericCreateStatic+0x88>
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	e000      	b.n	8006fa2 <xQueueGenericCreateStatic+0x8a>
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d10b      	bne.n	8006fbe <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006faa:	f383 8811 	msr	BASEPRI, r3
 8006fae:	f3bf 8f6f 	isb	sy
 8006fb2:	f3bf 8f4f 	dsb	sy
 8006fb6:	61fb      	str	r3, [r7, #28]
}
 8006fb8:	bf00      	nop
 8006fba:	bf00      	nop
 8006fbc:	e7fd      	b.n	8006fba <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006fbe:	2350      	movs	r3, #80	@ 0x50
 8006fc0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	2b50      	cmp	r3, #80	@ 0x50
 8006fc6:	d00b      	beq.n	8006fe0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006fc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fcc:	f383 8811 	msr	BASEPRI, r3
 8006fd0:	f3bf 8f6f 	isb	sy
 8006fd4:	f3bf 8f4f 	dsb	sy
 8006fd8:	61bb      	str	r3, [r7, #24]
}
 8006fda:	bf00      	nop
 8006fdc:	bf00      	nop
 8006fde:	e7fd      	b.n	8006fdc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006fe0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006fe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d00d      	beq.n	8007008 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006fec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fee:	2201      	movs	r2, #1
 8006ff0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006ff4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006ff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ffa:	9300      	str	r3, [sp, #0]
 8006ffc:	4613      	mov	r3, r2
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	68b9      	ldr	r1, [r7, #8]
 8007002:	68f8      	ldr	r0, [r7, #12]
 8007004:	f000 f840 	bl	8007088 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800700a:	4618      	mov	r0, r3
 800700c:	3730      	adds	r7, #48	@ 0x30
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}

08007012 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007012:	b580      	push	{r7, lr}
 8007014:	b08a      	sub	sp, #40	@ 0x28
 8007016:	af02      	add	r7, sp, #8
 8007018:	60f8      	str	r0, [r7, #12]
 800701a:	60b9      	str	r1, [r7, #8]
 800701c:	4613      	mov	r3, r2
 800701e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d10b      	bne.n	800703e <xQueueGenericCreate+0x2c>
	__asm volatile
 8007026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800702a:	f383 8811 	msr	BASEPRI, r3
 800702e:	f3bf 8f6f 	isb	sy
 8007032:	f3bf 8f4f 	dsb	sy
 8007036:	613b      	str	r3, [r7, #16]
}
 8007038:	bf00      	nop
 800703a:	bf00      	nop
 800703c:	e7fd      	b.n	800703a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	68ba      	ldr	r2, [r7, #8]
 8007042:	fb02 f303 	mul.w	r3, r2, r3
 8007046:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007048:	69fb      	ldr	r3, [r7, #28]
 800704a:	3350      	adds	r3, #80	@ 0x50
 800704c:	4618      	mov	r0, r3
 800704e:	f002 fcdd 	bl	8009a0c <pvPortMalloc>
 8007052:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007054:	69bb      	ldr	r3, [r7, #24]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d011      	beq.n	800707e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800705a:	69bb      	ldr	r3, [r7, #24]
 800705c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	3350      	adds	r3, #80	@ 0x50
 8007062:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007064:	69bb      	ldr	r3, [r7, #24]
 8007066:	2200      	movs	r2, #0
 8007068:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800706c:	79fa      	ldrb	r2, [r7, #7]
 800706e:	69bb      	ldr	r3, [r7, #24]
 8007070:	9300      	str	r3, [sp, #0]
 8007072:	4613      	mov	r3, r2
 8007074:	697a      	ldr	r2, [r7, #20]
 8007076:	68b9      	ldr	r1, [r7, #8]
 8007078:	68f8      	ldr	r0, [r7, #12]
 800707a:	f000 f805 	bl	8007088 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800707e:	69bb      	ldr	r3, [r7, #24]
	}
 8007080:	4618      	mov	r0, r3
 8007082:	3720      	adds	r7, #32
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}

08007088 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b084      	sub	sp, #16
 800708c:	af00      	add	r7, sp, #0
 800708e:	60f8      	str	r0, [r7, #12]
 8007090:	60b9      	str	r1, [r7, #8]
 8007092:	607a      	str	r2, [r7, #4]
 8007094:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d103      	bne.n	80070a4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800709c:	69bb      	ldr	r3, [r7, #24]
 800709e:	69ba      	ldr	r2, [r7, #24]
 80070a0:	601a      	str	r2, [r3, #0]
 80070a2:	e002      	b.n	80070aa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80070a4:	69bb      	ldr	r3, [r7, #24]
 80070a6:	687a      	ldr	r2, [r7, #4]
 80070a8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80070aa:	69bb      	ldr	r3, [r7, #24]
 80070ac:	68fa      	ldr	r2, [r7, #12]
 80070ae:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80070b0:	69bb      	ldr	r3, [r7, #24]
 80070b2:	68ba      	ldr	r2, [r7, #8]
 80070b4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80070b6:	2101      	movs	r1, #1
 80070b8:	69b8      	ldr	r0, [r7, #24]
 80070ba:	f7ff fec3 	bl	8006e44 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80070be:	69bb      	ldr	r3, [r7, #24]
 80070c0:	78fa      	ldrb	r2, [r7, #3]
 80070c2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80070c6:	bf00      	nop
 80070c8:	3710      	adds	r7, #16
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}

080070ce <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80070ce:	b580      	push	{r7, lr}
 80070d0:	b08a      	sub	sp, #40	@ 0x28
 80070d2:	af02      	add	r7, sp, #8
 80070d4:	60f8      	str	r0, [r7, #12]
 80070d6:	60b9      	str	r1, [r7, #8]
 80070d8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d10b      	bne.n	80070f8 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 80070e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070e4:	f383 8811 	msr	BASEPRI, r3
 80070e8:	f3bf 8f6f 	isb	sy
 80070ec:	f3bf 8f4f 	dsb	sy
 80070f0:	61bb      	str	r3, [r7, #24]
}
 80070f2:	bf00      	nop
 80070f4:	bf00      	nop
 80070f6:	e7fd      	b.n	80070f4 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80070f8:	68ba      	ldr	r2, [r7, #8]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d90b      	bls.n	8007118 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8007100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007104:	f383 8811 	msr	BASEPRI, r3
 8007108:	f3bf 8f6f 	isb	sy
 800710c:	f3bf 8f4f 	dsb	sy
 8007110:	617b      	str	r3, [r7, #20]
}
 8007112:	bf00      	nop
 8007114:	bf00      	nop
 8007116:	e7fd      	b.n	8007114 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007118:	2302      	movs	r3, #2
 800711a:	9300      	str	r3, [sp, #0]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	2100      	movs	r1, #0
 8007122:	68f8      	ldr	r0, [r7, #12]
 8007124:	f7ff fef8 	bl	8006f18 <xQueueGenericCreateStatic>
 8007128:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800712a:	69fb      	ldr	r3, [r7, #28]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d002      	beq.n	8007136 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	68ba      	ldr	r2, [r7, #8]
 8007134:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007136:	69fb      	ldr	r3, [r7, #28]
	}
 8007138:	4618      	mov	r0, r3
 800713a:	3720      	adds	r7, #32
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}

08007140 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007140:	b580      	push	{r7, lr}
 8007142:	b086      	sub	sp, #24
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d10b      	bne.n	8007168 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8007150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007154:	f383 8811 	msr	BASEPRI, r3
 8007158:	f3bf 8f6f 	isb	sy
 800715c:	f3bf 8f4f 	dsb	sy
 8007160:	613b      	str	r3, [r7, #16]
}
 8007162:	bf00      	nop
 8007164:	bf00      	nop
 8007166:	e7fd      	b.n	8007164 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007168:	683a      	ldr	r2, [r7, #0]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	429a      	cmp	r2, r3
 800716e:	d90b      	bls.n	8007188 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8007170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007174:	f383 8811 	msr	BASEPRI, r3
 8007178:	f3bf 8f6f 	isb	sy
 800717c:	f3bf 8f4f 	dsb	sy
 8007180:	60fb      	str	r3, [r7, #12]
}
 8007182:	bf00      	nop
 8007184:	bf00      	nop
 8007186:	e7fd      	b.n	8007184 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007188:	2202      	movs	r2, #2
 800718a:	2100      	movs	r1, #0
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f7ff ff40 	bl	8007012 <xQueueGenericCreate>
 8007192:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d002      	beq.n	80071a0 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	683a      	ldr	r2, [r7, #0]
 800719e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80071a0:	697b      	ldr	r3, [r7, #20]
	}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3718      	adds	r7, #24
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
	...

080071ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b08e      	sub	sp, #56	@ 0x38
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	60f8      	str	r0, [r7, #12]
 80071b4:	60b9      	str	r1, [r7, #8]
 80071b6:	607a      	str	r2, [r7, #4]
 80071b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80071ba:	2300      	movs	r3, #0
 80071bc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80071c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d10b      	bne.n	80071e0 <xQueueGenericSend+0x34>
	__asm volatile
 80071c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071cc:	f383 8811 	msr	BASEPRI, r3
 80071d0:	f3bf 8f6f 	isb	sy
 80071d4:	f3bf 8f4f 	dsb	sy
 80071d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80071da:	bf00      	nop
 80071dc:	bf00      	nop
 80071de:	e7fd      	b.n	80071dc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d103      	bne.n	80071ee <xQueueGenericSend+0x42>
 80071e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d101      	bne.n	80071f2 <xQueueGenericSend+0x46>
 80071ee:	2301      	movs	r3, #1
 80071f0:	e000      	b.n	80071f4 <xQueueGenericSend+0x48>
 80071f2:	2300      	movs	r3, #0
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d10b      	bne.n	8007210 <xQueueGenericSend+0x64>
	__asm volatile
 80071f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071fc:	f383 8811 	msr	BASEPRI, r3
 8007200:	f3bf 8f6f 	isb	sy
 8007204:	f3bf 8f4f 	dsb	sy
 8007208:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800720a:	bf00      	nop
 800720c:	bf00      	nop
 800720e:	e7fd      	b.n	800720c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	2b02      	cmp	r3, #2
 8007214:	d103      	bne.n	800721e <xQueueGenericSend+0x72>
 8007216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007218:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800721a:	2b01      	cmp	r3, #1
 800721c:	d101      	bne.n	8007222 <xQueueGenericSend+0x76>
 800721e:	2301      	movs	r3, #1
 8007220:	e000      	b.n	8007224 <xQueueGenericSend+0x78>
 8007222:	2300      	movs	r3, #0
 8007224:	2b00      	cmp	r3, #0
 8007226:	d10b      	bne.n	8007240 <xQueueGenericSend+0x94>
	__asm volatile
 8007228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800722c:	f383 8811 	msr	BASEPRI, r3
 8007230:	f3bf 8f6f 	isb	sy
 8007234:	f3bf 8f4f 	dsb	sy
 8007238:	623b      	str	r3, [r7, #32]
}
 800723a:	bf00      	nop
 800723c:	bf00      	nop
 800723e:	e7fd      	b.n	800723c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007240:	f001 fc56 	bl	8008af0 <xTaskGetSchedulerState>
 8007244:	4603      	mov	r3, r0
 8007246:	2b00      	cmp	r3, #0
 8007248:	d102      	bne.n	8007250 <xQueueGenericSend+0xa4>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d101      	bne.n	8007254 <xQueueGenericSend+0xa8>
 8007250:	2301      	movs	r3, #1
 8007252:	e000      	b.n	8007256 <xQueueGenericSend+0xaa>
 8007254:	2300      	movs	r3, #0
 8007256:	2b00      	cmp	r3, #0
 8007258:	d10b      	bne.n	8007272 <xQueueGenericSend+0xc6>
	__asm volatile
 800725a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800725e:	f383 8811 	msr	BASEPRI, r3
 8007262:	f3bf 8f6f 	isb	sy
 8007266:	f3bf 8f4f 	dsb	sy
 800726a:	61fb      	str	r3, [r7, #28]
}
 800726c:	bf00      	nop
 800726e:	bf00      	nop
 8007270:	e7fd      	b.n	800726e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007272:	f002 faa9 	bl	80097c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007278:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800727a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800727c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800727e:	429a      	cmp	r2, r3
 8007280:	d302      	bcc.n	8007288 <xQueueGenericSend+0xdc>
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	2b02      	cmp	r3, #2
 8007286:	d129      	bne.n	80072dc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007288:	683a      	ldr	r2, [r7, #0]
 800728a:	68b9      	ldr	r1, [r7, #8]
 800728c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800728e:	f000 fc6d 	bl	8007b6c <prvCopyDataToQueue>
 8007292:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007298:	2b00      	cmp	r3, #0
 800729a:	d010      	beq.n	80072be <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800729c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800729e:	3324      	adds	r3, #36	@ 0x24
 80072a0:	4618      	mov	r0, r3
 80072a2:	f001 fa65 	bl	8008770 <xTaskRemoveFromEventList>
 80072a6:	4603      	mov	r3, r0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d013      	beq.n	80072d4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80072ac:	4b3f      	ldr	r3, [pc, #252]	@ (80073ac <xQueueGenericSend+0x200>)
 80072ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072b2:	601a      	str	r2, [r3, #0]
 80072b4:	f3bf 8f4f 	dsb	sy
 80072b8:	f3bf 8f6f 	isb	sy
 80072bc:	e00a      	b.n	80072d4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80072be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d007      	beq.n	80072d4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80072c4:	4b39      	ldr	r3, [pc, #228]	@ (80073ac <xQueueGenericSend+0x200>)
 80072c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072ca:	601a      	str	r2, [r3, #0]
 80072cc:	f3bf 8f4f 	dsb	sy
 80072d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80072d4:	f002 faaa 	bl	800982c <vPortExitCritical>
				return pdPASS;
 80072d8:	2301      	movs	r3, #1
 80072da:	e063      	b.n	80073a4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d103      	bne.n	80072ea <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80072e2:	f002 faa3 	bl	800982c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80072e6:	2300      	movs	r3, #0
 80072e8:	e05c      	b.n	80073a4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80072ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d106      	bne.n	80072fe <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80072f0:	f107 0314 	add.w	r3, r7, #20
 80072f4:	4618      	mov	r0, r3
 80072f6:	f001 fa9f 	bl	8008838 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80072fa:	2301      	movs	r3, #1
 80072fc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80072fe:	f002 fa95 	bl	800982c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007302:	f001 f80f 	bl	8008324 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007306:	f002 fa5f 	bl	80097c8 <vPortEnterCritical>
 800730a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800730c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007310:	b25b      	sxtb	r3, r3
 8007312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007316:	d103      	bne.n	8007320 <xQueueGenericSend+0x174>
 8007318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800731a:	2200      	movs	r2, #0
 800731c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007322:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007326:	b25b      	sxtb	r3, r3
 8007328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800732c:	d103      	bne.n	8007336 <xQueueGenericSend+0x18a>
 800732e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007330:	2200      	movs	r2, #0
 8007332:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007336:	f002 fa79 	bl	800982c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800733a:	1d3a      	adds	r2, r7, #4
 800733c:	f107 0314 	add.w	r3, r7, #20
 8007340:	4611      	mov	r1, r2
 8007342:	4618      	mov	r0, r3
 8007344:	f001 fa8e 	bl	8008864 <xTaskCheckForTimeOut>
 8007348:	4603      	mov	r3, r0
 800734a:	2b00      	cmp	r3, #0
 800734c:	d124      	bne.n	8007398 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800734e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007350:	f000 fd04 	bl	8007d5c <prvIsQueueFull>
 8007354:	4603      	mov	r3, r0
 8007356:	2b00      	cmp	r3, #0
 8007358:	d018      	beq.n	800738c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800735a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800735c:	3310      	adds	r3, #16
 800735e:	687a      	ldr	r2, [r7, #4]
 8007360:	4611      	mov	r1, r2
 8007362:	4618      	mov	r0, r3
 8007364:	f001 f9b2 	bl	80086cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007368:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800736a:	f000 fc8f 	bl	8007c8c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800736e:	f000 ffe7 	bl	8008340 <xTaskResumeAll>
 8007372:	4603      	mov	r3, r0
 8007374:	2b00      	cmp	r3, #0
 8007376:	f47f af7c 	bne.w	8007272 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800737a:	4b0c      	ldr	r3, [pc, #48]	@ (80073ac <xQueueGenericSend+0x200>)
 800737c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007380:	601a      	str	r2, [r3, #0]
 8007382:	f3bf 8f4f 	dsb	sy
 8007386:	f3bf 8f6f 	isb	sy
 800738a:	e772      	b.n	8007272 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800738c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800738e:	f000 fc7d 	bl	8007c8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007392:	f000 ffd5 	bl	8008340 <xTaskResumeAll>
 8007396:	e76c      	b.n	8007272 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007398:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800739a:	f000 fc77 	bl	8007c8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800739e:	f000 ffcf 	bl	8008340 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80073a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3738      	adds	r7, #56	@ 0x38
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}
 80073ac:	e000ed04 	.word	0xe000ed04

080073b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b090      	sub	sp, #64	@ 0x40
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	60b9      	str	r1, [r7, #8]
 80073ba:	607a      	str	r2, [r7, #4]
 80073bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80073c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d10b      	bne.n	80073e0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80073c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073cc:	f383 8811 	msr	BASEPRI, r3
 80073d0:	f3bf 8f6f 	isb	sy
 80073d4:	f3bf 8f4f 	dsb	sy
 80073d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80073da:	bf00      	nop
 80073dc:	bf00      	nop
 80073de:	e7fd      	b.n	80073dc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d103      	bne.n	80073ee <xQueueGenericSendFromISR+0x3e>
 80073e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d101      	bne.n	80073f2 <xQueueGenericSendFromISR+0x42>
 80073ee:	2301      	movs	r3, #1
 80073f0:	e000      	b.n	80073f4 <xQueueGenericSendFromISR+0x44>
 80073f2:	2300      	movs	r3, #0
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d10b      	bne.n	8007410 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80073f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073fc:	f383 8811 	msr	BASEPRI, r3
 8007400:	f3bf 8f6f 	isb	sy
 8007404:	f3bf 8f4f 	dsb	sy
 8007408:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800740a:	bf00      	nop
 800740c:	bf00      	nop
 800740e:	e7fd      	b.n	800740c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	2b02      	cmp	r3, #2
 8007414:	d103      	bne.n	800741e <xQueueGenericSendFromISR+0x6e>
 8007416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007418:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800741a:	2b01      	cmp	r3, #1
 800741c:	d101      	bne.n	8007422 <xQueueGenericSendFromISR+0x72>
 800741e:	2301      	movs	r3, #1
 8007420:	e000      	b.n	8007424 <xQueueGenericSendFromISR+0x74>
 8007422:	2300      	movs	r3, #0
 8007424:	2b00      	cmp	r3, #0
 8007426:	d10b      	bne.n	8007440 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800742c:	f383 8811 	msr	BASEPRI, r3
 8007430:	f3bf 8f6f 	isb	sy
 8007434:	f3bf 8f4f 	dsb	sy
 8007438:	623b      	str	r3, [r7, #32]
}
 800743a:	bf00      	nop
 800743c:	bf00      	nop
 800743e:	e7fd      	b.n	800743c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007440:	f002 faa2 	bl	8009988 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007444:	f3ef 8211 	mrs	r2, BASEPRI
 8007448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800744c:	f383 8811 	msr	BASEPRI, r3
 8007450:	f3bf 8f6f 	isb	sy
 8007454:	f3bf 8f4f 	dsb	sy
 8007458:	61fa      	str	r2, [r7, #28]
 800745a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800745c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800745e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007462:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007466:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007468:	429a      	cmp	r2, r3
 800746a:	d302      	bcc.n	8007472 <xQueueGenericSendFromISR+0xc2>
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	2b02      	cmp	r3, #2
 8007470:	d12f      	bne.n	80074d2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007474:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007478:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800747c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800747e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007480:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007482:	683a      	ldr	r2, [r7, #0]
 8007484:	68b9      	ldr	r1, [r7, #8]
 8007486:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007488:	f000 fb70 	bl	8007b6c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800748c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007494:	d112      	bne.n	80074bc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800749a:	2b00      	cmp	r3, #0
 800749c:	d016      	beq.n	80074cc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800749e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074a0:	3324      	adds	r3, #36	@ 0x24
 80074a2:	4618      	mov	r0, r3
 80074a4:	f001 f964 	bl	8008770 <xTaskRemoveFromEventList>
 80074a8:	4603      	mov	r3, r0
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d00e      	beq.n	80074cc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d00b      	beq.n	80074cc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2201      	movs	r2, #1
 80074b8:	601a      	str	r2, [r3, #0]
 80074ba:	e007      	b.n	80074cc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80074bc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80074c0:	3301      	adds	r3, #1
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	b25a      	sxtb	r2, r3
 80074c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80074cc:	2301      	movs	r3, #1
 80074ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80074d0:	e001      	b.n	80074d6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80074d2:	2300      	movs	r3, #0
 80074d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80074d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074d8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80074e0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80074e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3740      	adds	r7, #64	@ 0x40
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}

080074ec <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b08e      	sub	sp, #56	@ 0x38
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80074fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d10b      	bne.n	8007518 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8007500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007504:	f383 8811 	msr	BASEPRI, r3
 8007508:	f3bf 8f6f 	isb	sy
 800750c:	f3bf 8f4f 	dsb	sy
 8007510:	623b      	str	r3, [r7, #32]
}
 8007512:	bf00      	nop
 8007514:	bf00      	nop
 8007516:	e7fd      	b.n	8007514 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800751a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800751c:	2b00      	cmp	r3, #0
 800751e:	d00b      	beq.n	8007538 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8007520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007524:	f383 8811 	msr	BASEPRI, r3
 8007528:	f3bf 8f6f 	isb	sy
 800752c:	f3bf 8f4f 	dsb	sy
 8007530:	61fb      	str	r3, [r7, #28]
}
 8007532:	bf00      	nop
 8007534:	bf00      	nop
 8007536:	e7fd      	b.n	8007534 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d103      	bne.n	8007548 <xQueueGiveFromISR+0x5c>
 8007540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d101      	bne.n	800754c <xQueueGiveFromISR+0x60>
 8007548:	2301      	movs	r3, #1
 800754a:	e000      	b.n	800754e <xQueueGiveFromISR+0x62>
 800754c:	2300      	movs	r3, #0
 800754e:	2b00      	cmp	r3, #0
 8007550:	d10b      	bne.n	800756a <xQueueGiveFromISR+0x7e>
	__asm volatile
 8007552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007556:	f383 8811 	msr	BASEPRI, r3
 800755a:	f3bf 8f6f 	isb	sy
 800755e:	f3bf 8f4f 	dsb	sy
 8007562:	61bb      	str	r3, [r7, #24]
}
 8007564:	bf00      	nop
 8007566:	bf00      	nop
 8007568:	e7fd      	b.n	8007566 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800756a:	f002 fa0d 	bl	8009988 <vPortValidateInterruptPriority>
	__asm volatile
 800756e:	f3ef 8211 	mrs	r2, BASEPRI
 8007572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007576:	f383 8811 	msr	BASEPRI, r3
 800757a:	f3bf 8f6f 	isb	sy
 800757e:	f3bf 8f4f 	dsb	sy
 8007582:	617a      	str	r2, [r7, #20]
 8007584:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007586:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007588:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800758a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800758c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800758e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007592:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007594:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007596:	429a      	cmp	r2, r3
 8007598:	d22b      	bcs.n	80075f2 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800759a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800759c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80075a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80075a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075a6:	1c5a      	adds	r2, r3, #1
 80075a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075aa:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80075ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80075b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075b4:	d112      	bne.n	80075dc <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80075b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d016      	beq.n	80075ec <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80075be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075c0:	3324      	adds	r3, #36	@ 0x24
 80075c2:	4618      	mov	r0, r3
 80075c4:	f001 f8d4 	bl	8008770 <xTaskRemoveFromEventList>
 80075c8:	4603      	mov	r3, r0
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d00e      	beq.n	80075ec <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d00b      	beq.n	80075ec <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	2201      	movs	r2, #1
 80075d8:	601a      	str	r2, [r3, #0]
 80075da:	e007      	b.n	80075ec <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80075dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80075e0:	3301      	adds	r3, #1
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	b25a      	sxtb	r2, r3
 80075e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80075ec:	2301      	movs	r3, #1
 80075ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80075f0:	e001      	b.n	80075f6 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80075f2:	2300      	movs	r3, #0
 80075f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80075f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075f8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	f383 8811 	msr	BASEPRI, r3
}
 8007600:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007602:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007604:	4618      	mov	r0, r3
 8007606:	3738      	adds	r7, #56	@ 0x38
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}

0800760c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b08c      	sub	sp, #48	@ 0x30
 8007610:	af00      	add	r7, sp, #0
 8007612:	60f8      	str	r0, [r7, #12]
 8007614:	60b9      	str	r1, [r7, #8]
 8007616:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007618:	2300      	movs	r3, #0
 800761a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007622:	2b00      	cmp	r3, #0
 8007624:	d10b      	bne.n	800763e <xQueueReceive+0x32>
	__asm volatile
 8007626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800762a:	f383 8811 	msr	BASEPRI, r3
 800762e:	f3bf 8f6f 	isb	sy
 8007632:	f3bf 8f4f 	dsb	sy
 8007636:	623b      	str	r3, [r7, #32]
}
 8007638:	bf00      	nop
 800763a:	bf00      	nop
 800763c:	e7fd      	b.n	800763a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d103      	bne.n	800764c <xQueueReceive+0x40>
 8007644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007648:	2b00      	cmp	r3, #0
 800764a:	d101      	bne.n	8007650 <xQueueReceive+0x44>
 800764c:	2301      	movs	r3, #1
 800764e:	e000      	b.n	8007652 <xQueueReceive+0x46>
 8007650:	2300      	movs	r3, #0
 8007652:	2b00      	cmp	r3, #0
 8007654:	d10b      	bne.n	800766e <xQueueReceive+0x62>
	__asm volatile
 8007656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800765a:	f383 8811 	msr	BASEPRI, r3
 800765e:	f3bf 8f6f 	isb	sy
 8007662:	f3bf 8f4f 	dsb	sy
 8007666:	61fb      	str	r3, [r7, #28]
}
 8007668:	bf00      	nop
 800766a:	bf00      	nop
 800766c:	e7fd      	b.n	800766a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800766e:	f001 fa3f 	bl	8008af0 <xTaskGetSchedulerState>
 8007672:	4603      	mov	r3, r0
 8007674:	2b00      	cmp	r3, #0
 8007676:	d102      	bne.n	800767e <xQueueReceive+0x72>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d101      	bne.n	8007682 <xQueueReceive+0x76>
 800767e:	2301      	movs	r3, #1
 8007680:	e000      	b.n	8007684 <xQueueReceive+0x78>
 8007682:	2300      	movs	r3, #0
 8007684:	2b00      	cmp	r3, #0
 8007686:	d10b      	bne.n	80076a0 <xQueueReceive+0x94>
	__asm volatile
 8007688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800768c:	f383 8811 	msr	BASEPRI, r3
 8007690:	f3bf 8f6f 	isb	sy
 8007694:	f3bf 8f4f 	dsb	sy
 8007698:	61bb      	str	r3, [r7, #24]
}
 800769a:	bf00      	nop
 800769c:	bf00      	nop
 800769e:	e7fd      	b.n	800769c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80076a0:	f002 f892 	bl	80097c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80076a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076a8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80076aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d01f      	beq.n	80076f0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80076b0:	68b9      	ldr	r1, [r7, #8]
 80076b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80076b4:	f000 fac4 	bl	8007c40 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80076b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ba:	1e5a      	subs	r2, r3, #1
 80076bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076be:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80076c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076c2:	691b      	ldr	r3, [r3, #16]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d00f      	beq.n	80076e8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80076c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076ca:	3310      	adds	r3, #16
 80076cc:	4618      	mov	r0, r3
 80076ce:	f001 f84f 	bl	8008770 <xTaskRemoveFromEventList>
 80076d2:	4603      	mov	r3, r0
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d007      	beq.n	80076e8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80076d8:	4b3c      	ldr	r3, [pc, #240]	@ (80077cc <xQueueReceive+0x1c0>)
 80076da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076de:	601a      	str	r2, [r3, #0]
 80076e0:	f3bf 8f4f 	dsb	sy
 80076e4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80076e8:	f002 f8a0 	bl	800982c <vPortExitCritical>
				return pdPASS;
 80076ec:	2301      	movs	r3, #1
 80076ee:	e069      	b.n	80077c4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d103      	bne.n	80076fe <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80076f6:	f002 f899 	bl	800982c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80076fa:	2300      	movs	r3, #0
 80076fc:	e062      	b.n	80077c4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80076fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007700:	2b00      	cmp	r3, #0
 8007702:	d106      	bne.n	8007712 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007704:	f107 0310 	add.w	r3, r7, #16
 8007708:	4618      	mov	r0, r3
 800770a:	f001 f895 	bl	8008838 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800770e:	2301      	movs	r3, #1
 8007710:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007712:	f002 f88b 	bl	800982c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007716:	f000 fe05 	bl	8008324 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800771a:	f002 f855 	bl	80097c8 <vPortEnterCritical>
 800771e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007720:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007724:	b25b      	sxtb	r3, r3
 8007726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800772a:	d103      	bne.n	8007734 <xQueueReceive+0x128>
 800772c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800772e:	2200      	movs	r2, #0
 8007730:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007736:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800773a:	b25b      	sxtb	r3, r3
 800773c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007740:	d103      	bne.n	800774a <xQueueReceive+0x13e>
 8007742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007744:	2200      	movs	r2, #0
 8007746:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800774a:	f002 f86f 	bl	800982c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800774e:	1d3a      	adds	r2, r7, #4
 8007750:	f107 0310 	add.w	r3, r7, #16
 8007754:	4611      	mov	r1, r2
 8007756:	4618      	mov	r0, r3
 8007758:	f001 f884 	bl	8008864 <xTaskCheckForTimeOut>
 800775c:	4603      	mov	r3, r0
 800775e:	2b00      	cmp	r3, #0
 8007760:	d123      	bne.n	80077aa <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007762:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007764:	f000 fae4 	bl	8007d30 <prvIsQueueEmpty>
 8007768:	4603      	mov	r3, r0
 800776a:	2b00      	cmp	r3, #0
 800776c:	d017      	beq.n	800779e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800776e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007770:	3324      	adds	r3, #36	@ 0x24
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	4611      	mov	r1, r2
 8007776:	4618      	mov	r0, r3
 8007778:	f000 ffa8 	bl	80086cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800777c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800777e:	f000 fa85 	bl	8007c8c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007782:	f000 fddd 	bl	8008340 <xTaskResumeAll>
 8007786:	4603      	mov	r3, r0
 8007788:	2b00      	cmp	r3, #0
 800778a:	d189      	bne.n	80076a0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800778c:	4b0f      	ldr	r3, [pc, #60]	@ (80077cc <xQueueReceive+0x1c0>)
 800778e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007792:	601a      	str	r2, [r3, #0]
 8007794:	f3bf 8f4f 	dsb	sy
 8007798:	f3bf 8f6f 	isb	sy
 800779c:	e780      	b.n	80076a0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800779e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80077a0:	f000 fa74 	bl	8007c8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80077a4:	f000 fdcc 	bl	8008340 <xTaskResumeAll>
 80077a8:	e77a      	b.n	80076a0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80077aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80077ac:	f000 fa6e 	bl	8007c8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80077b0:	f000 fdc6 	bl	8008340 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80077b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80077b6:	f000 fabb 	bl	8007d30 <prvIsQueueEmpty>
 80077ba:	4603      	mov	r3, r0
 80077bc:	2b00      	cmp	r3, #0
 80077be:	f43f af6f 	beq.w	80076a0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80077c2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3730      	adds	r7, #48	@ 0x30
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}
 80077cc:	e000ed04 	.word	0xe000ed04

080077d0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b08e      	sub	sp, #56	@ 0x38
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80077da:	2300      	movs	r3, #0
 80077dc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80077e2:	2300      	movs	r3, #0
 80077e4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80077e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d10b      	bne.n	8007804 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80077ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077f0:	f383 8811 	msr	BASEPRI, r3
 80077f4:	f3bf 8f6f 	isb	sy
 80077f8:	f3bf 8f4f 	dsb	sy
 80077fc:	623b      	str	r3, [r7, #32]
}
 80077fe:	bf00      	nop
 8007800:	bf00      	nop
 8007802:	e7fd      	b.n	8007800 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007808:	2b00      	cmp	r3, #0
 800780a:	d00b      	beq.n	8007824 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800780c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007810:	f383 8811 	msr	BASEPRI, r3
 8007814:	f3bf 8f6f 	isb	sy
 8007818:	f3bf 8f4f 	dsb	sy
 800781c:	61fb      	str	r3, [r7, #28]
}
 800781e:	bf00      	nop
 8007820:	bf00      	nop
 8007822:	e7fd      	b.n	8007820 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007824:	f001 f964 	bl	8008af0 <xTaskGetSchedulerState>
 8007828:	4603      	mov	r3, r0
 800782a:	2b00      	cmp	r3, #0
 800782c:	d102      	bne.n	8007834 <xQueueSemaphoreTake+0x64>
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d101      	bne.n	8007838 <xQueueSemaphoreTake+0x68>
 8007834:	2301      	movs	r3, #1
 8007836:	e000      	b.n	800783a <xQueueSemaphoreTake+0x6a>
 8007838:	2300      	movs	r3, #0
 800783a:	2b00      	cmp	r3, #0
 800783c:	d10b      	bne.n	8007856 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800783e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007842:	f383 8811 	msr	BASEPRI, r3
 8007846:	f3bf 8f6f 	isb	sy
 800784a:	f3bf 8f4f 	dsb	sy
 800784e:	61bb      	str	r3, [r7, #24]
}
 8007850:	bf00      	nop
 8007852:	bf00      	nop
 8007854:	e7fd      	b.n	8007852 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007856:	f001 ffb7 	bl	80097c8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800785a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800785c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800785e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007862:	2b00      	cmp	r3, #0
 8007864:	d024      	beq.n	80078b0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007868:	1e5a      	subs	r2, r3, #1
 800786a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800786c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800786e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d104      	bne.n	8007880 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007876:	f001 fab5 	bl	8008de4 <pvTaskIncrementMutexHeldCount>
 800787a:	4602      	mov	r2, r0
 800787c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800787e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007882:	691b      	ldr	r3, [r3, #16]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d00f      	beq.n	80078a8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800788a:	3310      	adds	r3, #16
 800788c:	4618      	mov	r0, r3
 800788e:	f000 ff6f 	bl	8008770 <xTaskRemoveFromEventList>
 8007892:	4603      	mov	r3, r0
 8007894:	2b00      	cmp	r3, #0
 8007896:	d007      	beq.n	80078a8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007898:	4b54      	ldr	r3, [pc, #336]	@ (80079ec <xQueueSemaphoreTake+0x21c>)
 800789a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800789e:	601a      	str	r2, [r3, #0]
 80078a0:	f3bf 8f4f 	dsb	sy
 80078a4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80078a8:	f001 ffc0 	bl	800982c <vPortExitCritical>
				return pdPASS;
 80078ac:	2301      	movs	r3, #1
 80078ae:	e098      	b.n	80079e2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d112      	bne.n	80078dc <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80078b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d00b      	beq.n	80078d4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80078bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078c0:	f383 8811 	msr	BASEPRI, r3
 80078c4:	f3bf 8f6f 	isb	sy
 80078c8:	f3bf 8f4f 	dsb	sy
 80078cc:	617b      	str	r3, [r7, #20]
}
 80078ce:	bf00      	nop
 80078d0:	bf00      	nop
 80078d2:	e7fd      	b.n	80078d0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80078d4:	f001 ffaa 	bl	800982c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80078d8:	2300      	movs	r3, #0
 80078da:	e082      	b.n	80079e2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80078dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d106      	bne.n	80078f0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80078e2:	f107 030c 	add.w	r3, r7, #12
 80078e6:	4618      	mov	r0, r3
 80078e8:	f000 ffa6 	bl	8008838 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80078ec:	2301      	movs	r3, #1
 80078ee:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80078f0:	f001 ff9c 	bl	800982c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80078f4:	f000 fd16 	bl	8008324 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80078f8:	f001 ff66 	bl	80097c8 <vPortEnterCritical>
 80078fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078fe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007902:	b25b      	sxtb	r3, r3
 8007904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007908:	d103      	bne.n	8007912 <xQueueSemaphoreTake+0x142>
 800790a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800790c:	2200      	movs	r2, #0
 800790e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007914:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007918:	b25b      	sxtb	r3, r3
 800791a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800791e:	d103      	bne.n	8007928 <xQueueSemaphoreTake+0x158>
 8007920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007922:	2200      	movs	r2, #0
 8007924:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007928:	f001 ff80 	bl	800982c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800792c:	463a      	mov	r2, r7
 800792e:	f107 030c 	add.w	r3, r7, #12
 8007932:	4611      	mov	r1, r2
 8007934:	4618      	mov	r0, r3
 8007936:	f000 ff95 	bl	8008864 <xTaskCheckForTimeOut>
 800793a:	4603      	mov	r3, r0
 800793c:	2b00      	cmp	r3, #0
 800793e:	d132      	bne.n	80079a6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007940:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007942:	f000 f9f5 	bl	8007d30 <prvIsQueueEmpty>
 8007946:	4603      	mov	r3, r0
 8007948:	2b00      	cmp	r3, #0
 800794a:	d026      	beq.n	800799a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800794c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d109      	bne.n	8007968 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8007954:	f001 ff38 	bl	80097c8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	4618      	mov	r0, r3
 800795e:	f001 f8e5 	bl	8008b2c <xTaskPriorityInherit>
 8007962:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8007964:	f001 ff62 	bl	800982c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800796a:	3324      	adds	r3, #36	@ 0x24
 800796c:	683a      	ldr	r2, [r7, #0]
 800796e:	4611      	mov	r1, r2
 8007970:	4618      	mov	r0, r3
 8007972:	f000 feab 	bl	80086cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007976:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007978:	f000 f988 	bl	8007c8c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800797c:	f000 fce0 	bl	8008340 <xTaskResumeAll>
 8007980:	4603      	mov	r3, r0
 8007982:	2b00      	cmp	r3, #0
 8007984:	f47f af67 	bne.w	8007856 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8007988:	4b18      	ldr	r3, [pc, #96]	@ (80079ec <xQueueSemaphoreTake+0x21c>)
 800798a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800798e:	601a      	str	r2, [r3, #0]
 8007990:	f3bf 8f4f 	dsb	sy
 8007994:	f3bf 8f6f 	isb	sy
 8007998:	e75d      	b.n	8007856 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800799a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800799c:	f000 f976 	bl	8007c8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80079a0:	f000 fcce 	bl	8008340 <xTaskResumeAll>
 80079a4:	e757      	b.n	8007856 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80079a6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80079a8:	f000 f970 	bl	8007c8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80079ac:	f000 fcc8 	bl	8008340 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80079b0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80079b2:	f000 f9bd 	bl	8007d30 <prvIsQueueEmpty>
 80079b6:	4603      	mov	r3, r0
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	f43f af4c 	beq.w	8007856 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80079be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d00d      	beq.n	80079e0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80079c4:	f001 ff00 	bl	80097c8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80079c8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80079ca:	f000 f8b7 	bl	8007b3c <prvGetDisinheritPriorityAfterTimeout>
 80079ce:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80079d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80079d6:	4618      	mov	r0, r3
 80079d8:	f001 f980 	bl	8008cdc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80079dc:	f001 ff26 	bl	800982c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80079e0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3738      	adds	r7, #56	@ 0x38
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}
 80079ea:	bf00      	nop
 80079ec:	e000ed04 	.word	0xe000ed04

080079f0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b08e      	sub	sp, #56	@ 0x38
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	60f8      	str	r0, [r7, #12]
 80079f8:	60b9      	str	r1, [r7, #8]
 80079fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d10b      	bne.n	8007a1e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8007a06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a0a:	f383 8811 	msr	BASEPRI, r3
 8007a0e:	f3bf 8f6f 	isb	sy
 8007a12:	f3bf 8f4f 	dsb	sy
 8007a16:	623b      	str	r3, [r7, #32]
}
 8007a18:	bf00      	nop
 8007a1a:	bf00      	nop
 8007a1c:	e7fd      	b.n	8007a1a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d103      	bne.n	8007a2c <xQueueReceiveFromISR+0x3c>
 8007a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d101      	bne.n	8007a30 <xQueueReceiveFromISR+0x40>
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	e000      	b.n	8007a32 <xQueueReceiveFromISR+0x42>
 8007a30:	2300      	movs	r3, #0
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d10b      	bne.n	8007a4e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8007a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a3a:	f383 8811 	msr	BASEPRI, r3
 8007a3e:	f3bf 8f6f 	isb	sy
 8007a42:	f3bf 8f4f 	dsb	sy
 8007a46:	61fb      	str	r3, [r7, #28]
}
 8007a48:	bf00      	nop
 8007a4a:	bf00      	nop
 8007a4c:	e7fd      	b.n	8007a4a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a4e:	f001 ff9b 	bl	8009988 <vPortValidateInterruptPriority>
	__asm volatile
 8007a52:	f3ef 8211 	mrs	r2, BASEPRI
 8007a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a5a:	f383 8811 	msr	BASEPRI, r3
 8007a5e:	f3bf 8f6f 	isb	sy
 8007a62:	f3bf 8f4f 	dsb	sy
 8007a66:	61ba      	str	r2, [r7, #24]
 8007a68:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007a6a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a72:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d02f      	beq.n	8007ada <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a7c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007a80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007a84:	68b9      	ldr	r1, [r7, #8]
 8007a86:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007a88:	f000 f8da 	bl	8007c40 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a8e:	1e5a      	subs	r2, r3, #1
 8007a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a92:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007a94:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a9c:	d112      	bne.n	8007ac4 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aa0:	691b      	ldr	r3, [r3, #16]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d016      	beq.n	8007ad4 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aa8:	3310      	adds	r3, #16
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f000 fe60 	bl	8008770 <xTaskRemoveFromEventList>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d00e      	beq.n	8007ad4 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d00b      	beq.n	8007ad4 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2201      	movs	r2, #1
 8007ac0:	601a      	str	r2, [r3, #0]
 8007ac2:	e007      	b.n	8007ad4 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007ac4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007ac8:	3301      	adds	r3, #1
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	b25a      	sxtb	r2, r3
 8007ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ad0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ad8:	e001      	b.n	8007ade <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8007ada:	2300      	movs	r3, #0
 8007adc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ae0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	f383 8811 	msr	BASEPRI, r3
}
 8007ae8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007aea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3738      	adds	r7, #56	@ 0x38
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b084      	sub	sp, #16
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d10b      	bne.n	8007b1e <vQueueDelete+0x2a>
	__asm volatile
 8007b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b0a:	f383 8811 	msr	BASEPRI, r3
 8007b0e:	f3bf 8f6f 	isb	sy
 8007b12:	f3bf 8f4f 	dsb	sy
 8007b16:	60bb      	str	r3, [r7, #8]
}
 8007b18:	bf00      	nop
 8007b1a:	bf00      	nop
 8007b1c:	e7fd      	b.n	8007b1a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007b1e:	68f8      	ldr	r0, [r7, #12]
 8007b20:	f000 f95e 	bl	8007de0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d102      	bne.n	8007b34 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8007b2e:	68f8      	ldr	r0, [r7, #12]
 8007b30:	f002 f83a 	bl	8009ba8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007b34:	bf00      	nop
 8007b36:	3710      	adds	r7, #16
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}

08007b3c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b085      	sub	sp, #20
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d006      	beq.n	8007b5a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8007b56:	60fb      	str	r3, [r7, #12]
 8007b58:	e001      	b.n	8007b5e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
	}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3714      	adds	r7, #20
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr

08007b6c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b086      	sub	sp, #24
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	60f8      	str	r0, [r7, #12]
 8007b74:	60b9      	str	r1, [r7, #8]
 8007b76:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b80:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d10d      	bne.n	8007ba6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d14d      	bne.n	8007c2e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	4618      	mov	r0, r3
 8007b98:	f001 f830 	bl	8008bfc <xTaskPriorityDisinherit>
 8007b9c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	609a      	str	r2, [r3, #8]
 8007ba4:	e043      	b.n	8007c2e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d119      	bne.n	8007be0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	6858      	ldr	r0, [r3, #4]
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	68b9      	ldr	r1, [r7, #8]
 8007bb8:	f003 f949 	bl	800ae4e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	685a      	ldr	r2, [r3, #4]
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bc4:	441a      	add	r2, r3
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	685a      	ldr	r2, [r3, #4]
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	689b      	ldr	r3, [r3, #8]
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d32b      	bcc.n	8007c2e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	605a      	str	r2, [r3, #4]
 8007bde:	e026      	b.n	8007c2e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	68d8      	ldr	r0, [r3, #12]
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007be8:	461a      	mov	r2, r3
 8007bea:	68b9      	ldr	r1, [r7, #8]
 8007bec:	f003 f92f 	bl	800ae4e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	68da      	ldr	r2, [r3, #12]
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bf8:	425b      	negs	r3, r3
 8007bfa:	441a      	add	r2, r3
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	68da      	ldr	r2, [r3, #12]
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d207      	bcs.n	8007c1c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	689a      	ldr	r2, [r3, #8]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c14:	425b      	negs	r3, r3
 8007c16:	441a      	add	r2, r3
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2b02      	cmp	r3, #2
 8007c20:	d105      	bne.n	8007c2e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d002      	beq.n	8007c2e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	3b01      	subs	r3, #1
 8007c2c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	1c5a      	adds	r2, r3, #1
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007c36:	697b      	ldr	r3, [r7, #20]
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3718      	adds	r7, #24
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}

08007c40 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b082      	sub	sp, #8
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d018      	beq.n	8007c84 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	68da      	ldr	r2, [r3, #12]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c5a:	441a      	add	r2, r3
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	68da      	ldr	r2, [r3, #12]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	d303      	bcc.n	8007c74 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681a      	ldr	r2, [r3, #0]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	68d9      	ldr	r1, [r3, #12]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c7c:	461a      	mov	r2, r3
 8007c7e:	6838      	ldr	r0, [r7, #0]
 8007c80:	f003 f8e5 	bl	800ae4e <memcpy>
	}
}
 8007c84:	bf00      	nop
 8007c86:	3708      	adds	r7, #8
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b084      	sub	sp, #16
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007c94:	f001 fd98 	bl	80097c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007c9e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007ca0:	e011      	b.n	8007cc6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d012      	beq.n	8007cd0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	3324      	adds	r3, #36	@ 0x24
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f000 fd5e 	bl	8008770 <xTaskRemoveFromEventList>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d001      	beq.n	8007cbe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007cba:	f000 fe37 	bl	800892c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007cbe:	7bfb      	ldrb	r3, [r7, #15]
 8007cc0:	3b01      	subs	r3, #1
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	dce9      	bgt.n	8007ca2 <prvUnlockQueue+0x16>
 8007cce:	e000      	b.n	8007cd2 <prvUnlockQueue+0x46>
					break;
 8007cd0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	22ff      	movs	r2, #255	@ 0xff
 8007cd6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007cda:	f001 fda7 	bl	800982c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007cde:	f001 fd73 	bl	80097c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007ce8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007cea:	e011      	b.n	8007d10 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	691b      	ldr	r3, [r3, #16]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d012      	beq.n	8007d1a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	3310      	adds	r3, #16
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f000 fd39 	bl	8008770 <xTaskRemoveFromEventList>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d001      	beq.n	8007d08 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007d04:	f000 fe12 	bl	800892c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007d08:	7bbb      	ldrb	r3, [r7, #14]
 8007d0a:	3b01      	subs	r3, #1
 8007d0c:	b2db      	uxtb	r3, r3
 8007d0e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007d10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	dce9      	bgt.n	8007cec <prvUnlockQueue+0x60>
 8007d18:	e000      	b.n	8007d1c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007d1a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	22ff      	movs	r2, #255	@ 0xff
 8007d20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007d24:	f001 fd82 	bl	800982c <vPortExitCritical>
}
 8007d28:	bf00      	nop
 8007d2a:	3710      	adds	r7, #16
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b084      	sub	sp, #16
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007d38:	f001 fd46 	bl	80097c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d102      	bne.n	8007d4a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007d44:	2301      	movs	r3, #1
 8007d46:	60fb      	str	r3, [r7, #12]
 8007d48:	e001      	b.n	8007d4e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007d4e:	f001 fd6d 	bl	800982c <vPortExitCritical>

	return xReturn;
 8007d52:	68fb      	ldr	r3, [r7, #12]
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3710      	adds	r7, #16
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b084      	sub	sp, #16
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007d64:	f001 fd30 	bl	80097c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d102      	bne.n	8007d7a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007d74:	2301      	movs	r3, #1
 8007d76:	60fb      	str	r3, [r7, #12]
 8007d78:	e001      	b.n	8007d7e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007d7e:	f001 fd55 	bl	800982c <vPortExitCritical>

	return xReturn;
 8007d82:	68fb      	ldr	r3, [r7, #12]
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	3710      	adds	r7, #16
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b085      	sub	sp, #20
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007d96:	2300      	movs	r3, #0
 8007d98:	60fb      	str	r3, [r7, #12]
 8007d9a:	e014      	b.n	8007dc6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007d9c:	4a0f      	ldr	r2, [pc, #60]	@ (8007ddc <vQueueAddToRegistry+0x50>)
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d10b      	bne.n	8007dc0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007da8:	490c      	ldr	r1, [pc, #48]	@ (8007ddc <vQueueAddToRegistry+0x50>)
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	683a      	ldr	r2, [r7, #0]
 8007dae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007db2:	4a0a      	ldr	r2, [pc, #40]	@ (8007ddc <vQueueAddToRegistry+0x50>)
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	00db      	lsls	r3, r3, #3
 8007db8:	4413      	add	r3, r2
 8007dba:	687a      	ldr	r2, [r7, #4]
 8007dbc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007dbe:	e006      	b.n	8007dce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	3301      	adds	r3, #1
 8007dc4:	60fb      	str	r3, [r7, #12]
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2b07      	cmp	r3, #7
 8007dca:	d9e7      	bls.n	8007d9c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007dcc:	bf00      	nop
 8007dce:	bf00      	nop
 8007dd0:	3714      	adds	r7, #20
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd8:	4770      	bx	lr
 8007dda:	bf00      	nop
 8007ddc:	20000d08 	.word	0x20000d08

08007de0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007de0:	b480      	push	{r7}
 8007de2:	b085      	sub	sp, #20
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007de8:	2300      	movs	r3, #0
 8007dea:	60fb      	str	r3, [r7, #12]
 8007dec:	e016      	b.n	8007e1c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007dee:	4a10      	ldr	r2, [pc, #64]	@ (8007e30 <vQueueUnregisterQueue+0x50>)
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	00db      	lsls	r3, r3, #3
 8007df4:	4413      	add	r3, r2
 8007df6:	685b      	ldr	r3, [r3, #4]
 8007df8:	687a      	ldr	r2, [r7, #4]
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d10b      	bne.n	8007e16 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007dfe:	4a0c      	ldr	r2, [pc, #48]	@ (8007e30 <vQueueUnregisterQueue+0x50>)
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	2100      	movs	r1, #0
 8007e04:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007e08:	4a09      	ldr	r2, [pc, #36]	@ (8007e30 <vQueueUnregisterQueue+0x50>)
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	00db      	lsls	r3, r3, #3
 8007e0e:	4413      	add	r3, r2
 8007e10:	2200      	movs	r2, #0
 8007e12:	605a      	str	r2, [r3, #4]
				break;
 8007e14:	e006      	b.n	8007e24 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	3301      	adds	r3, #1
 8007e1a:	60fb      	str	r3, [r7, #12]
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2b07      	cmp	r3, #7
 8007e20:	d9e5      	bls.n	8007dee <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007e22:	bf00      	nop
 8007e24:	bf00      	nop
 8007e26:	3714      	adds	r7, #20
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr
 8007e30:	20000d08 	.word	0x20000d08

08007e34 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b086      	sub	sp, #24
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	60f8      	str	r0, [r7, #12]
 8007e3c:	60b9      	str	r1, [r7, #8]
 8007e3e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007e44:	f001 fcc0 	bl	80097c8 <vPortEnterCritical>
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007e4e:	b25b      	sxtb	r3, r3
 8007e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e54:	d103      	bne.n	8007e5e <vQueueWaitForMessageRestricted+0x2a>
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007e64:	b25b      	sxtb	r3, r3
 8007e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e6a:	d103      	bne.n	8007e74 <vQueueWaitForMessageRestricted+0x40>
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007e74:	f001 fcda 	bl	800982c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d106      	bne.n	8007e8e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	3324      	adds	r3, #36	@ 0x24
 8007e84:	687a      	ldr	r2, [r7, #4]
 8007e86:	68b9      	ldr	r1, [r7, #8]
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f000 fc45 	bl	8008718 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007e8e:	6978      	ldr	r0, [r7, #20]
 8007e90:	f7ff fefc 	bl	8007c8c <prvUnlockQueue>
	}
 8007e94:	bf00      	nop
 8007e96:	3718      	adds	r7, #24
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b08e      	sub	sp, #56	@ 0x38
 8007ea0:	af04      	add	r7, sp, #16
 8007ea2:	60f8      	str	r0, [r7, #12]
 8007ea4:	60b9      	str	r1, [r7, #8]
 8007ea6:	607a      	str	r2, [r7, #4]
 8007ea8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007eaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d10b      	bne.n	8007ec8 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eb4:	f383 8811 	msr	BASEPRI, r3
 8007eb8:	f3bf 8f6f 	isb	sy
 8007ebc:	f3bf 8f4f 	dsb	sy
 8007ec0:	623b      	str	r3, [r7, #32]
}
 8007ec2:	bf00      	nop
 8007ec4:	bf00      	nop
 8007ec6:	e7fd      	b.n	8007ec4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007ec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d10b      	bne.n	8007ee6 <xTaskCreateStatic+0x4a>
	__asm volatile
 8007ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ed2:	f383 8811 	msr	BASEPRI, r3
 8007ed6:	f3bf 8f6f 	isb	sy
 8007eda:	f3bf 8f4f 	dsb	sy
 8007ede:	61fb      	str	r3, [r7, #28]
}
 8007ee0:	bf00      	nop
 8007ee2:	bf00      	nop
 8007ee4:	e7fd      	b.n	8007ee2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007ee6:	235c      	movs	r3, #92	@ 0x5c
 8007ee8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	2b5c      	cmp	r3, #92	@ 0x5c
 8007eee:	d00b      	beq.n	8007f08 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ef4:	f383 8811 	msr	BASEPRI, r3
 8007ef8:	f3bf 8f6f 	isb	sy
 8007efc:	f3bf 8f4f 	dsb	sy
 8007f00:	61bb      	str	r3, [r7, #24]
}
 8007f02:	bf00      	nop
 8007f04:	bf00      	nop
 8007f06:	e7fd      	b.n	8007f04 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007f08:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d01e      	beq.n	8007f4e <xTaskCreateStatic+0xb2>
 8007f10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d01b      	beq.n	8007f4e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007f16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f18:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f1c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007f1e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f22:	2202      	movs	r2, #2
 8007f24:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007f28:	2300      	movs	r3, #0
 8007f2a:	9303      	str	r3, [sp, #12]
 8007f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f2e:	9302      	str	r3, [sp, #8]
 8007f30:	f107 0314 	add.w	r3, r7, #20
 8007f34:	9301      	str	r3, [sp, #4]
 8007f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f38:	9300      	str	r3, [sp, #0]
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	687a      	ldr	r2, [r7, #4]
 8007f3e:	68b9      	ldr	r1, [r7, #8]
 8007f40:	68f8      	ldr	r0, [r7, #12]
 8007f42:	f000 f850 	bl	8007fe6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007f46:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007f48:	f000 f8de 	bl	8008108 <prvAddNewTaskToReadyList>
 8007f4c:	e001      	b.n	8007f52 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007f52:	697b      	ldr	r3, [r7, #20]
	}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3728      	adds	r7, #40	@ 0x28
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b08c      	sub	sp, #48	@ 0x30
 8007f60:	af04      	add	r7, sp, #16
 8007f62:	60f8      	str	r0, [r7, #12]
 8007f64:	60b9      	str	r1, [r7, #8]
 8007f66:	603b      	str	r3, [r7, #0]
 8007f68:	4613      	mov	r3, r2
 8007f6a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007f6c:	88fb      	ldrh	r3, [r7, #6]
 8007f6e:	009b      	lsls	r3, r3, #2
 8007f70:	4618      	mov	r0, r3
 8007f72:	f001 fd4b 	bl	8009a0c <pvPortMalloc>
 8007f76:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d00e      	beq.n	8007f9c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007f7e:	205c      	movs	r0, #92	@ 0x5c
 8007f80:	f001 fd44 	bl	8009a0c <pvPortMalloc>
 8007f84:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007f86:	69fb      	ldr	r3, [r7, #28]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d003      	beq.n	8007f94 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007f8c:	69fb      	ldr	r3, [r7, #28]
 8007f8e:	697a      	ldr	r2, [r7, #20]
 8007f90:	631a      	str	r2, [r3, #48]	@ 0x30
 8007f92:	e005      	b.n	8007fa0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007f94:	6978      	ldr	r0, [r7, #20]
 8007f96:	f001 fe07 	bl	8009ba8 <vPortFree>
 8007f9a:	e001      	b.n	8007fa0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007fa0:	69fb      	ldr	r3, [r7, #28]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d017      	beq.n	8007fd6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007fa6:	69fb      	ldr	r3, [r7, #28]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007fae:	88fa      	ldrh	r2, [r7, #6]
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	9303      	str	r3, [sp, #12]
 8007fb4:	69fb      	ldr	r3, [r7, #28]
 8007fb6:	9302      	str	r3, [sp, #8]
 8007fb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fba:	9301      	str	r3, [sp, #4]
 8007fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fbe:	9300      	str	r3, [sp, #0]
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	68b9      	ldr	r1, [r7, #8]
 8007fc4:	68f8      	ldr	r0, [r7, #12]
 8007fc6:	f000 f80e 	bl	8007fe6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007fca:	69f8      	ldr	r0, [r7, #28]
 8007fcc:	f000 f89c 	bl	8008108 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	61bb      	str	r3, [r7, #24]
 8007fd4:	e002      	b.n	8007fdc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8007fda:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007fdc:	69bb      	ldr	r3, [r7, #24]
	}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3720      	adds	r7, #32
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}

08007fe6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007fe6:	b580      	push	{r7, lr}
 8007fe8:	b088      	sub	sp, #32
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	60f8      	str	r0, [r7, #12]
 8007fee:	60b9      	str	r1, [r7, #8]
 8007ff0:	607a      	str	r2, [r7, #4]
 8007ff2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ff6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	461a      	mov	r2, r3
 8007ffe:	21a5      	movs	r1, #165	@ 0xa5
 8008000:	f002 fe3b 	bl	800ac7a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008006:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800800e:	3b01      	subs	r3, #1
 8008010:	009b      	lsls	r3, r3, #2
 8008012:	4413      	add	r3, r2
 8008014:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008016:	69bb      	ldr	r3, [r7, #24]
 8008018:	f023 0307 	bic.w	r3, r3, #7
 800801c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800801e:	69bb      	ldr	r3, [r7, #24]
 8008020:	f003 0307 	and.w	r3, r3, #7
 8008024:	2b00      	cmp	r3, #0
 8008026:	d00b      	beq.n	8008040 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800802c:	f383 8811 	msr	BASEPRI, r3
 8008030:	f3bf 8f6f 	isb	sy
 8008034:	f3bf 8f4f 	dsb	sy
 8008038:	617b      	str	r3, [r7, #20]
}
 800803a:	bf00      	nop
 800803c:	bf00      	nop
 800803e:	e7fd      	b.n	800803c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d01f      	beq.n	8008086 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008046:	2300      	movs	r3, #0
 8008048:	61fb      	str	r3, [r7, #28]
 800804a:	e012      	b.n	8008072 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800804c:	68ba      	ldr	r2, [r7, #8]
 800804e:	69fb      	ldr	r3, [r7, #28]
 8008050:	4413      	add	r3, r2
 8008052:	7819      	ldrb	r1, [r3, #0]
 8008054:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008056:	69fb      	ldr	r3, [r7, #28]
 8008058:	4413      	add	r3, r2
 800805a:	3334      	adds	r3, #52	@ 0x34
 800805c:	460a      	mov	r2, r1
 800805e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008060:	68ba      	ldr	r2, [r7, #8]
 8008062:	69fb      	ldr	r3, [r7, #28]
 8008064:	4413      	add	r3, r2
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d006      	beq.n	800807a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800806c:	69fb      	ldr	r3, [r7, #28]
 800806e:	3301      	adds	r3, #1
 8008070:	61fb      	str	r3, [r7, #28]
 8008072:	69fb      	ldr	r3, [r7, #28]
 8008074:	2b0f      	cmp	r3, #15
 8008076:	d9e9      	bls.n	800804c <prvInitialiseNewTask+0x66>
 8008078:	e000      	b.n	800807c <prvInitialiseNewTask+0x96>
			{
				break;
 800807a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800807c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800807e:	2200      	movs	r2, #0
 8008080:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008084:	e003      	b.n	800808e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008088:	2200      	movs	r2, #0
 800808a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800808e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008090:	2b37      	cmp	r3, #55	@ 0x37
 8008092:	d901      	bls.n	8008098 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008094:	2337      	movs	r3, #55	@ 0x37
 8008096:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800809a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800809c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800809e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80080a2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80080a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080a6:	2200      	movs	r2, #0
 80080a8:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80080aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ac:	3304      	adds	r3, #4
 80080ae:	4618      	mov	r0, r3
 80080b0:	f7fe fe34 	bl	8006d1c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80080b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080b6:	3318      	adds	r3, #24
 80080b8:	4618      	mov	r0, r3
 80080ba:	f7fe fe2f 	bl	8006d1c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80080be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080c2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080c6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80080ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080cc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80080ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080d2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80080d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080d6:	2200      	movs	r2, #0
 80080d8:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80080da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080dc:	2200      	movs	r2, #0
 80080de:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80080e2:	683a      	ldr	r2, [r7, #0]
 80080e4:	68f9      	ldr	r1, [r7, #12]
 80080e6:	69b8      	ldr	r0, [r7, #24]
 80080e8:	f001 fa3e 	bl	8009568 <pxPortInitialiseStack>
 80080ec:	4602      	mov	r2, r0
 80080ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080f0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80080f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d002      	beq.n	80080fe <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80080f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80080fe:	bf00      	nop
 8008100:	3720      	adds	r7, #32
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}
	...

08008108 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b082      	sub	sp, #8
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008110:	f001 fb5a 	bl	80097c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008114:	4b2d      	ldr	r3, [pc, #180]	@ (80081cc <prvAddNewTaskToReadyList+0xc4>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	3301      	adds	r3, #1
 800811a:	4a2c      	ldr	r2, [pc, #176]	@ (80081cc <prvAddNewTaskToReadyList+0xc4>)
 800811c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800811e:	4b2c      	ldr	r3, [pc, #176]	@ (80081d0 <prvAddNewTaskToReadyList+0xc8>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d109      	bne.n	800813a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008126:	4a2a      	ldr	r2, [pc, #168]	@ (80081d0 <prvAddNewTaskToReadyList+0xc8>)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800812c:	4b27      	ldr	r3, [pc, #156]	@ (80081cc <prvAddNewTaskToReadyList+0xc4>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	2b01      	cmp	r3, #1
 8008132:	d110      	bne.n	8008156 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008134:	f000 fc1e 	bl	8008974 <prvInitialiseTaskLists>
 8008138:	e00d      	b.n	8008156 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800813a:	4b26      	ldr	r3, [pc, #152]	@ (80081d4 <prvAddNewTaskToReadyList+0xcc>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d109      	bne.n	8008156 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008142:	4b23      	ldr	r3, [pc, #140]	@ (80081d0 <prvAddNewTaskToReadyList+0xc8>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800814c:	429a      	cmp	r2, r3
 800814e:	d802      	bhi.n	8008156 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008150:	4a1f      	ldr	r2, [pc, #124]	@ (80081d0 <prvAddNewTaskToReadyList+0xc8>)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008156:	4b20      	ldr	r3, [pc, #128]	@ (80081d8 <prvAddNewTaskToReadyList+0xd0>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	3301      	adds	r3, #1
 800815c:	4a1e      	ldr	r2, [pc, #120]	@ (80081d8 <prvAddNewTaskToReadyList+0xd0>)
 800815e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008160:	4b1d      	ldr	r3, [pc, #116]	@ (80081d8 <prvAddNewTaskToReadyList+0xd0>)
 8008162:	681a      	ldr	r2, [r3, #0]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800816c:	4b1b      	ldr	r3, [pc, #108]	@ (80081dc <prvAddNewTaskToReadyList+0xd4>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	429a      	cmp	r2, r3
 8008172:	d903      	bls.n	800817c <prvAddNewTaskToReadyList+0x74>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008178:	4a18      	ldr	r2, [pc, #96]	@ (80081dc <prvAddNewTaskToReadyList+0xd4>)
 800817a:	6013      	str	r3, [r2, #0]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008180:	4613      	mov	r3, r2
 8008182:	009b      	lsls	r3, r3, #2
 8008184:	4413      	add	r3, r2
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	4a15      	ldr	r2, [pc, #84]	@ (80081e0 <prvAddNewTaskToReadyList+0xd8>)
 800818a:	441a      	add	r2, r3
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	3304      	adds	r3, #4
 8008190:	4619      	mov	r1, r3
 8008192:	4610      	mov	r0, r2
 8008194:	f7fe fdcf 	bl	8006d36 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008198:	f001 fb48 	bl	800982c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800819c:	4b0d      	ldr	r3, [pc, #52]	@ (80081d4 <prvAddNewTaskToReadyList+0xcc>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d00e      	beq.n	80081c2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80081a4:	4b0a      	ldr	r3, [pc, #40]	@ (80081d0 <prvAddNewTaskToReadyList+0xc8>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081ae:	429a      	cmp	r2, r3
 80081b0:	d207      	bcs.n	80081c2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80081b2:	4b0c      	ldr	r3, [pc, #48]	@ (80081e4 <prvAddNewTaskToReadyList+0xdc>)
 80081b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081b8:	601a      	str	r2, [r3, #0]
 80081ba:	f3bf 8f4f 	dsb	sy
 80081be:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80081c2:	bf00      	nop
 80081c4:	3708      	adds	r7, #8
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}
 80081ca:	bf00      	nop
 80081cc:	2000121c 	.word	0x2000121c
 80081d0:	20000d48 	.word	0x20000d48
 80081d4:	20001228 	.word	0x20001228
 80081d8:	20001238 	.word	0x20001238
 80081dc:	20001224 	.word	0x20001224
 80081e0:	20000d4c 	.word	0x20000d4c
 80081e4:	e000ed04 	.word	0xe000ed04

080081e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b084      	sub	sp, #16
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80081f0:	2300      	movs	r3, #0
 80081f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d018      	beq.n	800822c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80081fa:	4b14      	ldr	r3, [pc, #80]	@ (800824c <vTaskDelay+0x64>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d00b      	beq.n	800821a <vTaskDelay+0x32>
	__asm volatile
 8008202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008206:	f383 8811 	msr	BASEPRI, r3
 800820a:	f3bf 8f6f 	isb	sy
 800820e:	f3bf 8f4f 	dsb	sy
 8008212:	60bb      	str	r3, [r7, #8]
}
 8008214:	bf00      	nop
 8008216:	bf00      	nop
 8008218:	e7fd      	b.n	8008216 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800821a:	f000 f883 	bl	8008324 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800821e:	2100      	movs	r1, #0
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f000 fdf3 	bl	8008e0c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008226:	f000 f88b 	bl	8008340 <xTaskResumeAll>
 800822a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d107      	bne.n	8008242 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008232:	4b07      	ldr	r3, [pc, #28]	@ (8008250 <vTaskDelay+0x68>)
 8008234:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008238:	601a      	str	r2, [r3, #0]
 800823a:	f3bf 8f4f 	dsb	sy
 800823e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008242:	bf00      	nop
 8008244:	3710      	adds	r7, #16
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}
 800824a:	bf00      	nop
 800824c:	20001244 	.word	0x20001244
 8008250:	e000ed04 	.word	0xe000ed04

08008254 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b08a      	sub	sp, #40	@ 0x28
 8008258:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800825a:	2300      	movs	r3, #0
 800825c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800825e:	2300      	movs	r3, #0
 8008260:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008262:	463a      	mov	r2, r7
 8008264:	1d39      	adds	r1, r7, #4
 8008266:	f107 0308 	add.w	r3, r7, #8
 800826a:	4618      	mov	r0, r3
 800826c:	f7fe fd02 	bl	8006c74 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008270:	6839      	ldr	r1, [r7, #0]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	68ba      	ldr	r2, [r7, #8]
 8008276:	9202      	str	r2, [sp, #8]
 8008278:	9301      	str	r3, [sp, #4]
 800827a:	2300      	movs	r3, #0
 800827c:	9300      	str	r3, [sp, #0]
 800827e:	2300      	movs	r3, #0
 8008280:	460a      	mov	r2, r1
 8008282:	4922      	ldr	r1, [pc, #136]	@ (800830c <vTaskStartScheduler+0xb8>)
 8008284:	4822      	ldr	r0, [pc, #136]	@ (8008310 <vTaskStartScheduler+0xbc>)
 8008286:	f7ff fe09 	bl	8007e9c <xTaskCreateStatic>
 800828a:	4603      	mov	r3, r0
 800828c:	4a21      	ldr	r2, [pc, #132]	@ (8008314 <vTaskStartScheduler+0xc0>)
 800828e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008290:	4b20      	ldr	r3, [pc, #128]	@ (8008314 <vTaskStartScheduler+0xc0>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d002      	beq.n	800829e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008298:	2301      	movs	r3, #1
 800829a:	617b      	str	r3, [r7, #20]
 800829c:	e001      	b.n	80082a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800829e:	2300      	movs	r3, #0
 80082a0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	2b01      	cmp	r3, #1
 80082a6:	d102      	bne.n	80082ae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80082a8:	f000 fe04 	bl	8008eb4 <xTimerCreateTimerTask>
 80082ac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	d116      	bne.n	80082e2 <vTaskStartScheduler+0x8e>
	__asm volatile
 80082b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082b8:	f383 8811 	msr	BASEPRI, r3
 80082bc:	f3bf 8f6f 	isb	sy
 80082c0:	f3bf 8f4f 	dsb	sy
 80082c4:	613b      	str	r3, [r7, #16]
}
 80082c6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80082c8:	4b13      	ldr	r3, [pc, #76]	@ (8008318 <vTaskStartScheduler+0xc4>)
 80082ca:	f04f 32ff 	mov.w	r2, #4294967295
 80082ce:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80082d0:	4b12      	ldr	r3, [pc, #72]	@ (800831c <vTaskStartScheduler+0xc8>)
 80082d2:	2201      	movs	r2, #1
 80082d4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80082d6:	4b12      	ldr	r3, [pc, #72]	@ (8008320 <vTaskStartScheduler+0xcc>)
 80082d8:	2200      	movs	r2, #0
 80082da:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80082dc:	f001 f9d0 	bl	8009680 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80082e0:	e00f      	b.n	8008302 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082e8:	d10b      	bne.n	8008302 <vTaskStartScheduler+0xae>
	__asm volatile
 80082ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082ee:	f383 8811 	msr	BASEPRI, r3
 80082f2:	f3bf 8f6f 	isb	sy
 80082f6:	f3bf 8f4f 	dsb	sy
 80082fa:	60fb      	str	r3, [r7, #12]
}
 80082fc:	bf00      	nop
 80082fe:	bf00      	nop
 8008300:	e7fd      	b.n	80082fe <vTaskStartScheduler+0xaa>
}
 8008302:	bf00      	nop
 8008304:	3718      	adds	r7, #24
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}
 800830a:	bf00      	nop
 800830c:	0800ceb4 	.word	0x0800ceb4
 8008310:	08008945 	.word	0x08008945
 8008314:	20001240 	.word	0x20001240
 8008318:	2000123c 	.word	0x2000123c
 800831c:	20001228 	.word	0x20001228
 8008320:	20001220 	.word	0x20001220

08008324 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008324:	b480      	push	{r7}
 8008326:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008328:	4b04      	ldr	r3, [pc, #16]	@ (800833c <vTaskSuspendAll+0x18>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	3301      	adds	r3, #1
 800832e:	4a03      	ldr	r2, [pc, #12]	@ (800833c <vTaskSuspendAll+0x18>)
 8008330:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008332:	bf00      	nop
 8008334:	46bd      	mov	sp, r7
 8008336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833a:	4770      	bx	lr
 800833c:	20001244 	.word	0x20001244

08008340 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b084      	sub	sp, #16
 8008344:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008346:	2300      	movs	r3, #0
 8008348:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800834a:	2300      	movs	r3, #0
 800834c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800834e:	4b42      	ldr	r3, [pc, #264]	@ (8008458 <xTaskResumeAll+0x118>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d10b      	bne.n	800836e <xTaskResumeAll+0x2e>
	__asm volatile
 8008356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800835a:	f383 8811 	msr	BASEPRI, r3
 800835e:	f3bf 8f6f 	isb	sy
 8008362:	f3bf 8f4f 	dsb	sy
 8008366:	603b      	str	r3, [r7, #0]
}
 8008368:	bf00      	nop
 800836a:	bf00      	nop
 800836c:	e7fd      	b.n	800836a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800836e:	f001 fa2b 	bl	80097c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008372:	4b39      	ldr	r3, [pc, #228]	@ (8008458 <xTaskResumeAll+0x118>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	3b01      	subs	r3, #1
 8008378:	4a37      	ldr	r2, [pc, #220]	@ (8008458 <xTaskResumeAll+0x118>)
 800837a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800837c:	4b36      	ldr	r3, [pc, #216]	@ (8008458 <xTaskResumeAll+0x118>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d162      	bne.n	800844a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008384:	4b35      	ldr	r3, [pc, #212]	@ (800845c <xTaskResumeAll+0x11c>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d05e      	beq.n	800844a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800838c:	e02f      	b.n	80083ee <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800838e:	4b34      	ldr	r3, [pc, #208]	@ (8008460 <xTaskResumeAll+0x120>)
 8008390:	68db      	ldr	r3, [r3, #12]
 8008392:	68db      	ldr	r3, [r3, #12]
 8008394:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	3318      	adds	r3, #24
 800839a:	4618      	mov	r0, r3
 800839c:	f7fe fd28 	bl	8006df0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	3304      	adds	r3, #4
 80083a4:	4618      	mov	r0, r3
 80083a6:	f7fe fd23 	bl	8006df0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083ae:	4b2d      	ldr	r3, [pc, #180]	@ (8008464 <xTaskResumeAll+0x124>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	429a      	cmp	r2, r3
 80083b4:	d903      	bls.n	80083be <xTaskResumeAll+0x7e>
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083ba:	4a2a      	ldr	r2, [pc, #168]	@ (8008464 <xTaskResumeAll+0x124>)
 80083bc:	6013      	str	r3, [r2, #0]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083c2:	4613      	mov	r3, r2
 80083c4:	009b      	lsls	r3, r3, #2
 80083c6:	4413      	add	r3, r2
 80083c8:	009b      	lsls	r3, r3, #2
 80083ca:	4a27      	ldr	r2, [pc, #156]	@ (8008468 <xTaskResumeAll+0x128>)
 80083cc:	441a      	add	r2, r3
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	3304      	adds	r3, #4
 80083d2:	4619      	mov	r1, r3
 80083d4:	4610      	mov	r0, r2
 80083d6:	f7fe fcae 	bl	8006d36 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083de:	4b23      	ldr	r3, [pc, #140]	@ (800846c <xTaskResumeAll+0x12c>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083e4:	429a      	cmp	r2, r3
 80083e6:	d302      	bcc.n	80083ee <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80083e8:	4b21      	ldr	r3, [pc, #132]	@ (8008470 <xTaskResumeAll+0x130>)
 80083ea:	2201      	movs	r2, #1
 80083ec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80083ee:	4b1c      	ldr	r3, [pc, #112]	@ (8008460 <xTaskResumeAll+0x120>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d1cb      	bne.n	800838e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d001      	beq.n	8008400 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80083fc:	f000 fb58 	bl	8008ab0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008400:	4b1c      	ldr	r3, [pc, #112]	@ (8008474 <xTaskResumeAll+0x134>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d010      	beq.n	800842e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800840c:	f000 f846 	bl	800849c <xTaskIncrementTick>
 8008410:	4603      	mov	r3, r0
 8008412:	2b00      	cmp	r3, #0
 8008414:	d002      	beq.n	800841c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008416:	4b16      	ldr	r3, [pc, #88]	@ (8008470 <xTaskResumeAll+0x130>)
 8008418:	2201      	movs	r2, #1
 800841a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	3b01      	subs	r3, #1
 8008420:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d1f1      	bne.n	800840c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008428:	4b12      	ldr	r3, [pc, #72]	@ (8008474 <xTaskResumeAll+0x134>)
 800842a:	2200      	movs	r2, #0
 800842c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800842e:	4b10      	ldr	r3, [pc, #64]	@ (8008470 <xTaskResumeAll+0x130>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d009      	beq.n	800844a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008436:	2301      	movs	r3, #1
 8008438:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800843a:	4b0f      	ldr	r3, [pc, #60]	@ (8008478 <xTaskResumeAll+0x138>)
 800843c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008440:	601a      	str	r2, [r3, #0]
 8008442:	f3bf 8f4f 	dsb	sy
 8008446:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800844a:	f001 f9ef 	bl	800982c <vPortExitCritical>

	return xAlreadyYielded;
 800844e:	68bb      	ldr	r3, [r7, #8]
}
 8008450:	4618      	mov	r0, r3
 8008452:	3710      	adds	r7, #16
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}
 8008458:	20001244 	.word	0x20001244
 800845c:	2000121c 	.word	0x2000121c
 8008460:	200011dc 	.word	0x200011dc
 8008464:	20001224 	.word	0x20001224
 8008468:	20000d4c 	.word	0x20000d4c
 800846c:	20000d48 	.word	0x20000d48
 8008470:	20001230 	.word	0x20001230
 8008474:	2000122c 	.word	0x2000122c
 8008478:	e000ed04 	.word	0xe000ed04

0800847c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800847c:	b480      	push	{r7}
 800847e:	b083      	sub	sp, #12
 8008480:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008482:	4b05      	ldr	r3, [pc, #20]	@ (8008498 <xTaskGetTickCount+0x1c>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008488:	687b      	ldr	r3, [r7, #4]
}
 800848a:	4618      	mov	r0, r3
 800848c:	370c      	adds	r7, #12
 800848e:	46bd      	mov	sp, r7
 8008490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008494:	4770      	bx	lr
 8008496:	bf00      	nop
 8008498:	20001220 	.word	0x20001220

0800849c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b086      	sub	sp, #24
 80084a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80084a2:	2300      	movs	r3, #0
 80084a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80084a6:	4b4f      	ldr	r3, [pc, #316]	@ (80085e4 <xTaskIncrementTick+0x148>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	f040 8090 	bne.w	80085d0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80084b0:	4b4d      	ldr	r3, [pc, #308]	@ (80085e8 <xTaskIncrementTick+0x14c>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	3301      	adds	r3, #1
 80084b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80084b8:	4a4b      	ldr	r2, [pc, #300]	@ (80085e8 <xTaskIncrementTick+0x14c>)
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d121      	bne.n	8008508 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80084c4:	4b49      	ldr	r3, [pc, #292]	@ (80085ec <xTaskIncrementTick+0x150>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d00b      	beq.n	80084e6 <xTaskIncrementTick+0x4a>
	__asm volatile
 80084ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084d2:	f383 8811 	msr	BASEPRI, r3
 80084d6:	f3bf 8f6f 	isb	sy
 80084da:	f3bf 8f4f 	dsb	sy
 80084de:	603b      	str	r3, [r7, #0]
}
 80084e0:	bf00      	nop
 80084e2:	bf00      	nop
 80084e4:	e7fd      	b.n	80084e2 <xTaskIncrementTick+0x46>
 80084e6:	4b41      	ldr	r3, [pc, #260]	@ (80085ec <xTaskIncrementTick+0x150>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	60fb      	str	r3, [r7, #12]
 80084ec:	4b40      	ldr	r3, [pc, #256]	@ (80085f0 <xTaskIncrementTick+0x154>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a3e      	ldr	r2, [pc, #248]	@ (80085ec <xTaskIncrementTick+0x150>)
 80084f2:	6013      	str	r3, [r2, #0]
 80084f4:	4a3e      	ldr	r2, [pc, #248]	@ (80085f0 <xTaskIncrementTick+0x154>)
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	6013      	str	r3, [r2, #0]
 80084fa:	4b3e      	ldr	r3, [pc, #248]	@ (80085f4 <xTaskIncrementTick+0x158>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	3301      	adds	r3, #1
 8008500:	4a3c      	ldr	r2, [pc, #240]	@ (80085f4 <xTaskIncrementTick+0x158>)
 8008502:	6013      	str	r3, [r2, #0]
 8008504:	f000 fad4 	bl	8008ab0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008508:	4b3b      	ldr	r3, [pc, #236]	@ (80085f8 <xTaskIncrementTick+0x15c>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	693a      	ldr	r2, [r7, #16]
 800850e:	429a      	cmp	r2, r3
 8008510:	d349      	bcc.n	80085a6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008512:	4b36      	ldr	r3, [pc, #216]	@ (80085ec <xTaskIncrementTick+0x150>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d104      	bne.n	8008526 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800851c:	4b36      	ldr	r3, [pc, #216]	@ (80085f8 <xTaskIncrementTick+0x15c>)
 800851e:	f04f 32ff 	mov.w	r2, #4294967295
 8008522:	601a      	str	r2, [r3, #0]
					break;
 8008524:	e03f      	b.n	80085a6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008526:	4b31      	ldr	r3, [pc, #196]	@ (80085ec <xTaskIncrementTick+0x150>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	68db      	ldr	r3, [r3, #12]
 800852c:	68db      	ldr	r3, [r3, #12]
 800852e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008536:	693a      	ldr	r2, [r7, #16]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	429a      	cmp	r2, r3
 800853c:	d203      	bcs.n	8008546 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800853e:	4a2e      	ldr	r2, [pc, #184]	@ (80085f8 <xTaskIncrementTick+0x15c>)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008544:	e02f      	b.n	80085a6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	3304      	adds	r3, #4
 800854a:	4618      	mov	r0, r3
 800854c:	f7fe fc50 	bl	8006df0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008554:	2b00      	cmp	r3, #0
 8008556:	d004      	beq.n	8008562 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	3318      	adds	r3, #24
 800855c:	4618      	mov	r0, r3
 800855e:	f7fe fc47 	bl	8006df0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008566:	4b25      	ldr	r3, [pc, #148]	@ (80085fc <xTaskIncrementTick+0x160>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	429a      	cmp	r2, r3
 800856c:	d903      	bls.n	8008576 <xTaskIncrementTick+0xda>
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008572:	4a22      	ldr	r2, [pc, #136]	@ (80085fc <xTaskIncrementTick+0x160>)
 8008574:	6013      	str	r3, [r2, #0]
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800857a:	4613      	mov	r3, r2
 800857c:	009b      	lsls	r3, r3, #2
 800857e:	4413      	add	r3, r2
 8008580:	009b      	lsls	r3, r3, #2
 8008582:	4a1f      	ldr	r2, [pc, #124]	@ (8008600 <xTaskIncrementTick+0x164>)
 8008584:	441a      	add	r2, r3
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	3304      	adds	r3, #4
 800858a:	4619      	mov	r1, r3
 800858c:	4610      	mov	r0, r2
 800858e:	f7fe fbd2 	bl	8006d36 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008596:	4b1b      	ldr	r3, [pc, #108]	@ (8008604 <xTaskIncrementTick+0x168>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800859c:	429a      	cmp	r2, r3
 800859e:	d3b8      	bcc.n	8008512 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80085a0:	2301      	movs	r3, #1
 80085a2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80085a4:	e7b5      	b.n	8008512 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80085a6:	4b17      	ldr	r3, [pc, #92]	@ (8008604 <xTaskIncrementTick+0x168>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085ac:	4914      	ldr	r1, [pc, #80]	@ (8008600 <xTaskIncrementTick+0x164>)
 80085ae:	4613      	mov	r3, r2
 80085b0:	009b      	lsls	r3, r3, #2
 80085b2:	4413      	add	r3, r2
 80085b4:	009b      	lsls	r3, r3, #2
 80085b6:	440b      	add	r3, r1
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	2b01      	cmp	r3, #1
 80085bc:	d901      	bls.n	80085c2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80085be:	2301      	movs	r3, #1
 80085c0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80085c2:	4b11      	ldr	r3, [pc, #68]	@ (8008608 <xTaskIncrementTick+0x16c>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d007      	beq.n	80085da <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80085ca:	2301      	movs	r3, #1
 80085cc:	617b      	str	r3, [r7, #20]
 80085ce:	e004      	b.n	80085da <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80085d0:	4b0e      	ldr	r3, [pc, #56]	@ (800860c <xTaskIncrementTick+0x170>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	3301      	adds	r3, #1
 80085d6:	4a0d      	ldr	r2, [pc, #52]	@ (800860c <xTaskIncrementTick+0x170>)
 80085d8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80085da:	697b      	ldr	r3, [r7, #20]
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3718      	adds	r7, #24
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}
 80085e4:	20001244 	.word	0x20001244
 80085e8:	20001220 	.word	0x20001220
 80085ec:	200011d4 	.word	0x200011d4
 80085f0:	200011d8 	.word	0x200011d8
 80085f4:	20001234 	.word	0x20001234
 80085f8:	2000123c 	.word	0x2000123c
 80085fc:	20001224 	.word	0x20001224
 8008600:	20000d4c 	.word	0x20000d4c
 8008604:	20000d48 	.word	0x20000d48
 8008608:	20001230 	.word	0x20001230
 800860c:	2000122c 	.word	0x2000122c

08008610 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008610:	b480      	push	{r7}
 8008612:	b085      	sub	sp, #20
 8008614:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008616:	4b28      	ldr	r3, [pc, #160]	@ (80086b8 <vTaskSwitchContext+0xa8>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d003      	beq.n	8008626 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800861e:	4b27      	ldr	r3, [pc, #156]	@ (80086bc <vTaskSwitchContext+0xac>)
 8008620:	2201      	movs	r2, #1
 8008622:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008624:	e042      	b.n	80086ac <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8008626:	4b25      	ldr	r3, [pc, #148]	@ (80086bc <vTaskSwitchContext+0xac>)
 8008628:	2200      	movs	r2, #0
 800862a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800862c:	4b24      	ldr	r3, [pc, #144]	@ (80086c0 <vTaskSwitchContext+0xb0>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	60fb      	str	r3, [r7, #12]
 8008632:	e011      	b.n	8008658 <vTaskSwitchContext+0x48>
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d10b      	bne.n	8008652 <vTaskSwitchContext+0x42>
	__asm volatile
 800863a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800863e:	f383 8811 	msr	BASEPRI, r3
 8008642:	f3bf 8f6f 	isb	sy
 8008646:	f3bf 8f4f 	dsb	sy
 800864a:	607b      	str	r3, [r7, #4]
}
 800864c:	bf00      	nop
 800864e:	bf00      	nop
 8008650:	e7fd      	b.n	800864e <vTaskSwitchContext+0x3e>
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	3b01      	subs	r3, #1
 8008656:	60fb      	str	r3, [r7, #12]
 8008658:	491a      	ldr	r1, [pc, #104]	@ (80086c4 <vTaskSwitchContext+0xb4>)
 800865a:	68fa      	ldr	r2, [r7, #12]
 800865c:	4613      	mov	r3, r2
 800865e:	009b      	lsls	r3, r3, #2
 8008660:	4413      	add	r3, r2
 8008662:	009b      	lsls	r3, r3, #2
 8008664:	440b      	add	r3, r1
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d0e3      	beq.n	8008634 <vTaskSwitchContext+0x24>
 800866c:	68fa      	ldr	r2, [r7, #12]
 800866e:	4613      	mov	r3, r2
 8008670:	009b      	lsls	r3, r3, #2
 8008672:	4413      	add	r3, r2
 8008674:	009b      	lsls	r3, r3, #2
 8008676:	4a13      	ldr	r2, [pc, #76]	@ (80086c4 <vTaskSwitchContext+0xb4>)
 8008678:	4413      	add	r3, r2
 800867a:	60bb      	str	r3, [r7, #8]
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	685a      	ldr	r2, [r3, #4]
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	605a      	str	r2, [r3, #4]
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	685a      	ldr	r2, [r3, #4]
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	3308      	adds	r3, #8
 800868e:	429a      	cmp	r2, r3
 8008690:	d104      	bne.n	800869c <vTaskSwitchContext+0x8c>
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	685a      	ldr	r2, [r3, #4]
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	605a      	str	r2, [r3, #4]
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	68db      	ldr	r3, [r3, #12]
 80086a2:	4a09      	ldr	r2, [pc, #36]	@ (80086c8 <vTaskSwitchContext+0xb8>)
 80086a4:	6013      	str	r3, [r2, #0]
 80086a6:	4a06      	ldr	r2, [pc, #24]	@ (80086c0 <vTaskSwitchContext+0xb0>)
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	6013      	str	r3, [r2, #0]
}
 80086ac:	bf00      	nop
 80086ae:	3714      	adds	r7, #20
 80086b0:	46bd      	mov	sp, r7
 80086b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b6:	4770      	bx	lr
 80086b8:	20001244 	.word	0x20001244
 80086bc:	20001230 	.word	0x20001230
 80086c0:	20001224 	.word	0x20001224
 80086c4:	20000d4c 	.word	0x20000d4c
 80086c8:	20000d48 	.word	0x20000d48

080086cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d10b      	bne.n	80086f4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80086dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086e0:	f383 8811 	msr	BASEPRI, r3
 80086e4:	f3bf 8f6f 	isb	sy
 80086e8:	f3bf 8f4f 	dsb	sy
 80086ec:	60fb      	str	r3, [r7, #12]
}
 80086ee:	bf00      	nop
 80086f0:	bf00      	nop
 80086f2:	e7fd      	b.n	80086f0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80086f4:	4b07      	ldr	r3, [pc, #28]	@ (8008714 <vTaskPlaceOnEventList+0x48>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	3318      	adds	r3, #24
 80086fa:	4619      	mov	r1, r3
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f7fe fb3e 	bl	8006d7e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008702:	2101      	movs	r1, #1
 8008704:	6838      	ldr	r0, [r7, #0]
 8008706:	f000 fb81 	bl	8008e0c <prvAddCurrentTaskToDelayedList>
}
 800870a:	bf00      	nop
 800870c:	3710      	adds	r7, #16
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}
 8008712:	bf00      	nop
 8008714:	20000d48 	.word	0x20000d48

08008718 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008718:	b580      	push	{r7, lr}
 800871a:	b086      	sub	sp, #24
 800871c:	af00      	add	r7, sp, #0
 800871e:	60f8      	str	r0, [r7, #12]
 8008720:	60b9      	str	r1, [r7, #8]
 8008722:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d10b      	bne.n	8008742 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800872a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800872e:	f383 8811 	msr	BASEPRI, r3
 8008732:	f3bf 8f6f 	isb	sy
 8008736:	f3bf 8f4f 	dsb	sy
 800873a:	617b      	str	r3, [r7, #20]
}
 800873c:	bf00      	nop
 800873e:	bf00      	nop
 8008740:	e7fd      	b.n	800873e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008742:	4b0a      	ldr	r3, [pc, #40]	@ (800876c <vTaskPlaceOnEventListRestricted+0x54>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	3318      	adds	r3, #24
 8008748:	4619      	mov	r1, r3
 800874a:	68f8      	ldr	r0, [r7, #12]
 800874c:	f7fe faf3 	bl	8006d36 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d002      	beq.n	800875c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008756:	f04f 33ff 	mov.w	r3, #4294967295
 800875a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800875c:	6879      	ldr	r1, [r7, #4]
 800875e:	68b8      	ldr	r0, [r7, #8]
 8008760:	f000 fb54 	bl	8008e0c <prvAddCurrentTaskToDelayedList>
	}
 8008764:	bf00      	nop
 8008766:	3718      	adds	r7, #24
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}
 800876c:	20000d48 	.word	0x20000d48

08008770 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b086      	sub	sp, #24
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	68db      	ldr	r3, [r3, #12]
 800877c:	68db      	ldr	r3, [r3, #12]
 800877e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d10b      	bne.n	800879e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800878a:	f383 8811 	msr	BASEPRI, r3
 800878e:	f3bf 8f6f 	isb	sy
 8008792:	f3bf 8f4f 	dsb	sy
 8008796:	60fb      	str	r3, [r7, #12]
}
 8008798:	bf00      	nop
 800879a:	bf00      	nop
 800879c:	e7fd      	b.n	800879a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	3318      	adds	r3, #24
 80087a2:	4618      	mov	r0, r3
 80087a4:	f7fe fb24 	bl	8006df0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087a8:	4b1d      	ldr	r3, [pc, #116]	@ (8008820 <xTaskRemoveFromEventList+0xb0>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d11d      	bne.n	80087ec <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	3304      	adds	r3, #4
 80087b4:	4618      	mov	r0, r3
 80087b6:	f7fe fb1b 	bl	8006df0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087be:	4b19      	ldr	r3, [pc, #100]	@ (8008824 <xTaskRemoveFromEventList+0xb4>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d903      	bls.n	80087ce <xTaskRemoveFromEventList+0x5e>
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087ca:	4a16      	ldr	r2, [pc, #88]	@ (8008824 <xTaskRemoveFromEventList+0xb4>)
 80087cc:	6013      	str	r3, [r2, #0]
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087d2:	4613      	mov	r3, r2
 80087d4:	009b      	lsls	r3, r3, #2
 80087d6:	4413      	add	r3, r2
 80087d8:	009b      	lsls	r3, r3, #2
 80087da:	4a13      	ldr	r2, [pc, #76]	@ (8008828 <xTaskRemoveFromEventList+0xb8>)
 80087dc:	441a      	add	r2, r3
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	3304      	adds	r3, #4
 80087e2:	4619      	mov	r1, r3
 80087e4:	4610      	mov	r0, r2
 80087e6:	f7fe faa6 	bl	8006d36 <vListInsertEnd>
 80087ea:	e005      	b.n	80087f8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	3318      	adds	r3, #24
 80087f0:	4619      	mov	r1, r3
 80087f2:	480e      	ldr	r0, [pc, #56]	@ (800882c <xTaskRemoveFromEventList+0xbc>)
 80087f4:	f7fe fa9f 	bl	8006d36 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80087f8:	693b      	ldr	r3, [r7, #16]
 80087fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087fc:	4b0c      	ldr	r3, [pc, #48]	@ (8008830 <xTaskRemoveFromEventList+0xc0>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008802:	429a      	cmp	r2, r3
 8008804:	d905      	bls.n	8008812 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008806:	2301      	movs	r3, #1
 8008808:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800880a:	4b0a      	ldr	r3, [pc, #40]	@ (8008834 <xTaskRemoveFromEventList+0xc4>)
 800880c:	2201      	movs	r2, #1
 800880e:	601a      	str	r2, [r3, #0]
 8008810:	e001      	b.n	8008816 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008812:	2300      	movs	r3, #0
 8008814:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008816:	697b      	ldr	r3, [r7, #20]
}
 8008818:	4618      	mov	r0, r3
 800881a:	3718      	adds	r7, #24
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}
 8008820:	20001244 	.word	0x20001244
 8008824:	20001224 	.word	0x20001224
 8008828:	20000d4c 	.word	0x20000d4c
 800882c:	200011dc 	.word	0x200011dc
 8008830:	20000d48 	.word	0x20000d48
 8008834:	20001230 	.word	0x20001230

08008838 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008838:	b480      	push	{r7}
 800883a:	b083      	sub	sp, #12
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008840:	4b06      	ldr	r3, [pc, #24]	@ (800885c <vTaskInternalSetTimeOutState+0x24>)
 8008842:	681a      	ldr	r2, [r3, #0]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008848:	4b05      	ldr	r3, [pc, #20]	@ (8008860 <vTaskInternalSetTimeOutState+0x28>)
 800884a:	681a      	ldr	r2, [r3, #0]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	605a      	str	r2, [r3, #4]
}
 8008850:	bf00      	nop
 8008852:	370c      	adds	r7, #12
 8008854:	46bd      	mov	sp, r7
 8008856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885a:	4770      	bx	lr
 800885c:	20001234 	.word	0x20001234
 8008860:	20001220 	.word	0x20001220

08008864 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b088      	sub	sp, #32
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d10b      	bne.n	800888c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008878:	f383 8811 	msr	BASEPRI, r3
 800887c:	f3bf 8f6f 	isb	sy
 8008880:	f3bf 8f4f 	dsb	sy
 8008884:	613b      	str	r3, [r7, #16]
}
 8008886:	bf00      	nop
 8008888:	bf00      	nop
 800888a:	e7fd      	b.n	8008888 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d10b      	bne.n	80088aa <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008896:	f383 8811 	msr	BASEPRI, r3
 800889a:	f3bf 8f6f 	isb	sy
 800889e:	f3bf 8f4f 	dsb	sy
 80088a2:	60fb      	str	r3, [r7, #12]
}
 80088a4:	bf00      	nop
 80088a6:	bf00      	nop
 80088a8:	e7fd      	b.n	80088a6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80088aa:	f000 ff8d 	bl	80097c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80088ae:	4b1d      	ldr	r3, [pc, #116]	@ (8008924 <xTaskCheckForTimeOut+0xc0>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	69ba      	ldr	r2, [r7, #24]
 80088ba:	1ad3      	subs	r3, r2, r3
 80088bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088c6:	d102      	bne.n	80088ce <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80088c8:	2300      	movs	r3, #0
 80088ca:	61fb      	str	r3, [r7, #28]
 80088cc:	e023      	b.n	8008916 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681a      	ldr	r2, [r3, #0]
 80088d2:	4b15      	ldr	r3, [pc, #84]	@ (8008928 <xTaskCheckForTimeOut+0xc4>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	429a      	cmp	r2, r3
 80088d8:	d007      	beq.n	80088ea <xTaskCheckForTimeOut+0x86>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	69ba      	ldr	r2, [r7, #24]
 80088e0:	429a      	cmp	r2, r3
 80088e2:	d302      	bcc.n	80088ea <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80088e4:	2301      	movs	r3, #1
 80088e6:	61fb      	str	r3, [r7, #28]
 80088e8:	e015      	b.n	8008916 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	697a      	ldr	r2, [r7, #20]
 80088f0:	429a      	cmp	r2, r3
 80088f2:	d20b      	bcs.n	800890c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	681a      	ldr	r2, [r3, #0]
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	1ad2      	subs	r2, r2, r3
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f7ff ff99 	bl	8008838 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008906:	2300      	movs	r3, #0
 8008908:	61fb      	str	r3, [r7, #28]
 800890a:	e004      	b.n	8008916 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	2200      	movs	r2, #0
 8008910:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008912:	2301      	movs	r3, #1
 8008914:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008916:	f000 ff89 	bl	800982c <vPortExitCritical>

	return xReturn;
 800891a:	69fb      	ldr	r3, [r7, #28]
}
 800891c:	4618      	mov	r0, r3
 800891e:	3720      	adds	r7, #32
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}
 8008924:	20001220 	.word	0x20001220
 8008928:	20001234 	.word	0x20001234

0800892c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800892c:	b480      	push	{r7}
 800892e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008930:	4b03      	ldr	r3, [pc, #12]	@ (8008940 <vTaskMissedYield+0x14>)
 8008932:	2201      	movs	r2, #1
 8008934:	601a      	str	r2, [r3, #0]
}
 8008936:	bf00      	nop
 8008938:	46bd      	mov	sp, r7
 800893a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893e:	4770      	bx	lr
 8008940:	20001230 	.word	0x20001230

08008944 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b082      	sub	sp, #8
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800894c:	f000 f852 	bl	80089f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008950:	4b06      	ldr	r3, [pc, #24]	@ (800896c <prvIdleTask+0x28>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	2b01      	cmp	r3, #1
 8008956:	d9f9      	bls.n	800894c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008958:	4b05      	ldr	r3, [pc, #20]	@ (8008970 <prvIdleTask+0x2c>)
 800895a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800895e:	601a      	str	r2, [r3, #0]
 8008960:	f3bf 8f4f 	dsb	sy
 8008964:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008968:	e7f0      	b.n	800894c <prvIdleTask+0x8>
 800896a:	bf00      	nop
 800896c:	20000d4c 	.word	0x20000d4c
 8008970:	e000ed04 	.word	0xe000ed04

08008974 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b082      	sub	sp, #8
 8008978:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800897a:	2300      	movs	r3, #0
 800897c:	607b      	str	r3, [r7, #4]
 800897e:	e00c      	b.n	800899a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	4613      	mov	r3, r2
 8008984:	009b      	lsls	r3, r3, #2
 8008986:	4413      	add	r3, r2
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	4a12      	ldr	r2, [pc, #72]	@ (80089d4 <prvInitialiseTaskLists+0x60>)
 800898c:	4413      	add	r3, r2
 800898e:	4618      	mov	r0, r3
 8008990:	f7fe f9a4 	bl	8006cdc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	3301      	adds	r3, #1
 8008998:	607b      	str	r3, [r7, #4]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2b37      	cmp	r3, #55	@ 0x37
 800899e:	d9ef      	bls.n	8008980 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80089a0:	480d      	ldr	r0, [pc, #52]	@ (80089d8 <prvInitialiseTaskLists+0x64>)
 80089a2:	f7fe f99b 	bl	8006cdc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80089a6:	480d      	ldr	r0, [pc, #52]	@ (80089dc <prvInitialiseTaskLists+0x68>)
 80089a8:	f7fe f998 	bl	8006cdc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80089ac:	480c      	ldr	r0, [pc, #48]	@ (80089e0 <prvInitialiseTaskLists+0x6c>)
 80089ae:	f7fe f995 	bl	8006cdc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80089b2:	480c      	ldr	r0, [pc, #48]	@ (80089e4 <prvInitialiseTaskLists+0x70>)
 80089b4:	f7fe f992 	bl	8006cdc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80089b8:	480b      	ldr	r0, [pc, #44]	@ (80089e8 <prvInitialiseTaskLists+0x74>)
 80089ba:	f7fe f98f 	bl	8006cdc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80089be:	4b0b      	ldr	r3, [pc, #44]	@ (80089ec <prvInitialiseTaskLists+0x78>)
 80089c0:	4a05      	ldr	r2, [pc, #20]	@ (80089d8 <prvInitialiseTaskLists+0x64>)
 80089c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80089c4:	4b0a      	ldr	r3, [pc, #40]	@ (80089f0 <prvInitialiseTaskLists+0x7c>)
 80089c6:	4a05      	ldr	r2, [pc, #20]	@ (80089dc <prvInitialiseTaskLists+0x68>)
 80089c8:	601a      	str	r2, [r3, #0]
}
 80089ca:	bf00      	nop
 80089cc:	3708      	adds	r7, #8
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
 80089d2:	bf00      	nop
 80089d4:	20000d4c 	.word	0x20000d4c
 80089d8:	200011ac 	.word	0x200011ac
 80089dc:	200011c0 	.word	0x200011c0
 80089e0:	200011dc 	.word	0x200011dc
 80089e4:	200011f0 	.word	0x200011f0
 80089e8:	20001208 	.word	0x20001208
 80089ec:	200011d4 	.word	0x200011d4
 80089f0:	200011d8 	.word	0x200011d8

080089f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b082      	sub	sp, #8
 80089f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80089fa:	e019      	b.n	8008a30 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80089fc:	f000 fee4 	bl	80097c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a00:	4b10      	ldr	r3, [pc, #64]	@ (8008a44 <prvCheckTasksWaitingTermination+0x50>)
 8008a02:	68db      	ldr	r3, [r3, #12]
 8008a04:	68db      	ldr	r3, [r3, #12]
 8008a06:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	3304      	adds	r3, #4
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f7fe f9ef 	bl	8006df0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008a12:	4b0d      	ldr	r3, [pc, #52]	@ (8008a48 <prvCheckTasksWaitingTermination+0x54>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	3b01      	subs	r3, #1
 8008a18:	4a0b      	ldr	r2, [pc, #44]	@ (8008a48 <prvCheckTasksWaitingTermination+0x54>)
 8008a1a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8008a4c <prvCheckTasksWaitingTermination+0x58>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	3b01      	subs	r3, #1
 8008a22:	4a0a      	ldr	r2, [pc, #40]	@ (8008a4c <prvCheckTasksWaitingTermination+0x58>)
 8008a24:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008a26:	f000 ff01 	bl	800982c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f000 f810 	bl	8008a50 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008a30:	4b06      	ldr	r3, [pc, #24]	@ (8008a4c <prvCheckTasksWaitingTermination+0x58>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d1e1      	bne.n	80089fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008a38:	bf00      	nop
 8008a3a:	bf00      	nop
 8008a3c:	3708      	adds	r7, #8
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}
 8008a42:	bf00      	nop
 8008a44:	200011f0 	.word	0x200011f0
 8008a48:	2000121c 	.word	0x2000121c
 8008a4c:	20001204 	.word	0x20001204

08008a50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b084      	sub	sp, #16
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d108      	bne.n	8008a74 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a66:	4618      	mov	r0, r3
 8008a68:	f001 f89e 	bl	8009ba8 <vPortFree>
				vPortFree( pxTCB );
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f001 f89b 	bl	8009ba8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008a72:	e019      	b.n	8008aa8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008a7a:	2b01      	cmp	r3, #1
 8008a7c:	d103      	bne.n	8008a86 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f001 f892 	bl	8009ba8 <vPortFree>
	}
 8008a84:	e010      	b.n	8008aa8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008a8c:	2b02      	cmp	r3, #2
 8008a8e:	d00b      	beq.n	8008aa8 <prvDeleteTCB+0x58>
	__asm volatile
 8008a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a94:	f383 8811 	msr	BASEPRI, r3
 8008a98:	f3bf 8f6f 	isb	sy
 8008a9c:	f3bf 8f4f 	dsb	sy
 8008aa0:	60fb      	str	r3, [r7, #12]
}
 8008aa2:	bf00      	nop
 8008aa4:	bf00      	nop
 8008aa6:	e7fd      	b.n	8008aa4 <prvDeleteTCB+0x54>
	}
 8008aa8:	bf00      	nop
 8008aaa:	3710      	adds	r7, #16
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b083      	sub	sp, #12
 8008ab4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ab6:	4b0c      	ldr	r3, [pc, #48]	@ (8008ae8 <prvResetNextTaskUnblockTime+0x38>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d104      	bne.n	8008aca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8008aec <prvResetNextTaskUnblockTime+0x3c>)
 8008ac2:	f04f 32ff 	mov.w	r2, #4294967295
 8008ac6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008ac8:	e008      	b.n	8008adc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008aca:	4b07      	ldr	r3, [pc, #28]	@ (8008ae8 <prvResetNextTaskUnblockTime+0x38>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	68db      	ldr	r3, [r3, #12]
 8008ad0:	68db      	ldr	r3, [r3, #12]
 8008ad2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	4a04      	ldr	r2, [pc, #16]	@ (8008aec <prvResetNextTaskUnblockTime+0x3c>)
 8008ada:	6013      	str	r3, [r2, #0]
}
 8008adc:	bf00      	nop
 8008ade:	370c      	adds	r7, #12
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae6:	4770      	bx	lr
 8008ae8:	200011d4 	.word	0x200011d4
 8008aec:	2000123c 	.word	0x2000123c

08008af0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008af0:	b480      	push	{r7}
 8008af2:	b083      	sub	sp, #12
 8008af4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008af6:	4b0b      	ldr	r3, [pc, #44]	@ (8008b24 <xTaskGetSchedulerState+0x34>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d102      	bne.n	8008b04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008afe:	2301      	movs	r3, #1
 8008b00:	607b      	str	r3, [r7, #4]
 8008b02:	e008      	b.n	8008b16 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b04:	4b08      	ldr	r3, [pc, #32]	@ (8008b28 <xTaskGetSchedulerState+0x38>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d102      	bne.n	8008b12 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008b0c:	2302      	movs	r3, #2
 8008b0e:	607b      	str	r3, [r7, #4]
 8008b10:	e001      	b.n	8008b16 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008b12:	2300      	movs	r3, #0
 8008b14:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008b16:	687b      	ldr	r3, [r7, #4]
	}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	370c      	adds	r7, #12
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b22:	4770      	bx	lr
 8008b24:	20001228 	.word	0x20001228
 8008b28:	20001244 	.word	0x20001244

08008b2c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b084      	sub	sp, #16
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d051      	beq.n	8008be6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b46:	4b2a      	ldr	r3, [pc, #168]	@ (8008bf0 <xTaskPriorityInherit+0xc4>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d241      	bcs.n	8008bd4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	699b      	ldr	r3, [r3, #24]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	db06      	blt.n	8008b66 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b58:	4b25      	ldr	r3, [pc, #148]	@ (8008bf0 <xTaskPriorityInherit+0xc4>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b5e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	6959      	ldr	r1, [r3, #20]
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b6e:	4613      	mov	r3, r2
 8008b70:	009b      	lsls	r3, r3, #2
 8008b72:	4413      	add	r3, r2
 8008b74:	009b      	lsls	r3, r3, #2
 8008b76:	4a1f      	ldr	r2, [pc, #124]	@ (8008bf4 <xTaskPriorityInherit+0xc8>)
 8008b78:	4413      	add	r3, r2
 8008b7a:	4299      	cmp	r1, r3
 8008b7c:	d122      	bne.n	8008bc4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	3304      	adds	r3, #4
 8008b82:	4618      	mov	r0, r3
 8008b84:	f7fe f934 	bl	8006df0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008b88:	4b19      	ldr	r3, [pc, #100]	@ (8008bf0 <xTaskPriorityInherit+0xc4>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b96:	4b18      	ldr	r3, [pc, #96]	@ (8008bf8 <xTaskPriorityInherit+0xcc>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	429a      	cmp	r2, r3
 8008b9c:	d903      	bls.n	8008ba6 <xTaskPriorityInherit+0x7a>
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ba2:	4a15      	ldr	r2, [pc, #84]	@ (8008bf8 <xTaskPriorityInherit+0xcc>)
 8008ba4:	6013      	str	r3, [r2, #0]
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008baa:	4613      	mov	r3, r2
 8008bac:	009b      	lsls	r3, r3, #2
 8008bae:	4413      	add	r3, r2
 8008bb0:	009b      	lsls	r3, r3, #2
 8008bb2:	4a10      	ldr	r2, [pc, #64]	@ (8008bf4 <xTaskPriorityInherit+0xc8>)
 8008bb4:	441a      	add	r2, r3
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	3304      	adds	r3, #4
 8008bba:	4619      	mov	r1, r3
 8008bbc:	4610      	mov	r0, r2
 8008bbe:	f7fe f8ba 	bl	8006d36 <vListInsertEnd>
 8008bc2:	e004      	b.n	8008bce <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008bc4:	4b0a      	ldr	r3, [pc, #40]	@ (8008bf0 <xTaskPriorityInherit+0xc4>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008bce:	2301      	movs	r3, #1
 8008bd0:	60fb      	str	r3, [r7, #12]
 8008bd2:	e008      	b.n	8008be6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008bd8:	4b05      	ldr	r3, [pc, #20]	@ (8008bf0 <xTaskPriorityInherit+0xc4>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bde:	429a      	cmp	r2, r3
 8008be0:	d201      	bcs.n	8008be6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008be2:	2301      	movs	r3, #1
 8008be4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008be6:	68fb      	ldr	r3, [r7, #12]
	}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3710      	adds	r7, #16
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}
 8008bf0:	20000d48 	.word	0x20000d48
 8008bf4:	20000d4c 	.word	0x20000d4c
 8008bf8:	20001224 	.word	0x20001224

08008bfc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b086      	sub	sp, #24
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d058      	beq.n	8008cc4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008c12:	4b2f      	ldr	r3, [pc, #188]	@ (8008cd0 <xTaskPriorityDisinherit+0xd4>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	693a      	ldr	r2, [r7, #16]
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d00b      	beq.n	8008c34 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008c1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c20:	f383 8811 	msr	BASEPRI, r3
 8008c24:	f3bf 8f6f 	isb	sy
 8008c28:	f3bf 8f4f 	dsb	sy
 8008c2c:	60fb      	str	r3, [r7, #12]
}
 8008c2e:	bf00      	nop
 8008c30:	bf00      	nop
 8008c32:	e7fd      	b.n	8008c30 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d10b      	bne.n	8008c54 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008c3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c40:	f383 8811 	msr	BASEPRI, r3
 8008c44:	f3bf 8f6f 	isb	sy
 8008c48:	f3bf 8f4f 	dsb	sy
 8008c4c:	60bb      	str	r3, [r7, #8]
}
 8008c4e:	bf00      	nop
 8008c50:	bf00      	nop
 8008c52:	e7fd      	b.n	8008c50 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c58:	1e5a      	subs	r2, r3, #1
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c62:	693b      	ldr	r3, [r7, #16]
 8008c64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d02c      	beq.n	8008cc4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d128      	bne.n	8008cc4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	3304      	adds	r3, #4
 8008c76:	4618      	mov	r0, r3
 8008c78:	f7fe f8ba 	bl	8006df0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c84:	693b      	ldr	r3, [r7, #16]
 8008c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c88:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c94:	4b0f      	ldr	r3, [pc, #60]	@ (8008cd4 <xTaskPriorityDisinherit+0xd8>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	429a      	cmp	r2, r3
 8008c9a:	d903      	bls.n	8008ca4 <xTaskPriorityDisinherit+0xa8>
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ca0:	4a0c      	ldr	r2, [pc, #48]	@ (8008cd4 <xTaskPriorityDisinherit+0xd8>)
 8008ca2:	6013      	str	r3, [r2, #0]
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ca8:	4613      	mov	r3, r2
 8008caa:	009b      	lsls	r3, r3, #2
 8008cac:	4413      	add	r3, r2
 8008cae:	009b      	lsls	r3, r3, #2
 8008cb0:	4a09      	ldr	r2, [pc, #36]	@ (8008cd8 <xTaskPriorityDisinherit+0xdc>)
 8008cb2:	441a      	add	r2, r3
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	3304      	adds	r3, #4
 8008cb8:	4619      	mov	r1, r3
 8008cba:	4610      	mov	r0, r2
 8008cbc:	f7fe f83b 	bl	8006d36 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008cc4:	697b      	ldr	r3, [r7, #20]
	}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3718      	adds	r7, #24
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}
 8008cce:	bf00      	nop
 8008cd0:	20000d48 	.word	0x20000d48
 8008cd4:	20001224 	.word	0x20001224
 8008cd8:	20000d4c 	.word	0x20000d4c

08008cdc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b088      	sub	sp, #32
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
 8008ce4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008cea:	2301      	movs	r3, #1
 8008cec:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d06c      	beq.n	8008dce <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008cf4:	69bb      	ldr	r3, [r7, #24]
 8008cf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d10b      	bne.n	8008d14 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8008cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d00:	f383 8811 	msr	BASEPRI, r3
 8008d04:	f3bf 8f6f 	isb	sy
 8008d08:	f3bf 8f4f 	dsb	sy
 8008d0c:	60fb      	str	r3, [r7, #12]
}
 8008d0e:	bf00      	nop
 8008d10:	bf00      	nop
 8008d12:	e7fd      	b.n	8008d10 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008d14:	69bb      	ldr	r3, [r7, #24]
 8008d16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d18:	683a      	ldr	r2, [r7, #0]
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	d902      	bls.n	8008d24 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	61fb      	str	r3, [r7, #28]
 8008d22:	e002      	b.n	8008d2a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008d24:	69bb      	ldr	r3, [r7, #24]
 8008d26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d28:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008d2a:	69bb      	ldr	r3, [r7, #24]
 8008d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d2e:	69fa      	ldr	r2, [r7, #28]
 8008d30:	429a      	cmp	r2, r3
 8008d32:	d04c      	beq.n	8008dce <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008d34:	69bb      	ldr	r3, [r7, #24]
 8008d36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d38:	697a      	ldr	r2, [r7, #20]
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	d147      	bne.n	8008dce <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008d3e:	4b26      	ldr	r3, [pc, #152]	@ (8008dd8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	69ba      	ldr	r2, [r7, #24]
 8008d44:	429a      	cmp	r2, r3
 8008d46:	d10b      	bne.n	8008d60 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8008d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d4c:	f383 8811 	msr	BASEPRI, r3
 8008d50:	f3bf 8f6f 	isb	sy
 8008d54:	f3bf 8f4f 	dsb	sy
 8008d58:	60bb      	str	r3, [r7, #8]
}
 8008d5a:	bf00      	nop
 8008d5c:	bf00      	nop
 8008d5e:	e7fd      	b.n	8008d5c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008d60:	69bb      	ldr	r3, [r7, #24]
 8008d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d64:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008d66:	69bb      	ldr	r3, [r7, #24]
 8008d68:	69fa      	ldr	r2, [r7, #28]
 8008d6a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008d6c:	69bb      	ldr	r3, [r7, #24]
 8008d6e:	699b      	ldr	r3, [r3, #24]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	db04      	blt.n	8008d7e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d74:	69fb      	ldr	r3, [r7, #28]
 8008d76:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008d7a:	69bb      	ldr	r3, [r7, #24]
 8008d7c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008d7e:	69bb      	ldr	r3, [r7, #24]
 8008d80:	6959      	ldr	r1, [r3, #20]
 8008d82:	693a      	ldr	r2, [r7, #16]
 8008d84:	4613      	mov	r3, r2
 8008d86:	009b      	lsls	r3, r3, #2
 8008d88:	4413      	add	r3, r2
 8008d8a:	009b      	lsls	r3, r3, #2
 8008d8c:	4a13      	ldr	r2, [pc, #76]	@ (8008ddc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008d8e:	4413      	add	r3, r2
 8008d90:	4299      	cmp	r1, r3
 8008d92:	d11c      	bne.n	8008dce <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d94:	69bb      	ldr	r3, [r7, #24]
 8008d96:	3304      	adds	r3, #4
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f7fe f829 	bl	8006df0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008d9e:	69bb      	ldr	r3, [r7, #24]
 8008da0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008da2:	4b0f      	ldr	r3, [pc, #60]	@ (8008de0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	429a      	cmp	r2, r3
 8008da8:	d903      	bls.n	8008db2 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8008daa:	69bb      	ldr	r3, [r7, #24]
 8008dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dae:	4a0c      	ldr	r2, [pc, #48]	@ (8008de0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008db0:	6013      	str	r3, [r2, #0]
 8008db2:	69bb      	ldr	r3, [r7, #24]
 8008db4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008db6:	4613      	mov	r3, r2
 8008db8:	009b      	lsls	r3, r3, #2
 8008dba:	4413      	add	r3, r2
 8008dbc:	009b      	lsls	r3, r3, #2
 8008dbe:	4a07      	ldr	r2, [pc, #28]	@ (8008ddc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008dc0:	441a      	add	r2, r3
 8008dc2:	69bb      	ldr	r3, [r7, #24]
 8008dc4:	3304      	adds	r3, #4
 8008dc6:	4619      	mov	r1, r3
 8008dc8:	4610      	mov	r0, r2
 8008dca:	f7fd ffb4 	bl	8006d36 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008dce:	bf00      	nop
 8008dd0:	3720      	adds	r7, #32
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}
 8008dd6:	bf00      	nop
 8008dd8:	20000d48 	.word	0x20000d48
 8008ddc:	20000d4c 	.word	0x20000d4c
 8008de0:	20001224 	.word	0x20001224

08008de4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008de4:	b480      	push	{r7}
 8008de6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008de8:	4b07      	ldr	r3, [pc, #28]	@ (8008e08 <pvTaskIncrementMutexHeldCount+0x24>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d004      	beq.n	8008dfa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008df0:	4b05      	ldr	r3, [pc, #20]	@ (8008e08 <pvTaskIncrementMutexHeldCount+0x24>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008df6:	3201      	adds	r2, #1
 8008df8:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8008dfa:	4b03      	ldr	r3, [pc, #12]	@ (8008e08 <pvTaskIncrementMutexHeldCount+0x24>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
	}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	46bd      	mov	sp, r7
 8008e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e06:	4770      	bx	lr
 8008e08:	20000d48 	.word	0x20000d48

08008e0c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b084      	sub	sp, #16
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
 8008e14:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008e16:	4b21      	ldr	r3, [pc, #132]	@ (8008e9c <prvAddCurrentTaskToDelayedList+0x90>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e1c:	4b20      	ldr	r3, [pc, #128]	@ (8008ea0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	3304      	adds	r3, #4
 8008e22:	4618      	mov	r0, r3
 8008e24:	f7fd ffe4 	bl	8006df0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e2e:	d10a      	bne.n	8008e46 <prvAddCurrentTaskToDelayedList+0x3a>
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d007      	beq.n	8008e46 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e36:	4b1a      	ldr	r3, [pc, #104]	@ (8008ea0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	3304      	adds	r3, #4
 8008e3c:	4619      	mov	r1, r3
 8008e3e:	4819      	ldr	r0, [pc, #100]	@ (8008ea4 <prvAddCurrentTaskToDelayedList+0x98>)
 8008e40:	f7fd ff79 	bl	8006d36 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008e44:	e026      	b.n	8008e94 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008e46:	68fa      	ldr	r2, [r7, #12]
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	4413      	add	r3, r2
 8008e4c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008e4e:	4b14      	ldr	r3, [pc, #80]	@ (8008ea0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	68ba      	ldr	r2, [r7, #8]
 8008e54:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008e56:	68ba      	ldr	r2, [r7, #8]
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d209      	bcs.n	8008e72 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e5e:	4b12      	ldr	r3, [pc, #72]	@ (8008ea8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008e60:	681a      	ldr	r2, [r3, #0]
 8008e62:	4b0f      	ldr	r3, [pc, #60]	@ (8008ea0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	3304      	adds	r3, #4
 8008e68:	4619      	mov	r1, r3
 8008e6a:	4610      	mov	r0, r2
 8008e6c:	f7fd ff87 	bl	8006d7e <vListInsert>
}
 8008e70:	e010      	b.n	8008e94 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e72:	4b0e      	ldr	r3, [pc, #56]	@ (8008eac <prvAddCurrentTaskToDelayedList+0xa0>)
 8008e74:	681a      	ldr	r2, [r3, #0]
 8008e76:	4b0a      	ldr	r3, [pc, #40]	@ (8008ea0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	3304      	adds	r3, #4
 8008e7c:	4619      	mov	r1, r3
 8008e7e:	4610      	mov	r0, r2
 8008e80:	f7fd ff7d 	bl	8006d7e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008e84:	4b0a      	ldr	r3, [pc, #40]	@ (8008eb0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	68ba      	ldr	r2, [r7, #8]
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	d202      	bcs.n	8008e94 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008e8e:	4a08      	ldr	r2, [pc, #32]	@ (8008eb0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	6013      	str	r3, [r2, #0]
}
 8008e94:	bf00      	nop
 8008e96:	3710      	adds	r7, #16
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}
 8008e9c:	20001220 	.word	0x20001220
 8008ea0:	20000d48 	.word	0x20000d48
 8008ea4:	20001208 	.word	0x20001208
 8008ea8:	200011d8 	.word	0x200011d8
 8008eac:	200011d4 	.word	0x200011d4
 8008eb0:	2000123c 	.word	0x2000123c

08008eb4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b08a      	sub	sp, #40	@ 0x28
 8008eb8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008ebe:	f000 fb13 	bl	80094e8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008ec2:	4b1d      	ldr	r3, [pc, #116]	@ (8008f38 <xTimerCreateTimerTask+0x84>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d021      	beq.n	8008f0e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008ed2:	1d3a      	adds	r2, r7, #4
 8008ed4:	f107 0108 	add.w	r1, r7, #8
 8008ed8:	f107 030c 	add.w	r3, r7, #12
 8008edc:	4618      	mov	r0, r3
 8008ede:	f7fd fee3 	bl	8006ca8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008ee2:	6879      	ldr	r1, [r7, #4]
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	68fa      	ldr	r2, [r7, #12]
 8008ee8:	9202      	str	r2, [sp, #8]
 8008eea:	9301      	str	r3, [sp, #4]
 8008eec:	2302      	movs	r3, #2
 8008eee:	9300      	str	r3, [sp, #0]
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	460a      	mov	r2, r1
 8008ef4:	4911      	ldr	r1, [pc, #68]	@ (8008f3c <xTimerCreateTimerTask+0x88>)
 8008ef6:	4812      	ldr	r0, [pc, #72]	@ (8008f40 <xTimerCreateTimerTask+0x8c>)
 8008ef8:	f7fe ffd0 	bl	8007e9c <xTaskCreateStatic>
 8008efc:	4603      	mov	r3, r0
 8008efe:	4a11      	ldr	r2, [pc, #68]	@ (8008f44 <xTimerCreateTimerTask+0x90>)
 8008f00:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008f02:	4b10      	ldr	r3, [pc, #64]	@ (8008f44 <xTimerCreateTimerTask+0x90>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d001      	beq.n	8008f0e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d10b      	bne.n	8008f2c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008f14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f18:	f383 8811 	msr	BASEPRI, r3
 8008f1c:	f3bf 8f6f 	isb	sy
 8008f20:	f3bf 8f4f 	dsb	sy
 8008f24:	613b      	str	r3, [r7, #16]
}
 8008f26:	bf00      	nop
 8008f28:	bf00      	nop
 8008f2a:	e7fd      	b.n	8008f28 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008f2c:	697b      	ldr	r3, [r7, #20]
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3718      	adds	r7, #24
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}
 8008f36:	bf00      	nop
 8008f38:	20001278 	.word	0x20001278
 8008f3c:	0800cebc 	.word	0x0800cebc
 8008f40:	08009081 	.word	0x08009081
 8008f44:	2000127c 	.word	0x2000127c

08008f48 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b08a      	sub	sp, #40	@ 0x28
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	60f8      	str	r0, [r7, #12]
 8008f50:	60b9      	str	r1, [r7, #8]
 8008f52:	607a      	str	r2, [r7, #4]
 8008f54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008f56:	2300      	movs	r3, #0
 8008f58:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d10b      	bne.n	8008f78 <xTimerGenericCommand+0x30>
	__asm volatile
 8008f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f64:	f383 8811 	msr	BASEPRI, r3
 8008f68:	f3bf 8f6f 	isb	sy
 8008f6c:	f3bf 8f4f 	dsb	sy
 8008f70:	623b      	str	r3, [r7, #32]
}
 8008f72:	bf00      	nop
 8008f74:	bf00      	nop
 8008f76:	e7fd      	b.n	8008f74 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008f78:	4b19      	ldr	r3, [pc, #100]	@ (8008fe0 <xTimerGenericCommand+0x98>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d02a      	beq.n	8008fd6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	2b05      	cmp	r3, #5
 8008f90:	dc18      	bgt.n	8008fc4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008f92:	f7ff fdad 	bl	8008af0 <xTaskGetSchedulerState>
 8008f96:	4603      	mov	r3, r0
 8008f98:	2b02      	cmp	r3, #2
 8008f9a:	d109      	bne.n	8008fb0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008f9c:	4b10      	ldr	r3, [pc, #64]	@ (8008fe0 <xTimerGenericCommand+0x98>)
 8008f9e:	6818      	ldr	r0, [r3, #0]
 8008fa0:	f107 0110 	add.w	r1, r7, #16
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008fa8:	f7fe f900 	bl	80071ac <xQueueGenericSend>
 8008fac:	6278      	str	r0, [r7, #36]	@ 0x24
 8008fae:	e012      	b.n	8008fd6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8008fe0 <xTimerGenericCommand+0x98>)
 8008fb2:	6818      	ldr	r0, [r3, #0]
 8008fb4:	f107 0110 	add.w	r1, r7, #16
 8008fb8:	2300      	movs	r3, #0
 8008fba:	2200      	movs	r2, #0
 8008fbc:	f7fe f8f6 	bl	80071ac <xQueueGenericSend>
 8008fc0:	6278      	str	r0, [r7, #36]	@ 0x24
 8008fc2:	e008      	b.n	8008fd6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008fc4:	4b06      	ldr	r3, [pc, #24]	@ (8008fe0 <xTimerGenericCommand+0x98>)
 8008fc6:	6818      	ldr	r0, [r3, #0]
 8008fc8:	f107 0110 	add.w	r1, r7, #16
 8008fcc:	2300      	movs	r3, #0
 8008fce:	683a      	ldr	r2, [r7, #0]
 8008fd0:	f7fe f9ee 	bl	80073b0 <xQueueGenericSendFromISR>
 8008fd4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3728      	adds	r7, #40	@ 0x28
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}
 8008fe0:	20001278 	.word	0x20001278

08008fe4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b088      	sub	sp, #32
 8008fe8:	af02      	add	r7, sp, #8
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fee:	4b23      	ldr	r3, [pc, #140]	@ (800907c <prvProcessExpiredTimer+0x98>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	68db      	ldr	r3, [r3, #12]
 8008ff4:	68db      	ldr	r3, [r3, #12]
 8008ff6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008ff8:	697b      	ldr	r3, [r7, #20]
 8008ffa:	3304      	adds	r3, #4
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	f7fd fef7 	bl	8006df0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009008:	f003 0304 	and.w	r3, r3, #4
 800900c:	2b00      	cmp	r3, #0
 800900e:	d023      	beq.n	8009058 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	699a      	ldr	r2, [r3, #24]
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	18d1      	adds	r1, r2, r3
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	683a      	ldr	r2, [r7, #0]
 800901c:	6978      	ldr	r0, [r7, #20]
 800901e:	f000 f8d5 	bl	80091cc <prvInsertTimerInActiveList>
 8009022:	4603      	mov	r3, r0
 8009024:	2b00      	cmp	r3, #0
 8009026:	d020      	beq.n	800906a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009028:	2300      	movs	r3, #0
 800902a:	9300      	str	r3, [sp, #0]
 800902c:	2300      	movs	r3, #0
 800902e:	687a      	ldr	r2, [r7, #4]
 8009030:	2100      	movs	r1, #0
 8009032:	6978      	ldr	r0, [r7, #20]
 8009034:	f7ff ff88 	bl	8008f48 <xTimerGenericCommand>
 8009038:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d114      	bne.n	800906a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009044:	f383 8811 	msr	BASEPRI, r3
 8009048:	f3bf 8f6f 	isb	sy
 800904c:	f3bf 8f4f 	dsb	sy
 8009050:	60fb      	str	r3, [r7, #12]
}
 8009052:	bf00      	nop
 8009054:	bf00      	nop
 8009056:	e7fd      	b.n	8009054 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800905e:	f023 0301 	bic.w	r3, r3, #1
 8009062:	b2da      	uxtb	r2, r3
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	6a1b      	ldr	r3, [r3, #32]
 800906e:	6978      	ldr	r0, [r7, #20]
 8009070:	4798      	blx	r3
}
 8009072:	bf00      	nop
 8009074:	3718      	adds	r7, #24
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}
 800907a:	bf00      	nop
 800907c:	20001270 	.word	0x20001270

08009080 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b084      	sub	sp, #16
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009088:	f107 0308 	add.w	r3, r7, #8
 800908c:	4618      	mov	r0, r3
 800908e:	f000 f859 	bl	8009144 <prvGetNextExpireTime>
 8009092:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	4619      	mov	r1, r3
 8009098:	68f8      	ldr	r0, [r7, #12]
 800909a:	f000 f805 	bl	80090a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800909e:	f000 f8d7 	bl	8009250 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80090a2:	bf00      	nop
 80090a4:	e7f0      	b.n	8009088 <prvTimerTask+0x8>
	...

080090a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b084      	sub	sp, #16
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
 80090b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80090b2:	f7ff f937 	bl	8008324 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80090b6:	f107 0308 	add.w	r3, r7, #8
 80090ba:	4618      	mov	r0, r3
 80090bc:	f000 f866 	bl	800918c <prvSampleTimeNow>
 80090c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d130      	bne.n	800912a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d10a      	bne.n	80090e4 <prvProcessTimerOrBlockTask+0x3c>
 80090ce:	687a      	ldr	r2, [r7, #4]
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	429a      	cmp	r2, r3
 80090d4:	d806      	bhi.n	80090e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80090d6:	f7ff f933 	bl	8008340 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80090da:	68f9      	ldr	r1, [r7, #12]
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f7ff ff81 	bl	8008fe4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80090e2:	e024      	b.n	800912e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d008      	beq.n	80090fc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80090ea:	4b13      	ldr	r3, [pc, #76]	@ (8009138 <prvProcessTimerOrBlockTask+0x90>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d101      	bne.n	80090f8 <prvProcessTimerOrBlockTask+0x50>
 80090f4:	2301      	movs	r3, #1
 80090f6:	e000      	b.n	80090fa <prvProcessTimerOrBlockTask+0x52>
 80090f8:	2300      	movs	r3, #0
 80090fa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80090fc:	4b0f      	ldr	r3, [pc, #60]	@ (800913c <prvProcessTimerOrBlockTask+0x94>)
 80090fe:	6818      	ldr	r0, [r3, #0]
 8009100:	687a      	ldr	r2, [r7, #4]
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	1ad3      	subs	r3, r2, r3
 8009106:	683a      	ldr	r2, [r7, #0]
 8009108:	4619      	mov	r1, r3
 800910a:	f7fe fe93 	bl	8007e34 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800910e:	f7ff f917 	bl	8008340 <xTaskResumeAll>
 8009112:	4603      	mov	r3, r0
 8009114:	2b00      	cmp	r3, #0
 8009116:	d10a      	bne.n	800912e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009118:	4b09      	ldr	r3, [pc, #36]	@ (8009140 <prvProcessTimerOrBlockTask+0x98>)
 800911a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800911e:	601a      	str	r2, [r3, #0]
 8009120:	f3bf 8f4f 	dsb	sy
 8009124:	f3bf 8f6f 	isb	sy
}
 8009128:	e001      	b.n	800912e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800912a:	f7ff f909 	bl	8008340 <xTaskResumeAll>
}
 800912e:	bf00      	nop
 8009130:	3710      	adds	r7, #16
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}
 8009136:	bf00      	nop
 8009138:	20001274 	.word	0x20001274
 800913c:	20001278 	.word	0x20001278
 8009140:	e000ed04 	.word	0xe000ed04

08009144 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009144:	b480      	push	{r7}
 8009146:	b085      	sub	sp, #20
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800914c:	4b0e      	ldr	r3, [pc, #56]	@ (8009188 <prvGetNextExpireTime+0x44>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d101      	bne.n	800915a <prvGetNextExpireTime+0x16>
 8009156:	2201      	movs	r2, #1
 8009158:	e000      	b.n	800915c <prvGetNextExpireTime+0x18>
 800915a:	2200      	movs	r2, #0
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d105      	bne.n	8009174 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009168:	4b07      	ldr	r3, [pc, #28]	@ (8009188 <prvGetNextExpireTime+0x44>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	68db      	ldr	r3, [r3, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	60fb      	str	r3, [r7, #12]
 8009172:	e001      	b.n	8009178 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009174:	2300      	movs	r3, #0
 8009176:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009178:	68fb      	ldr	r3, [r7, #12]
}
 800917a:	4618      	mov	r0, r3
 800917c:	3714      	adds	r7, #20
 800917e:	46bd      	mov	sp, r7
 8009180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009184:	4770      	bx	lr
 8009186:	bf00      	nop
 8009188:	20001270 	.word	0x20001270

0800918c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b084      	sub	sp, #16
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009194:	f7ff f972 	bl	800847c <xTaskGetTickCount>
 8009198:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800919a:	4b0b      	ldr	r3, [pc, #44]	@ (80091c8 <prvSampleTimeNow+0x3c>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	68fa      	ldr	r2, [r7, #12]
 80091a0:	429a      	cmp	r2, r3
 80091a2:	d205      	bcs.n	80091b0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80091a4:	f000 f93a 	bl	800941c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2201      	movs	r2, #1
 80091ac:	601a      	str	r2, [r3, #0]
 80091ae:	e002      	b.n	80091b6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2200      	movs	r2, #0
 80091b4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80091b6:	4a04      	ldr	r2, [pc, #16]	@ (80091c8 <prvSampleTimeNow+0x3c>)
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80091bc:	68fb      	ldr	r3, [r7, #12]
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3710      	adds	r7, #16
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}
 80091c6:	bf00      	nop
 80091c8:	20001280 	.word	0x20001280

080091cc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b086      	sub	sp, #24
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	60f8      	str	r0, [r7, #12]
 80091d4:	60b9      	str	r1, [r7, #8]
 80091d6:	607a      	str	r2, [r7, #4]
 80091d8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80091da:	2300      	movs	r3, #0
 80091dc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	68ba      	ldr	r2, [r7, #8]
 80091e2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	68fa      	ldr	r2, [r7, #12]
 80091e8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80091ea:	68ba      	ldr	r2, [r7, #8]
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	429a      	cmp	r2, r3
 80091f0:	d812      	bhi.n	8009218 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091f2:	687a      	ldr	r2, [r7, #4]
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	1ad2      	subs	r2, r2, r3
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	699b      	ldr	r3, [r3, #24]
 80091fc:	429a      	cmp	r2, r3
 80091fe:	d302      	bcc.n	8009206 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009200:	2301      	movs	r3, #1
 8009202:	617b      	str	r3, [r7, #20]
 8009204:	e01b      	b.n	800923e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009206:	4b10      	ldr	r3, [pc, #64]	@ (8009248 <prvInsertTimerInActiveList+0x7c>)
 8009208:	681a      	ldr	r2, [r3, #0]
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	3304      	adds	r3, #4
 800920e:	4619      	mov	r1, r3
 8009210:	4610      	mov	r0, r2
 8009212:	f7fd fdb4 	bl	8006d7e <vListInsert>
 8009216:	e012      	b.n	800923e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009218:	687a      	ldr	r2, [r7, #4]
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	429a      	cmp	r2, r3
 800921e:	d206      	bcs.n	800922e <prvInsertTimerInActiveList+0x62>
 8009220:	68ba      	ldr	r2, [r7, #8]
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	429a      	cmp	r2, r3
 8009226:	d302      	bcc.n	800922e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009228:	2301      	movs	r3, #1
 800922a:	617b      	str	r3, [r7, #20]
 800922c:	e007      	b.n	800923e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800922e:	4b07      	ldr	r3, [pc, #28]	@ (800924c <prvInsertTimerInActiveList+0x80>)
 8009230:	681a      	ldr	r2, [r3, #0]
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	3304      	adds	r3, #4
 8009236:	4619      	mov	r1, r3
 8009238:	4610      	mov	r0, r2
 800923a:	f7fd fda0 	bl	8006d7e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800923e:	697b      	ldr	r3, [r7, #20]
}
 8009240:	4618      	mov	r0, r3
 8009242:	3718      	adds	r7, #24
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}
 8009248:	20001274 	.word	0x20001274
 800924c:	20001270 	.word	0x20001270

08009250 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b08e      	sub	sp, #56	@ 0x38
 8009254:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009256:	e0ce      	b.n	80093f6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2b00      	cmp	r3, #0
 800925c:	da19      	bge.n	8009292 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800925e:	1d3b      	adds	r3, r7, #4
 8009260:	3304      	adds	r3, #4
 8009262:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009266:	2b00      	cmp	r3, #0
 8009268:	d10b      	bne.n	8009282 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800926a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800926e:	f383 8811 	msr	BASEPRI, r3
 8009272:	f3bf 8f6f 	isb	sy
 8009276:	f3bf 8f4f 	dsb	sy
 800927a:	61fb      	str	r3, [r7, #28]
}
 800927c:	bf00      	nop
 800927e:	bf00      	nop
 8009280:	e7fd      	b.n	800927e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009288:	6850      	ldr	r0, [r2, #4]
 800928a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800928c:	6892      	ldr	r2, [r2, #8]
 800928e:	4611      	mov	r1, r2
 8009290:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2b00      	cmp	r3, #0
 8009296:	f2c0 80ae 	blt.w	80093f6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800929e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092a0:	695b      	ldr	r3, [r3, #20]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d004      	beq.n	80092b0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80092a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092a8:	3304      	adds	r3, #4
 80092aa:	4618      	mov	r0, r3
 80092ac:	f7fd fda0 	bl	8006df0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80092b0:	463b      	mov	r3, r7
 80092b2:	4618      	mov	r0, r3
 80092b4:	f7ff ff6a 	bl	800918c <prvSampleTimeNow>
 80092b8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2b09      	cmp	r3, #9
 80092be:	f200 8097 	bhi.w	80093f0 <prvProcessReceivedCommands+0x1a0>
 80092c2:	a201      	add	r2, pc, #4	@ (adr r2, 80092c8 <prvProcessReceivedCommands+0x78>)
 80092c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092c8:	080092f1 	.word	0x080092f1
 80092cc:	080092f1 	.word	0x080092f1
 80092d0:	080092f1 	.word	0x080092f1
 80092d4:	08009367 	.word	0x08009367
 80092d8:	0800937b 	.word	0x0800937b
 80092dc:	080093c7 	.word	0x080093c7
 80092e0:	080092f1 	.word	0x080092f1
 80092e4:	080092f1 	.word	0x080092f1
 80092e8:	08009367 	.word	0x08009367
 80092ec:	0800937b 	.word	0x0800937b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80092f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092f2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80092f6:	f043 0301 	orr.w	r3, r3, #1
 80092fa:	b2da      	uxtb	r2, r3
 80092fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092fe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009302:	68ba      	ldr	r2, [r7, #8]
 8009304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009306:	699b      	ldr	r3, [r3, #24]
 8009308:	18d1      	adds	r1, r2, r3
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800930e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009310:	f7ff ff5c 	bl	80091cc <prvInsertTimerInActiveList>
 8009314:	4603      	mov	r3, r0
 8009316:	2b00      	cmp	r3, #0
 8009318:	d06c      	beq.n	80093f4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800931a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800931c:	6a1b      	ldr	r3, [r3, #32]
 800931e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009320:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009324:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009328:	f003 0304 	and.w	r3, r3, #4
 800932c:	2b00      	cmp	r3, #0
 800932e:	d061      	beq.n	80093f4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009330:	68ba      	ldr	r2, [r7, #8]
 8009332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009334:	699b      	ldr	r3, [r3, #24]
 8009336:	441a      	add	r2, r3
 8009338:	2300      	movs	r3, #0
 800933a:	9300      	str	r3, [sp, #0]
 800933c:	2300      	movs	r3, #0
 800933e:	2100      	movs	r1, #0
 8009340:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009342:	f7ff fe01 	bl	8008f48 <xTimerGenericCommand>
 8009346:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009348:	6a3b      	ldr	r3, [r7, #32]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d152      	bne.n	80093f4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800934e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009352:	f383 8811 	msr	BASEPRI, r3
 8009356:	f3bf 8f6f 	isb	sy
 800935a:	f3bf 8f4f 	dsb	sy
 800935e:	61bb      	str	r3, [r7, #24]
}
 8009360:	bf00      	nop
 8009362:	bf00      	nop
 8009364:	e7fd      	b.n	8009362 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009368:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800936c:	f023 0301 	bic.w	r3, r3, #1
 8009370:	b2da      	uxtb	r2, r3
 8009372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009374:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009378:	e03d      	b.n	80093f6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800937a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800937c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009380:	f043 0301 	orr.w	r3, r3, #1
 8009384:	b2da      	uxtb	r2, r3
 8009386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009388:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800938c:	68ba      	ldr	r2, [r7, #8]
 800938e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009390:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009394:	699b      	ldr	r3, [r3, #24]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d10b      	bne.n	80093b2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800939a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800939e:	f383 8811 	msr	BASEPRI, r3
 80093a2:	f3bf 8f6f 	isb	sy
 80093a6:	f3bf 8f4f 	dsb	sy
 80093aa:	617b      	str	r3, [r7, #20]
}
 80093ac:	bf00      	nop
 80093ae:	bf00      	nop
 80093b0:	e7fd      	b.n	80093ae <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80093b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093b4:	699a      	ldr	r2, [r3, #24]
 80093b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093b8:	18d1      	adds	r1, r2, r3
 80093ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80093be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80093c0:	f7ff ff04 	bl	80091cc <prvInsertTimerInActiveList>
					break;
 80093c4:	e017      	b.n	80093f6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80093c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80093cc:	f003 0302 	and.w	r3, r3, #2
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d103      	bne.n	80093dc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80093d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80093d6:	f000 fbe7 	bl	8009ba8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80093da:	e00c      	b.n	80093f6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80093dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80093e2:	f023 0301 	bic.w	r3, r3, #1
 80093e6:	b2da      	uxtb	r2, r3
 80093e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80093ee:	e002      	b.n	80093f6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80093f0:	bf00      	nop
 80093f2:	e000      	b.n	80093f6 <prvProcessReceivedCommands+0x1a6>
					break;
 80093f4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80093f6:	4b08      	ldr	r3, [pc, #32]	@ (8009418 <prvProcessReceivedCommands+0x1c8>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	1d39      	adds	r1, r7, #4
 80093fc:	2200      	movs	r2, #0
 80093fe:	4618      	mov	r0, r3
 8009400:	f7fe f904 	bl	800760c <xQueueReceive>
 8009404:	4603      	mov	r3, r0
 8009406:	2b00      	cmp	r3, #0
 8009408:	f47f af26 	bne.w	8009258 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800940c:	bf00      	nop
 800940e:	bf00      	nop
 8009410:	3730      	adds	r7, #48	@ 0x30
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}
 8009416:	bf00      	nop
 8009418:	20001278 	.word	0x20001278

0800941c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b088      	sub	sp, #32
 8009420:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009422:	e049      	b.n	80094b8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009424:	4b2e      	ldr	r3, [pc, #184]	@ (80094e0 <prvSwitchTimerLists+0xc4>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	68db      	ldr	r3, [r3, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800942e:	4b2c      	ldr	r3, [pc, #176]	@ (80094e0 <prvSwitchTimerLists+0xc4>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	68db      	ldr	r3, [r3, #12]
 8009434:	68db      	ldr	r3, [r3, #12]
 8009436:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	3304      	adds	r3, #4
 800943c:	4618      	mov	r0, r3
 800943e:	f7fd fcd7 	bl	8006df0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	6a1b      	ldr	r3, [r3, #32]
 8009446:	68f8      	ldr	r0, [r7, #12]
 8009448:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009450:	f003 0304 	and.w	r3, r3, #4
 8009454:	2b00      	cmp	r3, #0
 8009456:	d02f      	beq.n	80094b8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	699b      	ldr	r3, [r3, #24]
 800945c:	693a      	ldr	r2, [r7, #16]
 800945e:	4413      	add	r3, r2
 8009460:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009462:	68ba      	ldr	r2, [r7, #8]
 8009464:	693b      	ldr	r3, [r7, #16]
 8009466:	429a      	cmp	r2, r3
 8009468:	d90e      	bls.n	8009488 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	68ba      	ldr	r2, [r7, #8]
 800946e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	68fa      	ldr	r2, [r7, #12]
 8009474:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009476:	4b1a      	ldr	r3, [pc, #104]	@ (80094e0 <prvSwitchTimerLists+0xc4>)
 8009478:	681a      	ldr	r2, [r3, #0]
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	3304      	adds	r3, #4
 800947e:	4619      	mov	r1, r3
 8009480:	4610      	mov	r0, r2
 8009482:	f7fd fc7c 	bl	8006d7e <vListInsert>
 8009486:	e017      	b.n	80094b8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009488:	2300      	movs	r3, #0
 800948a:	9300      	str	r3, [sp, #0]
 800948c:	2300      	movs	r3, #0
 800948e:	693a      	ldr	r2, [r7, #16]
 8009490:	2100      	movs	r1, #0
 8009492:	68f8      	ldr	r0, [r7, #12]
 8009494:	f7ff fd58 	bl	8008f48 <xTimerGenericCommand>
 8009498:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d10b      	bne.n	80094b8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80094a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094a4:	f383 8811 	msr	BASEPRI, r3
 80094a8:	f3bf 8f6f 	isb	sy
 80094ac:	f3bf 8f4f 	dsb	sy
 80094b0:	603b      	str	r3, [r7, #0]
}
 80094b2:	bf00      	nop
 80094b4:	bf00      	nop
 80094b6:	e7fd      	b.n	80094b4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80094b8:	4b09      	ldr	r3, [pc, #36]	@ (80094e0 <prvSwitchTimerLists+0xc4>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d1b0      	bne.n	8009424 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80094c2:	4b07      	ldr	r3, [pc, #28]	@ (80094e0 <prvSwitchTimerLists+0xc4>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80094c8:	4b06      	ldr	r3, [pc, #24]	@ (80094e4 <prvSwitchTimerLists+0xc8>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	4a04      	ldr	r2, [pc, #16]	@ (80094e0 <prvSwitchTimerLists+0xc4>)
 80094ce:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80094d0:	4a04      	ldr	r2, [pc, #16]	@ (80094e4 <prvSwitchTimerLists+0xc8>)
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	6013      	str	r3, [r2, #0]
}
 80094d6:	bf00      	nop
 80094d8:	3718      	adds	r7, #24
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}
 80094de:	bf00      	nop
 80094e0:	20001270 	.word	0x20001270
 80094e4:	20001274 	.word	0x20001274

080094e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b082      	sub	sp, #8
 80094ec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80094ee:	f000 f96b 	bl	80097c8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80094f2:	4b15      	ldr	r3, [pc, #84]	@ (8009548 <prvCheckForValidListAndQueue+0x60>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d120      	bne.n	800953c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80094fa:	4814      	ldr	r0, [pc, #80]	@ (800954c <prvCheckForValidListAndQueue+0x64>)
 80094fc:	f7fd fbee 	bl	8006cdc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009500:	4813      	ldr	r0, [pc, #76]	@ (8009550 <prvCheckForValidListAndQueue+0x68>)
 8009502:	f7fd fbeb 	bl	8006cdc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009506:	4b13      	ldr	r3, [pc, #76]	@ (8009554 <prvCheckForValidListAndQueue+0x6c>)
 8009508:	4a10      	ldr	r2, [pc, #64]	@ (800954c <prvCheckForValidListAndQueue+0x64>)
 800950a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800950c:	4b12      	ldr	r3, [pc, #72]	@ (8009558 <prvCheckForValidListAndQueue+0x70>)
 800950e:	4a10      	ldr	r2, [pc, #64]	@ (8009550 <prvCheckForValidListAndQueue+0x68>)
 8009510:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009512:	2300      	movs	r3, #0
 8009514:	9300      	str	r3, [sp, #0]
 8009516:	4b11      	ldr	r3, [pc, #68]	@ (800955c <prvCheckForValidListAndQueue+0x74>)
 8009518:	4a11      	ldr	r2, [pc, #68]	@ (8009560 <prvCheckForValidListAndQueue+0x78>)
 800951a:	2110      	movs	r1, #16
 800951c:	200a      	movs	r0, #10
 800951e:	f7fd fcfb 	bl	8006f18 <xQueueGenericCreateStatic>
 8009522:	4603      	mov	r3, r0
 8009524:	4a08      	ldr	r2, [pc, #32]	@ (8009548 <prvCheckForValidListAndQueue+0x60>)
 8009526:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009528:	4b07      	ldr	r3, [pc, #28]	@ (8009548 <prvCheckForValidListAndQueue+0x60>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d005      	beq.n	800953c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009530:	4b05      	ldr	r3, [pc, #20]	@ (8009548 <prvCheckForValidListAndQueue+0x60>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	490b      	ldr	r1, [pc, #44]	@ (8009564 <prvCheckForValidListAndQueue+0x7c>)
 8009536:	4618      	mov	r0, r3
 8009538:	f7fe fc28 	bl	8007d8c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800953c:	f000 f976 	bl	800982c <vPortExitCritical>
}
 8009540:	bf00      	nop
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}
 8009546:	bf00      	nop
 8009548:	20001278 	.word	0x20001278
 800954c:	20001248 	.word	0x20001248
 8009550:	2000125c 	.word	0x2000125c
 8009554:	20001270 	.word	0x20001270
 8009558:	20001274 	.word	0x20001274
 800955c:	20001324 	.word	0x20001324
 8009560:	20001284 	.word	0x20001284
 8009564:	0800cec4 	.word	0x0800cec4

08009568 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009568:	b480      	push	{r7}
 800956a:	b085      	sub	sp, #20
 800956c:	af00      	add	r7, sp, #0
 800956e:	60f8      	str	r0, [r7, #12]
 8009570:	60b9      	str	r1, [r7, #8]
 8009572:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	3b04      	subs	r3, #4
 8009578:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009580:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	3b04      	subs	r3, #4
 8009586:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	f023 0201 	bic.w	r2, r3, #1
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	3b04      	subs	r3, #4
 8009596:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009598:	4a0c      	ldr	r2, [pc, #48]	@ (80095cc <pxPortInitialiseStack+0x64>)
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	3b14      	subs	r3, #20
 80095a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80095a4:	687a      	ldr	r2, [r7, #4]
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	3b04      	subs	r3, #4
 80095ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	f06f 0202 	mvn.w	r2, #2
 80095b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	3b20      	subs	r3, #32
 80095bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80095be:	68fb      	ldr	r3, [r7, #12]
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3714      	adds	r7, #20
 80095c4:	46bd      	mov	sp, r7
 80095c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ca:	4770      	bx	lr
 80095cc:	080095d1 	.word	0x080095d1

080095d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80095d0:	b480      	push	{r7}
 80095d2:	b085      	sub	sp, #20
 80095d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80095d6:	2300      	movs	r3, #0
 80095d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80095da:	4b13      	ldr	r3, [pc, #76]	@ (8009628 <prvTaskExitError+0x58>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095e2:	d00b      	beq.n	80095fc <prvTaskExitError+0x2c>
	__asm volatile
 80095e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095e8:	f383 8811 	msr	BASEPRI, r3
 80095ec:	f3bf 8f6f 	isb	sy
 80095f0:	f3bf 8f4f 	dsb	sy
 80095f4:	60fb      	str	r3, [r7, #12]
}
 80095f6:	bf00      	nop
 80095f8:	bf00      	nop
 80095fa:	e7fd      	b.n	80095f8 <prvTaskExitError+0x28>
	__asm volatile
 80095fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009600:	f383 8811 	msr	BASEPRI, r3
 8009604:	f3bf 8f6f 	isb	sy
 8009608:	f3bf 8f4f 	dsb	sy
 800960c:	60bb      	str	r3, [r7, #8]
}
 800960e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009610:	bf00      	nop
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d0fc      	beq.n	8009612 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009618:	bf00      	nop
 800961a:	bf00      	nop
 800961c:	3714      	adds	r7, #20
 800961e:	46bd      	mov	sp, r7
 8009620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009624:	4770      	bx	lr
 8009626:	bf00      	nop
 8009628:	2000000c 	.word	0x2000000c
 800962c:	00000000 	.word	0x00000000

08009630 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009630:	4b07      	ldr	r3, [pc, #28]	@ (8009650 <pxCurrentTCBConst2>)
 8009632:	6819      	ldr	r1, [r3, #0]
 8009634:	6808      	ldr	r0, [r1, #0]
 8009636:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800963a:	f380 8809 	msr	PSP, r0
 800963e:	f3bf 8f6f 	isb	sy
 8009642:	f04f 0000 	mov.w	r0, #0
 8009646:	f380 8811 	msr	BASEPRI, r0
 800964a:	4770      	bx	lr
 800964c:	f3af 8000 	nop.w

08009650 <pxCurrentTCBConst2>:
 8009650:	20000d48 	.word	0x20000d48
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009654:	bf00      	nop
 8009656:	bf00      	nop

08009658 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009658:	4808      	ldr	r0, [pc, #32]	@ (800967c <prvPortStartFirstTask+0x24>)
 800965a:	6800      	ldr	r0, [r0, #0]
 800965c:	6800      	ldr	r0, [r0, #0]
 800965e:	f380 8808 	msr	MSP, r0
 8009662:	f04f 0000 	mov.w	r0, #0
 8009666:	f380 8814 	msr	CONTROL, r0
 800966a:	b662      	cpsie	i
 800966c:	b661      	cpsie	f
 800966e:	f3bf 8f4f 	dsb	sy
 8009672:	f3bf 8f6f 	isb	sy
 8009676:	df00      	svc	0
 8009678:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800967a:	bf00      	nop
 800967c:	e000ed08 	.word	0xe000ed08

08009680 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b086      	sub	sp, #24
 8009684:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009686:	4b47      	ldr	r3, [pc, #284]	@ (80097a4 <xPortStartScheduler+0x124>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	4a47      	ldr	r2, [pc, #284]	@ (80097a8 <xPortStartScheduler+0x128>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d10b      	bne.n	80096a8 <xPortStartScheduler+0x28>
	__asm volatile
 8009690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009694:	f383 8811 	msr	BASEPRI, r3
 8009698:	f3bf 8f6f 	isb	sy
 800969c:	f3bf 8f4f 	dsb	sy
 80096a0:	613b      	str	r3, [r7, #16]
}
 80096a2:	bf00      	nop
 80096a4:	bf00      	nop
 80096a6:	e7fd      	b.n	80096a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80096a8:	4b3e      	ldr	r3, [pc, #248]	@ (80097a4 <xPortStartScheduler+0x124>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	4a3f      	ldr	r2, [pc, #252]	@ (80097ac <xPortStartScheduler+0x12c>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d10b      	bne.n	80096ca <xPortStartScheduler+0x4a>
	__asm volatile
 80096b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096b6:	f383 8811 	msr	BASEPRI, r3
 80096ba:	f3bf 8f6f 	isb	sy
 80096be:	f3bf 8f4f 	dsb	sy
 80096c2:	60fb      	str	r3, [r7, #12]
}
 80096c4:	bf00      	nop
 80096c6:	bf00      	nop
 80096c8:	e7fd      	b.n	80096c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80096ca:	4b39      	ldr	r3, [pc, #228]	@ (80097b0 <xPortStartScheduler+0x130>)
 80096cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	781b      	ldrb	r3, [r3, #0]
 80096d2:	b2db      	uxtb	r3, r3
 80096d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80096d6:	697b      	ldr	r3, [r7, #20]
 80096d8:	22ff      	movs	r2, #255	@ 0xff
 80096da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80096dc:	697b      	ldr	r3, [r7, #20]
 80096de:	781b      	ldrb	r3, [r3, #0]
 80096e0:	b2db      	uxtb	r3, r3
 80096e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80096e4:	78fb      	ldrb	r3, [r7, #3]
 80096e6:	b2db      	uxtb	r3, r3
 80096e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80096ec:	b2da      	uxtb	r2, r3
 80096ee:	4b31      	ldr	r3, [pc, #196]	@ (80097b4 <xPortStartScheduler+0x134>)
 80096f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80096f2:	4b31      	ldr	r3, [pc, #196]	@ (80097b8 <xPortStartScheduler+0x138>)
 80096f4:	2207      	movs	r2, #7
 80096f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80096f8:	e009      	b.n	800970e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80096fa:	4b2f      	ldr	r3, [pc, #188]	@ (80097b8 <xPortStartScheduler+0x138>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	3b01      	subs	r3, #1
 8009700:	4a2d      	ldr	r2, [pc, #180]	@ (80097b8 <xPortStartScheduler+0x138>)
 8009702:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009704:	78fb      	ldrb	r3, [r7, #3]
 8009706:	b2db      	uxtb	r3, r3
 8009708:	005b      	lsls	r3, r3, #1
 800970a:	b2db      	uxtb	r3, r3
 800970c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800970e:	78fb      	ldrb	r3, [r7, #3]
 8009710:	b2db      	uxtb	r3, r3
 8009712:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009716:	2b80      	cmp	r3, #128	@ 0x80
 8009718:	d0ef      	beq.n	80096fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800971a:	4b27      	ldr	r3, [pc, #156]	@ (80097b8 <xPortStartScheduler+0x138>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f1c3 0307 	rsb	r3, r3, #7
 8009722:	2b04      	cmp	r3, #4
 8009724:	d00b      	beq.n	800973e <xPortStartScheduler+0xbe>
	__asm volatile
 8009726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800972a:	f383 8811 	msr	BASEPRI, r3
 800972e:	f3bf 8f6f 	isb	sy
 8009732:	f3bf 8f4f 	dsb	sy
 8009736:	60bb      	str	r3, [r7, #8]
}
 8009738:	bf00      	nop
 800973a:	bf00      	nop
 800973c:	e7fd      	b.n	800973a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800973e:	4b1e      	ldr	r3, [pc, #120]	@ (80097b8 <xPortStartScheduler+0x138>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	021b      	lsls	r3, r3, #8
 8009744:	4a1c      	ldr	r2, [pc, #112]	@ (80097b8 <xPortStartScheduler+0x138>)
 8009746:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009748:	4b1b      	ldr	r3, [pc, #108]	@ (80097b8 <xPortStartScheduler+0x138>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009750:	4a19      	ldr	r2, [pc, #100]	@ (80097b8 <xPortStartScheduler+0x138>)
 8009752:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	b2da      	uxtb	r2, r3
 8009758:	697b      	ldr	r3, [r7, #20]
 800975a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800975c:	4b17      	ldr	r3, [pc, #92]	@ (80097bc <xPortStartScheduler+0x13c>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	4a16      	ldr	r2, [pc, #88]	@ (80097bc <xPortStartScheduler+0x13c>)
 8009762:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009766:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009768:	4b14      	ldr	r3, [pc, #80]	@ (80097bc <xPortStartScheduler+0x13c>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4a13      	ldr	r2, [pc, #76]	@ (80097bc <xPortStartScheduler+0x13c>)
 800976e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009772:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009774:	f000 f8da 	bl	800992c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009778:	4b11      	ldr	r3, [pc, #68]	@ (80097c0 <xPortStartScheduler+0x140>)
 800977a:	2200      	movs	r2, #0
 800977c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800977e:	f000 f8f9 	bl	8009974 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009782:	4b10      	ldr	r3, [pc, #64]	@ (80097c4 <xPortStartScheduler+0x144>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	4a0f      	ldr	r2, [pc, #60]	@ (80097c4 <xPortStartScheduler+0x144>)
 8009788:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800978c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800978e:	f7ff ff63 	bl	8009658 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009792:	f7fe ff3d 	bl	8008610 <vTaskSwitchContext>
	prvTaskExitError();
 8009796:	f7ff ff1b 	bl	80095d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800979a:	2300      	movs	r3, #0
}
 800979c:	4618      	mov	r0, r3
 800979e:	3718      	adds	r7, #24
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}
 80097a4:	e000ed00 	.word	0xe000ed00
 80097a8:	410fc271 	.word	0x410fc271
 80097ac:	410fc270 	.word	0x410fc270
 80097b0:	e000e400 	.word	0xe000e400
 80097b4:	20001374 	.word	0x20001374
 80097b8:	20001378 	.word	0x20001378
 80097bc:	e000ed20 	.word	0xe000ed20
 80097c0:	2000000c 	.word	0x2000000c
 80097c4:	e000ef34 	.word	0xe000ef34

080097c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80097c8:	b480      	push	{r7}
 80097ca:	b083      	sub	sp, #12
 80097cc:	af00      	add	r7, sp, #0
	__asm volatile
 80097ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097d2:	f383 8811 	msr	BASEPRI, r3
 80097d6:	f3bf 8f6f 	isb	sy
 80097da:	f3bf 8f4f 	dsb	sy
 80097de:	607b      	str	r3, [r7, #4]
}
 80097e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80097e2:	4b10      	ldr	r3, [pc, #64]	@ (8009824 <vPortEnterCritical+0x5c>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	3301      	adds	r3, #1
 80097e8:	4a0e      	ldr	r2, [pc, #56]	@ (8009824 <vPortEnterCritical+0x5c>)
 80097ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80097ec:	4b0d      	ldr	r3, [pc, #52]	@ (8009824 <vPortEnterCritical+0x5c>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	2b01      	cmp	r3, #1
 80097f2:	d110      	bne.n	8009816 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80097f4:	4b0c      	ldr	r3, [pc, #48]	@ (8009828 <vPortEnterCritical+0x60>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	b2db      	uxtb	r3, r3
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d00b      	beq.n	8009816 <vPortEnterCritical+0x4e>
	__asm volatile
 80097fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009802:	f383 8811 	msr	BASEPRI, r3
 8009806:	f3bf 8f6f 	isb	sy
 800980a:	f3bf 8f4f 	dsb	sy
 800980e:	603b      	str	r3, [r7, #0]
}
 8009810:	bf00      	nop
 8009812:	bf00      	nop
 8009814:	e7fd      	b.n	8009812 <vPortEnterCritical+0x4a>
	}
}
 8009816:	bf00      	nop
 8009818:	370c      	adds	r7, #12
 800981a:	46bd      	mov	sp, r7
 800981c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009820:	4770      	bx	lr
 8009822:	bf00      	nop
 8009824:	2000000c 	.word	0x2000000c
 8009828:	e000ed04 	.word	0xe000ed04

0800982c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800982c:	b480      	push	{r7}
 800982e:	b083      	sub	sp, #12
 8009830:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009832:	4b12      	ldr	r3, [pc, #72]	@ (800987c <vPortExitCritical+0x50>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d10b      	bne.n	8009852 <vPortExitCritical+0x26>
	__asm volatile
 800983a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800983e:	f383 8811 	msr	BASEPRI, r3
 8009842:	f3bf 8f6f 	isb	sy
 8009846:	f3bf 8f4f 	dsb	sy
 800984a:	607b      	str	r3, [r7, #4]
}
 800984c:	bf00      	nop
 800984e:	bf00      	nop
 8009850:	e7fd      	b.n	800984e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009852:	4b0a      	ldr	r3, [pc, #40]	@ (800987c <vPortExitCritical+0x50>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	3b01      	subs	r3, #1
 8009858:	4a08      	ldr	r2, [pc, #32]	@ (800987c <vPortExitCritical+0x50>)
 800985a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800985c:	4b07      	ldr	r3, [pc, #28]	@ (800987c <vPortExitCritical+0x50>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d105      	bne.n	8009870 <vPortExitCritical+0x44>
 8009864:	2300      	movs	r3, #0
 8009866:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	f383 8811 	msr	BASEPRI, r3
}
 800986e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009870:	bf00      	nop
 8009872:	370c      	adds	r7, #12
 8009874:	46bd      	mov	sp, r7
 8009876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987a:	4770      	bx	lr
 800987c:	2000000c 	.word	0x2000000c

08009880 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009880:	f3ef 8009 	mrs	r0, PSP
 8009884:	f3bf 8f6f 	isb	sy
 8009888:	4b15      	ldr	r3, [pc, #84]	@ (80098e0 <pxCurrentTCBConst>)
 800988a:	681a      	ldr	r2, [r3, #0]
 800988c:	f01e 0f10 	tst.w	lr, #16
 8009890:	bf08      	it	eq
 8009892:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009896:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800989a:	6010      	str	r0, [r2, #0]
 800989c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80098a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80098a4:	f380 8811 	msr	BASEPRI, r0
 80098a8:	f3bf 8f4f 	dsb	sy
 80098ac:	f3bf 8f6f 	isb	sy
 80098b0:	f7fe feae 	bl	8008610 <vTaskSwitchContext>
 80098b4:	f04f 0000 	mov.w	r0, #0
 80098b8:	f380 8811 	msr	BASEPRI, r0
 80098bc:	bc09      	pop	{r0, r3}
 80098be:	6819      	ldr	r1, [r3, #0]
 80098c0:	6808      	ldr	r0, [r1, #0]
 80098c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098c6:	f01e 0f10 	tst.w	lr, #16
 80098ca:	bf08      	it	eq
 80098cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80098d0:	f380 8809 	msr	PSP, r0
 80098d4:	f3bf 8f6f 	isb	sy
 80098d8:	4770      	bx	lr
 80098da:	bf00      	nop
 80098dc:	f3af 8000 	nop.w

080098e0 <pxCurrentTCBConst>:
 80098e0:	20000d48 	.word	0x20000d48
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80098e4:	bf00      	nop
 80098e6:	bf00      	nop

080098e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b082      	sub	sp, #8
 80098ec:	af00      	add	r7, sp, #0
	__asm volatile
 80098ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098f2:	f383 8811 	msr	BASEPRI, r3
 80098f6:	f3bf 8f6f 	isb	sy
 80098fa:	f3bf 8f4f 	dsb	sy
 80098fe:	607b      	str	r3, [r7, #4]
}
 8009900:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009902:	f7fe fdcb 	bl	800849c <xTaskIncrementTick>
 8009906:	4603      	mov	r3, r0
 8009908:	2b00      	cmp	r3, #0
 800990a:	d003      	beq.n	8009914 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800990c:	4b06      	ldr	r3, [pc, #24]	@ (8009928 <xPortSysTickHandler+0x40>)
 800990e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009912:	601a      	str	r2, [r3, #0]
 8009914:	2300      	movs	r3, #0
 8009916:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	f383 8811 	msr	BASEPRI, r3
}
 800991e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009920:	bf00      	nop
 8009922:	3708      	adds	r7, #8
 8009924:	46bd      	mov	sp, r7
 8009926:	bd80      	pop	{r7, pc}
 8009928:	e000ed04 	.word	0xe000ed04

0800992c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800992c:	b480      	push	{r7}
 800992e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009930:	4b0b      	ldr	r3, [pc, #44]	@ (8009960 <vPortSetupTimerInterrupt+0x34>)
 8009932:	2200      	movs	r2, #0
 8009934:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009936:	4b0b      	ldr	r3, [pc, #44]	@ (8009964 <vPortSetupTimerInterrupt+0x38>)
 8009938:	2200      	movs	r2, #0
 800993a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800993c:	4b0a      	ldr	r3, [pc, #40]	@ (8009968 <vPortSetupTimerInterrupt+0x3c>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	4a0a      	ldr	r2, [pc, #40]	@ (800996c <vPortSetupTimerInterrupt+0x40>)
 8009942:	fba2 2303 	umull	r2, r3, r2, r3
 8009946:	099b      	lsrs	r3, r3, #6
 8009948:	4a09      	ldr	r2, [pc, #36]	@ (8009970 <vPortSetupTimerInterrupt+0x44>)
 800994a:	3b01      	subs	r3, #1
 800994c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800994e:	4b04      	ldr	r3, [pc, #16]	@ (8009960 <vPortSetupTimerInterrupt+0x34>)
 8009950:	2207      	movs	r2, #7
 8009952:	601a      	str	r2, [r3, #0]
}
 8009954:	bf00      	nop
 8009956:	46bd      	mov	sp, r7
 8009958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995c:	4770      	bx	lr
 800995e:	bf00      	nop
 8009960:	e000e010 	.word	0xe000e010
 8009964:	e000e018 	.word	0xe000e018
 8009968:	20000000 	.word	0x20000000
 800996c:	10624dd3 	.word	0x10624dd3
 8009970:	e000e014 	.word	0xe000e014

08009974 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009974:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009984 <vPortEnableVFP+0x10>
 8009978:	6801      	ldr	r1, [r0, #0]
 800997a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800997e:	6001      	str	r1, [r0, #0]
 8009980:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009982:	bf00      	nop
 8009984:	e000ed88 	.word	0xe000ed88

08009988 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009988:	b480      	push	{r7}
 800998a:	b085      	sub	sp, #20
 800998c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800998e:	f3ef 8305 	mrs	r3, IPSR
 8009992:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	2b0f      	cmp	r3, #15
 8009998:	d915      	bls.n	80099c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800999a:	4a18      	ldr	r2, [pc, #96]	@ (80099fc <vPortValidateInterruptPriority+0x74>)
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	4413      	add	r3, r2
 80099a0:	781b      	ldrb	r3, [r3, #0]
 80099a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80099a4:	4b16      	ldr	r3, [pc, #88]	@ (8009a00 <vPortValidateInterruptPriority+0x78>)
 80099a6:	781b      	ldrb	r3, [r3, #0]
 80099a8:	7afa      	ldrb	r2, [r7, #11]
 80099aa:	429a      	cmp	r2, r3
 80099ac:	d20b      	bcs.n	80099c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80099ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099b2:	f383 8811 	msr	BASEPRI, r3
 80099b6:	f3bf 8f6f 	isb	sy
 80099ba:	f3bf 8f4f 	dsb	sy
 80099be:	607b      	str	r3, [r7, #4]
}
 80099c0:	bf00      	nop
 80099c2:	bf00      	nop
 80099c4:	e7fd      	b.n	80099c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80099c6:	4b0f      	ldr	r3, [pc, #60]	@ (8009a04 <vPortValidateInterruptPriority+0x7c>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80099ce:	4b0e      	ldr	r3, [pc, #56]	@ (8009a08 <vPortValidateInterruptPriority+0x80>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	429a      	cmp	r2, r3
 80099d4:	d90b      	bls.n	80099ee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80099d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099da:	f383 8811 	msr	BASEPRI, r3
 80099de:	f3bf 8f6f 	isb	sy
 80099e2:	f3bf 8f4f 	dsb	sy
 80099e6:	603b      	str	r3, [r7, #0]
}
 80099e8:	bf00      	nop
 80099ea:	bf00      	nop
 80099ec:	e7fd      	b.n	80099ea <vPortValidateInterruptPriority+0x62>
	}
 80099ee:	bf00      	nop
 80099f0:	3714      	adds	r7, #20
 80099f2:	46bd      	mov	sp, r7
 80099f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f8:	4770      	bx	lr
 80099fa:	bf00      	nop
 80099fc:	e000e3f0 	.word	0xe000e3f0
 8009a00:	20001374 	.word	0x20001374
 8009a04:	e000ed0c 	.word	0xe000ed0c
 8009a08:	20001378 	.word	0x20001378

08009a0c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b08a      	sub	sp, #40	@ 0x28
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009a14:	2300      	movs	r3, #0
 8009a16:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009a18:	f7fe fc84 	bl	8008324 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009a1c:	4b5c      	ldr	r3, [pc, #368]	@ (8009b90 <pvPortMalloc+0x184>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d101      	bne.n	8009a28 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009a24:	f000 f924 	bl	8009c70 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009a28:	4b5a      	ldr	r3, [pc, #360]	@ (8009b94 <pvPortMalloc+0x188>)
 8009a2a:	681a      	ldr	r2, [r3, #0]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	4013      	ands	r3, r2
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	f040 8095 	bne.w	8009b60 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d01e      	beq.n	8009a7a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009a3c:	2208      	movs	r2, #8
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	4413      	add	r3, r2
 8009a42:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f003 0307 	and.w	r3, r3, #7
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d015      	beq.n	8009a7a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f023 0307 	bic.w	r3, r3, #7
 8009a54:	3308      	adds	r3, #8
 8009a56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f003 0307 	and.w	r3, r3, #7
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d00b      	beq.n	8009a7a <pvPortMalloc+0x6e>
	__asm volatile
 8009a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a66:	f383 8811 	msr	BASEPRI, r3
 8009a6a:	f3bf 8f6f 	isb	sy
 8009a6e:	f3bf 8f4f 	dsb	sy
 8009a72:	617b      	str	r3, [r7, #20]
}
 8009a74:	bf00      	nop
 8009a76:	bf00      	nop
 8009a78:	e7fd      	b.n	8009a76 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d06f      	beq.n	8009b60 <pvPortMalloc+0x154>
 8009a80:	4b45      	ldr	r3, [pc, #276]	@ (8009b98 <pvPortMalloc+0x18c>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	687a      	ldr	r2, [r7, #4]
 8009a86:	429a      	cmp	r2, r3
 8009a88:	d86a      	bhi.n	8009b60 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009a8a:	4b44      	ldr	r3, [pc, #272]	@ (8009b9c <pvPortMalloc+0x190>)
 8009a8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009a8e:	4b43      	ldr	r3, [pc, #268]	@ (8009b9c <pvPortMalloc+0x190>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009a94:	e004      	b.n	8009aa0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aa2:	685b      	ldr	r3, [r3, #4]
 8009aa4:	687a      	ldr	r2, [r7, #4]
 8009aa6:	429a      	cmp	r2, r3
 8009aa8:	d903      	bls.n	8009ab2 <pvPortMalloc+0xa6>
 8009aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d1f1      	bne.n	8009a96 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009ab2:	4b37      	ldr	r3, [pc, #220]	@ (8009b90 <pvPortMalloc+0x184>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ab8:	429a      	cmp	r2, r3
 8009aba:	d051      	beq.n	8009b60 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009abc:	6a3b      	ldr	r3, [r7, #32]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	2208      	movs	r2, #8
 8009ac2:	4413      	add	r3, r2
 8009ac4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ac8:	681a      	ldr	r2, [r3, #0]
 8009aca:	6a3b      	ldr	r3, [r7, #32]
 8009acc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ad0:	685a      	ldr	r2, [r3, #4]
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	1ad2      	subs	r2, r2, r3
 8009ad6:	2308      	movs	r3, #8
 8009ad8:	005b      	lsls	r3, r3, #1
 8009ada:	429a      	cmp	r2, r3
 8009adc:	d920      	bls.n	8009b20 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009ade:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	4413      	add	r3, r2
 8009ae4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ae6:	69bb      	ldr	r3, [r7, #24]
 8009ae8:	f003 0307 	and.w	r3, r3, #7
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d00b      	beq.n	8009b08 <pvPortMalloc+0xfc>
	__asm volatile
 8009af0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009af4:	f383 8811 	msr	BASEPRI, r3
 8009af8:	f3bf 8f6f 	isb	sy
 8009afc:	f3bf 8f4f 	dsb	sy
 8009b00:	613b      	str	r3, [r7, #16]
}
 8009b02:	bf00      	nop
 8009b04:	bf00      	nop
 8009b06:	e7fd      	b.n	8009b04 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b0a:	685a      	ldr	r2, [r3, #4]
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	1ad2      	subs	r2, r2, r3
 8009b10:	69bb      	ldr	r3, [r7, #24]
 8009b12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b16:	687a      	ldr	r2, [r7, #4]
 8009b18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009b1a:	69b8      	ldr	r0, [r7, #24]
 8009b1c:	f000 f90a 	bl	8009d34 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009b20:	4b1d      	ldr	r3, [pc, #116]	@ (8009b98 <pvPortMalloc+0x18c>)
 8009b22:	681a      	ldr	r2, [r3, #0]
 8009b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b26:	685b      	ldr	r3, [r3, #4]
 8009b28:	1ad3      	subs	r3, r2, r3
 8009b2a:	4a1b      	ldr	r2, [pc, #108]	@ (8009b98 <pvPortMalloc+0x18c>)
 8009b2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009b2e:	4b1a      	ldr	r3, [pc, #104]	@ (8009b98 <pvPortMalloc+0x18c>)
 8009b30:	681a      	ldr	r2, [r3, #0]
 8009b32:	4b1b      	ldr	r3, [pc, #108]	@ (8009ba0 <pvPortMalloc+0x194>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	429a      	cmp	r2, r3
 8009b38:	d203      	bcs.n	8009b42 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009b3a:	4b17      	ldr	r3, [pc, #92]	@ (8009b98 <pvPortMalloc+0x18c>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	4a18      	ldr	r2, [pc, #96]	@ (8009ba0 <pvPortMalloc+0x194>)
 8009b40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b44:	685a      	ldr	r2, [r3, #4]
 8009b46:	4b13      	ldr	r3, [pc, #76]	@ (8009b94 <pvPortMalloc+0x188>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	431a      	orrs	r2, r3
 8009b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b52:	2200      	movs	r2, #0
 8009b54:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009b56:	4b13      	ldr	r3, [pc, #76]	@ (8009ba4 <pvPortMalloc+0x198>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	3301      	adds	r3, #1
 8009b5c:	4a11      	ldr	r2, [pc, #68]	@ (8009ba4 <pvPortMalloc+0x198>)
 8009b5e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009b60:	f7fe fbee 	bl	8008340 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b64:	69fb      	ldr	r3, [r7, #28]
 8009b66:	f003 0307 	and.w	r3, r3, #7
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d00b      	beq.n	8009b86 <pvPortMalloc+0x17a>
	__asm volatile
 8009b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b72:	f383 8811 	msr	BASEPRI, r3
 8009b76:	f3bf 8f6f 	isb	sy
 8009b7a:	f3bf 8f4f 	dsb	sy
 8009b7e:	60fb      	str	r3, [r7, #12]
}
 8009b80:	bf00      	nop
 8009b82:	bf00      	nop
 8009b84:	e7fd      	b.n	8009b82 <pvPortMalloc+0x176>
	return pvReturn;
 8009b86:	69fb      	ldr	r3, [r7, #28]
}
 8009b88:	4618      	mov	r0, r3
 8009b8a:	3728      	adds	r7, #40	@ 0x28
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bd80      	pop	{r7, pc}
 8009b90:	20001f84 	.word	0x20001f84
 8009b94:	20001f98 	.word	0x20001f98
 8009b98:	20001f88 	.word	0x20001f88
 8009b9c:	20001f7c 	.word	0x20001f7c
 8009ba0:	20001f8c 	.word	0x20001f8c
 8009ba4:	20001f90 	.word	0x20001f90

08009ba8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b086      	sub	sp, #24
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d04f      	beq.n	8009c5a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009bba:	2308      	movs	r3, #8
 8009bbc:	425b      	negs	r3, r3
 8009bbe:	697a      	ldr	r2, [r7, #20]
 8009bc0:	4413      	add	r3, r2
 8009bc2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009bc8:	693b      	ldr	r3, [r7, #16]
 8009bca:	685a      	ldr	r2, [r3, #4]
 8009bcc:	4b25      	ldr	r3, [pc, #148]	@ (8009c64 <vPortFree+0xbc>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	4013      	ands	r3, r2
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d10b      	bne.n	8009bee <vPortFree+0x46>
	__asm volatile
 8009bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bda:	f383 8811 	msr	BASEPRI, r3
 8009bde:	f3bf 8f6f 	isb	sy
 8009be2:	f3bf 8f4f 	dsb	sy
 8009be6:	60fb      	str	r3, [r7, #12]
}
 8009be8:	bf00      	nop
 8009bea:	bf00      	nop
 8009bec:	e7fd      	b.n	8009bea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009bee:	693b      	ldr	r3, [r7, #16]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d00b      	beq.n	8009c0e <vPortFree+0x66>
	__asm volatile
 8009bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bfa:	f383 8811 	msr	BASEPRI, r3
 8009bfe:	f3bf 8f6f 	isb	sy
 8009c02:	f3bf 8f4f 	dsb	sy
 8009c06:	60bb      	str	r3, [r7, #8]
}
 8009c08:	bf00      	nop
 8009c0a:	bf00      	nop
 8009c0c:	e7fd      	b.n	8009c0a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009c0e:	693b      	ldr	r3, [r7, #16]
 8009c10:	685a      	ldr	r2, [r3, #4]
 8009c12:	4b14      	ldr	r3, [pc, #80]	@ (8009c64 <vPortFree+0xbc>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	4013      	ands	r3, r2
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d01e      	beq.n	8009c5a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d11a      	bne.n	8009c5a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009c24:	693b      	ldr	r3, [r7, #16]
 8009c26:	685a      	ldr	r2, [r3, #4]
 8009c28:	4b0e      	ldr	r3, [pc, #56]	@ (8009c64 <vPortFree+0xbc>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	43db      	mvns	r3, r3
 8009c2e:	401a      	ands	r2, r3
 8009c30:	693b      	ldr	r3, [r7, #16]
 8009c32:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009c34:	f7fe fb76 	bl	8008324 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	685a      	ldr	r2, [r3, #4]
 8009c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8009c68 <vPortFree+0xc0>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	4413      	add	r3, r2
 8009c42:	4a09      	ldr	r2, [pc, #36]	@ (8009c68 <vPortFree+0xc0>)
 8009c44:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009c46:	6938      	ldr	r0, [r7, #16]
 8009c48:	f000 f874 	bl	8009d34 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009c4c:	4b07      	ldr	r3, [pc, #28]	@ (8009c6c <vPortFree+0xc4>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	3301      	adds	r3, #1
 8009c52:	4a06      	ldr	r2, [pc, #24]	@ (8009c6c <vPortFree+0xc4>)
 8009c54:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009c56:	f7fe fb73 	bl	8008340 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009c5a:	bf00      	nop
 8009c5c:	3718      	adds	r7, #24
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}
 8009c62:	bf00      	nop
 8009c64:	20001f98 	.word	0x20001f98
 8009c68:	20001f88 	.word	0x20001f88
 8009c6c:	20001f94 	.word	0x20001f94

08009c70 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009c70:	b480      	push	{r7}
 8009c72:	b085      	sub	sp, #20
 8009c74:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009c76:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8009c7a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009c7c:	4b27      	ldr	r3, [pc, #156]	@ (8009d1c <prvHeapInit+0xac>)
 8009c7e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	f003 0307 	and.w	r3, r3, #7
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d00c      	beq.n	8009ca4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	3307      	adds	r3, #7
 8009c8e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	f023 0307 	bic.w	r3, r3, #7
 8009c96:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009c98:	68ba      	ldr	r2, [r7, #8]
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	1ad3      	subs	r3, r2, r3
 8009c9e:	4a1f      	ldr	r2, [pc, #124]	@ (8009d1c <prvHeapInit+0xac>)
 8009ca0:	4413      	add	r3, r2
 8009ca2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009ca8:	4a1d      	ldr	r2, [pc, #116]	@ (8009d20 <prvHeapInit+0xb0>)
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009cae:	4b1c      	ldr	r3, [pc, #112]	@ (8009d20 <prvHeapInit+0xb0>)
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	68ba      	ldr	r2, [r7, #8]
 8009cb8:	4413      	add	r3, r2
 8009cba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009cbc:	2208      	movs	r2, #8
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	1a9b      	subs	r3, r3, r2
 8009cc2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	f023 0307 	bic.w	r3, r3, #7
 8009cca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	4a15      	ldr	r2, [pc, #84]	@ (8009d24 <prvHeapInit+0xb4>)
 8009cd0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009cd2:	4b14      	ldr	r3, [pc, #80]	@ (8009d24 <prvHeapInit+0xb4>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009cda:	4b12      	ldr	r3, [pc, #72]	@ (8009d24 <prvHeapInit+0xb4>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	68fa      	ldr	r2, [r7, #12]
 8009cea:	1ad2      	subs	r2, r2, r3
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8009d24 <prvHeapInit+0xb4>)
 8009cf2:	681a      	ldr	r2, [r3, #0]
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	685b      	ldr	r3, [r3, #4]
 8009cfc:	4a0a      	ldr	r2, [pc, #40]	@ (8009d28 <prvHeapInit+0xb8>)
 8009cfe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	685b      	ldr	r3, [r3, #4]
 8009d04:	4a09      	ldr	r2, [pc, #36]	@ (8009d2c <prvHeapInit+0xbc>)
 8009d06:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009d08:	4b09      	ldr	r3, [pc, #36]	@ (8009d30 <prvHeapInit+0xc0>)
 8009d0a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009d0e:	601a      	str	r2, [r3, #0]
}
 8009d10:	bf00      	nop
 8009d12:	3714      	adds	r7, #20
 8009d14:	46bd      	mov	sp, r7
 8009d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1a:	4770      	bx	lr
 8009d1c:	2000137c 	.word	0x2000137c
 8009d20:	20001f7c 	.word	0x20001f7c
 8009d24:	20001f84 	.word	0x20001f84
 8009d28:	20001f8c 	.word	0x20001f8c
 8009d2c:	20001f88 	.word	0x20001f88
 8009d30:	20001f98 	.word	0x20001f98

08009d34 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009d34:	b480      	push	{r7}
 8009d36:	b085      	sub	sp, #20
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009d3c:	4b28      	ldr	r3, [pc, #160]	@ (8009de0 <prvInsertBlockIntoFreeList+0xac>)
 8009d3e:	60fb      	str	r3, [r7, #12]
 8009d40:	e002      	b.n	8009d48 <prvInsertBlockIntoFreeList+0x14>
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	60fb      	str	r3, [r7, #12]
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	687a      	ldr	r2, [r7, #4]
 8009d4e:	429a      	cmp	r2, r3
 8009d50:	d8f7      	bhi.n	8009d42 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	685b      	ldr	r3, [r3, #4]
 8009d5a:	68ba      	ldr	r2, [r7, #8]
 8009d5c:	4413      	add	r3, r2
 8009d5e:	687a      	ldr	r2, [r7, #4]
 8009d60:	429a      	cmp	r2, r3
 8009d62:	d108      	bne.n	8009d76 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	685a      	ldr	r2, [r3, #4]
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	685b      	ldr	r3, [r3, #4]
 8009d6c:	441a      	add	r2, r3
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	685b      	ldr	r3, [r3, #4]
 8009d7e:	68ba      	ldr	r2, [r7, #8]
 8009d80:	441a      	add	r2, r3
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	429a      	cmp	r2, r3
 8009d88:	d118      	bne.n	8009dbc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681a      	ldr	r2, [r3, #0]
 8009d8e:	4b15      	ldr	r3, [pc, #84]	@ (8009de4 <prvInsertBlockIntoFreeList+0xb0>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	429a      	cmp	r2, r3
 8009d94:	d00d      	beq.n	8009db2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	685a      	ldr	r2, [r3, #4]
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	685b      	ldr	r3, [r3, #4]
 8009da0:	441a      	add	r2, r3
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	681a      	ldr	r2, [r3, #0]
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	601a      	str	r2, [r3, #0]
 8009db0:	e008      	b.n	8009dc4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009db2:	4b0c      	ldr	r3, [pc, #48]	@ (8009de4 <prvInsertBlockIntoFreeList+0xb0>)
 8009db4:	681a      	ldr	r2, [r3, #0]
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	601a      	str	r2, [r3, #0]
 8009dba:	e003      	b.n	8009dc4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681a      	ldr	r2, [r3, #0]
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009dc4:	68fa      	ldr	r2, [r7, #12]
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	429a      	cmp	r2, r3
 8009dca:	d002      	beq.n	8009dd2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	687a      	ldr	r2, [r7, #4]
 8009dd0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009dd2:	bf00      	nop
 8009dd4:	3714      	adds	r7, #20
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ddc:	4770      	bx	lr
 8009dde:	bf00      	nop
 8009de0:	20001f7c 	.word	0x20001f7c
 8009de4:	20001f84 	.word	0x20001f84

08009de8 <atof>:
 8009de8:	2100      	movs	r1, #0
 8009dea:	f000 be05 	b.w	800a9f8 <strtod>

08009dee <sulp>:
 8009dee:	b570      	push	{r4, r5, r6, lr}
 8009df0:	4604      	mov	r4, r0
 8009df2:	460d      	mov	r5, r1
 8009df4:	ec45 4b10 	vmov	d0, r4, r5
 8009df8:	4616      	mov	r6, r2
 8009dfa:	f002 f81f 	bl	800be3c <__ulp>
 8009dfe:	ec51 0b10 	vmov	r0, r1, d0
 8009e02:	b17e      	cbz	r6, 8009e24 <sulp+0x36>
 8009e04:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009e08:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	dd09      	ble.n	8009e24 <sulp+0x36>
 8009e10:	051b      	lsls	r3, r3, #20
 8009e12:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009e16:	2400      	movs	r4, #0
 8009e18:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009e1c:	4622      	mov	r2, r4
 8009e1e:	462b      	mov	r3, r5
 8009e20:	f7f6 fc0a 	bl	8000638 <__aeabi_dmul>
 8009e24:	ec41 0b10 	vmov	d0, r0, r1
 8009e28:	bd70      	pop	{r4, r5, r6, pc}
 8009e2a:	0000      	movs	r0, r0
 8009e2c:	0000      	movs	r0, r0
	...

08009e30 <_strtod_l>:
 8009e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e34:	b09f      	sub	sp, #124	@ 0x7c
 8009e36:	460c      	mov	r4, r1
 8009e38:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	921a      	str	r2, [sp, #104]	@ 0x68
 8009e3e:	9005      	str	r0, [sp, #20]
 8009e40:	f04f 0a00 	mov.w	sl, #0
 8009e44:	f04f 0b00 	mov.w	fp, #0
 8009e48:	460a      	mov	r2, r1
 8009e4a:	9219      	str	r2, [sp, #100]	@ 0x64
 8009e4c:	7811      	ldrb	r1, [r2, #0]
 8009e4e:	292b      	cmp	r1, #43	@ 0x2b
 8009e50:	d04a      	beq.n	8009ee8 <_strtod_l+0xb8>
 8009e52:	d838      	bhi.n	8009ec6 <_strtod_l+0x96>
 8009e54:	290d      	cmp	r1, #13
 8009e56:	d832      	bhi.n	8009ebe <_strtod_l+0x8e>
 8009e58:	2908      	cmp	r1, #8
 8009e5a:	d832      	bhi.n	8009ec2 <_strtod_l+0x92>
 8009e5c:	2900      	cmp	r1, #0
 8009e5e:	d03b      	beq.n	8009ed8 <_strtod_l+0xa8>
 8009e60:	2200      	movs	r2, #0
 8009e62:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009e64:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009e66:	782a      	ldrb	r2, [r5, #0]
 8009e68:	2a30      	cmp	r2, #48	@ 0x30
 8009e6a:	f040 80b3 	bne.w	8009fd4 <_strtod_l+0x1a4>
 8009e6e:	786a      	ldrb	r2, [r5, #1]
 8009e70:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009e74:	2a58      	cmp	r2, #88	@ 0x58
 8009e76:	d16e      	bne.n	8009f56 <_strtod_l+0x126>
 8009e78:	9302      	str	r3, [sp, #8]
 8009e7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e7c:	9301      	str	r3, [sp, #4]
 8009e7e:	ab1a      	add	r3, sp, #104	@ 0x68
 8009e80:	9300      	str	r3, [sp, #0]
 8009e82:	4a8e      	ldr	r2, [pc, #568]	@ (800a0bc <_strtod_l+0x28c>)
 8009e84:	9805      	ldr	r0, [sp, #20]
 8009e86:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009e88:	a919      	add	r1, sp, #100	@ 0x64
 8009e8a:	f001 f8c9 	bl	800b020 <__gethex>
 8009e8e:	f010 060f 	ands.w	r6, r0, #15
 8009e92:	4604      	mov	r4, r0
 8009e94:	d005      	beq.n	8009ea2 <_strtod_l+0x72>
 8009e96:	2e06      	cmp	r6, #6
 8009e98:	d128      	bne.n	8009eec <_strtod_l+0xbc>
 8009e9a:	3501      	adds	r5, #1
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	9519      	str	r5, [sp, #100]	@ 0x64
 8009ea0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009ea2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	f040 858e 	bne.w	800a9c6 <_strtod_l+0xb96>
 8009eaa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009eac:	b1cb      	cbz	r3, 8009ee2 <_strtod_l+0xb2>
 8009eae:	4652      	mov	r2, sl
 8009eb0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8009eb4:	ec43 2b10 	vmov	d0, r2, r3
 8009eb8:	b01f      	add	sp, #124	@ 0x7c
 8009eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ebe:	2920      	cmp	r1, #32
 8009ec0:	d1ce      	bne.n	8009e60 <_strtod_l+0x30>
 8009ec2:	3201      	adds	r2, #1
 8009ec4:	e7c1      	b.n	8009e4a <_strtod_l+0x1a>
 8009ec6:	292d      	cmp	r1, #45	@ 0x2d
 8009ec8:	d1ca      	bne.n	8009e60 <_strtod_l+0x30>
 8009eca:	2101      	movs	r1, #1
 8009ecc:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009ece:	1c51      	adds	r1, r2, #1
 8009ed0:	9119      	str	r1, [sp, #100]	@ 0x64
 8009ed2:	7852      	ldrb	r2, [r2, #1]
 8009ed4:	2a00      	cmp	r2, #0
 8009ed6:	d1c5      	bne.n	8009e64 <_strtod_l+0x34>
 8009ed8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009eda:	9419      	str	r4, [sp, #100]	@ 0x64
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	f040 8570 	bne.w	800a9c2 <_strtod_l+0xb92>
 8009ee2:	4652      	mov	r2, sl
 8009ee4:	465b      	mov	r3, fp
 8009ee6:	e7e5      	b.n	8009eb4 <_strtod_l+0x84>
 8009ee8:	2100      	movs	r1, #0
 8009eea:	e7ef      	b.n	8009ecc <_strtod_l+0x9c>
 8009eec:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009eee:	b13a      	cbz	r2, 8009f00 <_strtod_l+0xd0>
 8009ef0:	2135      	movs	r1, #53	@ 0x35
 8009ef2:	a81c      	add	r0, sp, #112	@ 0x70
 8009ef4:	f002 f89c 	bl	800c030 <__copybits>
 8009ef8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009efa:	9805      	ldr	r0, [sp, #20]
 8009efc:	f001 fc6a 	bl	800b7d4 <_Bfree>
 8009f00:	3e01      	subs	r6, #1
 8009f02:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009f04:	2e04      	cmp	r6, #4
 8009f06:	d806      	bhi.n	8009f16 <_strtod_l+0xe6>
 8009f08:	e8df f006 	tbb	[pc, r6]
 8009f0c:	201d0314 	.word	0x201d0314
 8009f10:	14          	.byte	0x14
 8009f11:	00          	.byte	0x00
 8009f12:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009f16:	05e1      	lsls	r1, r4, #23
 8009f18:	bf48      	it	mi
 8009f1a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009f1e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009f22:	0d1b      	lsrs	r3, r3, #20
 8009f24:	051b      	lsls	r3, r3, #20
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d1bb      	bne.n	8009ea2 <_strtod_l+0x72>
 8009f2a:	f000 ff63 	bl	800adf4 <__errno>
 8009f2e:	2322      	movs	r3, #34	@ 0x22
 8009f30:	6003      	str	r3, [r0, #0]
 8009f32:	e7b6      	b.n	8009ea2 <_strtod_l+0x72>
 8009f34:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009f38:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009f3c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009f40:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009f44:	e7e7      	b.n	8009f16 <_strtod_l+0xe6>
 8009f46:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800a0c4 <_strtod_l+0x294>
 8009f4a:	e7e4      	b.n	8009f16 <_strtod_l+0xe6>
 8009f4c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009f50:	f04f 3aff 	mov.w	sl, #4294967295
 8009f54:	e7df      	b.n	8009f16 <_strtod_l+0xe6>
 8009f56:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009f58:	1c5a      	adds	r2, r3, #1
 8009f5a:	9219      	str	r2, [sp, #100]	@ 0x64
 8009f5c:	785b      	ldrb	r3, [r3, #1]
 8009f5e:	2b30      	cmp	r3, #48	@ 0x30
 8009f60:	d0f9      	beq.n	8009f56 <_strtod_l+0x126>
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d09d      	beq.n	8009ea2 <_strtod_l+0x72>
 8009f66:	2301      	movs	r3, #1
 8009f68:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f6a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009f6c:	930c      	str	r3, [sp, #48]	@ 0x30
 8009f6e:	2300      	movs	r3, #0
 8009f70:	9308      	str	r3, [sp, #32]
 8009f72:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f74:	461f      	mov	r7, r3
 8009f76:	220a      	movs	r2, #10
 8009f78:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009f7a:	7805      	ldrb	r5, [r0, #0]
 8009f7c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009f80:	b2d9      	uxtb	r1, r3
 8009f82:	2909      	cmp	r1, #9
 8009f84:	d928      	bls.n	8009fd8 <_strtod_l+0x1a8>
 8009f86:	494e      	ldr	r1, [pc, #312]	@ (800a0c0 <_strtod_l+0x290>)
 8009f88:	2201      	movs	r2, #1
 8009f8a:	f000 fe7e 	bl	800ac8a <strncmp>
 8009f8e:	2800      	cmp	r0, #0
 8009f90:	d032      	beq.n	8009ff8 <_strtod_l+0x1c8>
 8009f92:	2000      	movs	r0, #0
 8009f94:	462a      	mov	r2, r5
 8009f96:	4681      	mov	r9, r0
 8009f98:	463d      	mov	r5, r7
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	2a65      	cmp	r2, #101	@ 0x65
 8009f9e:	d001      	beq.n	8009fa4 <_strtod_l+0x174>
 8009fa0:	2a45      	cmp	r2, #69	@ 0x45
 8009fa2:	d114      	bne.n	8009fce <_strtod_l+0x19e>
 8009fa4:	b91d      	cbnz	r5, 8009fae <_strtod_l+0x17e>
 8009fa6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009fa8:	4302      	orrs	r2, r0
 8009faa:	d095      	beq.n	8009ed8 <_strtod_l+0xa8>
 8009fac:	2500      	movs	r5, #0
 8009fae:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009fb0:	1c62      	adds	r2, r4, #1
 8009fb2:	9219      	str	r2, [sp, #100]	@ 0x64
 8009fb4:	7862      	ldrb	r2, [r4, #1]
 8009fb6:	2a2b      	cmp	r2, #43	@ 0x2b
 8009fb8:	d077      	beq.n	800a0aa <_strtod_l+0x27a>
 8009fba:	2a2d      	cmp	r2, #45	@ 0x2d
 8009fbc:	d07b      	beq.n	800a0b6 <_strtod_l+0x286>
 8009fbe:	f04f 0c00 	mov.w	ip, #0
 8009fc2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009fc6:	2909      	cmp	r1, #9
 8009fc8:	f240 8082 	bls.w	800a0d0 <_strtod_l+0x2a0>
 8009fcc:	9419      	str	r4, [sp, #100]	@ 0x64
 8009fce:	f04f 0800 	mov.w	r8, #0
 8009fd2:	e0a2      	b.n	800a11a <_strtod_l+0x2ea>
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	e7c7      	b.n	8009f68 <_strtod_l+0x138>
 8009fd8:	2f08      	cmp	r7, #8
 8009fda:	bfd5      	itete	le
 8009fdc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8009fde:	9908      	ldrgt	r1, [sp, #32]
 8009fe0:	fb02 3301 	mlale	r3, r2, r1, r3
 8009fe4:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009fe8:	f100 0001 	add.w	r0, r0, #1
 8009fec:	bfd4      	ite	le
 8009fee:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009ff0:	9308      	strgt	r3, [sp, #32]
 8009ff2:	3701      	adds	r7, #1
 8009ff4:	9019      	str	r0, [sp, #100]	@ 0x64
 8009ff6:	e7bf      	b.n	8009f78 <_strtod_l+0x148>
 8009ff8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009ffa:	1c5a      	adds	r2, r3, #1
 8009ffc:	9219      	str	r2, [sp, #100]	@ 0x64
 8009ffe:	785a      	ldrb	r2, [r3, #1]
 800a000:	b37f      	cbz	r7, 800a062 <_strtod_l+0x232>
 800a002:	4681      	mov	r9, r0
 800a004:	463d      	mov	r5, r7
 800a006:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a00a:	2b09      	cmp	r3, #9
 800a00c:	d912      	bls.n	800a034 <_strtod_l+0x204>
 800a00e:	2301      	movs	r3, #1
 800a010:	e7c4      	b.n	8009f9c <_strtod_l+0x16c>
 800a012:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a014:	1c5a      	adds	r2, r3, #1
 800a016:	9219      	str	r2, [sp, #100]	@ 0x64
 800a018:	785a      	ldrb	r2, [r3, #1]
 800a01a:	3001      	adds	r0, #1
 800a01c:	2a30      	cmp	r2, #48	@ 0x30
 800a01e:	d0f8      	beq.n	800a012 <_strtod_l+0x1e2>
 800a020:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a024:	2b08      	cmp	r3, #8
 800a026:	f200 84d3 	bhi.w	800a9d0 <_strtod_l+0xba0>
 800a02a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a02c:	930c      	str	r3, [sp, #48]	@ 0x30
 800a02e:	4681      	mov	r9, r0
 800a030:	2000      	movs	r0, #0
 800a032:	4605      	mov	r5, r0
 800a034:	3a30      	subs	r2, #48	@ 0x30
 800a036:	f100 0301 	add.w	r3, r0, #1
 800a03a:	d02a      	beq.n	800a092 <_strtod_l+0x262>
 800a03c:	4499      	add	r9, r3
 800a03e:	eb00 0c05 	add.w	ip, r0, r5
 800a042:	462b      	mov	r3, r5
 800a044:	210a      	movs	r1, #10
 800a046:	4563      	cmp	r3, ip
 800a048:	d10d      	bne.n	800a066 <_strtod_l+0x236>
 800a04a:	1c69      	adds	r1, r5, #1
 800a04c:	4401      	add	r1, r0
 800a04e:	4428      	add	r0, r5
 800a050:	2808      	cmp	r0, #8
 800a052:	dc16      	bgt.n	800a082 <_strtod_l+0x252>
 800a054:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a056:	230a      	movs	r3, #10
 800a058:	fb03 2300 	mla	r3, r3, r0, r2
 800a05c:	930a      	str	r3, [sp, #40]	@ 0x28
 800a05e:	2300      	movs	r3, #0
 800a060:	e018      	b.n	800a094 <_strtod_l+0x264>
 800a062:	4638      	mov	r0, r7
 800a064:	e7da      	b.n	800a01c <_strtod_l+0x1ec>
 800a066:	2b08      	cmp	r3, #8
 800a068:	f103 0301 	add.w	r3, r3, #1
 800a06c:	dc03      	bgt.n	800a076 <_strtod_l+0x246>
 800a06e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a070:	434e      	muls	r6, r1
 800a072:	960a      	str	r6, [sp, #40]	@ 0x28
 800a074:	e7e7      	b.n	800a046 <_strtod_l+0x216>
 800a076:	2b10      	cmp	r3, #16
 800a078:	bfde      	ittt	le
 800a07a:	9e08      	ldrle	r6, [sp, #32]
 800a07c:	434e      	mulle	r6, r1
 800a07e:	9608      	strle	r6, [sp, #32]
 800a080:	e7e1      	b.n	800a046 <_strtod_l+0x216>
 800a082:	280f      	cmp	r0, #15
 800a084:	dceb      	bgt.n	800a05e <_strtod_l+0x22e>
 800a086:	9808      	ldr	r0, [sp, #32]
 800a088:	230a      	movs	r3, #10
 800a08a:	fb03 2300 	mla	r3, r3, r0, r2
 800a08e:	9308      	str	r3, [sp, #32]
 800a090:	e7e5      	b.n	800a05e <_strtod_l+0x22e>
 800a092:	4629      	mov	r1, r5
 800a094:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a096:	1c50      	adds	r0, r2, #1
 800a098:	9019      	str	r0, [sp, #100]	@ 0x64
 800a09a:	7852      	ldrb	r2, [r2, #1]
 800a09c:	4618      	mov	r0, r3
 800a09e:	460d      	mov	r5, r1
 800a0a0:	e7b1      	b.n	800a006 <_strtod_l+0x1d6>
 800a0a2:	f04f 0900 	mov.w	r9, #0
 800a0a6:	2301      	movs	r3, #1
 800a0a8:	e77d      	b.n	8009fa6 <_strtod_l+0x176>
 800a0aa:	f04f 0c00 	mov.w	ip, #0
 800a0ae:	1ca2      	adds	r2, r4, #2
 800a0b0:	9219      	str	r2, [sp, #100]	@ 0x64
 800a0b2:	78a2      	ldrb	r2, [r4, #2]
 800a0b4:	e785      	b.n	8009fc2 <_strtod_l+0x192>
 800a0b6:	f04f 0c01 	mov.w	ip, #1
 800a0ba:	e7f8      	b.n	800a0ae <_strtod_l+0x27e>
 800a0bc:	0800cf98 	.word	0x0800cf98
 800a0c0:	0800cf74 	.word	0x0800cf74
 800a0c4:	7ff00000 	.word	0x7ff00000
 800a0c8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a0ca:	1c51      	adds	r1, r2, #1
 800a0cc:	9119      	str	r1, [sp, #100]	@ 0x64
 800a0ce:	7852      	ldrb	r2, [r2, #1]
 800a0d0:	2a30      	cmp	r2, #48	@ 0x30
 800a0d2:	d0f9      	beq.n	800a0c8 <_strtod_l+0x298>
 800a0d4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a0d8:	2908      	cmp	r1, #8
 800a0da:	f63f af78 	bhi.w	8009fce <_strtod_l+0x19e>
 800a0de:	3a30      	subs	r2, #48	@ 0x30
 800a0e0:	920e      	str	r2, [sp, #56]	@ 0x38
 800a0e2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a0e4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a0e6:	f04f 080a 	mov.w	r8, #10
 800a0ea:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a0ec:	1c56      	adds	r6, r2, #1
 800a0ee:	9619      	str	r6, [sp, #100]	@ 0x64
 800a0f0:	7852      	ldrb	r2, [r2, #1]
 800a0f2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a0f6:	f1be 0f09 	cmp.w	lr, #9
 800a0fa:	d939      	bls.n	800a170 <_strtod_l+0x340>
 800a0fc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a0fe:	1a76      	subs	r6, r6, r1
 800a100:	2e08      	cmp	r6, #8
 800a102:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a106:	dc03      	bgt.n	800a110 <_strtod_l+0x2e0>
 800a108:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a10a:	4588      	cmp	r8, r1
 800a10c:	bfa8      	it	ge
 800a10e:	4688      	movge	r8, r1
 800a110:	f1bc 0f00 	cmp.w	ip, #0
 800a114:	d001      	beq.n	800a11a <_strtod_l+0x2ea>
 800a116:	f1c8 0800 	rsb	r8, r8, #0
 800a11a:	2d00      	cmp	r5, #0
 800a11c:	d14e      	bne.n	800a1bc <_strtod_l+0x38c>
 800a11e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a120:	4308      	orrs	r0, r1
 800a122:	f47f aebe 	bne.w	8009ea2 <_strtod_l+0x72>
 800a126:	2b00      	cmp	r3, #0
 800a128:	f47f aed6 	bne.w	8009ed8 <_strtod_l+0xa8>
 800a12c:	2a69      	cmp	r2, #105	@ 0x69
 800a12e:	d028      	beq.n	800a182 <_strtod_l+0x352>
 800a130:	dc25      	bgt.n	800a17e <_strtod_l+0x34e>
 800a132:	2a49      	cmp	r2, #73	@ 0x49
 800a134:	d025      	beq.n	800a182 <_strtod_l+0x352>
 800a136:	2a4e      	cmp	r2, #78	@ 0x4e
 800a138:	f47f aece 	bne.w	8009ed8 <_strtod_l+0xa8>
 800a13c:	499b      	ldr	r1, [pc, #620]	@ (800a3ac <_strtod_l+0x57c>)
 800a13e:	a819      	add	r0, sp, #100	@ 0x64
 800a140:	f001 f990 	bl	800b464 <__match>
 800a144:	2800      	cmp	r0, #0
 800a146:	f43f aec7 	beq.w	8009ed8 <_strtod_l+0xa8>
 800a14a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a14c:	781b      	ldrb	r3, [r3, #0]
 800a14e:	2b28      	cmp	r3, #40	@ 0x28
 800a150:	d12e      	bne.n	800a1b0 <_strtod_l+0x380>
 800a152:	4997      	ldr	r1, [pc, #604]	@ (800a3b0 <_strtod_l+0x580>)
 800a154:	aa1c      	add	r2, sp, #112	@ 0x70
 800a156:	a819      	add	r0, sp, #100	@ 0x64
 800a158:	f001 f998 	bl	800b48c <__hexnan>
 800a15c:	2805      	cmp	r0, #5
 800a15e:	d127      	bne.n	800a1b0 <_strtod_l+0x380>
 800a160:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a162:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a166:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a16a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a16e:	e698      	b.n	8009ea2 <_strtod_l+0x72>
 800a170:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a172:	fb08 2101 	mla	r1, r8, r1, r2
 800a176:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a17a:	920e      	str	r2, [sp, #56]	@ 0x38
 800a17c:	e7b5      	b.n	800a0ea <_strtod_l+0x2ba>
 800a17e:	2a6e      	cmp	r2, #110	@ 0x6e
 800a180:	e7da      	b.n	800a138 <_strtod_l+0x308>
 800a182:	498c      	ldr	r1, [pc, #560]	@ (800a3b4 <_strtod_l+0x584>)
 800a184:	a819      	add	r0, sp, #100	@ 0x64
 800a186:	f001 f96d 	bl	800b464 <__match>
 800a18a:	2800      	cmp	r0, #0
 800a18c:	f43f aea4 	beq.w	8009ed8 <_strtod_l+0xa8>
 800a190:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a192:	4989      	ldr	r1, [pc, #548]	@ (800a3b8 <_strtod_l+0x588>)
 800a194:	3b01      	subs	r3, #1
 800a196:	a819      	add	r0, sp, #100	@ 0x64
 800a198:	9319      	str	r3, [sp, #100]	@ 0x64
 800a19a:	f001 f963 	bl	800b464 <__match>
 800a19e:	b910      	cbnz	r0, 800a1a6 <_strtod_l+0x376>
 800a1a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a1a2:	3301      	adds	r3, #1
 800a1a4:	9319      	str	r3, [sp, #100]	@ 0x64
 800a1a6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800a3c8 <_strtod_l+0x598>
 800a1aa:	f04f 0a00 	mov.w	sl, #0
 800a1ae:	e678      	b.n	8009ea2 <_strtod_l+0x72>
 800a1b0:	4882      	ldr	r0, [pc, #520]	@ (800a3bc <_strtod_l+0x58c>)
 800a1b2:	f000 fe5d 	bl	800ae70 <nan>
 800a1b6:	ec5b ab10 	vmov	sl, fp, d0
 800a1ba:	e672      	b.n	8009ea2 <_strtod_l+0x72>
 800a1bc:	eba8 0309 	sub.w	r3, r8, r9
 800a1c0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a1c2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1c4:	2f00      	cmp	r7, #0
 800a1c6:	bf08      	it	eq
 800a1c8:	462f      	moveq	r7, r5
 800a1ca:	2d10      	cmp	r5, #16
 800a1cc:	462c      	mov	r4, r5
 800a1ce:	bfa8      	it	ge
 800a1d0:	2410      	movge	r4, #16
 800a1d2:	f7f6 f9b7 	bl	8000544 <__aeabi_ui2d>
 800a1d6:	2d09      	cmp	r5, #9
 800a1d8:	4682      	mov	sl, r0
 800a1da:	468b      	mov	fp, r1
 800a1dc:	dc13      	bgt.n	800a206 <_strtod_l+0x3d6>
 800a1de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	f43f ae5e 	beq.w	8009ea2 <_strtod_l+0x72>
 800a1e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1e8:	dd78      	ble.n	800a2dc <_strtod_l+0x4ac>
 800a1ea:	2b16      	cmp	r3, #22
 800a1ec:	dc5f      	bgt.n	800a2ae <_strtod_l+0x47e>
 800a1ee:	4974      	ldr	r1, [pc, #464]	@ (800a3c0 <_strtod_l+0x590>)
 800a1f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a1f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1f8:	4652      	mov	r2, sl
 800a1fa:	465b      	mov	r3, fp
 800a1fc:	f7f6 fa1c 	bl	8000638 <__aeabi_dmul>
 800a200:	4682      	mov	sl, r0
 800a202:	468b      	mov	fp, r1
 800a204:	e64d      	b.n	8009ea2 <_strtod_l+0x72>
 800a206:	4b6e      	ldr	r3, [pc, #440]	@ (800a3c0 <_strtod_l+0x590>)
 800a208:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a20c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a210:	f7f6 fa12 	bl	8000638 <__aeabi_dmul>
 800a214:	4682      	mov	sl, r0
 800a216:	9808      	ldr	r0, [sp, #32]
 800a218:	468b      	mov	fp, r1
 800a21a:	f7f6 f993 	bl	8000544 <__aeabi_ui2d>
 800a21e:	4602      	mov	r2, r0
 800a220:	460b      	mov	r3, r1
 800a222:	4650      	mov	r0, sl
 800a224:	4659      	mov	r1, fp
 800a226:	f7f6 f851 	bl	80002cc <__adddf3>
 800a22a:	2d0f      	cmp	r5, #15
 800a22c:	4682      	mov	sl, r0
 800a22e:	468b      	mov	fp, r1
 800a230:	ddd5      	ble.n	800a1de <_strtod_l+0x3ae>
 800a232:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a234:	1b2c      	subs	r4, r5, r4
 800a236:	441c      	add	r4, r3
 800a238:	2c00      	cmp	r4, #0
 800a23a:	f340 8096 	ble.w	800a36a <_strtod_l+0x53a>
 800a23e:	f014 030f 	ands.w	r3, r4, #15
 800a242:	d00a      	beq.n	800a25a <_strtod_l+0x42a>
 800a244:	495e      	ldr	r1, [pc, #376]	@ (800a3c0 <_strtod_l+0x590>)
 800a246:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a24a:	4652      	mov	r2, sl
 800a24c:	465b      	mov	r3, fp
 800a24e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a252:	f7f6 f9f1 	bl	8000638 <__aeabi_dmul>
 800a256:	4682      	mov	sl, r0
 800a258:	468b      	mov	fp, r1
 800a25a:	f034 040f 	bics.w	r4, r4, #15
 800a25e:	d073      	beq.n	800a348 <_strtod_l+0x518>
 800a260:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a264:	dd48      	ble.n	800a2f8 <_strtod_l+0x4c8>
 800a266:	2400      	movs	r4, #0
 800a268:	46a0      	mov	r8, r4
 800a26a:	940a      	str	r4, [sp, #40]	@ 0x28
 800a26c:	46a1      	mov	r9, r4
 800a26e:	9a05      	ldr	r2, [sp, #20]
 800a270:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800a3c8 <_strtod_l+0x598>
 800a274:	2322      	movs	r3, #34	@ 0x22
 800a276:	6013      	str	r3, [r2, #0]
 800a278:	f04f 0a00 	mov.w	sl, #0
 800a27c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a27e:	2b00      	cmp	r3, #0
 800a280:	f43f ae0f 	beq.w	8009ea2 <_strtod_l+0x72>
 800a284:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a286:	9805      	ldr	r0, [sp, #20]
 800a288:	f001 faa4 	bl	800b7d4 <_Bfree>
 800a28c:	9805      	ldr	r0, [sp, #20]
 800a28e:	4649      	mov	r1, r9
 800a290:	f001 faa0 	bl	800b7d4 <_Bfree>
 800a294:	9805      	ldr	r0, [sp, #20]
 800a296:	4641      	mov	r1, r8
 800a298:	f001 fa9c 	bl	800b7d4 <_Bfree>
 800a29c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a29e:	9805      	ldr	r0, [sp, #20]
 800a2a0:	f001 fa98 	bl	800b7d4 <_Bfree>
 800a2a4:	9805      	ldr	r0, [sp, #20]
 800a2a6:	4621      	mov	r1, r4
 800a2a8:	f001 fa94 	bl	800b7d4 <_Bfree>
 800a2ac:	e5f9      	b.n	8009ea2 <_strtod_l+0x72>
 800a2ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a2b0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	dbbc      	blt.n	800a232 <_strtod_l+0x402>
 800a2b8:	4c41      	ldr	r4, [pc, #260]	@ (800a3c0 <_strtod_l+0x590>)
 800a2ba:	f1c5 050f 	rsb	r5, r5, #15
 800a2be:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a2c2:	4652      	mov	r2, sl
 800a2c4:	465b      	mov	r3, fp
 800a2c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2ca:	f7f6 f9b5 	bl	8000638 <__aeabi_dmul>
 800a2ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2d0:	1b5d      	subs	r5, r3, r5
 800a2d2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a2d6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a2da:	e78f      	b.n	800a1fc <_strtod_l+0x3cc>
 800a2dc:	3316      	adds	r3, #22
 800a2de:	dba8      	blt.n	800a232 <_strtod_l+0x402>
 800a2e0:	4b37      	ldr	r3, [pc, #220]	@ (800a3c0 <_strtod_l+0x590>)
 800a2e2:	eba9 0808 	sub.w	r8, r9, r8
 800a2e6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a2ea:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a2ee:	4650      	mov	r0, sl
 800a2f0:	4659      	mov	r1, fp
 800a2f2:	f7f6 facb 	bl	800088c <__aeabi_ddiv>
 800a2f6:	e783      	b.n	800a200 <_strtod_l+0x3d0>
 800a2f8:	4b32      	ldr	r3, [pc, #200]	@ (800a3c4 <_strtod_l+0x594>)
 800a2fa:	9308      	str	r3, [sp, #32]
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	1124      	asrs	r4, r4, #4
 800a300:	4650      	mov	r0, sl
 800a302:	4659      	mov	r1, fp
 800a304:	461e      	mov	r6, r3
 800a306:	2c01      	cmp	r4, #1
 800a308:	dc21      	bgt.n	800a34e <_strtod_l+0x51e>
 800a30a:	b10b      	cbz	r3, 800a310 <_strtod_l+0x4e0>
 800a30c:	4682      	mov	sl, r0
 800a30e:	468b      	mov	fp, r1
 800a310:	492c      	ldr	r1, [pc, #176]	@ (800a3c4 <_strtod_l+0x594>)
 800a312:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a316:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a31a:	4652      	mov	r2, sl
 800a31c:	465b      	mov	r3, fp
 800a31e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a322:	f7f6 f989 	bl	8000638 <__aeabi_dmul>
 800a326:	4b28      	ldr	r3, [pc, #160]	@ (800a3c8 <_strtod_l+0x598>)
 800a328:	460a      	mov	r2, r1
 800a32a:	400b      	ands	r3, r1
 800a32c:	4927      	ldr	r1, [pc, #156]	@ (800a3cc <_strtod_l+0x59c>)
 800a32e:	428b      	cmp	r3, r1
 800a330:	4682      	mov	sl, r0
 800a332:	d898      	bhi.n	800a266 <_strtod_l+0x436>
 800a334:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a338:	428b      	cmp	r3, r1
 800a33a:	bf86      	itte	hi
 800a33c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800a3d0 <_strtod_l+0x5a0>
 800a340:	f04f 3aff 	movhi.w	sl, #4294967295
 800a344:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a348:	2300      	movs	r3, #0
 800a34a:	9308      	str	r3, [sp, #32]
 800a34c:	e07a      	b.n	800a444 <_strtod_l+0x614>
 800a34e:	07e2      	lsls	r2, r4, #31
 800a350:	d505      	bpl.n	800a35e <_strtod_l+0x52e>
 800a352:	9b08      	ldr	r3, [sp, #32]
 800a354:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a358:	f7f6 f96e 	bl	8000638 <__aeabi_dmul>
 800a35c:	2301      	movs	r3, #1
 800a35e:	9a08      	ldr	r2, [sp, #32]
 800a360:	3208      	adds	r2, #8
 800a362:	3601      	adds	r6, #1
 800a364:	1064      	asrs	r4, r4, #1
 800a366:	9208      	str	r2, [sp, #32]
 800a368:	e7cd      	b.n	800a306 <_strtod_l+0x4d6>
 800a36a:	d0ed      	beq.n	800a348 <_strtod_l+0x518>
 800a36c:	4264      	negs	r4, r4
 800a36e:	f014 020f 	ands.w	r2, r4, #15
 800a372:	d00a      	beq.n	800a38a <_strtod_l+0x55a>
 800a374:	4b12      	ldr	r3, [pc, #72]	@ (800a3c0 <_strtod_l+0x590>)
 800a376:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a37a:	4650      	mov	r0, sl
 800a37c:	4659      	mov	r1, fp
 800a37e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a382:	f7f6 fa83 	bl	800088c <__aeabi_ddiv>
 800a386:	4682      	mov	sl, r0
 800a388:	468b      	mov	fp, r1
 800a38a:	1124      	asrs	r4, r4, #4
 800a38c:	d0dc      	beq.n	800a348 <_strtod_l+0x518>
 800a38e:	2c1f      	cmp	r4, #31
 800a390:	dd20      	ble.n	800a3d4 <_strtod_l+0x5a4>
 800a392:	2400      	movs	r4, #0
 800a394:	46a0      	mov	r8, r4
 800a396:	940a      	str	r4, [sp, #40]	@ 0x28
 800a398:	46a1      	mov	r9, r4
 800a39a:	9a05      	ldr	r2, [sp, #20]
 800a39c:	2322      	movs	r3, #34	@ 0x22
 800a39e:	f04f 0a00 	mov.w	sl, #0
 800a3a2:	f04f 0b00 	mov.w	fp, #0
 800a3a6:	6013      	str	r3, [r2, #0]
 800a3a8:	e768      	b.n	800a27c <_strtod_l+0x44c>
 800a3aa:	bf00      	nop
 800a3ac:	0800cf7f 	.word	0x0800cf7f
 800a3b0:	0800cf84 	.word	0x0800cf84
 800a3b4:	0800cf76 	.word	0x0800cf76
 800a3b8:	0800cf79 	.word	0x0800cf79
 800a3bc:	0800d08c 	.word	0x0800d08c
 800a3c0:	0800d190 	.word	0x0800d190
 800a3c4:	0800d168 	.word	0x0800d168
 800a3c8:	7ff00000 	.word	0x7ff00000
 800a3cc:	7ca00000 	.word	0x7ca00000
 800a3d0:	7fefffff 	.word	0x7fefffff
 800a3d4:	f014 0310 	ands.w	r3, r4, #16
 800a3d8:	bf18      	it	ne
 800a3da:	236a      	movne	r3, #106	@ 0x6a
 800a3dc:	4ea9      	ldr	r6, [pc, #676]	@ (800a684 <_strtod_l+0x854>)
 800a3de:	9308      	str	r3, [sp, #32]
 800a3e0:	4650      	mov	r0, sl
 800a3e2:	4659      	mov	r1, fp
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	07e2      	lsls	r2, r4, #31
 800a3e8:	d504      	bpl.n	800a3f4 <_strtod_l+0x5c4>
 800a3ea:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a3ee:	f7f6 f923 	bl	8000638 <__aeabi_dmul>
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	1064      	asrs	r4, r4, #1
 800a3f6:	f106 0608 	add.w	r6, r6, #8
 800a3fa:	d1f4      	bne.n	800a3e6 <_strtod_l+0x5b6>
 800a3fc:	b10b      	cbz	r3, 800a402 <_strtod_l+0x5d2>
 800a3fe:	4682      	mov	sl, r0
 800a400:	468b      	mov	fp, r1
 800a402:	9b08      	ldr	r3, [sp, #32]
 800a404:	b1b3      	cbz	r3, 800a434 <_strtod_l+0x604>
 800a406:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a40a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a40e:	2b00      	cmp	r3, #0
 800a410:	4659      	mov	r1, fp
 800a412:	dd0f      	ble.n	800a434 <_strtod_l+0x604>
 800a414:	2b1f      	cmp	r3, #31
 800a416:	dd55      	ble.n	800a4c4 <_strtod_l+0x694>
 800a418:	2b34      	cmp	r3, #52	@ 0x34
 800a41a:	bfde      	ittt	le
 800a41c:	f04f 33ff 	movle.w	r3, #4294967295
 800a420:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a424:	4093      	lslle	r3, r2
 800a426:	f04f 0a00 	mov.w	sl, #0
 800a42a:	bfcc      	ite	gt
 800a42c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a430:	ea03 0b01 	andle.w	fp, r3, r1
 800a434:	2200      	movs	r2, #0
 800a436:	2300      	movs	r3, #0
 800a438:	4650      	mov	r0, sl
 800a43a:	4659      	mov	r1, fp
 800a43c:	f7f6 fb64 	bl	8000b08 <__aeabi_dcmpeq>
 800a440:	2800      	cmp	r0, #0
 800a442:	d1a6      	bne.n	800a392 <_strtod_l+0x562>
 800a444:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a446:	9300      	str	r3, [sp, #0]
 800a448:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a44a:	9805      	ldr	r0, [sp, #20]
 800a44c:	462b      	mov	r3, r5
 800a44e:	463a      	mov	r2, r7
 800a450:	f001 fa28 	bl	800b8a4 <__s2b>
 800a454:	900a      	str	r0, [sp, #40]	@ 0x28
 800a456:	2800      	cmp	r0, #0
 800a458:	f43f af05 	beq.w	800a266 <_strtod_l+0x436>
 800a45c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a45e:	2a00      	cmp	r2, #0
 800a460:	eba9 0308 	sub.w	r3, r9, r8
 800a464:	bfa8      	it	ge
 800a466:	2300      	movge	r3, #0
 800a468:	9312      	str	r3, [sp, #72]	@ 0x48
 800a46a:	2400      	movs	r4, #0
 800a46c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a470:	9316      	str	r3, [sp, #88]	@ 0x58
 800a472:	46a0      	mov	r8, r4
 800a474:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a476:	9805      	ldr	r0, [sp, #20]
 800a478:	6859      	ldr	r1, [r3, #4]
 800a47a:	f001 f96b 	bl	800b754 <_Balloc>
 800a47e:	4681      	mov	r9, r0
 800a480:	2800      	cmp	r0, #0
 800a482:	f43f aef4 	beq.w	800a26e <_strtod_l+0x43e>
 800a486:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a488:	691a      	ldr	r2, [r3, #16]
 800a48a:	3202      	adds	r2, #2
 800a48c:	f103 010c 	add.w	r1, r3, #12
 800a490:	0092      	lsls	r2, r2, #2
 800a492:	300c      	adds	r0, #12
 800a494:	f000 fcdb 	bl	800ae4e <memcpy>
 800a498:	ec4b ab10 	vmov	d0, sl, fp
 800a49c:	9805      	ldr	r0, [sp, #20]
 800a49e:	aa1c      	add	r2, sp, #112	@ 0x70
 800a4a0:	a91b      	add	r1, sp, #108	@ 0x6c
 800a4a2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a4a6:	f001 fd39 	bl	800bf1c <__d2b>
 800a4aa:	901a      	str	r0, [sp, #104]	@ 0x68
 800a4ac:	2800      	cmp	r0, #0
 800a4ae:	f43f aede 	beq.w	800a26e <_strtod_l+0x43e>
 800a4b2:	9805      	ldr	r0, [sp, #20]
 800a4b4:	2101      	movs	r1, #1
 800a4b6:	f001 fa8b 	bl	800b9d0 <__i2b>
 800a4ba:	4680      	mov	r8, r0
 800a4bc:	b948      	cbnz	r0, 800a4d2 <_strtod_l+0x6a2>
 800a4be:	f04f 0800 	mov.w	r8, #0
 800a4c2:	e6d4      	b.n	800a26e <_strtod_l+0x43e>
 800a4c4:	f04f 32ff 	mov.w	r2, #4294967295
 800a4c8:	fa02 f303 	lsl.w	r3, r2, r3
 800a4cc:	ea03 0a0a 	and.w	sl, r3, sl
 800a4d0:	e7b0      	b.n	800a434 <_strtod_l+0x604>
 800a4d2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a4d4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a4d6:	2d00      	cmp	r5, #0
 800a4d8:	bfab      	itete	ge
 800a4da:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a4dc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a4de:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a4e0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a4e2:	bfac      	ite	ge
 800a4e4:	18ef      	addge	r7, r5, r3
 800a4e6:	1b5e      	sublt	r6, r3, r5
 800a4e8:	9b08      	ldr	r3, [sp, #32]
 800a4ea:	1aed      	subs	r5, r5, r3
 800a4ec:	4415      	add	r5, r2
 800a4ee:	4b66      	ldr	r3, [pc, #408]	@ (800a688 <_strtod_l+0x858>)
 800a4f0:	3d01      	subs	r5, #1
 800a4f2:	429d      	cmp	r5, r3
 800a4f4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a4f8:	da50      	bge.n	800a59c <_strtod_l+0x76c>
 800a4fa:	1b5b      	subs	r3, r3, r5
 800a4fc:	2b1f      	cmp	r3, #31
 800a4fe:	eba2 0203 	sub.w	r2, r2, r3
 800a502:	f04f 0101 	mov.w	r1, #1
 800a506:	dc3d      	bgt.n	800a584 <_strtod_l+0x754>
 800a508:	fa01 f303 	lsl.w	r3, r1, r3
 800a50c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a50e:	2300      	movs	r3, #0
 800a510:	9310      	str	r3, [sp, #64]	@ 0x40
 800a512:	18bd      	adds	r5, r7, r2
 800a514:	9b08      	ldr	r3, [sp, #32]
 800a516:	42af      	cmp	r7, r5
 800a518:	4416      	add	r6, r2
 800a51a:	441e      	add	r6, r3
 800a51c:	463b      	mov	r3, r7
 800a51e:	bfa8      	it	ge
 800a520:	462b      	movge	r3, r5
 800a522:	42b3      	cmp	r3, r6
 800a524:	bfa8      	it	ge
 800a526:	4633      	movge	r3, r6
 800a528:	2b00      	cmp	r3, #0
 800a52a:	bfc2      	ittt	gt
 800a52c:	1aed      	subgt	r5, r5, r3
 800a52e:	1af6      	subgt	r6, r6, r3
 800a530:	1aff      	subgt	r7, r7, r3
 800a532:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a534:	2b00      	cmp	r3, #0
 800a536:	dd16      	ble.n	800a566 <_strtod_l+0x736>
 800a538:	4641      	mov	r1, r8
 800a53a:	9805      	ldr	r0, [sp, #20]
 800a53c:	461a      	mov	r2, r3
 800a53e:	f001 fb07 	bl	800bb50 <__pow5mult>
 800a542:	4680      	mov	r8, r0
 800a544:	2800      	cmp	r0, #0
 800a546:	d0ba      	beq.n	800a4be <_strtod_l+0x68e>
 800a548:	4601      	mov	r1, r0
 800a54a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a54c:	9805      	ldr	r0, [sp, #20]
 800a54e:	f001 fa55 	bl	800b9fc <__multiply>
 800a552:	900e      	str	r0, [sp, #56]	@ 0x38
 800a554:	2800      	cmp	r0, #0
 800a556:	f43f ae8a 	beq.w	800a26e <_strtod_l+0x43e>
 800a55a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a55c:	9805      	ldr	r0, [sp, #20]
 800a55e:	f001 f939 	bl	800b7d4 <_Bfree>
 800a562:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a564:	931a      	str	r3, [sp, #104]	@ 0x68
 800a566:	2d00      	cmp	r5, #0
 800a568:	dc1d      	bgt.n	800a5a6 <_strtod_l+0x776>
 800a56a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	dd23      	ble.n	800a5b8 <_strtod_l+0x788>
 800a570:	4649      	mov	r1, r9
 800a572:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a574:	9805      	ldr	r0, [sp, #20]
 800a576:	f001 faeb 	bl	800bb50 <__pow5mult>
 800a57a:	4681      	mov	r9, r0
 800a57c:	b9e0      	cbnz	r0, 800a5b8 <_strtod_l+0x788>
 800a57e:	f04f 0900 	mov.w	r9, #0
 800a582:	e674      	b.n	800a26e <_strtod_l+0x43e>
 800a584:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a588:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a58c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a590:	35e2      	adds	r5, #226	@ 0xe2
 800a592:	fa01 f305 	lsl.w	r3, r1, r5
 800a596:	9310      	str	r3, [sp, #64]	@ 0x40
 800a598:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a59a:	e7ba      	b.n	800a512 <_strtod_l+0x6e2>
 800a59c:	2300      	movs	r3, #0
 800a59e:	9310      	str	r3, [sp, #64]	@ 0x40
 800a5a0:	2301      	movs	r3, #1
 800a5a2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a5a4:	e7b5      	b.n	800a512 <_strtod_l+0x6e2>
 800a5a6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a5a8:	9805      	ldr	r0, [sp, #20]
 800a5aa:	462a      	mov	r2, r5
 800a5ac:	f001 fb2a 	bl	800bc04 <__lshift>
 800a5b0:	901a      	str	r0, [sp, #104]	@ 0x68
 800a5b2:	2800      	cmp	r0, #0
 800a5b4:	d1d9      	bne.n	800a56a <_strtod_l+0x73a>
 800a5b6:	e65a      	b.n	800a26e <_strtod_l+0x43e>
 800a5b8:	2e00      	cmp	r6, #0
 800a5ba:	dd07      	ble.n	800a5cc <_strtod_l+0x79c>
 800a5bc:	4649      	mov	r1, r9
 800a5be:	9805      	ldr	r0, [sp, #20]
 800a5c0:	4632      	mov	r2, r6
 800a5c2:	f001 fb1f 	bl	800bc04 <__lshift>
 800a5c6:	4681      	mov	r9, r0
 800a5c8:	2800      	cmp	r0, #0
 800a5ca:	d0d8      	beq.n	800a57e <_strtod_l+0x74e>
 800a5cc:	2f00      	cmp	r7, #0
 800a5ce:	dd08      	ble.n	800a5e2 <_strtod_l+0x7b2>
 800a5d0:	4641      	mov	r1, r8
 800a5d2:	9805      	ldr	r0, [sp, #20]
 800a5d4:	463a      	mov	r2, r7
 800a5d6:	f001 fb15 	bl	800bc04 <__lshift>
 800a5da:	4680      	mov	r8, r0
 800a5dc:	2800      	cmp	r0, #0
 800a5de:	f43f ae46 	beq.w	800a26e <_strtod_l+0x43e>
 800a5e2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a5e4:	9805      	ldr	r0, [sp, #20]
 800a5e6:	464a      	mov	r2, r9
 800a5e8:	f001 fb94 	bl	800bd14 <__mdiff>
 800a5ec:	4604      	mov	r4, r0
 800a5ee:	2800      	cmp	r0, #0
 800a5f0:	f43f ae3d 	beq.w	800a26e <_strtod_l+0x43e>
 800a5f4:	68c3      	ldr	r3, [r0, #12]
 800a5f6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	60c3      	str	r3, [r0, #12]
 800a5fc:	4641      	mov	r1, r8
 800a5fe:	f001 fb6d 	bl	800bcdc <__mcmp>
 800a602:	2800      	cmp	r0, #0
 800a604:	da46      	bge.n	800a694 <_strtod_l+0x864>
 800a606:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a608:	ea53 030a 	orrs.w	r3, r3, sl
 800a60c:	d16c      	bne.n	800a6e8 <_strtod_l+0x8b8>
 800a60e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a612:	2b00      	cmp	r3, #0
 800a614:	d168      	bne.n	800a6e8 <_strtod_l+0x8b8>
 800a616:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a61a:	0d1b      	lsrs	r3, r3, #20
 800a61c:	051b      	lsls	r3, r3, #20
 800a61e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a622:	d961      	bls.n	800a6e8 <_strtod_l+0x8b8>
 800a624:	6963      	ldr	r3, [r4, #20]
 800a626:	b913      	cbnz	r3, 800a62e <_strtod_l+0x7fe>
 800a628:	6923      	ldr	r3, [r4, #16]
 800a62a:	2b01      	cmp	r3, #1
 800a62c:	dd5c      	ble.n	800a6e8 <_strtod_l+0x8b8>
 800a62e:	4621      	mov	r1, r4
 800a630:	2201      	movs	r2, #1
 800a632:	9805      	ldr	r0, [sp, #20]
 800a634:	f001 fae6 	bl	800bc04 <__lshift>
 800a638:	4641      	mov	r1, r8
 800a63a:	4604      	mov	r4, r0
 800a63c:	f001 fb4e 	bl	800bcdc <__mcmp>
 800a640:	2800      	cmp	r0, #0
 800a642:	dd51      	ble.n	800a6e8 <_strtod_l+0x8b8>
 800a644:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a648:	9a08      	ldr	r2, [sp, #32]
 800a64a:	0d1b      	lsrs	r3, r3, #20
 800a64c:	051b      	lsls	r3, r3, #20
 800a64e:	2a00      	cmp	r2, #0
 800a650:	d06b      	beq.n	800a72a <_strtod_l+0x8fa>
 800a652:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a656:	d868      	bhi.n	800a72a <_strtod_l+0x8fa>
 800a658:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a65c:	f67f ae9d 	bls.w	800a39a <_strtod_l+0x56a>
 800a660:	4b0a      	ldr	r3, [pc, #40]	@ (800a68c <_strtod_l+0x85c>)
 800a662:	4650      	mov	r0, sl
 800a664:	4659      	mov	r1, fp
 800a666:	2200      	movs	r2, #0
 800a668:	f7f5 ffe6 	bl	8000638 <__aeabi_dmul>
 800a66c:	4b08      	ldr	r3, [pc, #32]	@ (800a690 <_strtod_l+0x860>)
 800a66e:	400b      	ands	r3, r1
 800a670:	4682      	mov	sl, r0
 800a672:	468b      	mov	fp, r1
 800a674:	2b00      	cmp	r3, #0
 800a676:	f47f ae05 	bne.w	800a284 <_strtod_l+0x454>
 800a67a:	9a05      	ldr	r2, [sp, #20]
 800a67c:	2322      	movs	r3, #34	@ 0x22
 800a67e:	6013      	str	r3, [r2, #0]
 800a680:	e600      	b.n	800a284 <_strtod_l+0x454>
 800a682:	bf00      	nop
 800a684:	0800cfb0 	.word	0x0800cfb0
 800a688:	fffffc02 	.word	0xfffffc02
 800a68c:	39500000 	.word	0x39500000
 800a690:	7ff00000 	.word	0x7ff00000
 800a694:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a698:	d165      	bne.n	800a766 <_strtod_l+0x936>
 800a69a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a69c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a6a0:	b35a      	cbz	r2, 800a6fa <_strtod_l+0x8ca>
 800a6a2:	4a9f      	ldr	r2, [pc, #636]	@ (800a920 <_strtod_l+0xaf0>)
 800a6a4:	4293      	cmp	r3, r2
 800a6a6:	d12b      	bne.n	800a700 <_strtod_l+0x8d0>
 800a6a8:	9b08      	ldr	r3, [sp, #32]
 800a6aa:	4651      	mov	r1, sl
 800a6ac:	b303      	cbz	r3, 800a6f0 <_strtod_l+0x8c0>
 800a6ae:	4b9d      	ldr	r3, [pc, #628]	@ (800a924 <_strtod_l+0xaf4>)
 800a6b0:	465a      	mov	r2, fp
 800a6b2:	4013      	ands	r3, r2
 800a6b4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a6b8:	f04f 32ff 	mov.w	r2, #4294967295
 800a6bc:	d81b      	bhi.n	800a6f6 <_strtod_l+0x8c6>
 800a6be:	0d1b      	lsrs	r3, r3, #20
 800a6c0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a6c4:	fa02 f303 	lsl.w	r3, r2, r3
 800a6c8:	4299      	cmp	r1, r3
 800a6ca:	d119      	bne.n	800a700 <_strtod_l+0x8d0>
 800a6cc:	4b96      	ldr	r3, [pc, #600]	@ (800a928 <_strtod_l+0xaf8>)
 800a6ce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a6d0:	429a      	cmp	r2, r3
 800a6d2:	d102      	bne.n	800a6da <_strtod_l+0x8aa>
 800a6d4:	3101      	adds	r1, #1
 800a6d6:	f43f adca 	beq.w	800a26e <_strtod_l+0x43e>
 800a6da:	4b92      	ldr	r3, [pc, #584]	@ (800a924 <_strtod_l+0xaf4>)
 800a6dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a6de:	401a      	ands	r2, r3
 800a6e0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a6e4:	f04f 0a00 	mov.w	sl, #0
 800a6e8:	9b08      	ldr	r3, [sp, #32]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d1b8      	bne.n	800a660 <_strtod_l+0x830>
 800a6ee:	e5c9      	b.n	800a284 <_strtod_l+0x454>
 800a6f0:	f04f 33ff 	mov.w	r3, #4294967295
 800a6f4:	e7e8      	b.n	800a6c8 <_strtod_l+0x898>
 800a6f6:	4613      	mov	r3, r2
 800a6f8:	e7e6      	b.n	800a6c8 <_strtod_l+0x898>
 800a6fa:	ea53 030a 	orrs.w	r3, r3, sl
 800a6fe:	d0a1      	beq.n	800a644 <_strtod_l+0x814>
 800a700:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a702:	b1db      	cbz	r3, 800a73c <_strtod_l+0x90c>
 800a704:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a706:	4213      	tst	r3, r2
 800a708:	d0ee      	beq.n	800a6e8 <_strtod_l+0x8b8>
 800a70a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a70c:	9a08      	ldr	r2, [sp, #32]
 800a70e:	4650      	mov	r0, sl
 800a710:	4659      	mov	r1, fp
 800a712:	b1bb      	cbz	r3, 800a744 <_strtod_l+0x914>
 800a714:	f7ff fb6b 	bl	8009dee <sulp>
 800a718:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a71c:	ec53 2b10 	vmov	r2, r3, d0
 800a720:	f7f5 fdd4 	bl	80002cc <__adddf3>
 800a724:	4682      	mov	sl, r0
 800a726:	468b      	mov	fp, r1
 800a728:	e7de      	b.n	800a6e8 <_strtod_l+0x8b8>
 800a72a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a72e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a732:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a736:	f04f 3aff 	mov.w	sl, #4294967295
 800a73a:	e7d5      	b.n	800a6e8 <_strtod_l+0x8b8>
 800a73c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a73e:	ea13 0f0a 	tst.w	r3, sl
 800a742:	e7e1      	b.n	800a708 <_strtod_l+0x8d8>
 800a744:	f7ff fb53 	bl	8009dee <sulp>
 800a748:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a74c:	ec53 2b10 	vmov	r2, r3, d0
 800a750:	f7f5 fdba 	bl	80002c8 <__aeabi_dsub>
 800a754:	2200      	movs	r2, #0
 800a756:	2300      	movs	r3, #0
 800a758:	4682      	mov	sl, r0
 800a75a:	468b      	mov	fp, r1
 800a75c:	f7f6 f9d4 	bl	8000b08 <__aeabi_dcmpeq>
 800a760:	2800      	cmp	r0, #0
 800a762:	d0c1      	beq.n	800a6e8 <_strtod_l+0x8b8>
 800a764:	e619      	b.n	800a39a <_strtod_l+0x56a>
 800a766:	4641      	mov	r1, r8
 800a768:	4620      	mov	r0, r4
 800a76a:	f001 fc2f 	bl	800bfcc <__ratio>
 800a76e:	ec57 6b10 	vmov	r6, r7, d0
 800a772:	2200      	movs	r2, #0
 800a774:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a778:	4630      	mov	r0, r6
 800a77a:	4639      	mov	r1, r7
 800a77c:	f7f6 f9d8 	bl	8000b30 <__aeabi_dcmple>
 800a780:	2800      	cmp	r0, #0
 800a782:	d06f      	beq.n	800a864 <_strtod_l+0xa34>
 800a784:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a786:	2b00      	cmp	r3, #0
 800a788:	d17a      	bne.n	800a880 <_strtod_l+0xa50>
 800a78a:	f1ba 0f00 	cmp.w	sl, #0
 800a78e:	d158      	bne.n	800a842 <_strtod_l+0xa12>
 800a790:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a792:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a796:	2b00      	cmp	r3, #0
 800a798:	d15a      	bne.n	800a850 <_strtod_l+0xa20>
 800a79a:	4b64      	ldr	r3, [pc, #400]	@ (800a92c <_strtod_l+0xafc>)
 800a79c:	2200      	movs	r2, #0
 800a79e:	4630      	mov	r0, r6
 800a7a0:	4639      	mov	r1, r7
 800a7a2:	f7f6 f9bb 	bl	8000b1c <__aeabi_dcmplt>
 800a7a6:	2800      	cmp	r0, #0
 800a7a8:	d159      	bne.n	800a85e <_strtod_l+0xa2e>
 800a7aa:	4630      	mov	r0, r6
 800a7ac:	4639      	mov	r1, r7
 800a7ae:	4b60      	ldr	r3, [pc, #384]	@ (800a930 <_strtod_l+0xb00>)
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	f7f5 ff41 	bl	8000638 <__aeabi_dmul>
 800a7b6:	4606      	mov	r6, r0
 800a7b8:	460f      	mov	r7, r1
 800a7ba:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a7be:	9606      	str	r6, [sp, #24]
 800a7c0:	9307      	str	r3, [sp, #28]
 800a7c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a7c6:	4d57      	ldr	r5, [pc, #348]	@ (800a924 <_strtod_l+0xaf4>)
 800a7c8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a7cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a7ce:	401d      	ands	r5, r3
 800a7d0:	4b58      	ldr	r3, [pc, #352]	@ (800a934 <_strtod_l+0xb04>)
 800a7d2:	429d      	cmp	r5, r3
 800a7d4:	f040 80b2 	bne.w	800a93c <_strtod_l+0xb0c>
 800a7d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a7da:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a7de:	ec4b ab10 	vmov	d0, sl, fp
 800a7e2:	f001 fb2b 	bl	800be3c <__ulp>
 800a7e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a7ea:	ec51 0b10 	vmov	r0, r1, d0
 800a7ee:	f7f5 ff23 	bl	8000638 <__aeabi_dmul>
 800a7f2:	4652      	mov	r2, sl
 800a7f4:	465b      	mov	r3, fp
 800a7f6:	f7f5 fd69 	bl	80002cc <__adddf3>
 800a7fa:	460b      	mov	r3, r1
 800a7fc:	4949      	ldr	r1, [pc, #292]	@ (800a924 <_strtod_l+0xaf4>)
 800a7fe:	4a4e      	ldr	r2, [pc, #312]	@ (800a938 <_strtod_l+0xb08>)
 800a800:	4019      	ands	r1, r3
 800a802:	4291      	cmp	r1, r2
 800a804:	4682      	mov	sl, r0
 800a806:	d942      	bls.n	800a88e <_strtod_l+0xa5e>
 800a808:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a80a:	4b47      	ldr	r3, [pc, #284]	@ (800a928 <_strtod_l+0xaf8>)
 800a80c:	429a      	cmp	r2, r3
 800a80e:	d103      	bne.n	800a818 <_strtod_l+0x9e8>
 800a810:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a812:	3301      	adds	r3, #1
 800a814:	f43f ad2b 	beq.w	800a26e <_strtod_l+0x43e>
 800a818:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a928 <_strtod_l+0xaf8>
 800a81c:	f04f 3aff 	mov.w	sl, #4294967295
 800a820:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a822:	9805      	ldr	r0, [sp, #20]
 800a824:	f000 ffd6 	bl	800b7d4 <_Bfree>
 800a828:	9805      	ldr	r0, [sp, #20]
 800a82a:	4649      	mov	r1, r9
 800a82c:	f000 ffd2 	bl	800b7d4 <_Bfree>
 800a830:	9805      	ldr	r0, [sp, #20]
 800a832:	4641      	mov	r1, r8
 800a834:	f000 ffce 	bl	800b7d4 <_Bfree>
 800a838:	9805      	ldr	r0, [sp, #20]
 800a83a:	4621      	mov	r1, r4
 800a83c:	f000 ffca 	bl	800b7d4 <_Bfree>
 800a840:	e618      	b.n	800a474 <_strtod_l+0x644>
 800a842:	f1ba 0f01 	cmp.w	sl, #1
 800a846:	d103      	bne.n	800a850 <_strtod_l+0xa20>
 800a848:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	f43f ada5 	beq.w	800a39a <_strtod_l+0x56a>
 800a850:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800a900 <_strtod_l+0xad0>
 800a854:	4f35      	ldr	r7, [pc, #212]	@ (800a92c <_strtod_l+0xafc>)
 800a856:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a85a:	2600      	movs	r6, #0
 800a85c:	e7b1      	b.n	800a7c2 <_strtod_l+0x992>
 800a85e:	4f34      	ldr	r7, [pc, #208]	@ (800a930 <_strtod_l+0xb00>)
 800a860:	2600      	movs	r6, #0
 800a862:	e7aa      	b.n	800a7ba <_strtod_l+0x98a>
 800a864:	4b32      	ldr	r3, [pc, #200]	@ (800a930 <_strtod_l+0xb00>)
 800a866:	4630      	mov	r0, r6
 800a868:	4639      	mov	r1, r7
 800a86a:	2200      	movs	r2, #0
 800a86c:	f7f5 fee4 	bl	8000638 <__aeabi_dmul>
 800a870:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a872:	4606      	mov	r6, r0
 800a874:	460f      	mov	r7, r1
 800a876:	2b00      	cmp	r3, #0
 800a878:	d09f      	beq.n	800a7ba <_strtod_l+0x98a>
 800a87a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a87e:	e7a0      	b.n	800a7c2 <_strtod_l+0x992>
 800a880:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a908 <_strtod_l+0xad8>
 800a884:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a888:	ec57 6b17 	vmov	r6, r7, d7
 800a88c:	e799      	b.n	800a7c2 <_strtod_l+0x992>
 800a88e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a892:	9b08      	ldr	r3, [sp, #32]
 800a894:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d1c1      	bne.n	800a820 <_strtod_l+0x9f0>
 800a89c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a8a0:	0d1b      	lsrs	r3, r3, #20
 800a8a2:	051b      	lsls	r3, r3, #20
 800a8a4:	429d      	cmp	r5, r3
 800a8a6:	d1bb      	bne.n	800a820 <_strtod_l+0x9f0>
 800a8a8:	4630      	mov	r0, r6
 800a8aa:	4639      	mov	r1, r7
 800a8ac:	f7f6 f996 	bl	8000bdc <__aeabi_d2lz>
 800a8b0:	f7f5 fe94 	bl	80005dc <__aeabi_l2d>
 800a8b4:	4602      	mov	r2, r0
 800a8b6:	460b      	mov	r3, r1
 800a8b8:	4630      	mov	r0, r6
 800a8ba:	4639      	mov	r1, r7
 800a8bc:	f7f5 fd04 	bl	80002c8 <__aeabi_dsub>
 800a8c0:	460b      	mov	r3, r1
 800a8c2:	4602      	mov	r2, r0
 800a8c4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a8c8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a8cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8ce:	ea46 060a 	orr.w	r6, r6, sl
 800a8d2:	431e      	orrs	r6, r3
 800a8d4:	d06f      	beq.n	800a9b6 <_strtod_l+0xb86>
 800a8d6:	a30e      	add	r3, pc, #56	@ (adr r3, 800a910 <_strtod_l+0xae0>)
 800a8d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8dc:	f7f6 f91e 	bl	8000b1c <__aeabi_dcmplt>
 800a8e0:	2800      	cmp	r0, #0
 800a8e2:	f47f accf 	bne.w	800a284 <_strtod_l+0x454>
 800a8e6:	a30c      	add	r3, pc, #48	@ (adr r3, 800a918 <_strtod_l+0xae8>)
 800a8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a8f0:	f7f6 f932 	bl	8000b58 <__aeabi_dcmpgt>
 800a8f4:	2800      	cmp	r0, #0
 800a8f6:	d093      	beq.n	800a820 <_strtod_l+0x9f0>
 800a8f8:	e4c4      	b.n	800a284 <_strtod_l+0x454>
 800a8fa:	bf00      	nop
 800a8fc:	f3af 8000 	nop.w
 800a900:	00000000 	.word	0x00000000
 800a904:	bff00000 	.word	0xbff00000
 800a908:	00000000 	.word	0x00000000
 800a90c:	3ff00000 	.word	0x3ff00000
 800a910:	94a03595 	.word	0x94a03595
 800a914:	3fdfffff 	.word	0x3fdfffff
 800a918:	35afe535 	.word	0x35afe535
 800a91c:	3fe00000 	.word	0x3fe00000
 800a920:	000fffff 	.word	0x000fffff
 800a924:	7ff00000 	.word	0x7ff00000
 800a928:	7fefffff 	.word	0x7fefffff
 800a92c:	3ff00000 	.word	0x3ff00000
 800a930:	3fe00000 	.word	0x3fe00000
 800a934:	7fe00000 	.word	0x7fe00000
 800a938:	7c9fffff 	.word	0x7c9fffff
 800a93c:	9b08      	ldr	r3, [sp, #32]
 800a93e:	b323      	cbz	r3, 800a98a <_strtod_l+0xb5a>
 800a940:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a944:	d821      	bhi.n	800a98a <_strtod_l+0xb5a>
 800a946:	a328      	add	r3, pc, #160	@ (adr r3, 800a9e8 <_strtod_l+0xbb8>)
 800a948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a94c:	4630      	mov	r0, r6
 800a94e:	4639      	mov	r1, r7
 800a950:	f7f6 f8ee 	bl	8000b30 <__aeabi_dcmple>
 800a954:	b1a0      	cbz	r0, 800a980 <_strtod_l+0xb50>
 800a956:	4639      	mov	r1, r7
 800a958:	4630      	mov	r0, r6
 800a95a:	f7f6 f907 	bl	8000b6c <__aeabi_d2uiz>
 800a95e:	2801      	cmp	r0, #1
 800a960:	bf38      	it	cc
 800a962:	2001      	movcc	r0, #1
 800a964:	f7f5 fdee 	bl	8000544 <__aeabi_ui2d>
 800a968:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a96a:	4606      	mov	r6, r0
 800a96c:	460f      	mov	r7, r1
 800a96e:	b9fb      	cbnz	r3, 800a9b0 <_strtod_l+0xb80>
 800a970:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a974:	9014      	str	r0, [sp, #80]	@ 0x50
 800a976:	9315      	str	r3, [sp, #84]	@ 0x54
 800a978:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a97c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a980:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a982:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a986:	1b5b      	subs	r3, r3, r5
 800a988:	9311      	str	r3, [sp, #68]	@ 0x44
 800a98a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a98e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a992:	f001 fa53 	bl	800be3c <__ulp>
 800a996:	4650      	mov	r0, sl
 800a998:	ec53 2b10 	vmov	r2, r3, d0
 800a99c:	4659      	mov	r1, fp
 800a99e:	f7f5 fe4b 	bl	8000638 <__aeabi_dmul>
 800a9a2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a9a6:	f7f5 fc91 	bl	80002cc <__adddf3>
 800a9aa:	4682      	mov	sl, r0
 800a9ac:	468b      	mov	fp, r1
 800a9ae:	e770      	b.n	800a892 <_strtod_l+0xa62>
 800a9b0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a9b4:	e7e0      	b.n	800a978 <_strtod_l+0xb48>
 800a9b6:	a30e      	add	r3, pc, #56	@ (adr r3, 800a9f0 <_strtod_l+0xbc0>)
 800a9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9bc:	f7f6 f8ae 	bl	8000b1c <__aeabi_dcmplt>
 800a9c0:	e798      	b.n	800a8f4 <_strtod_l+0xac4>
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a9c6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a9c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a9ca:	6013      	str	r3, [r2, #0]
 800a9cc:	f7ff ba6d 	b.w	8009eaa <_strtod_l+0x7a>
 800a9d0:	2a65      	cmp	r2, #101	@ 0x65
 800a9d2:	f43f ab66 	beq.w	800a0a2 <_strtod_l+0x272>
 800a9d6:	2a45      	cmp	r2, #69	@ 0x45
 800a9d8:	f43f ab63 	beq.w	800a0a2 <_strtod_l+0x272>
 800a9dc:	2301      	movs	r3, #1
 800a9de:	f7ff bb9e 	b.w	800a11e <_strtod_l+0x2ee>
 800a9e2:	bf00      	nop
 800a9e4:	f3af 8000 	nop.w
 800a9e8:	ffc00000 	.word	0xffc00000
 800a9ec:	41dfffff 	.word	0x41dfffff
 800a9f0:	94a03595 	.word	0x94a03595
 800a9f4:	3fcfffff 	.word	0x3fcfffff

0800a9f8 <strtod>:
 800a9f8:	460a      	mov	r2, r1
 800a9fa:	4601      	mov	r1, r0
 800a9fc:	4802      	ldr	r0, [pc, #8]	@ (800aa08 <strtod+0x10>)
 800a9fe:	4b03      	ldr	r3, [pc, #12]	@ (800aa0c <strtod+0x14>)
 800aa00:	6800      	ldr	r0, [r0, #0]
 800aa02:	f7ff ba15 	b.w	8009e30 <_strtod_l>
 800aa06:	bf00      	nop
 800aa08:	20000188 	.word	0x20000188
 800aa0c:	2000001c 	.word	0x2000001c

0800aa10 <std>:
 800aa10:	2300      	movs	r3, #0
 800aa12:	b510      	push	{r4, lr}
 800aa14:	4604      	mov	r4, r0
 800aa16:	e9c0 3300 	strd	r3, r3, [r0]
 800aa1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aa1e:	6083      	str	r3, [r0, #8]
 800aa20:	8181      	strh	r1, [r0, #12]
 800aa22:	6643      	str	r3, [r0, #100]	@ 0x64
 800aa24:	81c2      	strh	r2, [r0, #14]
 800aa26:	6183      	str	r3, [r0, #24]
 800aa28:	4619      	mov	r1, r3
 800aa2a:	2208      	movs	r2, #8
 800aa2c:	305c      	adds	r0, #92	@ 0x5c
 800aa2e:	f000 f924 	bl	800ac7a <memset>
 800aa32:	4b0d      	ldr	r3, [pc, #52]	@ (800aa68 <std+0x58>)
 800aa34:	6263      	str	r3, [r4, #36]	@ 0x24
 800aa36:	4b0d      	ldr	r3, [pc, #52]	@ (800aa6c <std+0x5c>)
 800aa38:	62a3      	str	r3, [r4, #40]	@ 0x28
 800aa3a:	4b0d      	ldr	r3, [pc, #52]	@ (800aa70 <std+0x60>)
 800aa3c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800aa3e:	4b0d      	ldr	r3, [pc, #52]	@ (800aa74 <std+0x64>)
 800aa40:	6323      	str	r3, [r4, #48]	@ 0x30
 800aa42:	4b0d      	ldr	r3, [pc, #52]	@ (800aa78 <std+0x68>)
 800aa44:	6224      	str	r4, [r4, #32]
 800aa46:	429c      	cmp	r4, r3
 800aa48:	d006      	beq.n	800aa58 <std+0x48>
 800aa4a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800aa4e:	4294      	cmp	r4, r2
 800aa50:	d002      	beq.n	800aa58 <std+0x48>
 800aa52:	33d0      	adds	r3, #208	@ 0xd0
 800aa54:	429c      	cmp	r4, r3
 800aa56:	d105      	bne.n	800aa64 <std+0x54>
 800aa58:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800aa5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa60:	f000 b9f2 	b.w	800ae48 <__retarget_lock_init_recursive>
 800aa64:	bd10      	pop	{r4, pc}
 800aa66:	bf00      	nop
 800aa68:	0800abd5 	.word	0x0800abd5
 800aa6c:	0800abf7 	.word	0x0800abf7
 800aa70:	0800ac2f 	.word	0x0800ac2f
 800aa74:	0800ac53 	.word	0x0800ac53
 800aa78:	20001f9c 	.word	0x20001f9c

0800aa7c <stdio_exit_handler>:
 800aa7c:	4a02      	ldr	r2, [pc, #8]	@ (800aa88 <stdio_exit_handler+0xc>)
 800aa7e:	4903      	ldr	r1, [pc, #12]	@ (800aa8c <stdio_exit_handler+0x10>)
 800aa80:	4803      	ldr	r0, [pc, #12]	@ (800aa90 <stdio_exit_handler+0x14>)
 800aa82:	f000 b869 	b.w	800ab58 <_fwalk_sglue>
 800aa86:	bf00      	nop
 800aa88:	20000010 	.word	0x20000010
 800aa8c:	0800c7a5 	.word	0x0800c7a5
 800aa90:	2000018c 	.word	0x2000018c

0800aa94 <cleanup_stdio>:
 800aa94:	6841      	ldr	r1, [r0, #4]
 800aa96:	4b0c      	ldr	r3, [pc, #48]	@ (800aac8 <cleanup_stdio+0x34>)
 800aa98:	4299      	cmp	r1, r3
 800aa9a:	b510      	push	{r4, lr}
 800aa9c:	4604      	mov	r4, r0
 800aa9e:	d001      	beq.n	800aaa4 <cleanup_stdio+0x10>
 800aaa0:	f001 fe80 	bl	800c7a4 <_fflush_r>
 800aaa4:	68a1      	ldr	r1, [r4, #8]
 800aaa6:	4b09      	ldr	r3, [pc, #36]	@ (800aacc <cleanup_stdio+0x38>)
 800aaa8:	4299      	cmp	r1, r3
 800aaaa:	d002      	beq.n	800aab2 <cleanup_stdio+0x1e>
 800aaac:	4620      	mov	r0, r4
 800aaae:	f001 fe79 	bl	800c7a4 <_fflush_r>
 800aab2:	68e1      	ldr	r1, [r4, #12]
 800aab4:	4b06      	ldr	r3, [pc, #24]	@ (800aad0 <cleanup_stdio+0x3c>)
 800aab6:	4299      	cmp	r1, r3
 800aab8:	d004      	beq.n	800aac4 <cleanup_stdio+0x30>
 800aaba:	4620      	mov	r0, r4
 800aabc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aac0:	f001 be70 	b.w	800c7a4 <_fflush_r>
 800aac4:	bd10      	pop	{r4, pc}
 800aac6:	bf00      	nop
 800aac8:	20001f9c 	.word	0x20001f9c
 800aacc:	20002004 	.word	0x20002004
 800aad0:	2000206c 	.word	0x2000206c

0800aad4 <global_stdio_init.part.0>:
 800aad4:	b510      	push	{r4, lr}
 800aad6:	4b0b      	ldr	r3, [pc, #44]	@ (800ab04 <global_stdio_init.part.0+0x30>)
 800aad8:	4c0b      	ldr	r4, [pc, #44]	@ (800ab08 <global_stdio_init.part.0+0x34>)
 800aada:	4a0c      	ldr	r2, [pc, #48]	@ (800ab0c <global_stdio_init.part.0+0x38>)
 800aadc:	601a      	str	r2, [r3, #0]
 800aade:	4620      	mov	r0, r4
 800aae0:	2200      	movs	r2, #0
 800aae2:	2104      	movs	r1, #4
 800aae4:	f7ff ff94 	bl	800aa10 <std>
 800aae8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800aaec:	2201      	movs	r2, #1
 800aaee:	2109      	movs	r1, #9
 800aaf0:	f7ff ff8e 	bl	800aa10 <std>
 800aaf4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800aaf8:	2202      	movs	r2, #2
 800aafa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aafe:	2112      	movs	r1, #18
 800ab00:	f7ff bf86 	b.w	800aa10 <std>
 800ab04:	200020d4 	.word	0x200020d4
 800ab08:	20001f9c 	.word	0x20001f9c
 800ab0c:	0800aa7d 	.word	0x0800aa7d

0800ab10 <__sfp_lock_acquire>:
 800ab10:	4801      	ldr	r0, [pc, #4]	@ (800ab18 <__sfp_lock_acquire+0x8>)
 800ab12:	f000 b99a 	b.w	800ae4a <__retarget_lock_acquire_recursive>
 800ab16:	bf00      	nop
 800ab18:	200020dd 	.word	0x200020dd

0800ab1c <__sfp_lock_release>:
 800ab1c:	4801      	ldr	r0, [pc, #4]	@ (800ab24 <__sfp_lock_release+0x8>)
 800ab1e:	f000 b995 	b.w	800ae4c <__retarget_lock_release_recursive>
 800ab22:	bf00      	nop
 800ab24:	200020dd 	.word	0x200020dd

0800ab28 <__sinit>:
 800ab28:	b510      	push	{r4, lr}
 800ab2a:	4604      	mov	r4, r0
 800ab2c:	f7ff fff0 	bl	800ab10 <__sfp_lock_acquire>
 800ab30:	6a23      	ldr	r3, [r4, #32]
 800ab32:	b11b      	cbz	r3, 800ab3c <__sinit+0x14>
 800ab34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab38:	f7ff bff0 	b.w	800ab1c <__sfp_lock_release>
 800ab3c:	4b04      	ldr	r3, [pc, #16]	@ (800ab50 <__sinit+0x28>)
 800ab3e:	6223      	str	r3, [r4, #32]
 800ab40:	4b04      	ldr	r3, [pc, #16]	@ (800ab54 <__sinit+0x2c>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d1f5      	bne.n	800ab34 <__sinit+0xc>
 800ab48:	f7ff ffc4 	bl	800aad4 <global_stdio_init.part.0>
 800ab4c:	e7f2      	b.n	800ab34 <__sinit+0xc>
 800ab4e:	bf00      	nop
 800ab50:	0800aa95 	.word	0x0800aa95
 800ab54:	200020d4 	.word	0x200020d4

0800ab58 <_fwalk_sglue>:
 800ab58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab5c:	4607      	mov	r7, r0
 800ab5e:	4688      	mov	r8, r1
 800ab60:	4614      	mov	r4, r2
 800ab62:	2600      	movs	r6, #0
 800ab64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ab68:	f1b9 0901 	subs.w	r9, r9, #1
 800ab6c:	d505      	bpl.n	800ab7a <_fwalk_sglue+0x22>
 800ab6e:	6824      	ldr	r4, [r4, #0]
 800ab70:	2c00      	cmp	r4, #0
 800ab72:	d1f7      	bne.n	800ab64 <_fwalk_sglue+0xc>
 800ab74:	4630      	mov	r0, r6
 800ab76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab7a:	89ab      	ldrh	r3, [r5, #12]
 800ab7c:	2b01      	cmp	r3, #1
 800ab7e:	d907      	bls.n	800ab90 <_fwalk_sglue+0x38>
 800ab80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ab84:	3301      	adds	r3, #1
 800ab86:	d003      	beq.n	800ab90 <_fwalk_sglue+0x38>
 800ab88:	4629      	mov	r1, r5
 800ab8a:	4638      	mov	r0, r7
 800ab8c:	47c0      	blx	r8
 800ab8e:	4306      	orrs	r6, r0
 800ab90:	3568      	adds	r5, #104	@ 0x68
 800ab92:	e7e9      	b.n	800ab68 <_fwalk_sglue+0x10>

0800ab94 <siprintf>:
 800ab94:	b40e      	push	{r1, r2, r3}
 800ab96:	b500      	push	{lr}
 800ab98:	b09c      	sub	sp, #112	@ 0x70
 800ab9a:	ab1d      	add	r3, sp, #116	@ 0x74
 800ab9c:	9002      	str	r0, [sp, #8]
 800ab9e:	9006      	str	r0, [sp, #24]
 800aba0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800aba4:	4809      	ldr	r0, [pc, #36]	@ (800abcc <siprintf+0x38>)
 800aba6:	9107      	str	r1, [sp, #28]
 800aba8:	9104      	str	r1, [sp, #16]
 800abaa:	4909      	ldr	r1, [pc, #36]	@ (800abd0 <siprintf+0x3c>)
 800abac:	f853 2b04 	ldr.w	r2, [r3], #4
 800abb0:	9105      	str	r1, [sp, #20]
 800abb2:	6800      	ldr	r0, [r0, #0]
 800abb4:	9301      	str	r3, [sp, #4]
 800abb6:	a902      	add	r1, sp, #8
 800abb8:	f001 fae6 	bl	800c188 <_svfiprintf_r>
 800abbc:	9b02      	ldr	r3, [sp, #8]
 800abbe:	2200      	movs	r2, #0
 800abc0:	701a      	strb	r2, [r3, #0]
 800abc2:	b01c      	add	sp, #112	@ 0x70
 800abc4:	f85d eb04 	ldr.w	lr, [sp], #4
 800abc8:	b003      	add	sp, #12
 800abca:	4770      	bx	lr
 800abcc:	20000188 	.word	0x20000188
 800abd0:	ffff0208 	.word	0xffff0208

0800abd4 <__sread>:
 800abd4:	b510      	push	{r4, lr}
 800abd6:	460c      	mov	r4, r1
 800abd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abdc:	f000 f8e6 	bl	800adac <_read_r>
 800abe0:	2800      	cmp	r0, #0
 800abe2:	bfab      	itete	ge
 800abe4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800abe6:	89a3      	ldrhlt	r3, [r4, #12]
 800abe8:	181b      	addge	r3, r3, r0
 800abea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800abee:	bfac      	ite	ge
 800abf0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800abf2:	81a3      	strhlt	r3, [r4, #12]
 800abf4:	bd10      	pop	{r4, pc}

0800abf6 <__swrite>:
 800abf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abfa:	461f      	mov	r7, r3
 800abfc:	898b      	ldrh	r3, [r1, #12]
 800abfe:	05db      	lsls	r3, r3, #23
 800ac00:	4605      	mov	r5, r0
 800ac02:	460c      	mov	r4, r1
 800ac04:	4616      	mov	r6, r2
 800ac06:	d505      	bpl.n	800ac14 <__swrite+0x1e>
 800ac08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac0c:	2302      	movs	r3, #2
 800ac0e:	2200      	movs	r2, #0
 800ac10:	f000 f8ba 	bl	800ad88 <_lseek_r>
 800ac14:	89a3      	ldrh	r3, [r4, #12]
 800ac16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ac1e:	81a3      	strh	r3, [r4, #12]
 800ac20:	4632      	mov	r2, r6
 800ac22:	463b      	mov	r3, r7
 800ac24:	4628      	mov	r0, r5
 800ac26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac2a:	f000 b8d1 	b.w	800add0 <_write_r>

0800ac2e <__sseek>:
 800ac2e:	b510      	push	{r4, lr}
 800ac30:	460c      	mov	r4, r1
 800ac32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac36:	f000 f8a7 	bl	800ad88 <_lseek_r>
 800ac3a:	1c43      	adds	r3, r0, #1
 800ac3c:	89a3      	ldrh	r3, [r4, #12]
 800ac3e:	bf15      	itete	ne
 800ac40:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ac42:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ac46:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ac4a:	81a3      	strheq	r3, [r4, #12]
 800ac4c:	bf18      	it	ne
 800ac4e:	81a3      	strhne	r3, [r4, #12]
 800ac50:	bd10      	pop	{r4, pc}

0800ac52 <__sclose>:
 800ac52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac56:	f000 b887 	b.w	800ad68 <_close_r>

0800ac5a <memcmp>:
 800ac5a:	b510      	push	{r4, lr}
 800ac5c:	3901      	subs	r1, #1
 800ac5e:	4402      	add	r2, r0
 800ac60:	4290      	cmp	r0, r2
 800ac62:	d101      	bne.n	800ac68 <memcmp+0xe>
 800ac64:	2000      	movs	r0, #0
 800ac66:	e005      	b.n	800ac74 <memcmp+0x1a>
 800ac68:	7803      	ldrb	r3, [r0, #0]
 800ac6a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ac6e:	42a3      	cmp	r3, r4
 800ac70:	d001      	beq.n	800ac76 <memcmp+0x1c>
 800ac72:	1b18      	subs	r0, r3, r4
 800ac74:	bd10      	pop	{r4, pc}
 800ac76:	3001      	adds	r0, #1
 800ac78:	e7f2      	b.n	800ac60 <memcmp+0x6>

0800ac7a <memset>:
 800ac7a:	4402      	add	r2, r0
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	4293      	cmp	r3, r2
 800ac80:	d100      	bne.n	800ac84 <memset+0xa>
 800ac82:	4770      	bx	lr
 800ac84:	f803 1b01 	strb.w	r1, [r3], #1
 800ac88:	e7f9      	b.n	800ac7e <memset+0x4>

0800ac8a <strncmp>:
 800ac8a:	b510      	push	{r4, lr}
 800ac8c:	b16a      	cbz	r2, 800acaa <strncmp+0x20>
 800ac8e:	3901      	subs	r1, #1
 800ac90:	1884      	adds	r4, r0, r2
 800ac92:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac96:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ac9a:	429a      	cmp	r2, r3
 800ac9c:	d103      	bne.n	800aca6 <strncmp+0x1c>
 800ac9e:	42a0      	cmp	r0, r4
 800aca0:	d001      	beq.n	800aca6 <strncmp+0x1c>
 800aca2:	2a00      	cmp	r2, #0
 800aca4:	d1f5      	bne.n	800ac92 <strncmp+0x8>
 800aca6:	1ad0      	subs	r0, r2, r3
 800aca8:	bd10      	pop	{r4, pc}
 800acaa:	4610      	mov	r0, r2
 800acac:	e7fc      	b.n	800aca8 <strncmp+0x1e>
	...

0800acb0 <strtok>:
 800acb0:	4b16      	ldr	r3, [pc, #88]	@ (800ad0c <strtok+0x5c>)
 800acb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acb6:	681f      	ldr	r7, [r3, #0]
 800acb8:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800acba:	4605      	mov	r5, r0
 800acbc:	460e      	mov	r6, r1
 800acbe:	b9ec      	cbnz	r4, 800acfc <strtok+0x4c>
 800acc0:	2050      	movs	r0, #80	@ 0x50
 800acc2:	f000 fc7f 	bl	800b5c4 <malloc>
 800acc6:	4602      	mov	r2, r0
 800acc8:	6478      	str	r0, [r7, #68]	@ 0x44
 800acca:	b920      	cbnz	r0, 800acd6 <strtok+0x26>
 800accc:	4b10      	ldr	r3, [pc, #64]	@ (800ad10 <strtok+0x60>)
 800acce:	4811      	ldr	r0, [pc, #68]	@ (800ad14 <strtok+0x64>)
 800acd0:	215b      	movs	r1, #91	@ 0x5b
 800acd2:	f000 f8d5 	bl	800ae80 <__assert_func>
 800acd6:	e9c0 4400 	strd	r4, r4, [r0]
 800acda:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800acde:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800ace2:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800ace6:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800acea:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800acee:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800acf2:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800acf6:	6184      	str	r4, [r0, #24]
 800acf8:	7704      	strb	r4, [r0, #28]
 800acfa:	6244      	str	r4, [r0, #36]	@ 0x24
 800acfc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800acfe:	4631      	mov	r1, r6
 800ad00:	4628      	mov	r0, r5
 800ad02:	2301      	movs	r3, #1
 800ad04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad08:	f000 b806 	b.w	800ad18 <__strtok_r>
 800ad0c:	20000188 	.word	0x20000188
 800ad10:	0800cfd8 	.word	0x0800cfd8
 800ad14:	0800cfef 	.word	0x0800cfef

0800ad18 <__strtok_r>:
 800ad18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad1a:	4604      	mov	r4, r0
 800ad1c:	b908      	cbnz	r0, 800ad22 <__strtok_r+0xa>
 800ad1e:	6814      	ldr	r4, [r2, #0]
 800ad20:	b144      	cbz	r4, 800ad34 <__strtok_r+0x1c>
 800ad22:	4620      	mov	r0, r4
 800ad24:	f814 5b01 	ldrb.w	r5, [r4], #1
 800ad28:	460f      	mov	r7, r1
 800ad2a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800ad2e:	b91e      	cbnz	r6, 800ad38 <__strtok_r+0x20>
 800ad30:	b965      	cbnz	r5, 800ad4c <__strtok_r+0x34>
 800ad32:	6015      	str	r5, [r2, #0]
 800ad34:	2000      	movs	r0, #0
 800ad36:	e005      	b.n	800ad44 <__strtok_r+0x2c>
 800ad38:	42b5      	cmp	r5, r6
 800ad3a:	d1f6      	bne.n	800ad2a <__strtok_r+0x12>
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d1f0      	bne.n	800ad22 <__strtok_r+0xa>
 800ad40:	6014      	str	r4, [r2, #0]
 800ad42:	7003      	strb	r3, [r0, #0]
 800ad44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad46:	461c      	mov	r4, r3
 800ad48:	e00c      	b.n	800ad64 <__strtok_r+0x4c>
 800ad4a:	b915      	cbnz	r5, 800ad52 <__strtok_r+0x3a>
 800ad4c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ad50:	460e      	mov	r6, r1
 800ad52:	f816 5b01 	ldrb.w	r5, [r6], #1
 800ad56:	42ab      	cmp	r3, r5
 800ad58:	d1f7      	bne.n	800ad4a <__strtok_r+0x32>
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d0f3      	beq.n	800ad46 <__strtok_r+0x2e>
 800ad5e:	2300      	movs	r3, #0
 800ad60:	f804 3c01 	strb.w	r3, [r4, #-1]
 800ad64:	6014      	str	r4, [r2, #0]
 800ad66:	e7ed      	b.n	800ad44 <__strtok_r+0x2c>

0800ad68 <_close_r>:
 800ad68:	b538      	push	{r3, r4, r5, lr}
 800ad6a:	4d06      	ldr	r5, [pc, #24]	@ (800ad84 <_close_r+0x1c>)
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	4604      	mov	r4, r0
 800ad70:	4608      	mov	r0, r1
 800ad72:	602b      	str	r3, [r5, #0]
 800ad74:	f7f6 fb5e 	bl	8001434 <_close>
 800ad78:	1c43      	adds	r3, r0, #1
 800ad7a:	d102      	bne.n	800ad82 <_close_r+0x1a>
 800ad7c:	682b      	ldr	r3, [r5, #0]
 800ad7e:	b103      	cbz	r3, 800ad82 <_close_r+0x1a>
 800ad80:	6023      	str	r3, [r4, #0]
 800ad82:	bd38      	pop	{r3, r4, r5, pc}
 800ad84:	200020d8 	.word	0x200020d8

0800ad88 <_lseek_r>:
 800ad88:	b538      	push	{r3, r4, r5, lr}
 800ad8a:	4d07      	ldr	r5, [pc, #28]	@ (800ada8 <_lseek_r+0x20>)
 800ad8c:	4604      	mov	r4, r0
 800ad8e:	4608      	mov	r0, r1
 800ad90:	4611      	mov	r1, r2
 800ad92:	2200      	movs	r2, #0
 800ad94:	602a      	str	r2, [r5, #0]
 800ad96:	461a      	mov	r2, r3
 800ad98:	f7f6 fb73 	bl	8001482 <_lseek>
 800ad9c:	1c43      	adds	r3, r0, #1
 800ad9e:	d102      	bne.n	800ada6 <_lseek_r+0x1e>
 800ada0:	682b      	ldr	r3, [r5, #0]
 800ada2:	b103      	cbz	r3, 800ada6 <_lseek_r+0x1e>
 800ada4:	6023      	str	r3, [r4, #0]
 800ada6:	bd38      	pop	{r3, r4, r5, pc}
 800ada8:	200020d8 	.word	0x200020d8

0800adac <_read_r>:
 800adac:	b538      	push	{r3, r4, r5, lr}
 800adae:	4d07      	ldr	r5, [pc, #28]	@ (800adcc <_read_r+0x20>)
 800adb0:	4604      	mov	r4, r0
 800adb2:	4608      	mov	r0, r1
 800adb4:	4611      	mov	r1, r2
 800adb6:	2200      	movs	r2, #0
 800adb8:	602a      	str	r2, [r5, #0]
 800adba:	461a      	mov	r2, r3
 800adbc:	f7f6 fb01 	bl	80013c2 <_read>
 800adc0:	1c43      	adds	r3, r0, #1
 800adc2:	d102      	bne.n	800adca <_read_r+0x1e>
 800adc4:	682b      	ldr	r3, [r5, #0]
 800adc6:	b103      	cbz	r3, 800adca <_read_r+0x1e>
 800adc8:	6023      	str	r3, [r4, #0]
 800adca:	bd38      	pop	{r3, r4, r5, pc}
 800adcc:	200020d8 	.word	0x200020d8

0800add0 <_write_r>:
 800add0:	b538      	push	{r3, r4, r5, lr}
 800add2:	4d07      	ldr	r5, [pc, #28]	@ (800adf0 <_write_r+0x20>)
 800add4:	4604      	mov	r4, r0
 800add6:	4608      	mov	r0, r1
 800add8:	4611      	mov	r1, r2
 800adda:	2200      	movs	r2, #0
 800addc:	602a      	str	r2, [r5, #0]
 800adde:	461a      	mov	r2, r3
 800ade0:	f7f6 fb0c 	bl	80013fc <_write>
 800ade4:	1c43      	adds	r3, r0, #1
 800ade6:	d102      	bne.n	800adee <_write_r+0x1e>
 800ade8:	682b      	ldr	r3, [r5, #0]
 800adea:	b103      	cbz	r3, 800adee <_write_r+0x1e>
 800adec:	6023      	str	r3, [r4, #0]
 800adee:	bd38      	pop	{r3, r4, r5, pc}
 800adf0:	200020d8 	.word	0x200020d8

0800adf4 <__errno>:
 800adf4:	4b01      	ldr	r3, [pc, #4]	@ (800adfc <__errno+0x8>)
 800adf6:	6818      	ldr	r0, [r3, #0]
 800adf8:	4770      	bx	lr
 800adfa:	bf00      	nop
 800adfc:	20000188 	.word	0x20000188

0800ae00 <__libc_init_array>:
 800ae00:	b570      	push	{r4, r5, r6, lr}
 800ae02:	4d0d      	ldr	r5, [pc, #52]	@ (800ae38 <__libc_init_array+0x38>)
 800ae04:	4c0d      	ldr	r4, [pc, #52]	@ (800ae3c <__libc_init_array+0x3c>)
 800ae06:	1b64      	subs	r4, r4, r5
 800ae08:	10a4      	asrs	r4, r4, #2
 800ae0a:	2600      	movs	r6, #0
 800ae0c:	42a6      	cmp	r6, r4
 800ae0e:	d109      	bne.n	800ae24 <__libc_init_array+0x24>
 800ae10:	4d0b      	ldr	r5, [pc, #44]	@ (800ae40 <__libc_init_array+0x40>)
 800ae12:	4c0c      	ldr	r4, [pc, #48]	@ (800ae44 <__libc_init_array+0x44>)
 800ae14:	f002 f818 	bl	800ce48 <_init>
 800ae18:	1b64      	subs	r4, r4, r5
 800ae1a:	10a4      	asrs	r4, r4, #2
 800ae1c:	2600      	movs	r6, #0
 800ae1e:	42a6      	cmp	r6, r4
 800ae20:	d105      	bne.n	800ae2e <__libc_init_array+0x2e>
 800ae22:	bd70      	pop	{r4, r5, r6, pc}
 800ae24:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae28:	4798      	blx	r3
 800ae2a:	3601      	adds	r6, #1
 800ae2c:	e7ee      	b.n	800ae0c <__libc_init_array+0xc>
 800ae2e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae32:	4798      	blx	r3
 800ae34:	3601      	adds	r6, #1
 800ae36:	e7f2      	b.n	800ae1e <__libc_init_array+0x1e>
 800ae38:	0800d394 	.word	0x0800d394
 800ae3c:	0800d394 	.word	0x0800d394
 800ae40:	0800d394 	.word	0x0800d394
 800ae44:	0800d398 	.word	0x0800d398

0800ae48 <__retarget_lock_init_recursive>:
 800ae48:	4770      	bx	lr

0800ae4a <__retarget_lock_acquire_recursive>:
 800ae4a:	4770      	bx	lr

0800ae4c <__retarget_lock_release_recursive>:
 800ae4c:	4770      	bx	lr

0800ae4e <memcpy>:
 800ae4e:	440a      	add	r2, r1
 800ae50:	4291      	cmp	r1, r2
 800ae52:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae56:	d100      	bne.n	800ae5a <memcpy+0xc>
 800ae58:	4770      	bx	lr
 800ae5a:	b510      	push	{r4, lr}
 800ae5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae60:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae64:	4291      	cmp	r1, r2
 800ae66:	d1f9      	bne.n	800ae5c <memcpy+0xe>
 800ae68:	bd10      	pop	{r4, pc}
 800ae6a:	0000      	movs	r0, r0
 800ae6c:	0000      	movs	r0, r0
	...

0800ae70 <nan>:
 800ae70:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ae78 <nan+0x8>
 800ae74:	4770      	bx	lr
 800ae76:	bf00      	nop
 800ae78:	00000000 	.word	0x00000000
 800ae7c:	7ff80000 	.word	0x7ff80000

0800ae80 <__assert_func>:
 800ae80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ae82:	4614      	mov	r4, r2
 800ae84:	461a      	mov	r2, r3
 800ae86:	4b09      	ldr	r3, [pc, #36]	@ (800aeac <__assert_func+0x2c>)
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	4605      	mov	r5, r0
 800ae8c:	68d8      	ldr	r0, [r3, #12]
 800ae8e:	b954      	cbnz	r4, 800aea6 <__assert_func+0x26>
 800ae90:	4b07      	ldr	r3, [pc, #28]	@ (800aeb0 <__assert_func+0x30>)
 800ae92:	461c      	mov	r4, r3
 800ae94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ae98:	9100      	str	r1, [sp, #0]
 800ae9a:	462b      	mov	r3, r5
 800ae9c:	4905      	ldr	r1, [pc, #20]	@ (800aeb4 <__assert_func+0x34>)
 800ae9e:	f001 fca9 	bl	800c7f4 <fiprintf>
 800aea2:	f001 fce3 	bl	800c86c <abort>
 800aea6:	4b04      	ldr	r3, [pc, #16]	@ (800aeb8 <__assert_func+0x38>)
 800aea8:	e7f4      	b.n	800ae94 <__assert_func+0x14>
 800aeaa:	bf00      	nop
 800aeac:	20000188 	.word	0x20000188
 800aeb0:	0800d08c 	.word	0x0800d08c
 800aeb4:	0800d05e 	.word	0x0800d05e
 800aeb8:	0800d051 	.word	0x0800d051

0800aebc <_free_r>:
 800aebc:	b538      	push	{r3, r4, r5, lr}
 800aebe:	4605      	mov	r5, r0
 800aec0:	2900      	cmp	r1, #0
 800aec2:	d041      	beq.n	800af48 <_free_r+0x8c>
 800aec4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aec8:	1f0c      	subs	r4, r1, #4
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	bfb8      	it	lt
 800aece:	18e4      	addlt	r4, r4, r3
 800aed0:	f000 fc34 	bl	800b73c <__malloc_lock>
 800aed4:	4a1d      	ldr	r2, [pc, #116]	@ (800af4c <_free_r+0x90>)
 800aed6:	6813      	ldr	r3, [r2, #0]
 800aed8:	b933      	cbnz	r3, 800aee8 <_free_r+0x2c>
 800aeda:	6063      	str	r3, [r4, #4]
 800aedc:	6014      	str	r4, [r2, #0]
 800aede:	4628      	mov	r0, r5
 800aee0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aee4:	f000 bc30 	b.w	800b748 <__malloc_unlock>
 800aee8:	42a3      	cmp	r3, r4
 800aeea:	d908      	bls.n	800aefe <_free_r+0x42>
 800aeec:	6820      	ldr	r0, [r4, #0]
 800aeee:	1821      	adds	r1, r4, r0
 800aef0:	428b      	cmp	r3, r1
 800aef2:	bf01      	itttt	eq
 800aef4:	6819      	ldreq	r1, [r3, #0]
 800aef6:	685b      	ldreq	r3, [r3, #4]
 800aef8:	1809      	addeq	r1, r1, r0
 800aefa:	6021      	streq	r1, [r4, #0]
 800aefc:	e7ed      	b.n	800aeda <_free_r+0x1e>
 800aefe:	461a      	mov	r2, r3
 800af00:	685b      	ldr	r3, [r3, #4]
 800af02:	b10b      	cbz	r3, 800af08 <_free_r+0x4c>
 800af04:	42a3      	cmp	r3, r4
 800af06:	d9fa      	bls.n	800aefe <_free_r+0x42>
 800af08:	6811      	ldr	r1, [r2, #0]
 800af0a:	1850      	adds	r0, r2, r1
 800af0c:	42a0      	cmp	r0, r4
 800af0e:	d10b      	bne.n	800af28 <_free_r+0x6c>
 800af10:	6820      	ldr	r0, [r4, #0]
 800af12:	4401      	add	r1, r0
 800af14:	1850      	adds	r0, r2, r1
 800af16:	4283      	cmp	r3, r0
 800af18:	6011      	str	r1, [r2, #0]
 800af1a:	d1e0      	bne.n	800aede <_free_r+0x22>
 800af1c:	6818      	ldr	r0, [r3, #0]
 800af1e:	685b      	ldr	r3, [r3, #4]
 800af20:	6053      	str	r3, [r2, #4]
 800af22:	4408      	add	r0, r1
 800af24:	6010      	str	r0, [r2, #0]
 800af26:	e7da      	b.n	800aede <_free_r+0x22>
 800af28:	d902      	bls.n	800af30 <_free_r+0x74>
 800af2a:	230c      	movs	r3, #12
 800af2c:	602b      	str	r3, [r5, #0]
 800af2e:	e7d6      	b.n	800aede <_free_r+0x22>
 800af30:	6820      	ldr	r0, [r4, #0]
 800af32:	1821      	adds	r1, r4, r0
 800af34:	428b      	cmp	r3, r1
 800af36:	bf04      	itt	eq
 800af38:	6819      	ldreq	r1, [r3, #0]
 800af3a:	685b      	ldreq	r3, [r3, #4]
 800af3c:	6063      	str	r3, [r4, #4]
 800af3e:	bf04      	itt	eq
 800af40:	1809      	addeq	r1, r1, r0
 800af42:	6021      	streq	r1, [r4, #0]
 800af44:	6054      	str	r4, [r2, #4]
 800af46:	e7ca      	b.n	800aede <_free_r+0x22>
 800af48:	bd38      	pop	{r3, r4, r5, pc}
 800af4a:	bf00      	nop
 800af4c:	200020e4 	.word	0x200020e4

0800af50 <rshift>:
 800af50:	6903      	ldr	r3, [r0, #16]
 800af52:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800af56:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800af5a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800af5e:	f100 0414 	add.w	r4, r0, #20
 800af62:	dd45      	ble.n	800aff0 <rshift+0xa0>
 800af64:	f011 011f 	ands.w	r1, r1, #31
 800af68:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800af6c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800af70:	d10c      	bne.n	800af8c <rshift+0x3c>
 800af72:	f100 0710 	add.w	r7, r0, #16
 800af76:	4629      	mov	r1, r5
 800af78:	42b1      	cmp	r1, r6
 800af7a:	d334      	bcc.n	800afe6 <rshift+0x96>
 800af7c:	1a9b      	subs	r3, r3, r2
 800af7e:	009b      	lsls	r3, r3, #2
 800af80:	1eea      	subs	r2, r5, #3
 800af82:	4296      	cmp	r6, r2
 800af84:	bf38      	it	cc
 800af86:	2300      	movcc	r3, #0
 800af88:	4423      	add	r3, r4
 800af8a:	e015      	b.n	800afb8 <rshift+0x68>
 800af8c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800af90:	f1c1 0820 	rsb	r8, r1, #32
 800af94:	40cf      	lsrs	r7, r1
 800af96:	f105 0e04 	add.w	lr, r5, #4
 800af9a:	46a1      	mov	r9, r4
 800af9c:	4576      	cmp	r6, lr
 800af9e:	46f4      	mov	ip, lr
 800afa0:	d815      	bhi.n	800afce <rshift+0x7e>
 800afa2:	1a9a      	subs	r2, r3, r2
 800afa4:	0092      	lsls	r2, r2, #2
 800afa6:	3a04      	subs	r2, #4
 800afa8:	3501      	adds	r5, #1
 800afaa:	42ae      	cmp	r6, r5
 800afac:	bf38      	it	cc
 800afae:	2200      	movcc	r2, #0
 800afb0:	18a3      	adds	r3, r4, r2
 800afb2:	50a7      	str	r7, [r4, r2]
 800afb4:	b107      	cbz	r7, 800afb8 <rshift+0x68>
 800afb6:	3304      	adds	r3, #4
 800afb8:	1b1a      	subs	r2, r3, r4
 800afba:	42a3      	cmp	r3, r4
 800afbc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800afc0:	bf08      	it	eq
 800afc2:	2300      	moveq	r3, #0
 800afc4:	6102      	str	r2, [r0, #16]
 800afc6:	bf08      	it	eq
 800afc8:	6143      	streq	r3, [r0, #20]
 800afca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800afce:	f8dc c000 	ldr.w	ip, [ip]
 800afd2:	fa0c fc08 	lsl.w	ip, ip, r8
 800afd6:	ea4c 0707 	orr.w	r7, ip, r7
 800afda:	f849 7b04 	str.w	r7, [r9], #4
 800afde:	f85e 7b04 	ldr.w	r7, [lr], #4
 800afe2:	40cf      	lsrs	r7, r1
 800afe4:	e7da      	b.n	800af9c <rshift+0x4c>
 800afe6:	f851 cb04 	ldr.w	ip, [r1], #4
 800afea:	f847 cf04 	str.w	ip, [r7, #4]!
 800afee:	e7c3      	b.n	800af78 <rshift+0x28>
 800aff0:	4623      	mov	r3, r4
 800aff2:	e7e1      	b.n	800afb8 <rshift+0x68>

0800aff4 <__hexdig_fun>:
 800aff4:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800aff8:	2b09      	cmp	r3, #9
 800affa:	d802      	bhi.n	800b002 <__hexdig_fun+0xe>
 800affc:	3820      	subs	r0, #32
 800affe:	b2c0      	uxtb	r0, r0
 800b000:	4770      	bx	lr
 800b002:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b006:	2b05      	cmp	r3, #5
 800b008:	d801      	bhi.n	800b00e <__hexdig_fun+0x1a>
 800b00a:	3847      	subs	r0, #71	@ 0x47
 800b00c:	e7f7      	b.n	800affe <__hexdig_fun+0xa>
 800b00e:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b012:	2b05      	cmp	r3, #5
 800b014:	d801      	bhi.n	800b01a <__hexdig_fun+0x26>
 800b016:	3827      	subs	r0, #39	@ 0x27
 800b018:	e7f1      	b.n	800affe <__hexdig_fun+0xa>
 800b01a:	2000      	movs	r0, #0
 800b01c:	4770      	bx	lr
	...

0800b020 <__gethex>:
 800b020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b024:	b085      	sub	sp, #20
 800b026:	468a      	mov	sl, r1
 800b028:	9302      	str	r3, [sp, #8]
 800b02a:	680b      	ldr	r3, [r1, #0]
 800b02c:	9001      	str	r0, [sp, #4]
 800b02e:	4690      	mov	r8, r2
 800b030:	1c9c      	adds	r4, r3, #2
 800b032:	46a1      	mov	r9, r4
 800b034:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b038:	2830      	cmp	r0, #48	@ 0x30
 800b03a:	d0fa      	beq.n	800b032 <__gethex+0x12>
 800b03c:	eba9 0303 	sub.w	r3, r9, r3
 800b040:	f1a3 0b02 	sub.w	fp, r3, #2
 800b044:	f7ff ffd6 	bl	800aff4 <__hexdig_fun>
 800b048:	4605      	mov	r5, r0
 800b04a:	2800      	cmp	r0, #0
 800b04c:	d168      	bne.n	800b120 <__gethex+0x100>
 800b04e:	49a0      	ldr	r1, [pc, #640]	@ (800b2d0 <__gethex+0x2b0>)
 800b050:	2201      	movs	r2, #1
 800b052:	4648      	mov	r0, r9
 800b054:	f7ff fe19 	bl	800ac8a <strncmp>
 800b058:	4607      	mov	r7, r0
 800b05a:	2800      	cmp	r0, #0
 800b05c:	d167      	bne.n	800b12e <__gethex+0x10e>
 800b05e:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b062:	4626      	mov	r6, r4
 800b064:	f7ff ffc6 	bl	800aff4 <__hexdig_fun>
 800b068:	2800      	cmp	r0, #0
 800b06a:	d062      	beq.n	800b132 <__gethex+0x112>
 800b06c:	4623      	mov	r3, r4
 800b06e:	7818      	ldrb	r0, [r3, #0]
 800b070:	2830      	cmp	r0, #48	@ 0x30
 800b072:	4699      	mov	r9, r3
 800b074:	f103 0301 	add.w	r3, r3, #1
 800b078:	d0f9      	beq.n	800b06e <__gethex+0x4e>
 800b07a:	f7ff ffbb 	bl	800aff4 <__hexdig_fun>
 800b07e:	fab0 f580 	clz	r5, r0
 800b082:	096d      	lsrs	r5, r5, #5
 800b084:	f04f 0b01 	mov.w	fp, #1
 800b088:	464a      	mov	r2, r9
 800b08a:	4616      	mov	r6, r2
 800b08c:	3201      	adds	r2, #1
 800b08e:	7830      	ldrb	r0, [r6, #0]
 800b090:	f7ff ffb0 	bl	800aff4 <__hexdig_fun>
 800b094:	2800      	cmp	r0, #0
 800b096:	d1f8      	bne.n	800b08a <__gethex+0x6a>
 800b098:	498d      	ldr	r1, [pc, #564]	@ (800b2d0 <__gethex+0x2b0>)
 800b09a:	2201      	movs	r2, #1
 800b09c:	4630      	mov	r0, r6
 800b09e:	f7ff fdf4 	bl	800ac8a <strncmp>
 800b0a2:	2800      	cmp	r0, #0
 800b0a4:	d13f      	bne.n	800b126 <__gethex+0x106>
 800b0a6:	b944      	cbnz	r4, 800b0ba <__gethex+0x9a>
 800b0a8:	1c74      	adds	r4, r6, #1
 800b0aa:	4622      	mov	r2, r4
 800b0ac:	4616      	mov	r6, r2
 800b0ae:	3201      	adds	r2, #1
 800b0b0:	7830      	ldrb	r0, [r6, #0]
 800b0b2:	f7ff ff9f 	bl	800aff4 <__hexdig_fun>
 800b0b6:	2800      	cmp	r0, #0
 800b0b8:	d1f8      	bne.n	800b0ac <__gethex+0x8c>
 800b0ba:	1ba4      	subs	r4, r4, r6
 800b0bc:	00a7      	lsls	r7, r4, #2
 800b0be:	7833      	ldrb	r3, [r6, #0]
 800b0c0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b0c4:	2b50      	cmp	r3, #80	@ 0x50
 800b0c6:	d13e      	bne.n	800b146 <__gethex+0x126>
 800b0c8:	7873      	ldrb	r3, [r6, #1]
 800b0ca:	2b2b      	cmp	r3, #43	@ 0x2b
 800b0cc:	d033      	beq.n	800b136 <__gethex+0x116>
 800b0ce:	2b2d      	cmp	r3, #45	@ 0x2d
 800b0d0:	d034      	beq.n	800b13c <__gethex+0x11c>
 800b0d2:	1c71      	adds	r1, r6, #1
 800b0d4:	2400      	movs	r4, #0
 800b0d6:	7808      	ldrb	r0, [r1, #0]
 800b0d8:	f7ff ff8c 	bl	800aff4 <__hexdig_fun>
 800b0dc:	1e43      	subs	r3, r0, #1
 800b0de:	b2db      	uxtb	r3, r3
 800b0e0:	2b18      	cmp	r3, #24
 800b0e2:	d830      	bhi.n	800b146 <__gethex+0x126>
 800b0e4:	f1a0 0210 	sub.w	r2, r0, #16
 800b0e8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b0ec:	f7ff ff82 	bl	800aff4 <__hexdig_fun>
 800b0f0:	f100 3cff 	add.w	ip, r0, #4294967295
 800b0f4:	fa5f fc8c 	uxtb.w	ip, ip
 800b0f8:	f1bc 0f18 	cmp.w	ip, #24
 800b0fc:	f04f 030a 	mov.w	r3, #10
 800b100:	d91e      	bls.n	800b140 <__gethex+0x120>
 800b102:	b104      	cbz	r4, 800b106 <__gethex+0xe6>
 800b104:	4252      	negs	r2, r2
 800b106:	4417      	add	r7, r2
 800b108:	f8ca 1000 	str.w	r1, [sl]
 800b10c:	b1ed      	cbz	r5, 800b14a <__gethex+0x12a>
 800b10e:	f1bb 0f00 	cmp.w	fp, #0
 800b112:	bf0c      	ite	eq
 800b114:	2506      	moveq	r5, #6
 800b116:	2500      	movne	r5, #0
 800b118:	4628      	mov	r0, r5
 800b11a:	b005      	add	sp, #20
 800b11c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b120:	2500      	movs	r5, #0
 800b122:	462c      	mov	r4, r5
 800b124:	e7b0      	b.n	800b088 <__gethex+0x68>
 800b126:	2c00      	cmp	r4, #0
 800b128:	d1c7      	bne.n	800b0ba <__gethex+0x9a>
 800b12a:	4627      	mov	r7, r4
 800b12c:	e7c7      	b.n	800b0be <__gethex+0x9e>
 800b12e:	464e      	mov	r6, r9
 800b130:	462f      	mov	r7, r5
 800b132:	2501      	movs	r5, #1
 800b134:	e7c3      	b.n	800b0be <__gethex+0x9e>
 800b136:	2400      	movs	r4, #0
 800b138:	1cb1      	adds	r1, r6, #2
 800b13a:	e7cc      	b.n	800b0d6 <__gethex+0xb6>
 800b13c:	2401      	movs	r4, #1
 800b13e:	e7fb      	b.n	800b138 <__gethex+0x118>
 800b140:	fb03 0002 	mla	r0, r3, r2, r0
 800b144:	e7ce      	b.n	800b0e4 <__gethex+0xc4>
 800b146:	4631      	mov	r1, r6
 800b148:	e7de      	b.n	800b108 <__gethex+0xe8>
 800b14a:	eba6 0309 	sub.w	r3, r6, r9
 800b14e:	3b01      	subs	r3, #1
 800b150:	4629      	mov	r1, r5
 800b152:	2b07      	cmp	r3, #7
 800b154:	dc0a      	bgt.n	800b16c <__gethex+0x14c>
 800b156:	9801      	ldr	r0, [sp, #4]
 800b158:	f000 fafc 	bl	800b754 <_Balloc>
 800b15c:	4604      	mov	r4, r0
 800b15e:	b940      	cbnz	r0, 800b172 <__gethex+0x152>
 800b160:	4b5c      	ldr	r3, [pc, #368]	@ (800b2d4 <__gethex+0x2b4>)
 800b162:	4602      	mov	r2, r0
 800b164:	21e4      	movs	r1, #228	@ 0xe4
 800b166:	485c      	ldr	r0, [pc, #368]	@ (800b2d8 <__gethex+0x2b8>)
 800b168:	f7ff fe8a 	bl	800ae80 <__assert_func>
 800b16c:	3101      	adds	r1, #1
 800b16e:	105b      	asrs	r3, r3, #1
 800b170:	e7ef      	b.n	800b152 <__gethex+0x132>
 800b172:	f100 0a14 	add.w	sl, r0, #20
 800b176:	2300      	movs	r3, #0
 800b178:	4655      	mov	r5, sl
 800b17a:	469b      	mov	fp, r3
 800b17c:	45b1      	cmp	r9, r6
 800b17e:	d337      	bcc.n	800b1f0 <__gethex+0x1d0>
 800b180:	f845 bb04 	str.w	fp, [r5], #4
 800b184:	eba5 050a 	sub.w	r5, r5, sl
 800b188:	10ad      	asrs	r5, r5, #2
 800b18a:	6125      	str	r5, [r4, #16]
 800b18c:	4658      	mov	r0, fp
 800b18e:	f000 fbd3 	bl	800b938 <__hi0bits>
 800b192:	016d      	lsls	r5, r5, #5
 800b194:	f8d8 6000 	ldr.w	r6, [r8]
 800b198:	1a2d      	subs	r5, r5, r0
 800b19a:	42b5      	cmp	r5, r6
 800b19c:	dd54      	ble.n	800b248 <__gethex+0x228>
 800b19e:	1bad      	subs	r5, r5, r6
 800b1a0:	4629      	mov	r1, r5
 800b1a2:	4620      	mov	r0, r4
 800b1a4:	f000 ff67 	bl	800c076 <__any_on>
 800b1a8:	4681      	mov	r9, r0
 800b1aa:	b178      	cbz	r0, 800b1cc <__gethex+0x1ac>
 800b1ac:	1e6b      	subs	r3, r5, #1
 800b1ae:	1159      	asrs	r1, r3, #5
 800b1b0:	f003 021f 	and.w	r2, r3, #31
 800b1b4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b1b8:	f04f 0901 	mov.w	r9, #1
 800b1bc:	fa09 f202 	lsl.w	r2, r9, r2
 800b1c0:	420a      	tst	r2, r1
 800b1c2:	d003      	beq.n	800b1cc <__gethex+0x1ac>
 800b1c4:	454b      	cmp	r3, r9
 800b1c6:	dc36      	bgt.n	800b236 <__gethex+0x216>
 800b1c8:	f04f 0902 	mov.w	r9, #2
 800b1cc:	4629      	mov	r1, r5
 800b1ce:	4620      	mov	r0, r4
 800b1d0:	f7ff febe 	bl	800af50 <rshift>
 800b1d4:	442f      	add	r7, r5
 800b1d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b1da:	42bb      	cmp	r3, r7
 800b1dc:	da42      	bge.n	800b264 <__gethex+0x244>
 800b1de:	9801      	ldr	r0, [sp, #4]
 800b1e0:	4621      	mov	r1, r4
 800b1e2:	f000 faf7 	bl	800b7d4 <_Bfree>
 800b1e6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	6013      	str	r3, [r2, #0]
 800b1ec:	25a3      	movs	r5, #163	@ 0xa3
 800b1ee:	e793      	b.n	800b118 <__gethex+0xf8>
 800b1f0:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b1f4:	2a2e      	cmp	r2, #46	@ 0x2e
 800b1f6:	d012      	beq.n	800b21e <__gethex+0x1fe>
 800b1f8:	2b20      	cmp	r3, #32
 800b1fa:	d104      	bne.n	800b206 <__gethex+0x1e6>
 800b1fc:	f845 bb04 	str.w	fp, [r5], #4
 800b200:	f04f 0b00 	mov.w	fp, #0
 800b204:	465b      	mov	r3, fp
 800b206:	7830      	ldrb	r0, [r6, #0]
 800b208:	9303      	str	r3, [sp, #12]
 800b20a:	f7ff fef3 	bl	800aff4 <__hexdig_fun>
 800b20e:	9b03      	ldr	r3, [sp, #12]
 800b210:	f000 000f 	and.w	r0, r0, #15
 800b214:	4098      	lsls	r0, r3
 800b216:	ea4b 0b00 	orr.w	fp, fp, r0
 800b21a:	3304      	adds	r3, #4
 800b21c:	e7ae      	b.n	800b17c <__gethex+0x15c>
 800b21e:	45b1      	cmp	r9, r6
 800b220:	d8ea      	bhi.n	800b1f8 <__gethex+0x1d8>
 800b222:	492b      	ldr	r1, [pc, #172]	@ (800b2d0 <__gethex+0x2b0>)
 800b224:	9303      	str	r3, [sp, #12]
 800b226:	2201      	movs	r2, #1
 800b228:	4630      	mov	r0, r6
 800b22a:	f7ff fd2e 	bl	800ac8a <strncmp>
 800b22e:	9b03      	ldr	r3, [sp, #12]
 800b230:	2800      	cmp	r0, #0
 800b232:	d1e1      	bne.n	800b1f8 <__gethex+0x1d8>
 800b234:	e7a2      	b.n	800b17c <__gethex+0x15c>
 800b236:	1ea9      	subs	r1, r5, #2
 800b238:	4620      	mov	r0, r4
 800b23a:	f000 ff1c 	bl	800c076 <__any_on>
 800b23e:	2800      	cmp	r0, #0
 800b240:	d0c2      	beq.n	800b1c8 <__gethex+0x1a8>
 800b242:	f04f 0903 	mov.w	r9, #3
 800b246:	e7c1      	b.n	800b1cc <__gethex+0x1ac>
 800b248:	da09      	bge.n	800b25e <__gethex+0x23e>
 800b24a:	1b75      	subs	r5, r6, r5
 800b24c:	4621      	mov	r1, r4
 800b24e:	9801      	ldr	r0, [sp, #4]
 800b250:	462a      	mov	r2, r5
 800b252:	f000 fcd7 	bl	800bc04 <__lshift>
 800b256:	1b7f      	subs	r7, r7, r5
 800b258:	4604      	mov	r4, r0
 800b25a:	f100 0a14 	add.w	sl, r0, #20
 800b25e:	f04f 0900 	mov.w	r9, #0
 800b262:	e7b8      	b.n	800b1d6 <__gethex+0x1b6>
 800b264:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b268:	42bd      	cmp	r5, r7
 800b26a:	dd6f      	ble.n	800b34c <__gethex+0x32c>
 800b26c:	1bed      	subs	r5, r5, r7
 800b26e:	42ae      	cmp	r6, r5
 800b270:	dc34      	bgt.n	800b2dc <__gethex+0x2bc>
 800b272:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b276:	2b02      	cmp	r3, #2
 800b278:	d022      	beq.n	800b2c0 <__gethex+0x2a0>
 800b27a:	2b03      	cmp	r3, #3
 800b27c:	d024      	beq.n	800b2c8 <__gethex+0x2a8>
 800b27e:	2b01      	cmp	r3, #1
 800b280:	d115      	bne.n	800b2ae <__gethex+0x28e>
 800b282:	42ae      	cmp	r6, r5
 800b284:	d113      	bne.n	800b2ae <__gethex+0x28e>
 800b286:	2e01      	cmp	r6, #1
 800b288:	d10b      	bne.n	800b2a2 <__gethex+0x282>
 800b28a:	9a02      	ldr	r2, [sp, #8]
 800b28c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b290:	6013      	str	r3, [r2, #0]
 800b292:	2301      	movs	r3, #1
 800b294:	6123      	str	r3, [r4, #16]
 800b296:	f8ca 3000 	str.w	r3, [sl]
 800b29a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b29c:	2562      	movs	r5, #98	@ 0x62
 800b29e:	601c      	str	r4, [r3, #0]
 800b2a0:	e73a      	b.n	800b118 <__gethex+0xf8>
 800b2a2:	1e71      	subs	r1, r6, #1
 800b2a4:	4620      	mov	r0, r4
 800b2a6:	f000 fee6 	bl	800c076 <__any_on>
 800b2aa:	2800      	cmp	r0, #0
 800b2ac:	d1ed      	bne.n	800b28a <__gethex+0x26a>
 800b2ae:	9801      	ldr	r0, [sp, #4]
 800b2b0:	4621      	mov	r1, r4
 800b2b2:	f000 fa8f 	bl	800b7d4 <_Bfree>
 800b2b6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	6013      	str	r3, [r2, #0]
 800b2bc:	2550      	movs	r5, #80	@ 0x50
 800b2be:	e72b      	b.n	800b118 <__gethex+0xf8>
 800b2c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d1f3      	bne.n	800b2ae <__gethex+0x28e>
 800b2c6:	e7e0      	b.n	800b28a <__gethex+0x26a>
 800b2c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d1dd      	bne.n	800b28a <__gethex+0x26a>
 800b2ce:	e7ee      	b.n	800b2ae <__gethex+0x28e>
 800b2d0:	0800cf74 	.word	0x0800cf74
 800b2d4:	0800d08d 	.word	0x0800d08d
 800b2d8:	0800d09e 	.word	0x0800d09e
 800b2dc:	1e6f      	subs	r7, r5, #1
 800b2de:	f1b9 0f00 	cmp.w	r9, #0
 800b2e2:	d130      	bne.n	800b346 <__gethex+0x326>
 800b2e4:	b127      	cbz	r7, 800b2f0 <__gethex+0x2d0>
 800b2e6:	4639      	mov	r1, r7
 800b2e8:	4620      	mov	r0, r4
 800b2ea:	f000 fec4 	bl	800c076 <__any_on>
 800b2ee:	4681      	mov	r9, r0
 800b2f0:	117a      	asrs	r2, r7, #5
 800b2f2:	2301      	movs	r3, #1
 800b2f4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b2f8:	f007 071f 	and.w	r7, r7, #31
 800b2fc:	40bb      	lsls	r3, r7
 800b2fe:	4213      	tst	r3, r2
 800b300:	4629      	mov	r1, r5
 800b302:	4620      	mov	r0, r4
 800b304:	bf18      	it	ne
 800b306:	f049 0902 	orrne.w	r9, r9, #2
 800b30a:	f7ff fe21 	bl	800af50 <rshift>
 800b30e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b312:	1b76      	subs	r6, r6, r5
 800b314:	2502      	movs	r5, #2
 800b316:	f1b9 0f00 	cmp.w	r9, #0
 800b31a:	d047      	beq.n	800b3ac <__gethex+0x38c>
 800b31c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b320:	2b02      	cmp	r3, #2
 800b322:	d015      	beq.n	800b350 <__gethex+0x330>
 800b324:	2b03      	cmp	r3, #3
 800b326:	d017      	beq.n	800b358 <__gethex+0x338>
 800b328:	2b01      	cmp	r3, #1
 800b32a:	d109      	bne.n	800b340 <__gethex+0x320>
 800b32c:	f019 0f02 	tst.w	r9, #2
 800b330:	d006      	beq.n	800b340 <__gethex+0x320>
 800b332:	f8da 3000 	ldr.w	r3, [sl]
 800b336:	ea49 0903 	orr.w	r9, r9, r3
 800b33a:	f019 0f01 	tst.w	r9, #1
 800b33e:	d10e      	bne.n	800b35e <__gethex+0x33e>
 800b340:	f045 0510 	orr.w	r5, r5, #16
 800b344:	e032      	b.n	800b3ac <__gethex+0x38c>
 800b346:	f04f 0901 	mov.w	r9, #1
 800b34a:	e7d1      	b.n	800b2f0 <__gethex+0x2d0>
 800b34c:	2501      	movs	r5, #1
 800b34e:	e7e2      	b.n	800b316 <__gethex+0x2f6>
 800b350:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b352:	f1c3 0301 	rsb	r3, r3, #1
 800b356:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b358:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d0f0      	beq.n	800b340 <__gethex+0x320>
 800b35e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b362:	f104 0314 	add.w	r3, r4, #20
 800b366:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b36a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b36e:	f04f 0c00 	mov.w	ip, #0
 800b372:	4618      	mov	r0, r3
 800b374:	f853 2b04 	ldr.w	r2, [r3], #4
 800b378:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b37c:	d01b      	beq.n	800b3b6 <__gethex+0x396>
 800b37e:	3201      	adds	r2, #1
 800b380:	6002      	str	r2, [r0, #0]
 800b382:	2d02      	cmp	r5, #2
 800b384:	f104 0314 	add.w	r3, r4, #20
 800b388:	d13c      	bne.n	800b404 <__gethex+0x3e4>
 800b38a:	f8d8 2000 	ldr.w	r2, [r8]
 800b38e:	3a01      	subs	r2, #1
 800b390:	42b2      	cmp	r2, r6
 800b392:	d109      	bne.n	800b3a8 <__gethex+0x388>
 800b394:	1171      	asrs	r1, r6, #5
 800b396:	2201      	movs	r2, #1
 800b398:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b39c:	f006 061f 	and.w	r6, r6, #31
 800b3a0:	fa02 f606 	lsl.w	r6, r2, r6
 800b3a4:	421e      	tst	r6, r3
 800b3a6:	d13a      	bne.n	800b41e <__gethex+0x3fe>
 800b3a8:	f045 0520 	orr.w	r5, r5, #32
 800b3ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b3ae:	601c      	str	r4, [r3, #0]
 800b3b0:	9b02      	ldr	r3, [sp, #8]
 800b3b2:	601f      	str	r7, [r3, #0]
 800b3b4:	e6b0      	b.n	800b118 <__gethex+0xf8>
 800b3b6:	4299      	cmp	r1, r3
 800b3b8:	f843 cc04 	str.w	ip, [r3, #-4]
 800b3bc:	d8d9      	bhi.n	800b372 <__gethex+0x352>
 800b3be:	68a3      	ldr	r3, [r4, #8]
 800b3c0:	459b      	cmp	fp, r3
 800b3c2:	db17      	blt.n	800b3f4 <__gethex+0x3d4>
 800b3c4:	6861      	ldr	r1, [r4, #4]
 800b3c6:	9801      	ldr	r0, [sp, #4]
 800b3c8:	3101      	adds	r1, #1
 800b3ca:	f000 f9c3 	bl	800b754 <_Balloc>
 800b3ce:	4681      	mov	r9, r0
 800b3d0:	b918      	cbnz	r0, 800b3da <__gethex+0x3ba>
 800b3d2:	4b1a      	ldr	r3, [pc, #104]	@ (800b43c <__gethex+0x41c>)
 800b3d4:	4602      	mov	r2, r0
 800b3d6:	2184      	movs	r1, #132	@ 0x84
 800b3d8:	e6c5      	b.n	800b166 <__gethex+0x146>
 800b3da:	6922      	ldr	r2, [r4, #16]
 800b3dc:	3202      	adds	r2, #2
 800b3de:	f104 010c 	add.w	r1, r4, #12
 800b3e2:	0092      	lsls	r2, r2, #2
 800b3e4:	300c      	adds	r0, #12
 800b3e6:	f7ff fd32 	bl	800ae4e <memcpy>
 800b3ea:	4621      	mov	r1, r4
 800b3ec:	9801      	ldr	r0, [sp, #4]
 800b3ee:	f000 f9f1 	bl	800b7d4 <_Bfree>
 800b3f2:	464c      	mov	r4, r9
 800b3f4:	6923      	ldr	r3, [r4, #16]
 800b3f6:	1c5a      	adds	r2, r3, #1
 800b3f8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b3fc:	6122      	str	r2, [r4, #16]
 800b3fe:	2201      	movs	r2, #1
 800b400:	615a      	str	r2, [r3, #20]
 800b402:	e7be      	b.n	800b382 <__gethex+0x362>
 800b404:	6922      	ldr	r2, [r4, #16]
 800b406:	455a      	cmp	r2, fp
 800b408:	dd0b      	ble.n	800b422 <__gethex+0x402>
 800b40a:	2101      	movs	r1, #1
 800b40c:	4620      	mov	r0, r4
 800b40e:	f7ff fd9f 	bl	800af50 <rshift>
 800b412:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b416:	3701      	adds	r7, #1
 800b418:	42bb      	cmp	r3, r7
 800b41a:	f6ff aee0 	blt.w	800b1de <__gethex+0x1be>
 800b41e:	2501      	movs	r5, #1
 800b420:	e7c2      	b.n	800b3a8 <__gethex+0x388>
 800b422:	f016 061f 	ands.w	r6, r6, #31
 800b426:	d0fa      	beq.n	800b41e <__gethex+0x3fe>
 800b428:	4453      	add	r3, sl
 800b42a:	f1c6 0620 	rsb	r6, r6, #32
 800b42e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b432:	f000 fa81 	bl	800b938 <__hi0bits>
 800b436:	42b0      	cmp	r0, r6
 800b438:	dbe7      	blt.n	800b40a <__gethex+0x3ea>
 800b43a:	e7f0      	b.n	800b41e <__gethex+0x3fe>
 800b43c:	0800d08d 	.word	0x0800d08d

0800b440 <L_shift>:
 800b440:	f1c2 0208 	rsb	r2, r2, #8
 800b444:	0092      	lsls	r2, r2, #2
 800b446:	b570      	push	{r4, r5, r6, lr}
 800b448:	f1c2 0620 	rsb	r6, r2, #32
 800b44c:	6843      	ldr	r3, [r0, #4]
 800b44e:	6804      	ldr	r4, [r0, #0]
 800b450:	fa03 f506 	lsl.w	r5, r3, r6
 800b454:	432c      	orrs	r4, r5
 800b456:	40d3      	lsrs	r3, r2
 800b458:	6004      	str	r4, [r0, #0]
 800b45a:	f840 3f04 	str.w	r3, [r0, #4]!
 800b45e:	4288      	cmp	r0, r1
 800b460:	d3f4      	bcc.n	800b44c <L_shift+0xc>
 800b462:	bd70      	pop	{r4, r5, r6, pc}

0800b464 <__match>:
 800b464:	b530      	push	{r4, r5, lr}
 800b466:	6803      	ldr	r3, [r0, #0]
 800b468:	3301      	adds	r3, #1
 800b46a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b46e:	b914      	cbnz	r4, 800b476 <__match+0x12>
 800b470:	6003      	str	r3, [r0, #0]
 800b472:	2001      	movs	r0, #1
 800b474:	bd30      	pop	{r4, r5, pc}
 800b476:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b47a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b47e:	2d19      	cmp	r5, #25
 800b480:	bf98      	it	ls
 800b482:	3220      	addls	r2, #32
 800b484:	42a2      	cmp	r2, r4
 800b486:	d0f0      	beq.n	800b46a <__match+0x6>
 800b488:	2000      	movs	r0, #0
 800b48a:	e7f3      	b.n	800b474 <__match+0x10>

0800b48c <__hexnan>:
 800b48c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b490:	680b      	ldr	r3, [r1, #0]
 800b492:	6801      	ldr	r1, [r0, #0]
 800b494:	115e      	asrs	r6, r3, #5
 800b496:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b49a:	f013 031f 	ands.w	r3, r3, #31
 800b49e:	b087      	sub	sp, #28
 800b4a0:	bf18      	it	ne
 800b4a2:	3604      	addne	r6, #4
 800b4a4:	2500      	movs	r5, #0
 800b4a6:	1f37      	subs	r7, r6, #4
 800b4a8:	4682      	mov	sl, r0
 800b4aa:	4690      	mov	r8, r2
 800b4ac:	9301      	str	r3, [sp, #4]
 800b4ae:	f846 5c04 	str.w	r5, [r6, #-4]
 800b4b2:	46b9      	mov	r9, r7
 800b4b4:	463c      	mov	r4, r7
 800b4b6:	9502      	str	r5, [sp, #8]
 800b4b8:	46ab      	mov	fp, r5
 800b4ba:	784a      	ldrb	r2, [r1, #1]
 800b4bc:	1c4b      	adds	r3, r1, #1
 800b4be:	9303      	str	r3, [sp, #12]
 800b4c0:	b342      	cbz	r2, 800b514 <__hexnan+0x88>
 800b4c2:	4610      	mov	r0, r2
 800b4c4:	9105      	str	r1, [sp, #20]
 800b4c6:	9204      	str	r2, [sp, #16]
 800b4c8:	f7ff fd94 	bl	800aff4 <__hexdig_fun>
 800b4cc:	2800      	cmp	r0, #0
 800b4ce:	d151      	bne.n	800b574 <__hexnan+0xe8>
 800b4d0:	9a04      	ldr	r2, [sp, #16]
 800b4d2:	9905      	ldr	r1, [sp, #20]
 800b4d4:	2a20      	cmp	r2, #32
 800b4d6:	d818      	bhi.n	800b50a <__hexnan+0x7e>
 800b4d8:	9b02      	ldr	r3, [sp, #8]
 800b4da:	459b      	cmp	fp, r3
 800b4dc:	dd13      	ble.n	800b506 <__hexnan+0x7a>
 800b4de:	454c      	cmp	r4, r9
 800b4e0:	d206      	bcs.n	800b4f0 <__hexnan+0x64>
 800b4e2:	2d07      	cmp	r5, #7
 800b4e4:	dc04      	bgt.n	800b4f0 <__hexnan+0x64>
 800b4e6:	462a      	mov	r2, r5
 800b4e8:	4649      	mov	r1, r9
 800b4ea:	4620      	mov	r0, r4
 800b4ec:	f7ff ffa8 	bl	800b440 <L_shift>
 800b4f0:	4544      	cmp	r4, r8
 800b4f2:	d952      	bls.n	800b59a <__hexnan+0x10e>
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	f1a4 0904 	sub.w	r9, r4, #4
 800b4fa:	f844 3c04 	str.w	r3, [r4, #-4]
 800b4fe:	f8cd b008 	str.w	fp, [sp, #8]
 800b502:	464c      	mov	r4, r9
 800b504:	461d      	mov	r5, r3
 800b506:	9903      	ldr	r1, [sp, #12]
 800b508:	e7d7      	b.n	800b4ba <__hexnan+0x2e>
 800b50a:	2a29      	cmp	r2, #41	@ 0x29
 800b50c:	d157      	bne.n	800b5be <__hexnan+0x132>
 800b50e:	3102      	adds	r1, #2
 800b510:	f8ca 1000 	str.w	r1, [sl]
 800b514:	f1bb 0f00 	cmp.w	fp, #0
 800b518:	d051      	beq.n	800b5be <__hexnan+0x132>
 800b51a:	454c      	cmp	r4, r9
 800b51c:	d206      	bcs.n	800b52c <__hexnan+0xa0>
 800b51e:	2d07      	cmp	r5, #7
 800b520:	dc04      	bgt.n	800b52c <__hexnan+0xa0>
 800b522:	462a      	mov	r2, r5
 800b524:	4649      	mov	r1, r9
 800b526:	4620      	mov	r0, r4
 800b528:	f7ff ff8a 	bl	800b440 <L_shift>
 800b52c:	4544      	cmp	r4, r8
 800b52e:	d936      	bls.n	800b59e <__hexnan+0x112>
 800b530:	f1a8 0204 	sub.w	r2, r8, #4
 800b534:	4623      	mov	r3, r4
 800b536:	f853 1b04 	ldr.w	r1, [r3], #4
 800b53a:	f842 1f04 	str.w	r1, [r2, #4]!
 800b53e:	429f      	cmp	r7, r3
 800b540:	d2f9      	bcs.n	800b536 <__hexnan+0xaa>
 800b542:	1b3b      	subs	r3, r7, r4
 800b544:	f023 0303 	bic.w	r3, r3, #3
 800b548:	3304      	adds	r3, #4
 800b54a:	3401      	adds	r4, #1
 800b54c:	3e03      	subs	r6, #3
 800b54e:	42b4      	cmp	r4, r6
 800b550:	bf88      	it	hi
 800b552:	2304      	movhi	r3, #4
 800b554:	4443      	add	r3, r8
 800b556:	2200      	movs	r2, #0
 800b558:	f843 2b04 	str.w	r2, [r3], #4
 800b55c:	429f      	cmp	r7, r3
 800b55e:	d2fb      	bcs.n	800b558 <__hexnan+0xcc>
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	b91b      	cbnz	r3, 800b56c <__hexnan+0xe0>
 800b564:	4547      	cmp	r7, r8
 800b566:	d128      	bne.n	800b5ba <__hexnan+0x12e>
 800b568:	2301      	movs	r3, #1
 800b56a:	603b      	str	r3, [r7, #0]
 800b56c:	2005      	movs	r0, #5
 800b56e:	b007      	add	sp, #28
 800b570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b574:	3501      	adds	r5, #1
 800b576:	2d08      	cmp	r5, #8
 800b578:	f10b 0b01 	add.w	fp, fp, #1
 800b57c:	dd06      	ble.n	800b58c <__hexnan+0x100>
 800b57e:	4544      	cmp	r4, r8
 800b580:	d9c1      	bls.n	800b506 <__hexnan+0x7a>
 800b582:	2300      	movs	r3, #0
 800b584:	f844 3c04 	str.w	r3, [r4, #-4]
 800b588:	2501      	movs	r5, #1
 800b58a:	3c04      	subs	r4, #4
 800b58c:	6822      	ldr	r2, [r4, #0]
 800b58e:	f000 000f 	and.w	r0, r0, #15
 800b592:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b596:	6020      	str	r0, [r4, #0]
 800b598:	e7b5      	b.n	800b506 <__hexnan+0x7a>
 800b59a:	2508      	movs	r5, #8
 800b59c:	e7b3      	b.n	800b506 <__hexnan+0x7a>
 800b59e:	9b01      	ldr	r3, [sp, #4]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d0dd      	beq.n	800b560 <__hexnan+0xd4>
 800b5a4:	f1c3 0320 	rsb	r3, r3, #32
 800b5a8:	f04f 32ff 	mov.w	r2, #4294967295
 800b5ac:	40da      	lsrs	r2, r3
 800b5ae:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b5b2:	4013      	ands	r3, r2
 800b5b4:	f846 3c04 	str.w	r3, [r6, #-4]
 800b5b8:	e7d2      	b.n	800b560 <__hexnan+0xd4>
 800b5ba:	3f04      	subs	r7, #4
 800b5bc:	e7d0      	b.n	800b560 <__hexnan+0xd4>
 800b5be:	2004      	movs	r0, #4
 800b5c0:	e7d5      	b.n	800b56e <__hexnan+0xe2>
	...

0800b5c4 <malloc>:
 800b5c4:	4b02      	ldr	r3, [pc, #8]	@ (800b5d0 <malloc+0xc>)
 800b5c6:	4601      	mov	r1, r0
 800b5c8:	6818      	ldr	r0, [r3, #0]
 800b5ca:	f000 b825 	b.w	800b618 <_malloc_r>
 800b5ce:	bf00      	nop
 800b5d0:	20000188 	.word	0x20000188

0800b5d4 <sbrk_aligned>:
 800b5d4:	b570      	push	{r4, r5, r6, lr}
 800b5d6:	4e0f      	ldr	r6, [pc, #60]	@ (800b614 <sbrk_aligned+0x40>)
 800b5d8:	460c      	mov	r4, r1
 800b5da:	6831      	ldr	r1, [r6, #0]
 800b5dc:	4605      	mov	r5, r0
 800b5de:	b911      	cbnz	r1, 800b5e6 <sbrk_aligned+0x12>
 800b5e0:	f001 f934 	bl	800c84c <_sbrk_r>
 800b5e4:	6030      	str	r0, [r6, #0]
 800b5e6:	4621      	mov	r1, r4
 800b5e8:	4628      	mov	r0, r5
 800b5ea:	f001 f92f 	bl	800c84c <_sbrk_r>
 800b5ee:	1c43      	adds	r3, r0, #1
 800b5f0:	d103      	bne.n	800b5fa <sbrk_aligned+0x26>
 800b5f2:	f04f 34ff 	mov.w	r4, #4294967295
 800b5f6:	4620      	mov	r0, r4
 800b5f8:	bd70      	pop	{r4, r5, r6, pc}
 800b5fa:	1cc4      	adds	r4, r0, #3
 800b5fc:	f024 0403 	bic.w	r4, r4, #3
 800b600:	42a0      	cmp	r0, r4
 800b602:	d0f8      	beq.n	800b5f6 <sbrk_aligned+0x22>
 800b604:	1a21      	subs	r1, r4, r0
 800b606:	4628      	mov	r0, r5
 800b608:	f001 f920 	bl	800c84c <_sbrk_r>
 800b60c:	3001      	adds	r0, #1
 800b60e:	d1f2      	bne.n	800b5f6 <sbrk_aligned+0x22>
 800b610:	e7ef      	b.n	800b5f2 <sbrk_aligned+0x1e>
 800b612:	bf00      	nop
 800b614:	200020e0 	.word	0x200020e0

0800b618 <_malloc_r>:
 800b618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b61c:	1ccd      	adds	r5, r1, #3
 800b61e:	f025 0503 	bic.w	r5, r5, #3
 800b622:	3508      	adds	r5, #8
 800b624:	2d0c      	cmp	r5, #12
 800b626:	bf38      	it	cc
 800b628:	250c      	movcc	r5, #12
 800b62a:	2d00      	cmp	r5, #0
 800b62c:	4606      	mov	r6, r0
 800b62e:	db01      	blt.n	800b634 <_malloc_r+0x1c>
 800b630:	42a9      	cmp	r1, r5
 800b632:	d904      	bls.n	800b63e <_malloc_r+0x26>
 800b634:	230c      	movs	r3, #12
 800b636:	6033      	str	r3, [r6, #0]
 800b638:	2000      	movs	r0, #0
 800b63a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b63e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b714 <_malloc_r+0xfc>
 800b642:	f000 f87b 	bl	800b73c <__malloc_lock>
 800b646:	f8d8 3000 	ldr.w	r3, [r8]
 800b64a:	461c      	mov	r4, r3
 800b64c:	bb44      	cbnz	r4, 800b6a0 <_malloc_r+0x88>
 800b64e:	4629      	mov	r1, r5
 800b650:	4630      	mov	r0, r6
 800b652:	f7ff ffbf 	bl	800b5d4 <sbrk_aligned>
 800b656:	1c43      	adds	r3, r0, #1
 800b658:	4604      	mov	r4, r0
 800b65a:	d158      	bne.n	800b70e <_malloc_r+0xf6>
 800b65c:	f8d8 4000 	ldr.w	r4, [r8]
 800b660:	4627      	mov	r7, r4
 800b662:	2f00      	cmp	r7, #0
 800b664:	d143      	bne.n	800b6ee <_malloc_r+0xd6>
 800b666:	2c00      	cmp	r4, #0
 800b668:	d04b      	beq.n	800b702 <_malloc_r+0xea>
 800b66a:	6823      	ldr	r3, [r4, #0]
 800b66c:	4639      	mov	r1, r7
 800b66e:	4630      	mov	r0, r6
 800b670:	eb04 0903 	add.w	r9, r4, r3
 800b674:	f001 f8ea 	bl	800c84c <_sbrk_r>
 800b678:	4581      	cmp	r9, r0
 800b67a:	d142      	bne.n	800b702 <_malloc_r+0xea>
 800b67c:	6821      	ldr	r1, [r4, #0]
 800b67e:	1a6d      	subs	r5, r5, r1
 800b680:	4629      	mov	r1, r5
 800b682:	4630      	mov	r0, r6
 800b684:	f7ff ffa6 	bl	800b5d4 <sbrk_aligned>
 800b688:	3001      	adds	r0, #1
 800b68a:	d03a      	beq.n	800b702 <_malloc_r+0xea>
 800b68c:	6823      	ldr	r3, [r4, #0]
 800b68e:	442b      	add	r3, r5
 800b690:	6023      	str	r3, [r4, #0]
 800b692:	f8d8 3000 	ldr.w	r3, [r8]
 800b696:	685a      	ldr	r2, [r3, #4]
 800b698:	bb62      	cbnz	r2, 800b6f4 <_malloc_r+0xdc>
 800b69a:	f8c8 7000 	str.w	r7, [r8]
 800b69e:	e00f      	b.n	800b6c0 <_malloc_r+0xa8>
 800b6a0:	6822      	ldr	r2, [r4, #0]
 800b6a2:	1b52      	subs	r2, r2, r5
 800b6a4:	d420      	bmi.n	800b6e8 <_malloc_r+0xd0>
 800b6a6:	2a0b      	cmp	r2, #11
 800b6a8:	d917      	bls.n	800b6da <_malloc_r+0xc2>
 800b6aa:	1961      	adds	r1, r4, r5
 800b6ac:	42a3      	cmp	r3, r4
 800b6ae:	6025      	str	r5, [r4, #0]
 800b6b0:	bf18      	it	ne
 800b6b2:	6059      	strne	r1, [r3, #4]
 800b6b4:	6863      	ldr	r3, [r4, #4]
 800b6b6:	bf08      	it	eq
 800b6b8:	f8c8 1000 	streq.w	r1, [r8]
 800b6bc:	5162      	str	r2, [r4, r5]
 800b6be:	604b      	str	r3, [r1, #4]
 800b6c0:	4630      	mov	r0, r6
 800b6c2:	f000 f841 	bl	800b748 <__malloc_unlock>
 800b6c6:	f104 000b 	add.w	r0, r4, #11
 800b6ca:	1d23      	adds	r3, r4, #4
 800b6cc:	f020 0007 	bic.w	r0, r0, #7
 800b6d0:	1ac2      	subs	r2, r0, r3
 800b6d2:	bf1c      	itt	ne
 800b6d4:	1a1b      	subne	r3, r3, r0
 800b6d6:	50a3      	strne	r3, [r4, r2]
 800b6d8:	e7af      	b.n	800b63a <_malloc_r+0x22>
 800b6da:	6862      	ldr	r2, [r4, #4]
 800b6dc:	42a3      	cmp	r3, r4
 800b6de:	bf0c      	ite	eq
 800b6e0:	f8c8 2000 	streq.w	r2, [r8]
 800b6e4:	605a      	strne	r2, [r3, #4]
 800b6e6:	e7eb      	b.n	800b6c0 <_malloc_r+0xa8>
 800b6e8:	4623      	mov	r3, r4
 800b6ea:	6864      	ldr	r4, [r4, #4]
 800b6ec:	e7ae      	b.n	800b64c <_malloc_r+0x34>
 800b6ee:	463c      	mov	r4, r7
 800b6f0:	687f      	ldr	r7, [r7, #4]
 800b6f2:	e7b6      	b.n	800b662 <_malloc_r+0x4a>
 800b6f4:	461a      	mov	r2, r3
 800b6f6:	685b      	ldr	r3, [r3, #4]
 800b6f8:	42a3      	cmp	r3, r4
 800b6fa:	d1fb      	bne.n	800b6f4 <_malloc_r+0xdc>
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	6053      	str	r3, [r2, #4]
 800b700:	e7de      	b.n	800b6c0 <_malloc_r+0xa8>
 800b702:	230c      	movs	r3, #12
 800b704:	6033      	str	r3, [r6, #0]
 800b706:	4630      	mov	r0, r6
 800b708:	f000 f81e 	bl	800b748 <__malloc_unlock>
 800b70c:	e794      	b.n	800b638 <_malloc_r+0x20>
 800b70e:	6005      	str	r5, [r0, #0]
 800b710:	e7d6      	b.n	800b6c0 <_malloc_r+0xa8>
 800b712:	bf00      	nop
 800b714:	200020e4 	.word	0x200020e4

0800b718 <__ascii_mbtowc>:
 800b718:	b082      	sub	sp, #8
 800b71a:	b901      	cbnz	r1, 800b71e <__ascii_mbtowc+0x6>
 800b71c:	a901      	add	r1, sp, #4
 800b71e:	b142      	cbz	r2, 800b732 <__ascii_mbtowc+0x1a>
 800b720:	b14b      	cbz	r3, 800b736 <__ascii_mbtowc+0x1e>
 800b722:	7813      	ldrb	r3, [r2, #0]
 800b724:	600b      	str	r3, [r1, #0]
 800b726:	7812      	ldrb	r2, [r2, #0]
 800b728:	1e10      	subs	r0, r2, #0
 800b72a:	bf18      	it	ne
 800b72c:	2001      	movne	r0, #1
 800b72e:	b002      	add	sp, #8
 800b730:	4770      	bx	lr
 800b732:	4610      	mov	r0, r2
 800b734:	e7fb      	b.n	800b72e <__ascii_mbtowc+0x16>
 800b736:	f06f 0001 	mvn.w	r0, #1
 800b73a:	e7f8      	b.n	800b72e <__ascii_mbtowc+0x16>

0800b73c <__malloc_lock>:
 800b73c:	4801      	ldr	r0, [pc, #4]	@ (800b744 <__malloc_lock+0x8>)
 800b73e:	f7ff bb84 	b.w	800ae4a <__retarget_lock_acquire_recursive>
 800b742:	bf00      	nop
 800b744:	200020dc 	.word	0x200020dc

0800b748 <__malloc_unlock>:
 800b748:	4801      	ldr	r0, [pc, #4]	@ (800b750 <__malloc_unlock+0x8>)
 800b74a:	f7ff bb7f 	b.w	800ae4c <__retarget_lock_release_recursive>
 800b74e:	bf00      	nop
 800b750:	200020dc 	.word	0x200020dc

0800b754 <_Balloc>:
 800b754:	b570      	push	{r4, r5, r6, lr}
 800b756:	69c6      	ldr	r6, [r0, #28]
 800b758:	4604      	mov	r4, r0
 800b75a:	460d      	mov	r5, r1
 800b75c:	b976      	cbnz	r6, 800b77c <_Balloc+0x28>
 800b75e:	2010      	movs	r0, #16
 800b760:	f7ff ff30 	bl	800b5c4 <malloc>
 800b764:	4602      	mov	r2, r0
 800b766:	61e0      	str	r0, [r4, #28]
 800b768:	b920      	cbnz	r0, 800b774 <_Balloc+0x20>
 800b76a:	4b18      	ldr	r3, [pc, #96]	@ (800b7cc <_Balloc+0x78>)
 800b76c:	4818      	ldr	r0, [pc, #96]	@ (800b7d0 <_Balloc+0x7c>)
 800b76e:	216b      	movs	r1, #107	@ 0x6b
 800b770:	f7ff fb86 	bl	800ae80 <__assert_func>
 800b774:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b778:	6006      	str	r6, [r0, #0]
 800b77a:	60c6      	str	r6, [r0, #12]
 800b77c:	69e6      	ldr	r6, [r4, #28]
 800b77e:	68f3      	ldr	r3, [r6, #12]
 800b780:	b183      	cbz	r3, 800b7a4 <_Balloc+0x50>
 800b782:	69e3      	ldr	r3, [r4, #28]
 800b784:	68db      	ldr	r3, [r3, #12]
 800b786:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b78a:	b9b8      	cbnz	r0, 800b7bc <_Balloc+0x68>
 800b78c:	2101      	movs	r1, #1
 800b78e:	fa01 f605 	lsl.w	r6, r1, r5
 800b792:	1d72      	adds	r2, r6, #5
 800b794:	0092      	lsls	r2, r2, #2
 800b796:	4620      	mov	r0, r4
 800b798:	f001 f86f 	bl	800c87a <_calloc_r>
 800b79c:	b160      	cbz	r0, 800b7b8 <_Balloc+0x64>
 800b79e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b7a2:	e00e      	b.n	800b7c2 <_Balloc+0x6e>
 800b7a4:	2221      	movs	r2, #33	@ 0x21
 800b7a6:	2104      	movs	r1, #4
 800b7a8:	4620      	mov	r0, r4
 800b7aa:	f001 f866 	bl	800c87a <_calloc_r>
 800b7ae:	69e3      	ldr	r3, [r4, #28]
 800b7b0:	60f0      	str	r0, [r6, #12]
 800b7b2:	68db      	ldr	r3, [r3, #12]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d1e4      	bne.n	800b782 <_Balloc+0x2e>
 800b7b8:	2000      	movs	r0, #0
 800b7ba:	bd70      	pop	{r4, r5, r6, pc}
 800b7bc:	6802      	ldr	r2, [r0, #0]
 800b7be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b7c8:	e7f7      	b.n	800b7ba <_Balloc+0x66>
 800b7ca:	bf00      	nop
 800b7cc:	0800cfd8 	.word	0x0800cfd8
 800b7d0:	0800d0fe 	.word	0x0800d0fe

0800b7d4 <_Bfree>:
 800b7d4:	b570      	push	{r4, r5, r6, lr}
 800b7d6:	69c6      	ldr	r6, [r0, #28]
 800b7d8:	4605      	mov	r5, r0
 800b7da:	460c      	mov	r4, r1
 800b7dc:	b976      	cbnz	r6, 800b7fc <_Bfree+0x28>
 800b7de:	2010      	movs	r0, #16
 800b7e0:	f7ff fef0 	bl	800b5c4 <malloc>
 800b7e4:	4602      	mov	r2, r0
 800b7e6:	61e8      	str	r0, [r5, #28]
 800b7e8:	b920      	cbnz	r0, 800b7f4 <_Bfree+0x20>
 800b7ea:	4b09      	ldr	r3, [pc, #36]	@ (800b810 <_Bfree+0x3c>)
 800b7ec:	4809      	ldr	r0, [pc, #36]	@ (800b814 <_Bfree+0x40>)
 800b7ee:	218f      	movs	r1, #143	@ 0x8f
 800b7f0:	f7ff fb46 	bl	800ae80 <__assert_func>
 800b7f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b7f8:	6006      	str	r6, [r0, #0]
 800b7fa:	60c6      	str	r6, [r0, #12]
 800b7fc:	b13c      	cbz	r4, 800b80e <_Bfree+0x3a>
 800b7fe:	69eb      	ldr	r3, [r5, #28]
 800b800:	6862      	ldr	r2, [r4, #4]
 800b802:	68db      	ldr	r3, [r3, #12]
 800b804:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b808:	6021      	str	r1, [r4, #0]
 800b80a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b80e:	bd70      	pop	{r4, r5, r6, pc}
 800b810:	0800cfd8 	.word	0x0800cfd8
 800b814:	0800d0fe 	.word	0x0800d0fe

0800b818 <__multadd>:
 800b818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b81c:	690d      	ldr	r5, [r1, #16]
 800b81e:	4607      	mov	r7, r0
 800b820:	460c      	mov	r4, r1
 800b822:	461e      	mov	r6, r3
 800b824:	f101 0c14 	add.w	ip, r1, #20
 800b828:	2000      	movs	r0, #0
 800b82a:	f8dc 3000 	ldr.w	r3, [ip]
 800b82e:	b299      	uxth	r1, r3
 800b830:	fb02 6101 	mla	r1, r2, r1, r6
 800b834:	0c1e      	lsrs	r6, r3, #16
 800b836:	0c0b      	lsrs	r3, r1, #16
 800b838:	fb02 3306 	mla	r3, r2, r6, r3
 800b83c:	b289      	uxth	r1, r1
 800b83e:	3001      	adds	r0, #1
 800b840:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b844:	4285      	cmp	r5, r0
 800b846:	f84c 1b04 	str.w	r1, [ip], #4
 800b84a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b84e:	dcec      	bgt.n	800b82a <__multadd+0x12>
 800b850:	b30e      	cbz	r6, 800b896 <__multadd+0x7e>
 800b852:	68a3      	ldr	r3, [r4, #8]
 800b854:	42ab      	cmp	r3, r5
 800b856:	dc19      	bgt.n	800b88c <__multadd+0x74>
 800b858:	6861      	ldr	r1, [r4, #4]
 800b85a:	4638      	mov	r0, r7
 800b85c:	3101      	adds	r1, #1
 800b85e:	f7ff ff79 	bl	800b754 <_Balloc>
 800b862:	4680      	mov	r8, r0
 800b864:	b928      	cbnz	r0, 800b872 <__multadd+0x5a>
 800b866:	4602      	mov	r2, r0
 800b868:	4b0c      	ldr	r3, [pc, #48]	@ (800b89c <__multadd+0x84>)
 800b86a:	480d      	ldr	r0, [pc, #52]	@ (800b8a0 <__multadd+0x88>)
 800b86c:	21ba      	movs	r1, #186	@ 0xba
 800b86e:	f7ff fb07 	bl	800ae80 <__assert_func>
 800b872:	6922      	ldr	r2, [r4, #16]
 800b874:	3202      	adds	r2, #2
 800b876:	f104 010c 	add.w	r1, r4, #12
 800b87a:	0092      	lsls	r2, r2, #2
 800b87c:	300c      	adds	r0, #12
 800b87e:	f7ff fae6 	bl	800ae4e <memcpy>
 800b882:	4621      	mov	r1, r4
 800b884:	4638      	mov	r0, r7
 800b886:	f7ff ffa5 	bl	800b7d4 <_Bfree>
 800b88a:	4644      	mov	r4, r8
 800b88c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b890:	3501      	adds	r5, #1
 800b892:	615e      	str	r6, [r3, #20]
 800b894:	6125      	str	r5, [r4, #16]
 800b896:	4620      	mov	r0, r4
 800b898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b89c:	0800d08d 	.word	0x0800d08d
 800b8a0:	0800d0fe 	.word	0x0800d0fe

0800b8a4 <__s2b>:
 800b8a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8a8:	460c      	mov	r4, r1
 800b8aa:	4615      	mov	r5, r2
 800b8ac:	461f      	mov	r7, r3
 800b8ae:	2209      	movs	r2, #9
 800b8b0:	3308      	adds	r3, #8
 800b8b2:	4606      	mov	r6, r0
 800b8b4:	fb93 f3f2 	sdiv	r3, r3, r2
 800b8b8:	2100      	movs	r1, #0
 800b8ba:	2201      	movs	r2, #1
 800b8bc:	429a      	cmp	r2, r3
 800b8be:	db09      	blt.n	800b8d4 <__s2b+0x30>
 800b8c0:	4630      	mov	r0, r6
 800b8c2:	f7ff ff47 	bl	800b754 <_Balloc>
 800b8c6:	b940      	cbnz	r0, 800b8da <__s2b+0x36>
 800b8c8:	4602      	mov	r2, r0
 800b8ca:	4b19      	ldr	r3, [pc, #100]	@ (800b930 <__s2b+0x8c>)
 800b8cc:	4819      	ldr	r0, [pc, #100]	@ (800b934 <__s2b+0x90>)
 800b8ce:	21d3      	movs	r1, #211	@ 0xd3
 800b8d0:	f7ff fad6 	bl	800ae80 <__assert_func>
 800b8d4:	0052      	lsls	r2, r2, #1
 800b8d6:	3101      	adds	r1, #1
 800b8d8:	e7f0      	b.n	800b8bc <__s2b+0x18>
 800b8da:	9b08      	ldr	r3, [sp, #32]
 800b8dc:	6143      	str	r3, [r0, #20]
 800b8de:	2d09      	cmp	r5, #9
 800b8e0:	f04f 0301 	mov.w	r3, #1
 800b8e4:	6103      	str	r3, [r0, #16]
 800b8e6:	dd16      	ble.n	800b916 <__s2b+0x72>
 800b8e8:	f104 0909 	add.w	r9, r4, #9
 800b8ec:	46c8      	mov	r8, r9
 800b8ee:	442c      	add	r4, r5
 800b8f0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b8f4:	4601      	mov	r1, r0
 800b8f6:	3b30      	subs	r3, #48	@ 0x30
 800b8f8:	220a      	movs	r2, #10
 800b8fa:	4630      	mov	r0, r6
 800b8fc:	f7ff ff8c 	bl	800b818 <__multadd>
 800b900:	45a0      	cmp	r8, r4
 800b902:	d1f5      	bne.n	800b8f0 <__s2b+0x4c>
 800b904:	f1a5 0408 	sub.w	r4, r5, #8
 800b908:	444c      	add	r4, r9
 800b90a:	1b2d      	subs	r5, r5, r4
 800b90c:	1963      	adds	r3, r4, r5
 800b90e:	42bb      	cmp	r3, r7
 800b910:	db04      	blt.n	800b91c <__s2b+0x78>
 800b912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b916:	340a      	adds	r4, #10
 800b918:	2509      	movs	r5, #9
 800b91a:	e7f6      	b.n	800b90a <__s2b+0x66>
 800b91c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b920:	4601      	mov	r1, r0
 800b922:	3b30      	subs	r3, #48	@ 0x30
 800b924:	220a      	movs	r2, #10
 800b926:	4630      	mov	r0, r6
 800b928:	f7ff ff76 	bl	800b818 <__multadd>
 800b92c:	e7ee      	b.n	800b90c <__s2b+0x68>
 800b92e:	bf00      	nop
 800b930:	0800d08d 	.word	0x0800d08d
 800b934:	0800d0fe 	.word	0x0800d0fe

0800b938 <__hi0bits>:
 800b938:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b93c:	4603      	mov	r3, r0
 800b93e:	bf36      	itet	cc
 800b940:	0403      	lslcc	r3, r0, #16
 800b942:	2000      	movcs	r0, #0
 800b944:	2010      	movcc	r0, #16
 800b946:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b94a:	bf3c      	itt	cc
 800b94c:	021b      	lslcc	r3, r3, #8
 800b94e:	3008      	addcc	r0, #8
 800b950:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b954:	bf3c      	itt	cc
 800b956:	011b      	lslcc	r3, r3, #4
 800b958:	3004      	addcc	r0, #4
 800b95a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b95e:	bf3c      	itt	cc
 800b960:	009b      	lslcc	r3, r3, #2
 800b962:	3002      	addcc	r0, #2
 800b964:	2b00      	cmp	r3, #0
 800b966:	db05      	blt.n	800b974 <__hi0bits+0x3c>
 800b968:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b96c:	f100 0001 	add.w	r0, r0, #1
 800b970:	bf08      	it	eq
 800b972:	2020      	moveq	r0, #32
 800b974:	4770      	bx	lr

0800b976 <__lo0bits>:
 800b976:	6803      	ldr	r3, [r0, #0]
 800b978:	4602      	mov	r2, r0
 800b97a:	f013 0007 	ands.w	r0, r3, #7
 800b97e:	d00b      	beq.n	800b998 <__lo0bits+0x22>
 800b980:	07d9      	lsls	r1, r3, #31
 800b982:	d421      	bmi.n	800b9c8 <__lo0bits+0x52>
 800b984:	0798      	lsls	r0, r3, #30
 800b986:	bf49      	itett	mi
 800b988:	085b      	lsrmi	r3, r3, #1
 800b98a:	089b      	lsrpl	r3, r3, #2
 800b98c:	2001      	movmi	r0, #1
 800b98e:	6013      	strmi	r3, [r2, #0]
 800b990:	bf5c      	itt	pl
 800b992:	6013      	strpl	r3, [r2, #0]
 800b994:	2002      	movpl	r0, #2
 800b996:	4770      	bx	lr
 800b998:	b299      	uxth	r1, r3
 800b99a:	b909      	cbnz	r1, 800b9a0 <__lo0bits+0x2a>
 800b99c:	0c1b      	lsrs	r3, r3, #16
 800b99e:	2010      	movs	r0, #16
 800b9a0:	b2d9      	uxtb	r1, r3
 800b9a2:	b909      	cbnz	r1, 800b9a8 <__lo0bits+0x32>
 800b9a4:	3008      	adds	r0, #8
 800b9a6:	0a1b      	lsrs	r3, r3, #8
 800b9a8:	0719      	lsls	r1, r3, #28
 800b9aa:	bf04      	itt	eq
 800b9ac:	091b      	lsreq	r3, r3, #4
 800b9ae:	3004      	addeq	r0, #4
 800b9b0:	0799      	lsls	r1, r3, #30
 800b9b2:	bf04      	itt	eq
 800b9b4:	089b      	lsreq	r3, r3, #2
 800b9b6:	3002      	addeq	r0, #2
 800b9b8:	07d9      	lsls	r1, r3, #31
 800b9ba:	d403      	bmi.n	800b9c4 <__lo0bits+0x4e>
 800b9bc:	085b      	lsrs	r3, r3, #1
 800b9be:	f100 0001 	add.w	r0, r0, #1
 800b9c2:	d003      	beq.n	800b9cc <__lo0bits+0x56>
 800b9c4:	6013      	str	r3, [r2, #0]
 800b9c6:	4770      	bx	lr
 800b9c8:	2000      	movs	r0, #0
 800b9ca:	4770      	bx	lr
 800b9cc:	2020      	movs	r0, #32
 800b9ce:	4770      	bx	lr

0800b9d0 <__i2b>:
 800b9d0:	b510      	push	{r4, lr}
 800b9d2:	460c      	mov	r4, r1
 800b9d4:	2101      	movs	r1, #1
 800b9d6:	f7ff febd 	bl	800b754 <_Balloc>
 800b9da:	4602      	mov	r2, r0
 800b9dc:	b928      	cbnz	r0, 800b9ea <__i2b+0x1a>
 800b9de:	4b05      	ldr	r3, [pc, #20]	@ (800b9f4 <__i2b+0x24>)
 800b9e0:	4805      	ldr	r0, [pc, #20]	@ (800b9f8 <__i2b+0x28>)
 800b9e2:	f240 1145 	movw	r1, #325	@ 0x145
 800b9e6:	f7ff fa4b 	bl	800ae80 <__assert_func>
 800b9ea:	2301      	movs	r3, #1
 800b9ec:	6144      	str	r4, [r0, #20]
 800b9ee:	6103      	str	r3, [r0, #16]
 800b9f0:	bd10      	pop	{r4, pc}
 800b9f2:	bf00      	nop
 800b9f4:	0800d08d 	.word	0x0800d08d
 800b9f8:	0800d0fe 	.word	0x0800d0fe

0800b9fc <__multiply>:
 800b9fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba00:	4614      	mov	r4, r2
 800ba02:	690a      	ldr	r2, [r1, #16]
 800ba04:	6923      	ldr	r3, [r4, #16]
 800ba06:	429a      	cmp	r2, r3
 800ba08:	bfa8      	it	ge
 800ba0a:	4623      	movge	r3, r4
 800ba0c:	460f      	mov	r7, r1
 800ba0e:	bfa4      	itt	ge
 800ba10:	460c      	movge	r4, r1
 800ba12:	461f      	movge	r7, r3
 800ba14:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ba18:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ba1c:	68a3      	ldr	r3, [r4, #8]
 800ba1e:	6861      	ldr	r1, [r4, #4]
 800ba20:	eb0a 0609 	add.w	r6, sl, r9
 800ba24:	42b3      	cmp	r3, r6
 800ba26:	b085      	sub	sp, #20
 800ba28:	bfb8      	it	lt
 800ba2a:	3101      	addlt	r1, #1
 800ba2c:	f7ff fe92 	bl	800b754 <_Balloc>
 800ba30:	b930      	cbnz	r0, 800ba40 <__multiply+0x44>
 800ba32:	4602      	mov	r2, r0
 800ba34:	4b44      	ldr	r3, [pc, #272]	@ (800bb48 <__multiply+0x14c>)
 800ba36:	4845      	ldr	r0, [pc, #276]	@ (800bb4c <__multiply+0x150>)
 800ba38:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ba3c:	f7ff fa20 	bl	800ae80 <__assert_func>
 800ba40:	f100 0514 	add.w	r5, r0, #20
 800ba44:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ba48:	462b      	mov	r3, r5
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	4543      	cmp	r3, r8
 800ba4e:	d321      	bcc.n	800ba94 <__multiply+0x98>
 800ba50:	f107 0114 	add.w	r1, r7, #20
 800ba54:	f104 0214 	add.w	r2, r4, #20
 800ba58:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ba5c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ba60:	9302      	str	r3, [sp, #8]
 800ba62:	1b13      	subs	r3, r2, r4
 800ba64:	3b15      	subs	r3, #21
 800ba66:	f023 0303 	bic.w	r3, r3, #3
 800ba6a:	3304      	adds	r3, #4
 800ba6c:	f104 0715 	add.w	r7, r4, #21
 800ba70:	42ba      	cmp	r2, r7
 800ba72:	bf38      	it	cc
 800ba74:	2304      	movcc	r3, #4
 800ba76:	9301      	str	r3, [sp, #4]
 800ba78:	9b02      	ldr	r3, [sp, #8]
 800ba7a:	9103      	str	r1, [sp, #12]
 800ba7c:	428b      	cmp	r3, r1
 800ba7e:	d80c      	bhi.n	800ba9a <__multiply+0x9e>
 800ba80:	2e00      	cmp	r6, #0
 800ba82:	dd03      	ble.n	800ba8c <__multiply+0x90>
 800ba84:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d05b      	beq.n	800bb44 <__multiply+0x148>
 800ba8c:	6106      	str	r6, [r0, #16]
 800ba8e:	b005      	add	sp, #20
 800ba90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba94:	f843 2b04 	str.w	r2, [r3], #4
 800ba98:	e7d8      	b.n	800ba4c <__multiply+0x50>
 800ba9a:	f8b1 a000 	ldrh.w	sl, [r1]
 800ba9e:	f1ba 0f00 	cmp.w	sl, #0
 800baa2:	d024      	beq.n	800baee <__multiply+0xf2>
 800baa4:	f104 0e14 	add.w	lr, r4, #20
 800baa8:	46a9      	mov	r9, r5
 800baaa:	f04f 0c00 	mov.w	ip, #0
 800baae:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bab2:	f8d9 3000 	ldr.w	r3, [r9]
 800bab6:	fa1f fb87 	uxth.w	fp, r7
 800baba:	b29b      	uxth	r3, r3
 800babc:	fb0a 330b 	mla	r3, sl, fp, r3
 800bac0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800bac4:	f8d9 7000 	ldr.w	r7, [r9]
 800bac8:	4463      	add	r3, ip
 800baca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bace:	fb0a c70b 	mla	r7, sl, fp, ip
 800bad2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800bad6:	b29b      	uxth	r3, r3
 800bad8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800badc:	4572      	cmp	r2, lr
 800bade:	f849 3b04 	str.w	r3, [r9], #4
 800bae2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bae6:	d8e2      	bhi.n	800baae <__multiply+0xb2>
 800bae8:	9b01      	ldr	r3, [sp, #4]
 800baea:	f845 c003 	str.w	ip, [r5, r3]
 800baee:	9b03      	ldr	r3, [sp, #12]
 800baf0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800baf4:	3104      	adds	r1, #4
 800baf6:	f1b9 0f00 	cmp.w	r9, #0
 800bafa:	d021      	beq.n	800bb40 <__multiply+0x144>
 800bafc:	682b      	ldr	r3, [r5, #0]
 800bafe:	f104 0c14 	add.w	ip, r4, #20
 800bb02:	46ae      	mov	lr, r5
 800bb04:	f04f 0a00 	mov.w	sl, #0
 800bb08:	f8bc b000 	ldrh.w	fp, [ip]
 800bb0c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800bb10:	fb09 770b 	mla	r7, r9, fp, r7
 800bb14:	4457      	add	r7, sl
 800bb16:	b29b      	uxth	r3, r3
 800bb18:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bb1c:	f84e 3b04 	str.w	r3, [lr], #4
 800bb20:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bb24:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bb28:	f8be 3000 	ldrh.w	r3, [lr]
 800bb2c:	fb09 330a 	mla	r3, r9, sl, r3
 800bb30:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800bb34:	4562      	cmp	r2, ip
 800bb36:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bb3a:	d8e5      	bhi.n	800bb08 <__multiply+0x10c>
 800bb3c:	9f01      	ldr	r7, [sp, #4]
 800bb3e:	51eb      	str	r3, [r5, r7]
 800bb40:	3504      	adds	r5, #4
 800bb42:	e799      	b.n	800ba78 <__multiply+0x7c>
 800bb44:	3e01      	subs	r6, #1
 800bb46:	e79b      	b.n	800ba80 <__multiply+0x84>
 800bb48:	0800d08d 	.word	0x0800d08d
 800bb4c:	0800d0fe 	.word	0x0800d0fe

0800bb50 <__pow5mult>:
 800bb50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb54:	4615      	mov	r5, r2
 800bb56:	f012 0203 	ands.w	r2, r2, #3
 800bb5a:	4607      	mov	r7, r0
 800bb5c:	460e      	mov	r6, r1
 800bb5e:	d007      	beq.n	800bb70 <__pow5mult+0x20>
 800bb60:	4c25      	ldr	r4, [pc, #148]	@ (800bbf8 <__pow5mult+0xa8>)
 800bb62:	3a01      	subs	r2, #1
 800bb64:	2300      	movs	r3, #0
 800bb66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bb6a:	f7ff fe55 	bl	800b818 <__multadd>
 800bb6e:	4606      	mov	r6, r0
 800bb70:	10ad      	asrs	r5, r5, #2
 800bb72:	d03d      	beq.n	800bbf0 <__pow5mult+0xa0>
 800bb74:	69fc      	ldr	r4, [r7, #28]
 800bb76:	b97c      	cbnz	r4, 800bb98 <__pow5mult+0x48>
 800bb78:	2010      	movs	r0, #16
 800bb7a:	f7ff fd23 	bl	800b5c4 <malloc>
 800bb7e:	4602      	mov	r2, r0
 800bb80:	61f8      	str	r0, [r7, #28]
 800bb82:	b928      	cbnz	r0, 800bb90 <__pow5mult+0x40>
 800bb84:	4b1d      	ldr	r3, [pc, #116]	@ (800bbfc <__pow5mult+0xac>)
 800bb86:	481e      	ldr	r0, [pc, #120]	@ (800bc00 <__pow5mult+0xb0>)
 800bb88:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bb8c:	f7ff f978 	bl	800ae80 <__assert_func>
 800bb90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bb94:	6004      	str	r4, [r0, #0]
 800bb96:	60c4      	str	r4, [r0, #12]
 800bb98:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bb9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bba0:	b94c      	cbnz	r4, 800bbb6 <__pow5mult+0x66>
 800bba2:	f240 2171 	movw	r1, #625	@ 0x271
 800bba6:	4638      	mov	r0, r7
 800bba8:	f7ff ff12 	bl	800b9d0 <__i2b>
 800bbac:	2300      	movs	r3, #0
 800bbae:	f8c8 0008 	str.w	r0, [r8, #8]
 800bbb2:	4604      	mov	r4, r0
 800bbb4:	6003      	str	r3, [r0, #0]
 800bbb6:	f04f 0900 	mov.w	r9, #0
 800bbba:	07eb      	lsls	r3, r5, #31
 800bbbc:	d50a      	bpl.n	800bbd4 <__pow5mult+0x84>
 800bbbe:	4631      	mov	r1, r6
 800bbc0:	4622      	mov	r2, r4
 800bbc2:	4638      	mov	r0, r7
 800bbc4:	f7ff ff1a 	bl	800b9fc <__multiply>
 800bbc8:	4631      	mov	r1, r6
 800bbca:	4680      	mov	r8, r0
 800bbcc:	4638      	mov	r0, r7
 800bbce:	f7ff fe01 	bl	800b7d4 <_Bfree>
 800bbd2:	4646      	mov	r6, r8
 800bbd4:	106d      	asrs	r5, r5, #1
 800bbd6:	d00b      	beq.n	800bbf0 <__pow5mult+0xa0>
 800bbd8:	6820      	ldr	r0, [r4, #0]
 800bbda:	b938      	cbnz	r0, 800bbec <__pow5mult+0x9c>
 800bbdc:	4622      	mov	r2, r4
 800bbde:	4621      	mov	r1, r4
 800bbe0:	4638      	mov	r0, r7
 800bbe2:	f7ff ff0b 	bl	800b9fc <__multiply>
 800bbe6:	6020      	str	r0, [r4, #0]
 800bbe8:	f8c0 9000 	str.w	r9, [r0]
 800bbec:	4604      	mov	r4, r0
 800bbee:	e7e4      	b.n	800bbba <__pow5mult+0x6a>
 800bbf0:	4630      	mov	r0, r6
 800bbf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbf6:	bf00      	nop
 800bbf8:	0800d158 	.word	0x0800d158
 800bbfc:	0800cfd8 	.word	0x0800cfd8
 800bc00:	0800d0fe 	.word	0x0800d0fe

0800bc04 <__lshift>:
 800bc04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc08:	460c      	mov	r4, r1
 800bc0a:	6849      	ldr	r1, [r1, #4]
 800bc0c:	6923      	ldr	r3, [r4, #16]
 800bc0e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bc12:	68a3      	ldr	r3, [r4, #8]
 800bc14:	4607      	mov	r7, r0
 800bc16:	4691      	mov	r9, r2
 800bc18:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bc1c:	f108 0601 	add.w	r6, r8, #1
 800bc20:	42b3      	cmp	r3, r6
 800bc22:	db0b      	blt.n	800bc3c <__lshift+0x38>
 800bc24:	4638      	mov	r0, r7
 800bc26:	f7ff fd95 	bl	800b754 <_Balloc>
 800bc2a:	4605      	mov	r5, r0
 800bc2c:	b948      	cbnz	r0, 800bc42 <__lshift+0x3e>
 800bc2e:	4602      	mov	r2, r0
 800bc30:	4b28      	ldr	r3, [pc, #160]	@ (800bcd4 <__lshift+0xd0>)
 800bc32:	4829      	ldr	r0, [pc, #164]	@ (800bcd8 <__lshift+0xd4>)
 800bc34:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bc38:	f7ff f922 	bl	800ae80 <__assert_func>
 800bc3c:	3101      	adds	r1, #1
 800bc3e:	005b      	lsls	r3, r3, #1
 800bc40:	e7ee      	b.n	800bc20 <__lshift+0x1c>
 800bc42:	2300      	movs	r3, #0
 800bc44:	f100 0114 	add.w	r1, r0, #20
 800bc48:	f100 0210 	add.w	r2, r0, #16
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	4553      	cmp	r3, sl
 800bc50:	db33      	blt.n	800bcba <__lshift+0xb6>
 800bc52:	6920      	ldr	r0, [r4, #16]
 800bc54:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bc58:	f104 0314 	add.w	r3, r4, #20
 800bc5c:	f019 091f 	ands.w	r9, r9, #31
 800bc60:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bc64:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bc68:	d02b      	beq.n	800bcc2 <__lshift+0xbe>
 800bc6a:	f1c9 0e20 	rsb	lr, r9, #32
 800bc6e:	468a      	mov	sl, r1
 800bc70:	2200      	movs	r2, #0
 800bc72:	6818      	ldr	r0, [r3, #0]
 800bc74:	fa00 f009 	lsl.w	r0, r0, r9
 800bc78:	4310      	orrs	r0, r2
 800bc7a:	f84a 0b04 	str.w	r0, [sl], #4
 800bc7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc82:	459c      	cmp	ip, r3
 800bc84:	fa22 f20e 	lsr.w	r2, r2, lr
 800bc88:	d8f3      	bhi.n	800bc72 <__lshift+0x6e>
 800bc8a:	ebac 0304 	sub.w	r3, ip, r4
 800bc8e:	3b15      	subs	r3, #21
 800bc90:	f023 0303 	bic.w	r3, r3, #3
 800bc94:	3304      	adds	r3, #4
 800bc96:	f104 0015 	add.w	r0, r4, #21
 800bc9a:	4584      	cmp	ip, r0
 800bc9c:	bf38      	it	cc
 800bc9e:	2304      	movcc	r3, #4
 800bca0:	50ca      	str	r2, [r1, r3]
 800bca2:	b10a      	cbz	r2, 800bca8 <__lshift+0xa4>
 800bca4:	f108 0602 	add.w	r6, r8, #2
 800bca8:	3e01      	subs	r6, #1
 800bcaa:	4638      	mov	r0, r7
 800bcac:	612e      	str	r6, [r5, #16]
 800bcae:	4621      	mov	r1, r4
 800bcb0:	f7ff fd90 	bl	800b7d4 <_Bfree>
 800bcb4:	4628      	mov	r0, r5
 800bcb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcba:	f842 0f04 	str.w	r0, [r2, #4]!
 800bcbe:	3301      	adds	r3, #1
 800bcc0:	e7c5      	b.n	800bc4e <__lshift+0x4a>
 800bcc2:	3904      	subs	r1, #4
 800bcc4:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcc8:	f841 2f04 	str.w	r2, [r1, #4]!
 800bccc:	459c      	cmp	ip, r3
 800bcce:	d8f9      	bhi.n	800bcc4 <__lshift+0xc0>
 800bcd0:	e7ea      	b.n	800bca8 <__lshift+0xa4>
 800bcd2:	bf00      	nop
 800bcd4:	0800d08d 	.word	0x0800d08d
 800bcd8:	0800d0fe 	.word	0x0800d0fe

0800bcdc <__mcmp>:
 800bcdc:	690a      	ldr	r2, [r1, #16]
 800bcde:	4603      	mov	r3, r0
 800bce0:	6900      	ldr	r0, [r0, #16]
 800bce2:	1a80      	subs	r0, r0, r2
 800bce4:	b530      	push	{r4, r5, lr}
 800bce6:	d10e      	bne.n	800bd06 <__mcmp+0x2a>
 800bce8:	3314      	adds	r3, #20
 800bcea:	3114      	adds	r1, #20
 800bcec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bcf0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bcf4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bcf8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bcfc:	4295      	cmp	r5, r2
 800bcfe:	d003      	beq.n	800bd08 <__mcmp+0x2c>
 800bd00:	d205      	bcs.n	800bd0e <__mcmp+0x32>
 800bd02:	f04f 30ff 	mov.w	r0, #4294967295
 800bd06:	bd30      	pop	{r4, r5, pc}
 800bd08:	42a3      	cmp	r3, r4
 800bd0a:	d3f3      	bcc.n	800bcf4 <__mcmp+0x18>
 800bd0c:	e7fb      	b.n	800bd06 <__mcmp+0x2a>
 800bd0e:	2001      	movs	r0, #1
 800bd10:	e7f9      	b.n	800bd06 <__mcmp+0x2a>
	...

0800bd14 <__mdiff>:
 800bd14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd18:	4689      	mov	r9, r1
 800bd1a:	4606      	mov	r6, r0
 800bd1c:	4611      	mov	r1, r2
 800bd1e:	4648      	mov	r0, r9
 800bd20:	4614      	mov	r4, r2
 800bd22:	f7ff ffdb 	bl	800bcdc <__mcmp>
 800bd26:	1e05      	subs	r5, r0, #0
 800bd28:	d112      	bne.n	800bd50 <__mdiff+0x3c>
 800bd2a:	4629      	mov	r1, r5
 800bd2c:	4630      	mov	r0, r6
 800bd2e:	f7ff fd11 	bl	800b754 <_Balloc>
 800bd32:	4602      	mov	r2, r0
 800bd34:	b928      	cbnz	r0, 800bd42 <__mdiff+0x2e>
 800bd36:	4b3f      	ldr	r3, [pc, #252]	@ (800be34 <__mdiff+0x120>)
 800bd38:	f240 2137 	movw	r1, #567	@ 0x237
 800bd3c:	483e      	ldr	r0, [pc, #248]	@ (800be38 <__mdiff+0x124>)
 800bd3e:	f7ff f89f 	bl	800ae80 <__assert_func>
 800bd42:	2301      	movs	r3, #1
 800bd44:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bd48:	4610      	mov	r0, r2
 800bd4a:	b003      	add	sp, #12
 800bd4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd50:	bfbc      	itt	lt
 800bd52:	464b      	movlt	r3, r9
 800bd54:	46a1      	movlt	r9, r4
 800bd56:	4630      	mov	r0, r6
 800bd58:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bd5c:	bfba      	itte	lt
 800bd5e:	461c      	movlt	r4, r3
 800bd60:	2501      	movlt	r5, #1
 800bd62:	2500      	movge	r5, #0
 800bd64:	f7ff fcf6 	bl	800b754 <_Balloc>
 800bd68:	4602      	mov	r2, r0
 800bd6a:	b918      	cbnz	r0, 800bd74 <__mdiff+0x60>
 800bd6c:	4b31      	ldr	r3, [pc, #196]	@ (800be34 <__mdiff+0x120>)
 800bd6e:	f240 2145 	movw	r1, #581	@ 0x245
 800bd72:	e7e3      	b.n	800bd3c <__mdiff+0x28>
 800bd74:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bd78:	6926      	ldr	r6, [r4, #16]
 800bd7a:	60c5      	str	r5, [r0, #12]
 800bd7c:	f109 0310 	add.w	r3, r9, #16
 800bd80:	f109 0514 	add.w	r5, r9, #20
 800bd84:	f104 0e14 	add.w	lr, r4, #20
 800bd88:	f100 0b14 	add.w	fp, r0, #20
 800bd8c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bd90:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bd94:	9301      	str	r3, [sp, #4]
 800bd96:	46d9      	mov	r9, fp
 800bd98:	f04f 0c00 	mov.w	ip, #0
 800bd9c:	9b01      	ldr	r3, [sp, #4]
 800bd9e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bda2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bda6:	9301      	str	r3, [sp, #4]
 800bda8:	fa1f f38a 	uxth.w	r3, sl
 800bdac:	4619      	mov	r1, r3
 800bdae:	b283      	uxth	r3, r0
 800bdb0:	1acb      	subs	r3, r1, r3
 800bdb2:	0c00      	lsrs	r0, r0, #16
 800bdb4:	4463      	add	r3, ip
 800bdb6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bdba:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bdbe:	b29b      	uxth	r3, r3
 800bdc0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bdc4:	4576      	cmp	r6, lr
 800bdc6:	f849 3b04 	str.w	r3, [r9], #4
 800bdca:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bdce:	d8e5      	bhi.n	800bd9c <__mdiff+0x88>
 800bdd0:	1b33      	subs	r3, r6, r4
 800bdd2:	3b15      	subs	r3, #21
 800bdd4:	f023 0303 	bic.w	r3, r3, #3
 800bdd8:	3415      	adds	r4, #21
 800bdda:	3304      	adds	r3, #4
 800bddc:	42a6      	cmp	r6, r4
 800bdde:	bf38      	it	cc
 800bde0:	2304      	movcc	r3, #4
 800bde2:	441d      	add	r5, r3
 800bde4:	445b      	add	r3, fp
 800bde6:	461e      	mov	r6, r3
 800bde8:	462c      	mov	r4, r5
 800bdea:	4544      	cmp	r4, r8
 800bdec:	d30e      	bcc.n	800be0c <__mdiff+0xf8>
 800bdee:	f108 0103 	add.w	r1, r8, #3
 800bdf2:	1b49      	subs	r1, r1, r5
 800bdf4:	f021 0103 	bic.w	r1, r1, #3
 800bdf8:	3d03      	subs	r5, #3
 800bdfa:	45a8      	cmp	r8, r5
 800bdfc:	bf38      	it	cc
 800bdfe:	2100      	movcc	r1, #0
 800be00:	440b      	add	r3, r1
 800be02:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800be06:	b191      	cbz	r1, 800be2e <__mdiff+0x11a>
 800be08:	6117      	str	r7, [r2, #16]
 800be0a:	e79d      	b.n	800bd48 <__mdiff+0x34>
 800be0c:	f854 1b04 	ldr.w	r1, [r4], #4
 800be10:	46e6      	mov	lr, ip
 800be12:	0c08      	lsrs	r0, r1, #16
 800be14:	fa1c fc81 	uxtah	ip, ip, r1
 800be18:	4471      	add	r1, lr
 800be1a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800be1e:	b289      	uxth	r1, r1
 800be20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800be24:	f846 1b04 	str.w	r1, [r6], #4
 800be28:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800be2c:	e7dd      	b.n	800bdea <__mdiff+0xd6>
 800be2e:	3f01      	subs	r7, #1
 800be30:	e7e7      	b.n	800be02 <__mdiff+0xee>
 800be32:	bf00      	nop
 800be34:	0800d08d 	.word	0x0800d08d
 800be38:	0800d0fe 	.word	0x0800d0fe

0800be3c <__ulp>:
 800be3c:	b082      	sub	sp, #8
 800be3e:	ed8d 0b00 	vstr	d0, [sp]
 800be42:	9a01      	ldr	r2, [sp, #4]
 800be44:	4b0f      	ldr	r3, [pc, #60]	@ (800be84 <__ulp+0x48>)
 800be46:	4013      	ands	r3, r2
 800be48:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	dc08      	bgt.n	800be62 <__ulp+0x26>
 800be50:	425b      	negs	r3, r3
 800be52:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800be56:	ea4f 5223 	mov.w	r2, r3, asr #20
 800be5a:	da04      	bge.n	800be66 <__ulp+0x2a>
 800be5c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800be60:	4113      	asrs	r3, r2
 800be62:	2200      	movs	r2, #0
 800be64:	e008      	b.n	800be78 <__ulp+0x3c>
 800be66:	f1a2 0314 	sub.w	r3, r2, #20
 800be6a:	2b1e      	cmp	r3, #30
 800be6c:	bfda      	itte	le
 800be6e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800be72:	40da      	lsrle	r2, r3
 800be74:	2201      	movgt	r2, #1
 800be76:	2300      	movs	r3, #0
 800be78:	4619      	mov	r1, r3
 800be7a:	4610      	mov	r0, r2
 800be7c:	ec41 0b10 	vmov	d0, r0, r1
 800be80:	b002      	add	sp, #8
 800be82:	4770      	bx	lr
 800be84:	7ff00000 	.word	0x7ff00000

0800be88 <__b2d>:
 800be88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be8c:	6906      	ldr	r6, [r0, #16]
 800be8e:	f100 0814 	add.w	r8, r0, #20
 800be92:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800be96:	1f37      	subs	r7, r6, #4
 800be98:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800be9c:	4610      	mov	r0, r2
 800be9e:	f7ff fd4b 	bl	800b938 <__hi0bits>
 800bea2:	f1c0 0320 	rsb	r3, r0, #32
 800bea6:	280a      	cmp	r0, #10
 800bea8:	600b      	str	r3, [r1, #0]
 800beaa:	491b      	ldr	r1, [pc, #108]	@ (800bf18 <__b2d+0x90>)
 800beac:	dc15      	bgt.n	800beda <__b2d+0x52>
 800beae:	f1c0 0c0b 	rsb	ip, r0, #11
 800beb2:	fa22 f30c 	lsr.w	r3, r2, ip
 800beb6:	45b8      	cmp	r8, r7
 800beb8:	ea43 0501 	orr.w	r5, r3, r1
 800bebc:	bf34      	ite	cc
 800bebe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bec2:	2300      	movcs	r3, #0
 800bec4:	3015      	adds	r0, #21
 800bec6:	fa02 f000 	lsl.w	r0, r2, r0
 800beca:	fa23 f30c 	lsr.w	r3, r3, ip
 800bece:	4303      	orrs	r3, r0
 800bed0:	461c      	mov	r4, r3
 800bed2:	ec45 4b10 	vmov	d0, r4, r5
 800bed6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800beda:	45b8      	cmp	r8, r7
 800bedc:	bf3a      	itte	cc
 800bede:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bee2:	f1a6 0708 	subcc.w	r7, r6, #8
 800bee6:	2300      	movcs	r3, #0
 800bee8:	380b      	subs	r0, #11
 800beea:	d012      	beq.n	800bf12 <__b2d+0x8a>
 800beec:	f1c0 0120 	rsb	r1, r0, #32
 800bef0:	fa23 f401 	lsr.w	r4, r3, r1
 800bef4:	4082      	lsls	r2, r0
 800bef6:	4322      	orrs	r2, r4
 800bef8:	4547      	cmp	r7, r8
 800befa:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800befe:	bf8c      	ite	hi
 800bf00:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800bf04:	2200      	movls	r2, #0
 800bf06:	4083      	lsls	r3, r0
 800bf08:	40ca      	lsrs	r2, r1
 800bf0a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800bf0e:	4313      	orrs	r3, r2
 800bf10:	e7de      	b.n	800bed0 <__b2d+0x48>
 800bf12:	ea42 0501 	orr.w	r5, r2, r1
 800bf16:	e7db      	b.n	800bed0 <__b2d+0x48>
 800bf18:	3ff00000 	.word	0x3ff00000

0800bf1c <__d2b>:
 800bf1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bf20:	460f      	mov	r7, r1
 800bf22:	2101      	movs	r1, #1
 800bf24:	ec59 8b10 	vmov	r8, r9, d0
 800bf28:	4616      	mov	r6, r2
 800bf2a:	f7ff fc13 	bl	800b754 <_Balloc>
 800bf2e:	4604      	mov	r4, r0
 800bf30:	b930      	cbnz	r0, 800bf40 <__d2b+0x24>
 800bf32:	4602      	mov	r2, r0
 800bf34:	4b23      	ldr	r3, [pc, #140]	@ (800bfc4 <__d2b+0xa8>)
 800bf36:	4824      	ldr	r0, [pc, #144]	@ (800bfc8 <__d2b+0xac>)
 800bf38:	f240 310f 	movw	r1, #783	@ 0x30f
 800bf3c:	f7fe ffa0 	bl	800ae80 <__assert_func>
 800bf40:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bf44:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bf48:	b10d      	cbz	r5, 800bf4e <__d2b+0x32>
 800bf4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bf4e:	9301      	str	r3, [sp, #4]
 800bf50:	f1b8 0300 	subs.w	r3, r8, #0
 800bf54:	d023      	beq.n	800bf9e <__d2b+0x82>
 800bf56:	4668      	mov	r0, sp
 800bf58:	9300      	str	r3, [sp, #0]
 800bf5a:	f7ff fd0c 	bl	800b976 <__lo0bits>
 800bf5e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bf62:	b1d0      	cbz	r0, 800bf9a <__d2b+0x7e>
 800bf64:	f1c0 0320 	rsb	r3, r0, #32
 800bf68:	fa02 f303 	lsl.w	r3, r2, r3
 800bf6c:	430b      	orrs	r3, r1
 800bf6e:	40c2      	lsrs	r2, r0
 800bf70:	6163      	str	r3, [r4, #20]
 800bf72:	9201      	str	r2, [sp, #4]
 800bf74:	9b01      	ldr	r3, [sp, #4]
 800bf76:	61a3      	str	r3, [r4, #24]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	bf0c      	ite	eq
 800bf7c:	2201      	moveq	r2, #1
 800bf7e:	2202      	movne	r2, #2
 800bf80:	6122      	str	r2, [r4, #16]
 800bf82:	b1a5      	cbz	r5, 800bfae <__d2b+0x92>
 800bf84:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bf88:	4405      	add	r5, r0
 800bf8a:	603d      	str	r5, [r7, #0]
 800bf8c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bf90:	6030      	str	r0, [r6, #0]
 800bf92:	4620      	mov	r0, r4
 800bf94:	b003      	add	sp, #12
 800bf96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf9a:	6161      	str	r1, [r4, #20]
 800bf9c:	e7ea      	b.n	800bf74 <__d2b+0x58>
 800bf9e:	a801      	add	r0, sp, #4
 800bfa0:	f7ff fce9 	bl	800b976 <__lo0bits>
 800bfa4:	9b01      	ldr	r3, [sp, #4]
 800bfa6:	6163      	str	r3, [r4, #20]
 800bfa8:	3020      	adds	r0, #32
 800bfaa:	2201      	movs	r2, #1
 800bfac:	e7e8      	b.n	800bf80 <__d2b+0x64>
 800bfae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bfb2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bfb6:	6038      	str	r0, [r7, #0]
 800bfb8:	6918      	ldr	r0, [r3, #16]
 800bfba:	f7ff fcbd 	bl	800b938 <__hi0bits>
 800bfbe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bfc2:	e7e5      	b.n	800bf90 <__d2b+0x74>
 800bfc4:	0800d08d 	.word	0x0800d08d
 800bfc8:	0800d0fe 	.word	0x0800d0fe

0800bfcc <__ratio>:
 800bfcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfd0:	b085      	sub	sp, #20
 800bfd2:	e9cd 1000 	strd	r1, r0, [sp]
 800bfd6:	a902      	add	r1, sp, #8
 800bfd8:	f7ff ff56 	bl	800be88 <__b2d>
 800bfdc:	9800      	ldr	r0, [sp, #0]
 800bfde:	a903      	add	r1, sp, #12
 800bfe0:	ec55 4b10 	vmov	r4, r5, d0
 800bfe4:	f7ff ff50 	bl	800be88 <__b2d>
 800bfe8:	9b01      	ldr	r3, [sp, #4]
 800bfea:	6919      	ldr	r1, [r3, #16]
 800bfec:	9b00      	ldr	r3, [sp, #0]
 800bfee:	691b      	ldr	r3, [r3, #16]
 800bff0:	1ac9      	subs	r1, r1, r3
 800bff2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800bff6:	1a9b      	subs	r3, r3, r2
 800bff8:	ec5b ab10 	vmov	sl, fp, d0
 800bffc:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c000:	2b00      	cmp	r3, #0
 800c002:	bfce      	itee	gt
 800c004:	462a      	movgt	r2, r5
 800c006:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c00a:	465a      	movle	r2, fp
 800c00c:	462f      	mov	r7, r5
 800c00e:	46d9      	mov	r9, fp
 800c010:	bfcc      	ite	gt
 800c012:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c016:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c01a:	464b      	mov	r3, r9
 800c01c:	4652      	mov	r2, sl
 800c01e:	4620      	mov	r0, r4
 800c020:	4639      	mov	r1, r7
 800c022:	f7f4 fc33 	bl	800088c <__aeabi_ddiv>
 800c026:	ec41 0b10 	vmov	d0, r0, r1
 800c02a:	b005      	add	sp, #20
 800c02c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c030 <__copybits>:
 800c030:	3901      	subs	r1, #1
 800c032:	b570      	push	{r4, r5, r6, lr}
 800c034:	1149      	asrs	r1, r1, #5
 800c036:	6914      	ldr	r4, [r2, #16]
 800c038:	3101      	adds	r1, #1
 800c03a:	f102 0314 	add.w	r3, r2, #20
 800c03e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c042:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c046:	1f05      	subs	r5, r0, #4
 800c048:	42a3      	cmp	r3, r4
 800c04a:	d30c      	bcc.n	800c066 <__copybits+0x36>
 800c04c:	1aa3      	subs	r3, r4, r2
 800c04e:	3b11      	subs	r3, #17
 800c050:	f023 0303 	bic.w	r3, r3, #3
 800c054:	3211      	adds	r2, #17
 800c056:	42a2      	cmp	r2, r4
 800c058:	bf88      	it	hi
 800c05a:	2300      	movhi	r3, #0
 800c05c:	4418      	add	r0, r3
 800c05e:	2300      	movs	r3, #0
 800c060:	4288      	cmp	r0, r1
 800c062:	d305      	bcc.n	800c070 <__copybits+0x40>
 800c064:	bd70      	pop	{r4, r5, r6, pc}
 800c066:	f853 6b04 	ldr.w	r6, [r3], #4
 800c06a:	f845 6f04 	str.w	r6, [r5, #4]!
 800c06e:	e7eb      	b.n	800c048 <__copybits+0x18>
 800c070:	f840 3b04 	str.w	r3, [r0], #4
 800c074:	e7f4      	b.n	800c060 <__copybits+0x30>

0800c076 <__any_on>:
 800c076:	f100 0214 	add.w	r2, r0, #20
 800c07a:	6900      	ldr	r0, [r0, #16]
 800c07c:	114b      	asrs	r3, r1, #5
 800c07e:	4298      	cmp	r0, r3
 800c080:	b510      	push	{r4, lr}
 800c082:	db11      	blt.n	800c0a8 <__any_on+0x32>
 800c084:	dd0a      	ble.n	800c09c <__any_on+0x26>
 800c086:	f011 011f 	ands.w	r1, r1, #31
 800c08a:	d007      	beq.n	800c09c <__any_on+0x26>
 800c08c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c090:	fa24 f001 	lsr.w	r0, r4, r1
 800c094:	fa00 f101 	lsl.w	r1, r0, r1
 800c098:	428c      	cmp	r4, r1
 800c09a:	d10b      	bne.n	800c0b4 <__any_on+0x3e>
 800c09c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c0a0:	4293      	cmp	r3, r2
 800c0a2:	d803      	bhi.n	800c0ac <__any_on+0x36>
 800c0a4:	2000      	movs	r0, #0
 800c0a6:	bd10      	pop	{r4, pc}
 800c0a8:	4603      	mov	r3, r0
 800c0aa:	e7f7      	b.n	800c09c <__any_on+0x26>
 800c0ac:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c0b0:	2900      	cmp	r1, #0
 800c0b2:	d0f5      	beq.n	800c0a0 <__any_on+0x2a>
 800c0b4:	2001      	movs	r0, #1
 800c0b6:	e7f6      	b.n	800c0a6 <__any_on+0x30>

0800c0b8 <__ascii_wctomb>:
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	4608      	mov	r0, r1
 800c0bc:	b141      	cbz	r1, 800c0d0 <__ascii_wctomb+0x18>
 800c0be:	2aff      	cmp	r2, #255	@ 0xff
 800c0c0:	d904      	bls.n	800c0cc <__ascii_wctomb+0x14>
 800c0c2:	228a      	movs	r2, #138	@ 0x8a
 800c0c4:	601a      	str	r2, [r3, #0]
 800c0c6:	f04f 30ff 	mov.w	r0, #4294967295
 800c0ca:	4770      	bx	lr
 800c0cc:	700a      	strb	r2, [r1, #0]
 800c0ce:	2001      	movs	r0, #1
 800c0d0:	4770      	bx	lr

0800c0d2 <__ssputs_r>:
 800c0d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0d6:	688e      	ldr	r6, [r1, #8]
 800c0d8:	461f      	mov	r7, r3
 800c0da:	42be      	cmp	r6, r7
 800c0dc:	680b      	ldr	r3, [r1, #0]
 800c0de:	4682      	mov	sl, r0
 800c0e0:	460c      	mov	r4, r1
 800c0e2:	4690      	mov	r8, r2
 800c0e4:	d82d      	bhi.n	800c142 <__ssputs_r+0x70>
 800c0e6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c0ea:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c0ee:	d026      	beq.n	800c13e <__ssputs_r+0x6c>
 800c0f0:	6965      	ldr	r5, [r4, #20]
 800c0f2:	6909      	ldr	r1, [r1, #16]
 800c0f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c0f8:	eba3 0901 	sub.w	r9, r3, r1
 800c0fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c100:	1c7b      	adds	r3, r7, #1
 800c102:	444b      	add	r3, r9
 800c104:	106d      	asrs	r5, r5, #1
 800c106:	429d      	cmp	r5, r3
 800c108:	bf38      	it	cc
 800c10a:	461d      	movcc	r5, r3
 800c10c:	0553      	lsls	r3, r2, #21
 800c10e:	d527      	bpl.n	800c160 <__ssputs_r+0x8e>
 800c110:	4629      	mov	r1, r5
 800c112:	f7ff fa81 	bl	800b618 <_malloc_r>
 800c116:	4606      	mov	r6, r0
 800c118:	b360      	cbz	r0, 800c174 <__ssputs_r+0xa2>
 800c11a:	6921      	ldr	r1, [r4, #16]
 800c11c:	464a      	mov	r2, r9
 800c11e:	f7fe fe96 	bl	800ae4e <memcpy>
 800c122:	89a3      	ldrh	r3, [r4, #12]
 800c124:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c128:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c12c:	81a3      	strh	r3, [r4, #12]
 800c12e:	6126      	str	r6, [r4, #16]
 800c130:	6165      	str	r5, [r4, #20]
 800c132:	444e      	add	r6, r9
 800c134:	eba5 0509 	sub.w	r5, r5, r9
 800c138:	6026      	str	r6, [r4, #0]
 800c13a:	60a5      	str	r5, [r4, #8]
 800c13c:	463e      	mov	r6, r7
 800c13e:	42be      	cmp	r6, r7
 800c140:	d900      	bls.n	800c144 <__ssputs_r+0x72>
 800c142:	463e      	mov	r6, r7
 800c144:	6820      	ldr	r0, [r4, #0]
 800c146:	4632      	mov	r2, r6
 800c148:	4641      	mov	r1, r8
 800c14a:	f000 fb65 	bl	800c818 <memmove>
 800c14e:	68a3      	ldr	r3, [r4, #8]
 800c150:	1b9b      	subs	r3, r3, r6
 800c152:	60a3      	str	r3, [r4, #8]
 800c154:	6823      	ldr	r3, [r4, #0]
 800c156:	4433      	add	r3, r6
 800c158:	6023      	str	r3, [r4, #0]
 800c15a:	2000      	movs	r0, #0
 800c15c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c160:	462a      	mov	r2, r5
 800c162:	f000 fb9e 	bl	800c8a2 <_realloc_r>
 800c166:	4606      	mov	r6, r0
 800c168:	2800      	cmp	r0, #0
 800c16a:	d1e0      	bne.n	800c12e <__ssputs_r+0x5c>
 800c16c:	6921      	ldr	r1, [r4, #16]
 800c16e:	4650      	mov	r0, sl
 800c170:	f7fe fea4 	bl	800aebc <_free_r>
 800c174:	230c      	movs	r3, #12
 800c176:	f8ca 3000 	str.w	r3, [sl]
 800c17a:	89a3      	ldrh	r3, [r4, #12]
 800c17c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c180:	81a3      	strh	r3, [r4, #12]
 800c182:	f04f 30ff 	mov.w	r0, #4294967295
 800c186:	e7e9      	b.n	800c15c <__ssputs_r+0x8a>

0800c188 <_svfiprintf_r>:
 800c188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c18c:	4698      	mov	r8, r3
 800c18e:	898b      	ldrh	r3, [r1, #12]
 800c190:	061b      	lsls	r3, r3, #24
 800c192:	b09d      	sub	sp, #116	@ 0x74
 800c194:	4607      	mov	r7, r0
 800c196:	460d      	mov	r5, r1
 800c198:	4614      	mov	r4, r2
 800c19a:	d510      	bpl.n	800c1be <_svfiprintf_r+0x36>
 800c19c:	690b      	ldr	r3, [r1, #16]
 800c19e:	b973      	cbnz	r3, 800c1be <_svfiprintf_r+0x36>
 800c1a0:	2140      	movs	r1, #64	@ 0x40
 800c1a2:	f7ff fa39 	bl	800b618 <_malloc_r>
 800c1a6:	6028      	str	r0, [r5, #0]
 800c1a8:	6128      	str	r0, [r5, #16]
 800c1aa:	b930      	cbnz	r0, 800c1ba <_svfiprintf_r+0x32>
 800c1ac:	230c      	movs	r3, #12
 800c1ae:	603b      	str	r3, [r7, #0]
 800c1b0:	f04f 30ff 	mov.w	r0, #4294967295
 800c1b4:	b01d      	add	sp, #116	@ 0x74
 800c1b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1ba:	2340      	movs	r3, #64	@ 0x40
 800c1bc:	616b      	str	r3, [r5, #20]
 800c1be:	2300      	movs	r3, #0
 800c1c0:	9309      	str	r3, [sp, #36]	@ 0x24
 800c1c2:	2320      	movs	r3, #32
 800c1c4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c1c8:	f8cd 800c 	str.w	r8, [sp, #12]
 800c1cc:	2330      	movs	r3, #48	@ 0x30
 800c1ce:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c36c <_svfiprintf_r+0x1e4>
 800c1d2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c1d6:	f04f 0901 	mov.w	r9, #1
 800c1da:	4623      	mov	r3, r4
 800c1dc:	469a      	mov	sl, r3
 800c1de:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c1e2:	b10a      	cbz	r2, 800c1e8 <_svfiprintf_r+0x60>
 800c1e4:	2a25      	cmp	r2, #37	@ 0x25
 800c1e6:	d1f9      	bne.n	800c1dc <_svfiprintf_r+0x54>
 800c1e8:	ebba 0b04 	subs.w	fp, sl, r4
 800c1ec:	d00b      	beq.n	800c206 <_svfiprintf_r+0x7e>
 800c1ee:	465b      	mov	r3, fp
 800c1f0:	4622      	mov	r2, r4
 800c1f2:	4629      	mov	r1, r5
 800c1f4:	4638      	mov	r0, r7
 800c1f6:	f7ff ff6c 	bl	800c0d2 <__ssputs_r>
 800c1fa:	3001      	adds	r0, #1
 800c1fc:	f000 80a7 	beq.w	800c34e <_svfiprintf_r+0x1c6>
 800c200:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c202:	445a      	add	r2, fp
 800c204:	9209      	str	r2, [sp, #36]	@ 0x24
 800c206:	f89a 3000 	ldrb.w	r3, [sl]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	f000 809f 	beq.w	800c34e <_svfiprintf_r+0x1c6>
 800c210:	2300      	movs	r3, #0
 800c212:	f04f 32ff 	mov.w	r2, #4294967295
 800c216:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c21a:	f10a 0a01 	add.w	sl, sl, #1
 800c21e:	9304      	str	r3, [sp, #16]
 800c220:	9307      	str	r3, [sp, #28]
 800c222:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c226:	931a      	str	r3, [sp, #104]	@ 0x68
 800c228:	4654      	mov	r4, sl
 800c22a:	2205      	movs	r2, #5
 800c22c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c230:	484e      	ldr	r0, [pc, #312]	@ (800c36c <_svfiprintf_r+0x1e4>)
 800c232:	f7f3 fff5 	bl	8000220 <memchr>
 800c236:	9a04      	ldr	r2, [sp, #16]
 800c238:	b9d8      	cbnz	r0, 800c272 <_svfiprintf_r+0xea>
 800c23a:	06d0      	lsls	r0, r2, #27
 800c23c:	bf44      	itt	mi
 800c23e:	2320      	movmi	r3, #32
 800c240:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c244:	0711      	lsls	r1, r2, #28
 800c246:	bf44      	itt	mi
 800c248:	232b      	movmi	r3, #43	@ 0x2b
 800c24a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c24e:	f89a 3000 	ldrb.w	r3, [sl]
 800c252:	2b2a      	cmp	r3, #42	@ 0x2a
 800c254:	d015      	beq.n	800c282 <_svfiprintf_r+0xfa>
 800c256:	9a07      	ldr	r2, [sp, #28]
 800c258:	4654      	mov	r4, sl
 800c25a:	2000      	movs	r0, #0
 800c25c:	f04f 0c0a 	mov.w	ip, #10
 800c260:	4621      	mov	r1, r4
 800c262:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c266:	3b30      	subs	r3, #48	@ 0x30
 800c268:	2b09      	cmp	r3, #9
 800c26a:	d94b      	bls.n	800c304 <_svfiprintf_r+0x17c>
 800c26c:	b1b0      	cbz	r0, 800c29c <_svfiprintf_r+0x114>
 800c26e:	9207      	str	r2, [sp, #28]
 800c270:	e014      	b.n	800c29c <_svfiprintf_r+0x114>
 800c272:	eba0 0308 	sub.w	r3, r0, r8
 800c276:	fa09 f303 	lsl.w	r3, r9, r3
 800c27a:	4313      	orrs	r3, r2
 800c27c:	9304      	str	r3, [sp, #16]
 800c27e:	46a2      	mov	sl, r4
 800c280:	e7d2      	b.n	800c228 <_svfiprintf_r+0xa0>
 800c282:	9b03      	ldr	r3, [sp, #12]
 800c284:	1d19      	adds	r1, r3, #4
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	9103      	str	r1, [sp, #12]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	bfbb      	ittet	lt
 800c28e:	425b      	neglt	r3, r3
 800c290:	f042 0202 	orrlt.w	r2, r2, #2
 800c294:	9307      	strge	r3, [sp, #28]
 800c296:	9307      	strlt	r3, [sp, #28]
 800c298:	bfb8      	it	lt
 800c29a:	9204      	strlt	r2, [sp, #16]
 800c29c:	7823      	ldrb	r3, [r4, #0]
 800c29e:	2b2e      	cmp	r3, #46	@ 0x2e
 800c2a0:	d10a      	bne.n	800c2b8 <_svfiprintf_r+0x130>
 800c2a2:	7863      	ldrb	r3, [r4, #1]
 800c2a4:	2b2a      	cmp	r3, #42	@ 0x2a
 800c2a6:	d132      	bne.n	800c30e <_svfiprintf_r+0x186>
 800c2a8:	9b03      	ldr	r3, [sp, #12]
 800c2aa:	1d1a      	adds	r2, r3, #4
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	9203      	str	r2, [sp, #12]
 800c2b0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c2b4:	3402      	adds	r4, #2
 800c2b6:	9305      	str	r3, [sp, #20]
 800c2b8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c37c <_svfiprintf_r+0x1f4>
 800c2bc:	7821      	ldrb	r1, [r4, #0]
 800c2be:	2203      	movs	r2, #3
 800c2c0:	4650      	mov	r0, sl
 800c2c2:	f7f3 ffad 	bl	8000220 <memchr>
 800c2c6:	b138      	cbz	r0, 800c2d8 <_svfiprintf_r+0x150>
 800c2c8:	9b04      	ldr	r3, [sp, #16]
 800c2ca:	eba0 000a 	sub.w	r0, r0, sl
 800c2ce:	2240      	movs	r2, #64	@ 0x40
 800c2d0:	4082      	lsls	r2, r0
 800c2d2:	4313      	orrs	r3, r2
 800c2d4:	3401      	adds	r4, #1
 800c2d6:	9304      	str	r3, [sp, #16]
 800c2d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2dc:	4824      	ldr	r0, [pc, #144]	@ (800c370 <_svfiprintf_r+0x1e8>)
 800c2de:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c2e2:	2206      	movs	r2, #6
 800c2e4:	f7f3 ff9c 	bl	8000220 <memchr>
 800c2e8:	2800      	cmp	r0, #0
 800c2ea:	d036      	beq.n	800c35a <_svfiprintf_r+0x1d2>
 800c2ec:	4b21      	ldr	r3, [pc, #132]	@ (800c374 <_svfiprintf_r+0x1ec>)
 800c2ee:	bb1b      	cbnz	r3, 800c338 <_svfiprintf_r+0x1b0>
 800c2f0:	9b03      	ldr	r3, [sp, #12]
 800c2f2:	3307      	adds	r3, #7
 800c2f4:	f023 0307 	bic.w	r3, r3, #7
 800c2f8:	3308      	adds	r3, #8
 800c2fa:	9303      	str	r3, [sp, #12]
 800c2fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2fe:	4433      	add	r3, r6
 800c300:	9309      	str	r3, [sp, #36]	@ 0x24
 800c302:	e76a      	b.n	800c1da <_svfiprintf_r+0x52>
 800c304:	fb0c 3202 	mla	r2, ip, r2, r3
 800c308:	460c      	mov	r4, r1
 800c30a:	2001      	movs	r0, #1
 800c30c:	e7a8      	b.n	800c260 <_svfiprintf_r+0xd8>
 800c30e:	2300      	movs	r3, #0
 800c310:	3401      	adds	r4, #1
 800c312:	9305      	str	r3, [sp, #20]
 800c314:	4619      	mov	r1, r3
 800c316:	f04f 0c0a 	mov.w	ip, #10
 800c31a:	4620      	mov	r0, r4
 800c31c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c320:	3a30      	subs	r2, #48	@ 0x30
 800c322:	2a09      	cmp	r2, #9
 800c324:	d903      	bls.n	800c32e <_svfiprintf_r+0x1a6>
 800c326:	2b00      	cmp	r3, #0
 800c328:	d0c6      	beq.n	800c2b8 <_svfiprintf_r+0x130>
 800c32a:	9105      	str	r1, [sp, #20]
 800c32c:	e7c4      	b.n	800c2b8 <_svfiprintf_r+0x130>
 800c32e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c332:	4604      	mov	r4, r0
 800c334:	2301      	movs	r3, #1
 800c336:	e7f0      	b.n	800c31a <_svfiprintf_r+0x192>
 800c338:	ab03      	add	r3, sp, #12
 800c33a:	9300      	str	r3, [sp, #0]
 800c33c:	462a      	mov	r2, r5
 800c33e:	4b0e      	ldr	r3, [pc, #56]	@ (800c378 <_svfiprintf_r+0x1f0>)
 800c340:	a904      	add	r1, sp, #16
 800c342:	4638      	mov	r0, r7
 800c344:	f3af 8000 	nop.w
 800c348:	1c42      	adds	r2, r0, #1
 800c34a:	4606      	mov	r6, r0
 800c34c:	d1d6      	bne.n	800c2fc <_svfiprintf_r+0x174>
 800c34e:	89ab      	ldrh	r3, [r5, #12]
 800c350:	065b      	lsls	r3, r3, #25
 800c352:	f53f af2d 	bmi.w	800c1b0 <_svfiprintf_r+0x28>
 800c356:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c358:	e72c      	b.n	800c1b4 <_svfiprintf_r+0x2c>
 800c35a:	ab03      	add	r3, sp, #12
 800c35c:	9300      	str	r3, [sp, #0]
 800c35e:	462a      	mov	r2, r5
 800c360:	4b05      	ldr	r3, [pc, #20]	@ (800c378 <_svfiprintf_r+0x1f0>)
 800c362:	a904      	add	r1, sp, #16
 800c364:	4638      	mov	r0, r7
 800c366:	f000 f879 	bl	800c45c <_printf_i>
 800c36a:	e7ed      	b.n	800c348 <_svfiprintf_r+0x1c0>
 800c36c:	0800d359 	.word	0x0800d359
 800c370:	0800d363 	.word	0x0800d363
 800c374:	00000000 	.word	0x00000000
 800c378:	0800c0d3 	.word	0x0800c0d3
 800c37c:	0800d35f 	.word	0x0800d35f

0800c380 <_printf_common>:
 800c380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c384:	4616      	mov	r6, r2
 800c386:	4698      	mov	r8, r3
 800c388:	688a      	ldr	r2, [r1, #8]
 800c38a:	690b      	ldr	r3, [r1, #16]
 800c38c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c390:	4293      	cmp	r3, r2
 800c392:	bfb8      	it	lt
 800c394:	4613      	movlt	r3, r2
 800c396:	6033      	str	r3, [r6, #0]
 800c398:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c39c:	4607      	mov	r7, r0
 800c39e:	460c      	mov	r4, r1
 800c3a0:	b10a      	cbz	r2, 800c3a6 <_printf_common+0x26>
 800c3a2:	3301      	adds	r3, #1
 800c3a4:	6033      	str	r3, [r6, #0]
 800c3a6:	6823      	ldr	r3, [r4, #0]
 800c3a8:	0699      	lsls	r1, r3, #26
 800c3aa:	bf42      	ittt	mi
 800c3ac:	6833      	ldrmi	r3, [r6, #0]
 800c3ae:	3302      	addmi	r3, #2
 800c3b0:	6033      	strmi	r3, [r6, #0]
 800c3b2:	6825      	ldr	r5, [r4, #0]
 800c3b4:	f015 0506 	ands.w	r5, r5, #6
 800c3b8:	d106      	bne.n	800c3c8 <_printf_common+0x48>
 800c3ba:	f104 0a19 	add.w	sl, r4, #25
 800c3be:	68e3      	ldr	r3, [r4, #12]
 800c3c0:	6832      	ldr	r2, [r6, #0]
 800c3c2:	1a9b      	subs	r3, r3, r2
 800c3c4:	42ab      	cmp	r3, r5
 800c3c6:	dc26      	bgt.n	800c416 <_printf_common+0x96>
 800c3c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c3cc:	6822      	ldr	r2, [r4, #0]
 800c3ce:	3b00      	subs	r3, #0
 800c3d0:	bf18      	it	ne
 800c3d2:	2301      	movne	r3, #1
 800c3d4:	0692      	lsls	r2, r2, #26
 800c3d6:	d42b      	bmi.n	800c430 <_printf_common+0xb0>
 800c3d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c3dc:	4641      	mov	r1, r8
 800c3de:	4638      	mov	r0, r7
 800c3e0:	47c8      	blx	r9
 800c3e2:	3001      	adds	r0, #1
 800c3e4:	d01e      	beq.n	800c424 <_printf_common+0xa4>
 800c3e6:	6823      	ldr	r3, [r4, #0]
 800c3e8:	6922      	ldr	r2, [r4, #16]
 800c3ea:	f003 0306 	and.w	r3, r3, #6
 800c3ee:	2b04      	cmp	r3, #4
 800c3f0:	bf02      	ittt	eq
 800c3f2:	68e5      	ldreq	r5, [r4, #12]
 800c3f4:	6833      	ldreq	r3, [r6, #0]
 800c3f6:	1aed      	subeq	r5, r5, r3
 800c3f8:	68a3      	ldr	r3, [r4, #8]
 800c3fa:	bf0c      	ite	eq
 800c3fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c400:	2500      	movne	r5, #0
 800c402:	4293      	cmp	r3, r2
 800c404:	bfc4      	itt	gt
 800c406:	1a9b      	subgt	r3, r3, r2
 800c408:	18ed      	addgt	r5, r5, r3
 800c40a:	2600      	movs	r6, #0
 800c40c:	341a      	adds	r4, #26
 800c40e:	42b5      	cmp	r5, r6
 800c410:	d11a      	bne.n	800c448 <_printf_common+0xc8>
 800c412:	2000      	movs	r0, #0
 800c414:	e008      	b.n	800c428 <_printf_common+0xa8>
 800c416:	2301      	movs	r3, #1
 800c418:	4652      	mov	r2, sl
 800c41a:	4641      	mov	r1, r8
 800c41c:	4638      	mov	r0, r7
 800c41e:	47c8      	blx	r9
 800c420:	3001      	adds	r0, #1
 800c422:	d103      	bne.n	800c42c <_printf_common+0xac>
 800c424:	f04f 30ff 	mov.w	r0, #4294967295
 800c428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c42c:	3501      	adds	r5, #1
 800c42e:	e7c6      	b.n	800c3be <_printf_common+0x3e>
 800c430:	18e1      	adds	r1, r4, r3
 800c432:	1c5a      	adds	r2, r3, #1
 800c434:	2030      	movs	r0, #48	@ 0x30
 800c436:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c43a:	4422      	add	r2, r4
 800c43c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c440:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c444:	3302      	adds	r3, #2
 800c446:	e7c7      	b.n	800c3d8 <_printf_common+0x58>
 800c448:	2301      	movs	r3, #1
 800c44a:	4622      	mov	r2, r4
 800c44c:	4641      	mov	r1, r8
 800c44e:	4638      	mov	r0, r7
 800c450:	47c8      	blx	r9
 800c452:	3001      	adds	r0, #1
 800c454:	d0e6      	beq.n	800c424 <_printf_common+0xa4>
 800c456:	3601      	adds	r6, #1
 800c458:	e7d9      	b.n	800c40e <_printf_common+0x8e>
	...

0800c45c <_printf_i>:
 800c45c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c460:	7e0f      	ldrb	r7, [r1, #24]
 800c462:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c464:	2f78      	cmp	r7, #120	@ 0x78
 800c466:	4691      	mov	r9, r2
 800c468:	4680      	mov	r8, r0
 800c46a:	460c      	mov	r4, r1
 800c46c:	469a      	mov	sl, r3
 800c46e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c472:	d807      	bhi.n	800c484 <_printf_i+0x28>
 800c474:	2f62      	cmp	r7, #98	@ 0x62
 800c476:	d80a      	bhi.n	800c48e <_printf_i+0x32>
 800c478:	2f00      	cmp	r7, #0
 800c47a:	f000 80d2 	beq.w	800c622 <_printf_i+0x1c6>
 800c47e:	2f58      	cmp	r7, #88	@ 0x58
 800c480:	f000 80b9 	beq.w	800c5f6 <_printf_i+0x19a>
 800c484:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c488:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c48c:	e03a      	b.n	800c504 <_printf_i+0xa8>
 800c48e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c492:	2b15      	cmp	r3, #21
 800c494:	d8f6      	bhi.n	800c484 <_printf_i+0x28>
 800c496:	a101      	add	r1, pc, #4	@ (adr r1, 800c49c <_printf_i+0x40>)
 800c498:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c49c:	0800c4f5 	.word	0x0800c4f5
 800c4a0:	0800c509 	.word	0x0800c509
 800c4a4:	0800c485 	.word	0x0800c485
 800c4a8:	0800c485 	.word	0x0800c485
 800c4ac:	0800c485 	.word	0x0800c485
 800c4b0:	0800c485 	.word	0x0800c485
 800c4b4:	0800c509 	.word	0x0800c509
 800c4b8:	0800c485 	.word	0x0800c485
 800c4bc:	0800c485 	.word	0x0800c485
 800c4c0:	0800c485 	.word	0x0800c485
 800c4c4:	0800c485 	.word	0x0800c485
 800c4c8:	0800c609 	.word	0x0800c609
 800c4cc:	0800c533 	.word	0x0800c533
 800c4d0:	0800c5c3 	.word	0x0800c5c3
 800c4d4:	0800c485 	.word	0x0800c485
 800c4d8:	0800c485 	.word	0x0800c485
 800c4dc:	0800c62b 	.word	0x0800c62b
 800c4e0:	0800c485 	.word	0x0800c485
 800c4e4:	0800c533 	.word	0x0800c533
 800c4e8:	0800c485 	.word	0x0800c485
 800c4ec:	0800c485 	.word	0x0800c485
 800c4f0:	0800c5cb 	.word	0x0800c5cb
 800c4f4:	6833      	ldr	r3, [r6, #0]
 800c4f6:	1d1a      	adds	r2, r3, #4
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	6032      	str	r2, [r6, #0]
 800c4fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c500:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c504:	2301      	movs	r3, #1
 800c506:	e09d      	b.n	800c644 <_printf_i+0x1e8>
 800c508:	6833      	ldr	r3, [r6, #0]
 800c50a:	6820      	ldr	r0, [r4, #0]
 800c50c:	1d19      	adds	r1, r3, #4
 800c50e:	6031      	str	r1, [r6, #0]
 800c510:	0606      	lsls	r6, r0, #24
 800c512:	d501      	bpl.n	800c518 <_printf_i+0xbc>
 800c514:	681d      	ldr	r5, [r3, #0]
 800c516:	e003      	b.n	800c520 <_printf_i+0xc4>
 800c518:	0645      	lsls	r5, r0, #25
 800c51a:	d5fb      	bpl.n	800c514 <_printf_i+0xb8>
 800c51c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c520:	2d00      	cmp	r5, #0
 800c522:	da03      	bge.n	800c52c <_printf_i+0xd0>
 800c524:	232d      	movs	r3, #45	@ 0x2d
 800c526:	426d      	negs	r5, r5
 800c528:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c52c:	4859      	ldr	r0, [pc, #356]	@ (800c694 <_printf_i+0x238>)
 800c52e:	230a      	movs	r3, #10
 800c530:	e011      	b.n	800c556 <_printf_i+0xfa>
 800c532:	6821      	ldr	r1, [r4, #0]
 800c534:	6833      	ldr	r3, [r6, #0]
 800c536:	0608      	lsls	r0, r1, #24
 800c538:	f853 5b04 	ldr.w	r5, [r3], #4
 800c53c:	d402      	bmi.n	800c544 <_printf_i+0xe8>
 800c53e:	0649      	lsls	r1, r1, #25
 800c540:	bf48      	it	mi
 800c542:	b2ad      	uxthmi	r5, r5
 800c544:	2f6f      	cmp	r7, #111	@ 0x6f
 800c546:	4853      	ldr	r0, [pc, #332]	@ (800c694 <_printf_i+0x238>)
 800c548:	6033      	str	r3, [r6, #0]
 800c54a:	bf14      	ite	ne
 800c54c:	230a      	movne	r3, #10
 800c54e:	2308      	moveq	r3, #8
 800c550:	2100      	movs	r1, #0
 800c552:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c556:	6866      	ldr	r6, [r4, #4]
 800c558:	60a6      	str	r6, [r4, #8]
 800c55a:	2e00      	cmp	r6, #0
 800c55c:	bfa2      	ittt	ge
 800c55e:	6821      	ldrge	r1, [r4, #0]
 800c560:	f021 0104 	bicge.w	r1, r1, #4
 800c564:	6021      	strge	r1, [r4, #0]
 800c566:	b90d      	cbnz	r5, 800c56c <_printf_i+0x110>
 800c568:	2e00      	cmp	r6, #0
 800c56a:	d04b      	beq.n	800c604 <_printf_i+0x1a8>
 800c56c:	4616      	mov	r6, r2
 800c56e:	fbb5 f1f3 	udiv	r1, r5, r3
 800c572:	fb03 5711 	mls	r7, r3, r1, r5
 800c576:	5dc7      	ldrb	r7, [r0, r7]
 800c578:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c57c:	462f      	mov	r7, r5
 800c57e:	42bb      	cmp	r3, r7
 800c580:	460d      	mov	r5, r1
 800c582:	d9f4      	bls.n	800c56e <_printf_i+0x112>
 800c584:	2b08      	cmp	r3, #8
 800c586:	d10b      	bne.n	800c5a0 <_printf_i+0x144>
 800c588:	6823      	ldr	r3, [r4, #0]
 800c58a:	07df      	lsls	r7, r3, #31
 800c58c:	d508      	bpl.n	800c5a0 <_printf_i+0x144>
 800c58e:	6923      	ldr	r3, [r4, #16]
 800c590:	6861      	ldr	r1, [r4, #4]
 800c592:	4299      	cmp	r1, r3
 800c594:	bfde      	ittt	le
 800c596:	2330      	movle	r3, #48	@ 0x30
 800c598:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c59c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c5a0:	1b92      	subs	r2, r2, r6
 800c5a2:	6122      	str	r2, [r4, #16]
 800c5a4:	f8cd a000 	str.w	sl, [sp]
 800c5a8:	464b      	mov	r3, r9
 800c5aa:	aa03      	add	r2, sp, #12
 800c5ac:	4621      	mov	r1, r4
 800c5ae:	4640      	mov	r0, r8
 800c5b0:	f7ff fee6 	bl	800c380 <_printf_common>
 800c5b4:	3001      	adds	r0, #1
 800c5b6:	d14a      	bne.n	800c64e <_printf_i+0x1f2>
 800c5b8:	f04f 30ff 	mov.w	r0, #4294967295
 800c5bc:	b004      	add	sp, #16
 800c5be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5c2:	6823      	ldr	r3, [r4, #0]
 800c5c4:	f043 0320 	orr.w	r3, r3, #32
 800c5c8:	6023      	str	r3, [r4, #0]
 800c5ca:	4833      	ldr	r0, [pc, #204]	@ (800c698 <_printf_i+0x23c>)
 800c5cc:	2778      	movs	r7, #120	@ 0x78
 800c5ce:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c5d2:	6823      	ldr	r3, [r4, #0]
 800c5d4:	6831      	ldr	r1, [r6, #0]
 800c5d6:	061f      	lsls	r7, r3, #24
 800c5d8:	f851 5b04 	ldr.w	r5, [r1], #4
 800c5dc:	d402      	bmi.n	800c5e4 <_printf_i+0x188>
 800c5de:	065f      	lsls	r7, r3, #25
 800c5e0:	bf48      	it	mi
 800c5e2:	b2ad      	uxthmi	r5, r5
 800c5e4:	6031      	str	r1, [r6, #0]
 800c5e6:	07d9      	lsls	r1, r3, #31
 800c5e8:	bf44      	itt	mi
 800c5ea:	f043 0320 	orrmi.w	r3, r3, #32
 800c5ee:	6023      	strmi	r3, [r4, #0]
 800c5f0:	b11d      	cbz	r5, 800c5fa <_printf_i+0x19e>
 800c5f2:	2310      	movs	r3, #16
 800c5f4:	e7ac      	b.n	800c550 <_printf_i+0xf4>
 800c5f6:	4827      	ldr	r0, [pc, #156]	@ (800c694 <_printf_i+0x238>)
 800c5f8:	e7e9      	b.n	800c5ce <_printf_i+0x172>
 800c5fa:	6823      	ldr	r3, [r4, #0]
 800c5fc:	f023 0320 	bic.w	r3, r3, #32
 800c600:	6023      	str	r3, [r4, #0]
 800c602:	e7f6      	b.n	800c5f2 <_printf_i+0x196>
 800c604:	4616      	mov	r6, r2
 800c606:	e7bd      	b.n	800c584 <_printf_i+0x128>
 800c608:	6833      	ldr	r3, [r6, #0]
 800c60a:	6825      	ldr	r5, [r4, #0]
 800c60c:	6961      	ldr	r1, [r4, #20]
 800c60e:	1d18      	adds	r0, r3, #4
 800c610:	6030      	str	r0, [r6, #0]
 800c612:	062e      	lsls	r6, r5, #24
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	d501      	bpl.n	800c61c <_printf_i+0x1c0>
 800c618:	6019      	str	r1, [r3, #0]
 800c61a:	e002      	b.n	800c622 <_printf_i+0x1c6>
 800c61c:	0668      	lsls	r0, r5, #25
 800c61e:	d5fb      	bpl.n	800c618 <_printf_i+0x1bc>
 800c620:	8019      	strh	r1, [r3, #0]
 800c622:	2300      	movs	r3, #0
 800c624:	6123      	str	r3, [r4, #16]
 800c626:	4616      	mov	r6, r2
 800c628:	e7bc      	b.n	800c5a4 <_printf_i+0x148>
 800c62a:	6833      	ldr	r3, [r6, #0]
 800c62c:	1d1a      	adds	r2, r3, #4
 800c62e:	6032      	str	r2, [r6, #0]
 800c630:	681e      	ldr	r6, [r3, #0]
 800c632:	6862      	ldr	r2, [r4, #4]
 800c634:	2100      	movs	r1, #0
 800c636:	4630      	mov	r0, r6
 800c638:	f7f3 fdf2 	bl	8000220 <memchr>
 800c63c:	b108      	cbz	r0, 800c642 <_printf_i+0x1e6>
 800c63e:	1b80      	subs	r0, r0, r6
 800c640:	6060      	str	r0, [r4, #4]
 800c642:	6863      	ldr	r3, [r4, #4]
 800c644:	6123      	str	r3, [r4, #16]
 800c646:	2300      	movs	r3, #0
 800c648:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c64c:	e7aa      	b.n	800c5a4 <_printf_i+0x148>
 800c64e:	6923      	ldr	r3, [r4, #16]
 800c650:	4632      	mov	r2, r6
 800c652:	4649      	mov	r1, r9
 800c654:	4640      	mov	r0, r8
 800c656:	47d0      	blx	sl
 800c658:	3001      	adds	r0, #1
 800c65a:	d0ad      	beq.n	800c5b8 <_printf_i+0x15c>
 800c65c:	6823      	ldr	r3, [r4, #0]
 800c65e:	079b      	lsls	r3, r3, #30
 800c660:	d413      	bmi.n	800c68a <_printf_i+0x22e>
 800c662:	68e0      	ldr	r0, [r4, #12]
 800c664:	9b03      	ldr	r3, [sp, #12]
 800c666:	4298      	cmp	r0, r3
 800c668:	bfb8      	it	lt
 800c66a:	4618      	movlt	r0, r3
 800c66c:	e7a6      	b.n	800c5bc <_printf_i+0x160>
 800c66e:	2301      	movs	r3, #1
 800c670:	4632      	mov	r2, r6
 800c672:	4649      	mov	r1, r9
 800c674:	4640      	mov	r0, r8
 800c676:	47d0      	blx	sl
 800c678:	3001      	adds	r0, #1
 800c67a:	d09d      	beq.n	800c5b8 <_printf_i+0x15c>
 800c67c:	3501      	adds	r5, #1
 800c67e:	68e3      	ldr	r3, [r4, #12]
 800c680:	9903      	ldr	r1, [sp, #12]
 800c682:	1a5b      	subs	r3, r3, r1
 800c684:	42ab      	cmp	r3, r5
 800c686:	dcf2      	bgt.n	800c66e <_printf_i+0x212>
 800c688:	e7eb      	b.n	800c662 <_printf_i+0x206>
 800c68a:	2500      	movs	r5, #0
 800c68c:	f104 0619 	add.w	r6, r4, #25
 800c690:	e7f5      	b.n	800c67e <_printf_i+0x222>
 800c692:	bf00      	nop
 800c694:	0800d36a 	.word	0x0800d36a
 800c698:	0800d37b 	.word	0x0800d37b

0800c69c <__sflush_r>:
 800c69c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c6a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6a4:	0716      	lsls	r6, r2, #28
 800c6a6:	4605      	mov	r5, r0
 800c6a8:	460c      	mov	r4, r1
 800c6aa:	d454      	bmi.n	800c756 <__sflush_r+0xba>
 800c6ac:	684b      	ldr	r3, [r1, #4]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	dc02      	bgt.n	800c6b8 <__sflush_r+0x1c>
 800c6b2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	dd48      	ble.n	800c74a <__sflush_r+0xae>
 800c6b8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c6ba:	2e00      	cmp	r6, #0
 800c6bc:	d045      	beq.n	800c74a <__sflush_r+0xae>
 800c6be:	2300      	movs	r3, #0
 800c6c0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c6c4:	682f      	ldr	r7, [r5, #0]
 800c6c6:	6a21      	ldr	r1, [r4, #32]
 800c6c8:	602b      	str	r3, [r5, #0]
 800c6ca:	d030      	beq.n	800c72e <__sflush_r+0x92>
 800c6cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c6ce:	89a3      	ldrh	r3, [r4, #12]
 800c6d0:	0759      	lsls	r1, r3, #29
 800c6d2:	d505      	bpl.n	800c6e0 <__sflush_r+0x44>
 800c6d4:	6863      	ldr	r3, [r4, #4]
 800c6d6:	1ad2      	subs	r2, r2, r3
 800c6d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c6da:	b10b      	cbz	r3, 800c6e0 <__sflush_r+0x44>
 800c6dc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c6de:	1ad2      	subs	r2, r2, r3
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c6e4:	6a21      	ldr	r1, [r4, #32]
 800c6e6:	4628      	mov	r0, r5
 800c6e8:	47b0      	blx	r6
 800c6ea:	1c43      	adds	r3, r0, #1
 800c6ec:	89a3      	ldrh	r3, [r4, #12]
 800c6ee:	d106      	bne.n	800c6fe <__sflush_r+0x62>
 800c6f0:	6829      	ldr	r1, [r5, #0]
 800c6f2:	291d      	cmp	r1, #29
 800c6f4:	d82b      	bhi.n	800c74e <__sflush_r+0xb2>
 800c6f6:	4a2a      	ldr	r2, [pc, #168]	@ (800c7a0 <__sflush_r+0x104>)
 800c6f8:	410a      	asrs	r2, r1
 800c6fa:	07d6      	lsls	r6, r2, #31
 800c6fc:	d427      	bmi.n	800c74e <__sflush_r+0xb2>
 800c6fe:	2200      	movs	r2, #0
 800c700:	6062      	str	r2, [r4, #4]
 800c702:	04d9      	lsls	r1, r3, #19
 800c704:	6922      	ldr	r2, [r4, #16]
 800c706:	6022      	str	r2, [r4, #0]
 800c708:	d504      	bpl.n	800c714 <__sflush_r+0x78>
 800c70a:	1c42      	adds	r2, r0, #1
 800c70c:	d101      	bne.n	800c712 <__sflush_r+0x76>
 800c70e:	682b      	ldr	r3, [r5, #0]
 800c710:	b903      	cbnz	r3, 800c714 <__sflush_r+0x78>
 800c712:	6560      	str	r0, [r4, #84]	@ 0x54
 800c714:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c716:	602f      	str	r7, [r5, #0]
 800c718:	b1b9      	cbz	r1, 800c74a <__sflush_r+0xae>
 800c71a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c71e:	4299      	cmp	r1, r3
 800c720:	d002      	beq.n	800c728 <__sflush_r+0x8c>
 800c722:	4628      	mov	r0, r5
 800c724:	f7fe fbca 	bl	800aebc <_free_r>
 800c728:	2300      	movs	r3, #0
 800c72a:	6363      	str	r3, [r4, #52]	@ 0x34
 800c72c:	e00d      	b.n	800c74a <__sflush_r+0xae>
 800c72e:	2301      	movs	r3, #1
 800c730:	4628      	mov	r0, r5
 800c732:	47b0      	blx	r6
 800c734:	4602      	mov	r2, r0
 800c736:	1c50      	adds	r0, r2, #1
 800c738:	d1c9      	bne.n	800c6ce <__sflush_r+0x32>
 800c73a:	682b      	ldr	r3, [r5, #0]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d0c6      	beq.n	800c6ce <__sflush_r+0x32>
 800c740:	2b1d      	cmp	r3, #29
 800c742:	d001      	beq.n	800c748 <__sflush_r+0xac>
 800c744:	2b16      	cmp	r3, #22
 800c746:	d11e      	bne.n	800c786 <__sflush_r+0xea>
 800c748:	602f      	str	r7, [r5, #0]
 800c74a:	2000      	movs	r0, #0
 800c74c:	e022      	b.n	800c794 <__sflush_r+0xf8>
 800c74e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c752:	b21b      	sxth	r3, r3
 800c754:	e01b      	b.n	800c78e <__sflush_r+0xf2>
 800c756:	690f      	ldr	r7, [r1, #16]
 800c758:	2f00      	cmp	r7, #0
 800c75a:	d0f6      	beq.n	800c74a <__sflush_r+0xae>
 800c75c:	0793      	lsls	r3, r2, #30
 800c75e:	680e      	ldr	r6, [r1, #0]
 800c760:	bf08      	it	eq
 800c762:	694b      	ldreq	r3, [r1, #20]
 800c764:	600f      	str	r7, [r1, #0]
 800c766:	bf18      	it	ne
 800c768:	2300      	movne	r3, #0
 800c76a:	eba6 0807 	sub.w	r8, r6, r7
 800c76e:	608b      	str	r3, [r1, #8]
 800c770:	f1b8 0f00 	cmp.w	r8, #0
 800c774:	dde9      	ble.n	800c74a <__sflush_r+0xae>
 800c776:	6a21      	ldr	r1, [r4, #32]
 800c778:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c77a:	4643      	mov	r3, r8
 800c77c:	463a      	mov	r2, r7
 800c77e:	4628      	mov	r0, r5
 800c780:	47b0      	blx	r6
 800c782:	2800      	cmp	r0, #0
 800c784:	dc08      	bgt.n	800c798 <__sflush_r+0xfc>
 800c786:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c78a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c78e:	81a3      	strh	r3, [r4, #12]
 800c790:	f04f 30ff 	mov.w	r0, #4294967295
 800c794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c798:	4407      	add	r7, r0
 800c79a:	eba8 0800 	sub.w	r8, r8, r0
 800c79e:	e7e7      	b.n	800c770 <__sflush_r+0xd4>
 800c7a0:	dfbffffe 	.word	0xdfbffffe

0800c7a4 <_fflush_r>:
 800c7a4:	b538      	push	{r3, r4, r5, lr}
 800c7a6:	690b      	ldr	r3, [r1, #16]
 800c7a8:	4605      	mov	r5, r0
 800c7aa:	460c      	mov	r4, r1
 800c7ac:	b913      	cbnz	r3, 800c7b4 <_fflush_r+0x10>
 800c7ae:	2500      	movs	r5, #0
 800c7b0:	4628      	mov	r0, r5
 800c7b2:	bd38      	pop	{r3, r4, r5, pc}
 800c7b4:	b118      	cbz	r0, 800c7be <_fflush_r+0x1a>
 800c7b6:	6a03      	ldr	r3, [r0, #32]
 800c7b8:	b90b      	cbnz	r3, 800c7be <_fflush_r+0x1a>
 800c7ba:	f7fe f9b5 	bl	800ab28 <__sinit>
 800c7be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d0f3      	beq.n	800c7ae <_fflush_r+0xa>
 800c7c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c7c8:	07d0      	lsls	r0, r2, #31
 800c7ca:	d404      	bmi.n	800c7d6 <_fflush_r+0x32>
 800c7cc:	0599      	lsls	r1, r3, #22
 800c7ce:	d402      	bmi.n	800c7d6 <_fflush_r+0x32>
 800c7d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c7d2:	f7fe fb3a 	bl	800ae4a <__retarget_lock_acquire_recursive>
 800c7d6:	4628      	mov	r0, r5
 800c7d8:	4621      	mov	r1, r4
 800c7da:	f7ff ff5f 	bl	800c69c <__sflush_r>
 800c7de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c7e0:	07da      	lsls	r2, r3, #31
 800c7e2:	4605      	mov	r5, r0
 800c7e4:	d4e4      	bmi.n	800c7b0 <_fflush_r+0xc>
 800c7e6:	89a3      	ldrh	r3, [r4, #12]
 800c7e8:	059b      	lsls	r3, r3, #22
 800c7ea:	d4e1      	bmi.n	800c7b0 <_fflush_r+0xc>
 800c7ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c7ee:	f7fe fb2d 	bl	800ae4c <__retarget_lock_release_recursive>
 800c7f2:	e7dd      	b.n	800c7b0 <_fflush_r+0xc>

0800c7f4 <fiprintf>:
 800c7f4:	b40e      	push	{r1, r2, r3}
 800c7f6:	b503      	push	{r0, r1, lr}
 800c7f8:	4601      	mov	r1, r0
 800c7fa:	ab03      	add	r3, sp, #12
 800c7fc:	4805      	ldr	r0, [pc, #20]	@ (800c814 <fiprintf+0x20>)
 800c7fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800c802:	6800      	ldr	r0, [r0, #0]
 800c804:	9301      	str	r3, [sp, #4]
 800c806:	f000 f8a3 	bl	800c950 <_vfiprintf_r>
 800c80a:	b002      	add	sp, #8
 800c80c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c810:	b003      	add	sp, #12
 800c812:	4770      	bx	lr
 800c814:	20000188 	.word	0x20000188

0800c818 <memmove>:
 800c818:	4288      	cmp	r0, r1
 800c81a:	b510      	push	{r4, lr}
 800c81c:	eb01 0402 	add.w	r4, r1, r2
 800c820:	d902      	bls.n	800c828 <memmove+0x10>
 800c822:	4284      	cmp	r4, r0
 800c824:	4623      	mov	r3, r4
 800c826:	d807      	bhi.n	800c838 <memmove+0x20>
 800c828:	1e43      	subs	r3, r0, #1
 800c82a:	42a1      	cmp	r1, r4
 800c82c:	d008      	beq.n	800c840 <memmove+0x28>
 800c82e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c832:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c836:	e7f8      	b.n	800c82a <memmove+0x12>
 800c838:	4402      	add	r2, r0
 800c83a:	4601      	mov	r1, r0
 800c83c:	428a      	cmp	r2, r1
 800c83e:	d100      	bne.n	800c842 <memmove+0x2a>
 800c840:	bd10      	pop	{r4, pc}
 800c842:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c846:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c84a:	e7f7      	b.n	800c83c <memmove+0x24>

0800c84c <_sbrk_r>:
 800c84c:	b538      	push	{r3, r4, r5, lr}
 800c84e:	4d06      	ldr	r5, [pc, #24]	@ (800c868 <_sbrk_r+0x1c>)
 800c850:	2300      	movs	r3, #0
 800c852:	4604      	mov	r4, r0
 800c854:	4608      	mov	r0, r1
 800c856:	602b      	str	r3, [r5, #0]
 800c858:	f7f4 fe20 	bl	800149c <_sbrk>
 800c85c:	1c43      	adds	r3, r0, #1
 800c85e:	d102      	bne.n	800c866 <_sbrk_r+0x1a>
 800c860:	682b      	ldr	r3, [r5, #0]
 800c862:	b103      	cbz	r3, 800c866 <_sbrk_r+0x1a>
 800c864:	6023      	str	r3, [r4, #0]
 800c866:	bd38      	pop	{r3, r4, r5, pc}
 800c868:	200020d8 	.word	0x200020d8

0800c86c <abort>:
 800c86c:	b508      	push	{r3, lr}
 800c86e:	2006      	movs	r0, #6
 800c870:	f000 fa42 	bl	800ccf8 <raise>
 800c874:	2001      	movs	r0, #1
 800c876:	f7f4 fd99 	bl	80013ac <_exit>

0800c87a <_calloc_r>:
 800c87a:	b570      	push	{r4, r5, r6, lr}
 800c87c:	fba1 5402 	umull	r5, r4, r1, r2
 800c880:	b93c      	cbnz	r4, 800c892 <_calloc_r+0x18>
 800c882:	4629      	mov	r1, r5
 800c884:	f7fe fec8 	bl	800b618 <_malloc_r>
 800c888:	4606      	mov	r6, r0
 800c88a:	b928      	cbnz	r0, 800c898 <_calloc_r+0x1e>
 800c88c:	2600      	movs	r6, #0
 800c88e:	4630      	mov	r0, r6
 800c890:	bd70      	pop	{r4, r5, r6, pc}
 800c892:	220c      	movs	r2, #12
 800c894:	6002      	str	r2, [r0, #0]
 800c896:	e7f9      	b.n	800c88c <_calloc_r+0x12>
 800c898:	462a      	mov	r2, r5
 800c89a:	4621      	mov	r1, r4
 800c89c:	f7fe f9ed 	bl	800ac7a <memset>
 800c8a0:	e7f5      	b.n	800c88e <_calloc_r+0x14>

0800c8a2 <_realloc_r>:
 800c8a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8a6:	4680      	mov	r8, r0
 800c8a8:	4615      	mov	r5, r2
 800c8aa:	460c      	mov	r4, r1
 800c8ac:	b921      	cbnz	r1, 800c8b8 <_realloc_r+0x16>
 800c8ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c8b2:	4611      	mov	r1, r2
 800c8b4:	f7fe beb0 	b.w	800b618 <_malloc_r>
 800c8b8:	b92a      	cbnz	r2, 800c8c6 <_realloc_r+0x24>
 800c8ba:	f7fe faff 	bl	800aebc <_free_r>
 800c8be:	2400      	movs	r4, #0
 800c8c0:	4620      	mov	r0, r4
 800c8c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8c6:	f000 fa33 	bl	800cd30 <_malloc_usable_size_r>
 800c8ca:	4285      	cmp	r5, r0
 800c8cc:	4606      	mov	r6, r0
 800c8ce:	d802      	bhi.n	800c8d6 <_realloc_r+0x34>
 800c8d0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c8d4:	d8f4      	bhi.n	800c8c0 <_realloc_r+0x1e>
 800c8d6:	4629      	mov	r1, r5
 800c8d8:	4640      	mov	r0, r8
 800c8da:	f7fe fe9d 	bl	800b618 <_malloc_r>
 800c8de:	4607      	mov	r7, r0
 800c8e0:	2800      	cmp	r0, #0
 800c8e2:	d0ec      	beq.n	800c8be <_realloc_r+0x1c>
 800c8e4:	42b5      	cmp	r5, r6
 800c8e6:	462a      	mov	r2, r5
 800c8e8:	4621      	mov	r1, r4
 800c8ea:	bf28      	it	cs
 800c8ec:	4632      	movcs	r2, r6
 800c8ee:	f7fe faae 	bl	800ae4e <memcpy>
 800c8f2:	4621      	mov	r1, r4
 800c8f4:	4640      	mov	r0, r8
 800c8f6:	f7fe fae1 	bl	800aebc <_free_r>
 800c8fa:	463c      	mov	r4, r7
 800c8fc:	e7e0      	b.n	800c8c0 <_realloc_r+0x1e>

0800c8fe <__sfputc_r>:
 800c8fe:	6893      	ldr	r3, [r2, #8]
 800c900:	3b01      	subs	r3, #1
 800c902:	2b00      	cmp	r3, #0
 800c904:	b410      	push	{r4}
 800c906:	6093      	str	r3, [r2, #8]
 800c908:	da08      	bge.n	800c91c <__sfputc_r+0x1e>
 800c90a:	6994      	ldr	r4, [r2, #24]
 800c90c:	42a3      	cmp	r3, r4
 800c90e:	db01      	blt.n	800c914 <__sfputc_r+0x16>
 800c910:	290a      	cmp	r1, #10
 800c912:	d103      	bne.n	800c91c <__sfputc_r+0x1e>
 800c914:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c918:	f000 b932 	b.w	800cb80 <__swbuf_r>
 800c91c:	6813      	ldr	r3, [r2, #0]
 800c91e:	1c58      	adds	r0, r3, #1
 800c920:	6010      	str	r0, [r2, #0]
 800c922:	7019      	strb	r1, [r3, #0]
 800c924:	4608      	mov	r0, r1
 800c926:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c92a:	4770      	bx	lr

0800c92c <__sfputs_r>:
 800c92c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c92e:	4606      	mov	r6, r0
 800c930:	460f      	mov	r7, r1
 800c932:	4614      	mov	r4, r2
 800c934:	18d5      	adds	r5, r2, r3
 800c936:	42ac      	cmp	r4, r5
 800c938:	d101      	bne.n	800c93e <__sfputs_r+0x12>
 800c93a:	2000      	movs	r0, #0
 800c93c:	e007      	b.n	800c94e <__sfputs_r+0x22>
 800c93e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c942:	463a      	mov	r2, r7
 800c944:	4630      	mov	r0, r6
 800c946:	f7ff ffda 	bl	800c8fe <__sfputc_r>
 800c94a:	1c43      	adds	r3, r0, #1
 800c94c:	d1f3      	bne.n	800c936 <__sfputs_r+0xa>
 800c94e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c950 <_vfiprintf_r>:
 800c950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c954:	460d      	mov	r5, r1
 800c956:	b09d      	sub	sp, #116	@ 0x74
 800c958:	4614      	mov	r4, r2
 800c95a:	4698      	mov	r8, r3
 800c95c:	4606      	mov	r6, r0
 800c95e:	b118      	cbz	r0, 800c968 <_vfiprintf_r+0x18>
 800c960:	6a03      	ldr	r3, [r0, #32]
 800c962:	b90b      	cbnz	r3, 800c968 <_vfiprintf_r+0x18>
 800c964:	f7fe f8e0 	bl	800ab28 <__sinit>
 800c968:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c96a:	07d9      	lsls	r1, r3, #31
 800c96c:	d405      	bmi.n	800c97a <_vfiprintf_r+0x2a>
 800c96e:	89ab      	ldrh	r3, [r5, #12]
 800c970:	059a      	lsls	r2, r3, #22
 800c972:	d402      	bmi.n	800c97a <_vfiprintf_r+0x2a>
 800c974:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c976:	f7fe fa68 	bl	800ae4a <__retarget_lock_acquire_recursive>
 800c97a:	89ab      	ldrh	r3, [r5, #12]
 800c97c:	071b      	lsls	r3, r3, #28
 800c97e:	d501      	bpl.n	800c984 <_vfiprintf_r+0x34>
 800c980:	692b      	ldr	r3, [r5, #16]
 800c982:	b99b      	cbnz	r3, 800c9ac <_vfiprintf_r+0x5c>
 800c984:	4629      	mov	r1, r5
 800c986:	4630      	mov	r0, r6
 800c988:	f000 f938 	bl	800cbfc <__swsetup_r>
 800c98c:	b170      	cbz	r0, 800c9ac <_vfiprintf_r+0x5c>
 800c98e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c990:	07dc      	lsls	r4, r3, #31
 800c992:	d504      	bpl.n	800c99e <_vfiprintf_r+0x4e>
 800c994:	f04f 30ff 	mov.w	r0, #4294967295
 800c998:	b01d      	add	sp, #116	@ 0x74
 800c99a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c99e:	89ab      	ldrh	r3, [r5, #12]
 800c9a0:	0598      	lsls	r0, r3, #22
 800c9a2:	d4f7      	bmi.n	800c994 <_vfiprintf_r+0x44>
 800c9a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c9a6:	f7fe fa51 	bl	800ae4c <__retarget_lock_release_recursive>
 800c9aa:	e7f3      	b.n	800c994 <_vfiprintf_r+0x44>
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	9309      	str	r3, [sp, #36]	@ 0x24
 800c9b0:	2320      	movs	r3, #32
 800c9b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c9b6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c9ba:	2330      	movs	r3, #48	@ 0x30
 800c9bc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cb6c <_vfiprintf_r+0x21c>
 800c9c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c9c4:	f04f 0901 	mov.w	r9, #1
 800c9c8:	4623      	mov	r3, r4
 800c9ca:	469a      	mov	sl, r3
 800c9cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c9d0:	b10a      	cbz	r2, 800c9d6 <_vfiprintf_r+0x86>
 800c9d2:	2a25      	cmp	r2, #37	@ 0x25
 800c9d4:	d1f9      	bne.n	800c9ca <_vfiprintf_r+0x7a>
 800c9d6:	ebba 0b04 	subs.w	fp, sl, r4
 800c9da:	d00b      	beq.n	800c9f4 <_vfiprintf_r+0xa4>
 800c9dc:	465b      	mov	r3, fp
 800c9de:	4622      	mov	r2, r4
 800c9e0:	4629      	mov	r1, r5
 800c9e2:	4630      	mov	r0, r6
 800c9e4:	f7ff ffa2 	bl	800c92c <__sfputs_r>
 800c9e8:	3001      	adds	r0, #1
 800c9ea:	f000 80a7 	beq.w	800cb3c <_vfiprintf_r+0x1ec>
 800c9ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c9f0:	445a      	add	r2, fp
 800c9f2:	9209      	str	r2, [sp, #36]	@ 0x24
 800c9f4:	f89a 3000 	ldrb.w	r3, [sl]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	f000 809f 	beq.w	800cb3c <_vfiprintf_r+0x1ec>
 800c9fe:	2300      	movs	r3, #0
 800ca00:	f04f 32ff 	mov.w	r2, #4294967295
 800ca04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ca08:	f10a 0a01 	add.w	sl, sl, #1
 800ca0c:	9304      	str	r3, [sp, #16]
 800ca0e:	9307      	str	r3, [sp, #28]
 800ca10:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ca14:	931a      	str	r3, [sp, #104]	@ 0x68
 800ca16:	4654      	mov	r4, sl
 800ca18:	2205      	movs	r2, #5
 800ca1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca1e:	4853      	ldr	r0, [pc, #332]	@ (800cb6c <_vfiprintf_r+0x21c>)
 800ca20:	f7f3 fbfe 	bl	8000220 <memchr>
 800ca24:	9a04      	ldr	r2, [sp, #16]
 800ca26:	b9d8      	cbnz	r0, 800ca60 <_vfiprintf_r+0x110>
 800ca28:	06d1      	lsls	r1, r2, #27
 800ca2a:	bf44      	itt	mi
 800ca2c:	2320      	movmi	r3, #32
 800ca2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ca32:	0713      	lsls	r3, r2, #28
 800ca34:	bf44      	itt	mi
 800ca36:	232b      	movmi	r3, #43	@ 0x2b
 800ca38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ca3c:	f89a 3000 	ldrb.w	r3, [sl]
 800ca40:	2b2a      	cmp	r3, #42	@ 0x2a
 800ca42:	d015      	beq.n	800ca70 <_vfiprintf_r+0x120>
 800ca44:	9a07      	ldr	r2, [sp, #28]
 800ca46:	4654      	mov	r4, sl
 800ca48:	2000      	movs	r0, #0
 800ca4a:	f04f 0c0a 	mov.w	ip, #10
 800ca4e:	4621      	mov	r1, r4
 800ca50:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca54:	3b30      	subs	r3, #48	@ 0x30
 800ca56:	2b09      	cmp	r3, #9
 800ca58:	d94b      	bls.n	800caf2 <_vfiprintf_r+0x1a2>
 800ca5a:	b1b0      	cbz	r0, 800ca8a <_vfiprintf_r+0x13a>
 800ca5c:	9207      	str	r2, [sp, #28]
 800ca5e:	e014      	b.n	800ca8a <_vfiprintf_r+0x13a>
 800ca60:	eba0 0308 	sub.w	r3, r0, r8
 800ca64:	fa09 f303 	lsl.w	r3, r9, r3
 800ca68:	4313      	orrs	r3, r2
 800ca6a:	9304      	str	r3, [sp, #16]
 800ca6c:	46a2      	mov	sl, r4
 800ca6e:	e7d2      	b.n	800ca16 <_vfiprintf_r+0xc6>
 800ca70:	9b03      	ldr	r3, [sp, #12]
 800ca72:	1d19      	adds	r1, r3, #4
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	9103      	str	r1, [sp, #12]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	bfbb      	ittet	lt
 800ca7c:	425b      	neglt	r3, r3
 800ca7e:	f042 0202 	orrlt.w	r2, r2, #2
 800ca82:	9307      	strge	r3, [sp, #28]
 800ca84:	9307      	strlt	r3, [sp, #28]
 800ca86:	bfb8      	it	lt
 800ca88:	9204      	strlt	r2, [sp, #16]
 800ca8a:	7823      	ldrb	r3, [r4, #0]
 800ca8c:	2b2e      	cmp	r3, #46	@ 0x2e
 800ca8e:	d10a      	bne.n	800caa6 <_vfiprintf_r+0x156>
 800ca90:	7863      	ldrb	r3, [r4, #1]
 800ca92:	2b2a      	cmp	r3, #42	@ 0x2a
 800ca94:	d132      	bne.n	800cafc <_vfiprintf_r+0x1ac>
 800ca96:	9b03      	ldr	r3, [sp, #12]
 800ca98:	1d1a      	adds	r2, r3, #4
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	9203      	str	r2, [sp, #12]
 800ca9e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800caa2:	3402      	adds	r4, #2
 800caa4:	9305      	str	r3, [sp, #20]
 800caa6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cb7c <_vfiprintf_r+0x22c>
 800caaa:	7821      	ldrb	r1, [r4, #0]
 800caac:	2203      	movs	r2, #3
 800caae:	4650      	mov	r0, sl
 800cab0:	f7f3 fbb6 	bl	8000220 <memchr>
 800cab4:	b138      	cbz	r0, 800cac6 <_vfiprintf_r+0x176>
 800cab6:	9b04      	ldr	r3, [sp, #16]
 800cab8:	eba0 000a 	sub.w	r0, r0, sl
 800cabc:	2240      	movs	r2, #64	@ 0x40
 800cabe:	4082      	lsls	r2, r0
 800cac0:	4313      	orrs	r3, r2
 800cac2:	3401      	adds	r4, #1
 800cac4:	9304      	str	r3, [sp, #16]
 800cac6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800caca:	4829      	ldr	r0, [pc, #164]	@ (800cb70 <_vfiprintf_r+0x220>)
 800cacc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cad0:	2206      	movs	r2, #6
 800cad2:	f7f3 fba5 	bl	8000220 <memchr>
 800cad6:	2800      	cmp	r0, #0
 800cad8:	d03f      	beq.n	800cb5a <_vfiprintf_r+0x20a>
 800cada:	4b26      	ldr	r3, [pc, #152]	@ (800cb74 <_vfiprintf_r+0x224>)
 800cadc:	bb1b      	cbnz	r3, 800cb26 <_vfiprintf_r+0x1d6>
 800cade:	9b03      	ldr	r3, [sp, #12]
 800cae0:	3307      	adds	r3, #7
 800cae2:	f023 0307 	bic.w	r3, r3, #7
 800cae6:	3308      	adds	r3, #8
 800cae8:	9303      	str	r3, [sp, #12]
 800caea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800caec:	443b      	add	r3, r7
 800caee:	9309      	str	r3, [sp, #36]	@ 0x24
 800caf0:	e76a      	b.n	800c9c8 <_vfiprintf_r+0x78>
 800caf2:	fb0c 3202 	mla	r2, ip, r2, r3
 800caf6:	460c      	mov	r4, r1
 800caf8:	2001      	movs	r0, #1
 800cafa:	e7a8      	b.n	800ca4e <_vfiprintf_r+0xfe>
 800cafc:	2300      	movs	r3, #0
 800cafe:	3401      	adds	r4, #1
 800cb00:	9305      	str	r3, [sp, #20]
 800cb02:	4619      	mov	r1, r3
 800cb04:	f04f 0c0a 	mov.w	ip, #10
 800cb08:	4620      	mov	r0, r4
 800cb0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb0e:	3a30      	subs	r2, #48	@ 0x30
 800cb10:	2a09      	cmp	r2, #9
 800cb12:	d903      	bls.n	800cb1c <_vfiprintf_r+0x1cc>
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d0c6      	beq.n	800caa6 <_vfiprintf_r+0x156>
 800cb18:	9105      	str	r1, [sp, #20]
 800cb1a:	e7c4      	b.n	800caa6 <_vfiprintf_r+0x156>
 800cb1c:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb20:	4604      	mov	r4, r0
 800cb22:	2301      	movs	r3, #1
 800cb24:	e7f0      	b.n	800cb08 <_vfiprintf_r+0x1b8>
 800cb26:	ab03      	add	r3, sp, #12
 800cb28:	9300      	str	r3, [sp, #0]
 800cb2a:	462a      	mov	r2, r5
 800cb2c:	4b12      	ldr	r3, [pc, #72]	@ (800cb78 <_vfiprintf_r+0x228>)
 800cb2e:	a904      	add	r1, sp, #16
 800cb30:	4630      	mov	r0, r6
 800cb32:	f3af 8000 	nop.w
 800cb36:	4607      	mov	r7, r0
 800cb38:	1c78      	adds	r0, r7, #1
 800cb3a:	d1d6      	bne.n	800caea <_vfiprintf_r+0x19a>
 800cb3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cb3e:	07d9      	lsls	r1, r3, #31
 800cb40:	d405      	bmi.n	800cb4e <_vfiprintf_r+0x1fe>
 800cb42:	89ab      	ldrh	r3, [r5, #12]
 800cb44:	059a      	lsls	r2, r3, #22
 800cb46:	d402      	bmi.n	800cb4e <_vfiprintf_r+0x1fe>
 800cb48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cb4a:	f7fe f97f 	bl	800ae4c <__retarget_lock_release_recursive>
 800cb4e:	89ab      	ldrh	r3, [r5, #12]
 800cb50:	065b      	lsls	r3, r3, #25
 800cb52:	f53f af1f 	bmi.w	800c994 <_vfiprintf_r+0x44>
 800cb56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cb58:	e71e      	b.n	800c998 <_vfiprintf_r+0x48>
 800cb5a:	ab03      	add	r3, sp, #12
 800cb5c:	9300      	str	r3, [sp, #0]
 800cb5e:	462a      	mov	r2, r5
 800cb60:	4b05      	ldr	r3, [pc, #20]	@ (800cb78 <_vfiprintf_r+0x228>)
 800cb62:	a904      	add	r1, sp, #16
 800cb64:	4630      	mov	r0, r6
 800cb66:	f7ff fc79 	bl	800c45c <_printf_i>
 800cb6a:	e7e4      	b.n	800cb36 <_vfiprintf_r+0x1e6>
 800cb6c:	0800d359 	.word	0x0800d359
 800cb70:	0800d363 	.word	0x0800d363
 800cb74:	00000000 	.word	0x00000000
 800cb78:	0800c92d 	.word	0x0800c92d
 800cb7c:	0800d35f 	.word	0x0800d35f

0800cb80 <__swbuf_r>:
 800cb80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb82:	460e      	mov	r6, r1
 800cb84:	4614      	mov	r4, r2
 800cb86:	4605      	mov	r5, r0
 800cb88:	b118      	cbz	r0, 800cb92 <__swbuf_r+0x12>
 800cb8a:	6a03      	ldr	r3, [r0, #32]
 800cb8c:	b90b      	cbnz	r3, 800cb92 <__swbuf_r+0x12>
 800cb8e:	f7fd ffcb 	bl	800ab28 <__sinit>
 800cb92:	69a3      	ldr	r3, [r4, #24]
 800cb94:	60a3      	str	r3, [r4, #8]
 800cb96:	89a3      	ldrh	r3, [r4, #12]
 800cb98:	071a      	lsls	r2, r3, #28
 800cb9a:	d501      	bpl.n	800cba0 <__swbuf_r+0x20>
 800cb9c:	6923      	ldr	r3, [r4, #16]
 800cb9e:	b943      	cbnz	r3, 800cbb2 <__swbuf_r+0x32>
 800cba0:	4621      	mov	r1, r4
 800cba2:	4628      	mov	r0, r5
 800cba4:	f000 f82a 	bl	800cbfc <__swsetup_r>
 800cba8:	b118      	cbz	r0, 800cbb2 <__swbuf_r+0x32>
 800cbaa:	f04f 37ff 	mov.w	r7, #4294967295
 800cbae:	4638      	mov	r0, r7
 800cbb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cbb2:	6823      	ldr	r3, [r4, #0]
 800cbb4:	6922      	ldr	r2, [r4, #16]
 800cbb6:	1a98      	subs	r0, r3, r2
 800cbb8:	6963      	ldr	r3, [r4, #20]
 800cbba:	b2f6      	uxtb	r6, r6
 800cbbc:	4283      	cmp	r3, r0
 800cbbe:	4637      	mov	r7, r6
 800cbc0:	dc05      	bgt.n	800cbce <__swbuf_r+0x4e>
 800cbc2:	4621      	mov	r1, r4
 800cbc4:	4628      	mov	r0, r5
 800cbc6:	f7ff fded 	bl	800c7a4 <_fflush_r>
 800cbca:	2800      	cmp	r0, #0
 800cbcc:	d1ed      	bne.n	800cbaa <__swbuf_r+0x2a>
 800cbce:	68a3      	ldr	r3, [r4, #8]
 800cbd0:	3b01      	subs	r3, #1
 800cbd2:	60a3      	str	r3, [r4, #8]
 800cbd4:	6823      	ldr	r3, [r4, #0]
 800cbd6:	1c5a      	adds	r2, r3, #1
 800cbd8:	6022      	str	r2, [r4, #0]
 800cbda:	701e      	strb	r6, [r3, #0]
 800cbdc:	6962      	ldr	r2, [r4, #20]
 800cbde:	1c43      	adds	r3, r0, #1
 800cbe0:	429a      	cmp	r2, r3
 800cbe2:	d004      	beq.n	800cbee <__swbuf_r+0x6e>
 800cbe4:	89a3      	ldrh	r3, [r4, #12]
 800cbe6:	07db      	lsls	r3, r3, #31
 800cbe8:	d5e1      	bpl.n	800cbae <__swbuf_r+0x2e>
 800cbea:	2e0a      	cmp	r6, #10
 800cbec:	d1df      	bne.n	800cbae <__swbuf_r+0x2e>
 800cbee:	4621      	mov	r1, r4
 800cbf0:	4628      	mov	r0, r5
 800cbf2:	f7ff fdd7 	bl	800c7a4 <_fflush_r>
 800cbf6:	2800      	cmp	r0, #0
 800cbf8:	d0d9      	beq.n	800cbae <__swbuf_r+0x2e>
 800cbfa:	e7d6      	b.n	800cbaa <__swbuf_r+0x2a>

0800cbfc <__swsetup_r>:
 800cbfc:	b538      	push	{r3, r4, r5, lr}
 800cbfe:	4b29      	ldr	r3, [pc, #164]	@ (800cca4 <__swsetup_r+0xa8>)
 800cc00:	4605      	mov	r5, r0
 800cc02:	6818      	ldr	r0, [r3, #0]
 800cc04:	460c      	mov	r4, r1
 800cc06:	b118      	cbz	r0, 800cc10 <__swsetup_r+0x14>
 800cc08:	6a03      	ldr	r3, [r0, #32]
 800cc0a:	b90b      	cbnz	r3, 800cc10 <__swsetup_r+0x14>
 800cc0c:	f7fd ff8c 	bl	800ab28 <__sinit>
 800cc10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc14:	0719      	lsls	r1, r3, #28
 800cc16:	d422      	bmi.n	800cc5e <__swsetup_r+0x62>
 800cc18:	06da      	lsls	r2, r3, #27
 800cc1a:	d407      	bmi.n	800cc2c <__swsetup_r+0x30>
 800cc1c:	2209      	movs	r2, #9
 800cc1e:	602a      	str	r2, [r5, #0]
 800cc20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cc24:	81a3      	strh	r3, [r4, #12]
 800cc26:	f04f 30ff 	mov.w	r0, #4294967295
 800cc2a:	e033      	b.n	800cc94 <__swsetup_r+0x98>
 800cc2c:	0758      	lsls	r0, r3, #29
 800cc2e:	d512      	bpl.n	800cc56 <__swsetup_r+0x5a>
 800cc30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cc32:	b141      	cbz	r1, 800cc46 <__swsetup_r+0x4a>
 800cc34:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cc38:	4299      	cmp	r1, r3
 800cc3a:	d002      	beq.n	800cc42 <__swsetup_r+0x46>
 800cc3c:	4628      	mov	r0, r5
 800cc3e:	f7fe f93d 	bl	800aebc <_free_r>
 800cc42:	2300      	movs	r3, #0
 800cc44:	6363      	str	r3, [r4, #52]	@ 0x34
 800cc46:	89a3      	ldrh	r3, [r4, #12]
 800cc48:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cc4c:	81a3      	strh	r3, [r4, #12]
 800cc4e:	2300      	movs	r3, #0
 800cc50:	6063      	str	r3, [r4, #4]
 800cc52:	6923      	ldr	r3, [r4, #16]
 800cc54:	6023      	str	r3, [r4, #0]
 800cc56:	89a3      	ldrh	r3, [r4, #12]
 800cc58:	f043 0308 	orr.w	r3, r3, #8
 800cc5c:	81a3      	strh	r3, [r4, #12]
 800cc5e:	6923      	ldr	r3, [r4, #16]
 800cc60:	b94b      	cbnz	r3, 800cc76 <__swsetup_r+0x7a>
 800cc62:	89a3      	ldrh	r3, [r4, #12]
 800cc64:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cc68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cc6c:	d003      	beq.n	800cc76 <__swsetup_r+0x7a>
 800cc6e:	4621      	mov	r1, r4
 800cc70:	4628      	mov	r0, r5
 800cc72:	f000 f88b 	bl	800cd8c <__smakebuf_r>
 800cc76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc7a:	f013 0201 	ands.w	r2, r3, #1
 800cc7e:	d00a      	beq.n	800cc96 <__swsetup_r+0x9a>
 800cc80:	2200      	movs	r2, #0
 800cc82:	60a2      	str	r2, [r4, #8]
 800cc84:	6962      	ldr	r2, [r4, #20]
 800cc86:	4252      	negs	r2, r2
 800cc88:	61a2      	str	r2, [r4, #24]
 800cc8a:	6922      	ldr	r2, [r4, #16]
 800cc8c:	b942      	cbnz	r2, 800cca0 <__swsetup_r+0xa4>
 800cc8e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cc92:	d1c5      	bne.n	800cc20 <__swsetup_r+0x24>
 800cc94:	bd38      	pop	{r3, r4, r5, pc}
 800cc96:	0799      	lsls	r1, r3, #30
 800cc98:	bf58      	it	pl
 800cc9a:	6962      	ldrpl	r2, [r4, #20]
 800cc9c:	60a2      	str	r2, [r4, #8]
 800cc9e:	e7f4      	b.n	800cc8a <__swsetup_r+0x8e>
 800cca0:	2000      	movs	r0, #0
 800cca2:	e7f7      	b.n	800cc94 <__swsetup_r+0x98>
 800cca4:	20000188 	.word	0x20000188

0800cca8 <_raise_r>:
 800cca8:	291f      	cmp	r1, #31
 800ccaa:	b538      	push	{r3, r4, r5, lr}
 800ccac:	4605      	mov	r5, r0
 800ccae:	460c      	mov	r4, r1
 800ccb0:	d904      	bls.n	800ccbc <_raise_r+0x14>
 800ccb2:	2316      	movs	r3, #22
 800ccb4:	6003      	str	r3, [r0, #0]
 800ccb6:	f04f 30ff 	mov.w	r0, #4294967295
 800ccba:	bd38      	pop	{r3, r4, r5, pc}
 800ccbc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ccbe:	b112      	cbz	r2, 800ccc6 <_raise_r+0x1e>
 800ccc0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ccc4:	b94b      	cbnz	r3, 800ccda <_raise_r+0x32>
 800ccc6:	4628      	mov	r0, r5
 800ccc8:	f000 f830 	bl	800cd2c <_getpid_r>
 800cccc:	4622      	mov	r2, r4
 800ccce:	4601      	mov	r1, r0
 800ccd0:	4628      	mov	r0, r5
 800ccd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ccd6:	f000 b817 	b.w	800cd08 <_kill_r>
 800ccda:	2b01      	cmp	r3, #1
 800ccdc:	d00a      	beq.n	800ccf4 <_raise_r+0x4c>
 800ccde:	1c59      	adds	r1, r3, #1
 800cce0:	d103      	bne.n	800ccea <_raise_r+0x42>
 800cce2:	2316      	movs	r3, #22
 800cce4:	6003      	str	r3, [r0, #0]
 800cce6:	2001      	movs	r0, #1
 800cce8:	e7e7      	b.n	800ccba <_raise_r+0x12>
 800ccea:	2100      	movs	r1, #0
 800ccec:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ccf0:	4620      	mov	r0, r4
 800ccf2:	4798      	blx	r3
 800ccf4:	2000      	movs	r0, #0
 800ccf6:	e7e0      	b.n	800ccba <_raise_r+0x12>

0800ccf8 <raise>:
 800ccf8:	4b02      	ldr	r3, [pc, #8]	@ (800cd04 <raise+0xc>)
 800ccfa:	4601      	mov	r1, r0
 800ccfc:	6818      	ldr	r0, [r3, #0]
 800ccfe:	f7ff bfd3 	b.w	800cca8 <_raise_r>
 800cd02:	bf00      	nop
 800cd04:	20000188 	.word	0x20000188

0800cd08 <_kill_r>:
 800cd08:	b538      	push	{r3, r4, r5, lr}
 800cd0a:	4d07      	ldr	r5, [pc, #28]	@ (800cd28 <_kill_r+0x20>)
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	4604      	mov	r4, r0
 800cd10:	4608      	mov	r0, r1
 800cd12:	4611      	mov	r1, r2
 800cd14:	602b      	str	r3, [r5, #0]
 800cd16:	f7f4 fb39 	bl	800138c <_kill>
 800cd1a:	1c43      	adds	r3, r0, #1
 800cd1c:	d102      	bne.n	800cd24 <_kill_r+0x1c>
 800cd1e:	682b      	ldr	r3, [r5, #0]
 800cd20:	b103      	cbz	r3, 800cd24 <_kill_r+0x1c>
 800cd22:	6023      	str	r3, [r4, #0]
 800cd24:	bd38      	pop	{r3, r4, r5, pc}
 800cd26:	bf00      	nop
 800cd28:	200020d8 	.word	0x200020d8

0800cd2c <_getpid_r>:
 800cd2c:	f7f4 bb26 	b.w	800137c <_getpid>

0800cd30 <_malloc_usable_size_r>:
 800cd30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd34:	1f18      	subs	r0, r3, #4
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	bfbc      	itt	lt
 800cd3a:	580b      	ldrlt	r3, [r1, r0]
 800cd3c:	18c0      	addlt	r0, r0, r3
 800cd3e:	4770      	bx	lr

0800cd40 <__swhatbuf_r>:
 800cd40:	b570      	push	{r4, r5, r6, lr}
 800cd42:	460c      	mov	r4, r1
 800cd44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd48:	2900      	cmp	r1, #0
 800cd4a:	b096      	sub	sp, #88	@ 0x58
 800cd4c:	4615      	mov	r5, r2
 800cd4e:	461e      	mov	r6, r3
 800cd50:	da0d      	bge.n	800cd6e <__swhatbuf_r+0x2e>
 800cd52:	89a3      	ldrh	r3, [r4, #12]
 800cd54:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cd58:	f04f 0100 	mov.w	r1, #0
 800cd5c:	bf14      	ite	ne
 800cd5e:	2340      	movne	r3, #64	@ 0x40
 800cd60:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cd64:	2000      	movs	r0, #0
 800cd66:	6031      	str	r1, [r6, #0]
 800cd68:	602b      	str	r3, [r5, #0]
 800cd6a:	b016      	add	sp, #88	@ 0x58
 800cd6c:	bd70      	pop	{r4, r5, r6, pc}
 800cd6e:	466a      	mov	r2, sp
 800cd70:	f000 f848 	bl	800ce04 <_fstat_r>
 800cd74:	2800      	cmp	r0, #0
 800cd76:	dbec      	blt.n	800cd52 <__swhatbuf_r+0x12>
 800cd78:	9901      	ldr	r1, [sp, #4]
 800cd7a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cd7e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cd82:	4259      	negs	r1, r3
 800cd84:	4159      	adcs	r1, r3
 800cd86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cd8a:	e7eb      	b.n	800cd64 <__swhatbuf_r+0x24>

0800cd8c <__smakebuf_r>:
 800cd8c:	898b      	ldrh	r3, [r1, #12]
 800cd8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cd90:	079d      	lsls	r5, r3, #30
 800cd92:	4606      	mov	r6, r0
 800cd94:	460c      	mov	r4, r1
 800cd96:	d507      	bpl.n	800cda8 <__smakebuf_r+0x1c>
 800cd98:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cd9c:	6023      	str	r3, [r4, #0]
 800cd9e:	6123      	str	r3, [r4, #16]
 800cda0:	2301      	movs	r3, #1
 800cda2:	6163      	str	r3, [r4, #20]
 800cda4:	b003      	add	sp, #12
 800cda6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cda8:	ab01      	add	r3, sp, #4
 800cdaa:	466a      	mov	r2, sp
 800cdac:	f7ff ffc8 	bl	800cd40 <__swhatbuf_r>
 800cdb0:	9f00      	ldr	r7, [sp, #0]
 800cdb2:	4605      	mov	r5, r0
 800cdb4:	4639      	mov	r1, r7
 800cdb6:	4630      	mov	r0, r6
 800cdb8:	f7fe fc2e 	bl	800b618 <_malloc_r>
 800cdbc:	b948      	cbnz	r0, 800cdd2 <__smakebuf_r+0x46>
 800cdbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cdc2:	059a      	lsls	r2, r3, #22
 800cdc4:	d4ee      	bmi.n	800cda4 <__smakebuf_r+0x18>
 800cdc6:	f023 0303 	bic.w	r3, r3, #3
 800cdca:	f043 0302 	orr.w	r3, r3, #2
 800cdce:	81a3      	strh	r3, [r4, #12]
 800cdd0:	e7e2      	b.n	800cd98 <__smakebuf_r+0xc>
 800cdd2:	89a3      	ldrh	r3, [r4, #12]
 800cdd4:	6020      	str	r0, [r4, #0]
 800cdd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cdda:	81a3      	strh	r3, [r4, #12]
 800cddc:	9b01      	ldr	r3, [sp, #4]
 800cdde:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cde2:	b15b      	cbz	r3, 800cdfc <__smakebuf_r+0x70>
 800cde4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cde8:	4630      	mov	r0, r6
 800cdea:	f000 f81d 	bl	800ce28 <_isatty_r>
 800cdee:	b128      	cbz	r0, 800cdfc <__smakebuf_r+0x70>
 800cdf0:	89a3      	ldrh	r3, [r4, #12]
 800cdf2:	f023 0303 	bic.w	r3, r3, #3
 800cdf6:	f043 0301 	orr.w	r3, r3, #1
 800cdfa:	81a3      	strh	r3, [r4, #12]
 800cdfc:	89a3      	ldrh	r3, [r4, #12]
 800cdfe:	431d      	orrs	r5, r3
 800ce00:	81a5      	strh	r5, [r4, #12]
 800ce02:	e7cf      	b.n	800cda4 <__smakebuf_r+0x18>

0800ce04 <_fstat_r>:
 800ce04:	b538      	push	{r3, r4, r5, lr}
 800ce06:	4d07      	ldr	r5, [pc, #28]	@ (800ce24 <_fstat_r+0x20>)
 800ce08:	2300      	movs	r3, #0
 800ce0a:	4604      	mov	r4, r0
 800ce0c:	4608      	mov	r0, r1
 800ce0e:	4611      	mov	r1, r2
 800ce10:	602b      	str	r3, [r5, #0]
 800ce12:	f7f4 fb1b 	bl	800144c <_fstat>
 800ce16:	1c43      	adds	r3, r0, #1
 800ce18:	d102      	bne.n	800ce20 <_fstat_r+0x1c>
 800ce1a:	682b      	ldr	r3, [r5, #0]
 800ce1c:	b103      	cbz	r3, 800ce20 <_fstat_r+0x1c>
 800ce1e:	6023      	str	r3, [r4, #0]
 800ce20:	bd38      	pop	{r3, r4, r5, pc}
 800ce22:	bf00      	nop
 800ce24:	200020d8 	.word	0x200020d8

0800ce28 <_isatty_r>:
 800ce28:	b538      	push	{r3, r4, r5, lr}
 800ce2a:	4d06      	ldr	r5, [pc, #24]	@ (800ce44 <_isatty_r+0x1c>)
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	4604      	mov	r4, r0
 800ce30:	4608      	mov	r0, r1
 800ce32:	602b      	str	r3, [r5, #0]
 800ce34:	f7f4 fb1a 	bl	800146c <_isatty>
 800ce38:	1c43      	adds	r3, r0, #1
 800ce3a:	d102      	bne.n	800ce42 <_isatty_r+0x1a>
 800ce3c:	682b      	ldr	r3, [r5, #0]
 800ce3e:	b103      	cbz	r3, 800ce42 <_isatty_r+0x1a>
 800ce40:	6023      	str	r3, [r4, #0]
 800ce42:	bd38      	pop	{r3, r4, r5, pc}
 800ce44:	200020d8 	.word	0x200020d8

0800ce48 <_init>:
 800ce48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce4a:	bf00      	nop
 800ce4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce4e:	bc08      	pop	{r3}
 800ce50:	469e      	mov	lr, r3
 800ce52:	4770      	bx	lr

0800ce54 <_fini>:
 800ce54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce56:	bf00      	nop
 800ce58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce5a:	bc08      	pop	{r3}
 800ce5c:	469e      	mov	lr, r3
 800ce5e:	4770      	bx	lr
