/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 39.4.1 Sat Aug 10 00:55:43 2024.
 */

#ifndef UCR_01_H
#define UCR_01_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define UCR_01_FRONT_ANALOG_FRAME_ID (0x103u)
#define UCR_01_REAR_ANALOG_FRAME_ID (0x102u)
#define UCR_01_FRONT_AERO_FRAME_ID (0x600u)
#define UCR_01_REAR_AERO_FRAME_ID (0x601u)
#define UCR_01_ENCODER_POSITIONS_FRAME_ID (0xc8u)
#define UCR_01_FRONT_STRAIN_GAUGES1_FRAME_ID (0x610u)
#define UCR_01_FRONT_STRAIN_GAUGES2_FRAME_ID (0x611u)
#define UCR_01_REAR_STRAIN_GAUGES1_FRAME_ID (0x612u)
#define UCR_01_REAR_STRAIN_GAUGES2_FRAME_ID (0x613u)
#define UCR_01_GPS_BEST_POS_FRAME_ID (0x50u)
#define UCR_01_FRONT_FREQUENCY_FRAME_ID (0x65u)
#define UCR_01_REAR_FREQUENCY_FRAME_ID (0x66u)
#define UCR_01_BAMOCAR1_FRAME_ID (0x201u)
#define UCR_01_CELL_VOLTAGE1_FRAME_ID (0x32u)
#define UCR_01_CELL_VOLTAGE2_FRAME_ID (0x33u)
#define UCR_01_CELL_VOLTAGE3_FRAME_ID (0x34u)
#define UCR_01_CELL_VOLTAGE4_FRAME_ID (0x35u)
#define UCR_01_CELL_VOLTAGE5_FRAME_ID (0x36u)
#define UCR_01_CELL_VOLTAGE6_FRAME_ID (0x37u)
#define UCR_01_CELL_VOLTAGE7_FRAME_ID (0x38u)
#define UCR_01_CELL_VOLTAGE8_FRAME_ID (0x39u)
#define UCR_01_THERMISTOR1_FRAME_ID (0x3cu)
#define UCR_01_THERMISTOR2_FRAME_ID (0x3du)
#define UCR_01_THERMISTOR3_FRAME_ID (0x3eu)
#define UCR_01_THERMISTOR4_FRAME_ID (0x3fu)
#define UCR_01_THERMISTOR5_FRAME_ID (0x40u)
#define UCR_01_THERMISTOR6_FRAME_ID (0x41u)
#define UCR_01_THERMISTOR7_FRAME_ID (0x42u)
#define UCR_01_THERMISTOR8_FRAME_ID (0x43u)
#define UCR_01_THERMISTOR9_FRAME_ID (0x44u)
#define UCR_01_THERMISTOR10_FRAME_ID (0x45u)
#define UCR_01_THERMISTOR11_FRAME_ID (0x46u)
#define UCR_01_THERMISTOR12_FRAME_ID (0x47u)
#define UCR_01_PACK_VOLTAGE_FRAME_ID (0x05u)
#define UCR_01_TCU1_FRAME_ID (0x06u)
#define UCR_01_TCU2_FRAME_ID (0x64u)
#define UCR_01_ACULV_FD_1_FRAME_ID (0x08u)
#define UCR_01_ACULV_FD_2_FRAME_ID (0x1eu)
#define UCR_01_ACULV1_FRAME_ID (0x28u)
#define UCR_01_ACULV2_FRAME_ID (0x29u)
#define UCR_01_PDM1_FRAME_ID (0x500u)

/* Frame lengths in bytes. */
#define UCR_01_FRONT_ANALOG_LENGTH (16u)
#define UCR_01_REAR_ANALOG_LENGTH (16u)
#define UCR_01_FRONT_AERO_LENGTH (16u)
#define UCR_01_REAR_AERO_LENGTH (16u)
#define UCR_01_ENCODER_POSITIONS_LENGTH (8u)
#define UCR_01_FRONT_STRAIN_GAUGES1_LENGTH (20u)
#define UCR_01_FRONT_STRAIN_GAUGES2_LENGTH (20u)
#define UCR_01_REAR_STRAIN_GAUGES1_LENGTH (20u)
#define UCR_01_REAR_STRAIN_GAUGES2_LENGTH (20u)
#define UCR_01_GPS_BEST_POS_LENGTH (48u)
#define UCR_01_FRONT_FREQUENCY_LENGTH (16u)
#define UCR_01_REAR_FREQUENCY_LENGTH (16u)
#define UCR_01_BAMOCAR1_LENGTH (6u)
#define UCR_01_CELL_VOLTAGE1_LENGTH (64u)
#define UCR_01_CELL_VOLTAGE2_LENGTH (64u)
#define UCR_01_CELL_VOLTAGE3_LENGTH (64u)
#define UCR_01_CELL_VOLTAGE4_LENGTH (64u)
#define UCR_01_CELL_VOLTAGE5_LENGTH (64u)
#define UCR_01_CELL_VOLTAGE6_LENGTH (64u)
#define UCR_01_CELL_VOLTAGE7_LENGTH (64u)
#define UCR_01_CELL_VOLTAGE8_LENGTH (64u)
#define UCR_01_THERMISTOR1_LENGTH (64u)
#define UCR_01_THERMISTOR2_LENGTH (64u)
#define UCR_01_THERMISTOR3_LENGTH (64u)
#define UCR_01_THERMISTOR4_LENGTH (64u)
#define UCR_01_THERMISTOR5_LENGTH (64u)
#define UCR_01_THERMISTOR6_LENGTH (64u)
#define UCR_01_THERMISTOR7_LENGTH (64u)
#define UCR_01_THERMISTOR8_LENGTH (64u)
#define UCR_01_THERMISTOR9_LENGTH (64u)
#define UCR_01_THERMISTOR10_LENGTH (64u)
#define UCR_01_THERMISTOR11_LENGTH (64u)
#define UCR_01_THERMISTOR12_LENGTH (64u)
#define UCR_01_PACK_VOLTAGE_LENGTH (4u)
#define UCR_01_TCU1_LENGTH (16u)
#define UCR_01_TCU2_LENGTH (1u)
#define UCR_01_ACULV_FD_1_LENGTH (24u)
#define UCR_01_ACULV_FD_2_LENGTH (8u)
#define UCR_01_ACULV1_LENGTH (8u)
#define UCR_01_ACULV2_LENGTH (1u)
#define UCR_01_PDM1_LENGTH (8u)

/* Extended or standard frame types. */
#define UCR_01_FRONT_ANALOG_IS_EXTENDED (0)
#define UCR_01_REAR_ANALOG_IS_EXTENDED (0)
#define UCR_01_FRONT_AERO_IS_EXTENDED (0)
#define UCR_01_REAR_AERO_IS_EXTENDED (0)
#define UCR_01_ENCODER_POSITIONS_IS_EXTENDED (0)
#define UCR_01_FRONT_STRAIN_GAUGES1_IS_EXTENDED (0)
#define UCR_01_FRONT_STRAIN_GAUGES2_IS_EXTENDED (0)
#define UCR_01_REAR_STRAIN_GAUGES1_IS_EXTENDED (0)
#define UCR_01_REAR_STRAIN_GAUGES2_IS_EXTENDED (0)
#define UCR_01_GPS_BEST_POS_IS_EXTENDED (0)
#define UCR_01_FRONT_FREQUENCY_IS_EXTENDED (0)
#define UCR_01_REAR_FREQUENCY_IS_EXTENDED (0)
#define UCR_01_BAMOCAR1_IS_EXTENDED (0)
#define UCR_01_CELL_VOLTAGE1_IS_EXTENDED (0)
#define UCR_01_CELL_VOLTAGE2_IS_EXTENDED (0)
#define UCR_01_CELL_VOLTAGE3_IS_EXTENDED (0)
#define UCR_01_CELL_VOLTAGE4_IS_EXTENDED (0)
#define UCR_01_CELL_VOLTAGE5_IS_EXTENDED (0)
#define UCR_01_CELL_VOLTAGE6_IS_EXTENDED (0)
#define UCR_01_CELL_VOLTAGE7_IS_EXTENDED (0)
#define UCR_01_CELL_VOLTAGE8_IS_EXTENDED (0)
#define UCR_01_THERMISTOR1_IS_EXTENDED (0)
#define UCR_01_THERMISTOR2_IS_EXTENDED (0)
#define UCR_01_THERMISTOR3_IS_EXTENDED (0)
#define UCR_01_THERMISTOR4_IS_EXTENDED (0)
#define UCR_01_THERMISTOR5_IS_EXTENDED (0)
#define UCR_01_THERMISTOR6_IS_EXTENDED (0)
#define UCR_01_THERMISTOR7_IS_EXTENDED (0)
#define UCR_01_THERMISTOR8_IS_EXTENDED (0)
#define UCR_01_THERMISTOR9_IS_EXTENDED (0)
#define UCR_01_THERMISTOR10_IS_EXTENDED (0)
#define UCR_01_THERMISTOR11_IS_EXTENDED (0)
#define UCR_01_THERMISTOR12_IS_EXTENDED (0)
#define UCR_01_PACK_VOLTAGE_IS_EXTENDED (0)
#define UCR_01_TCU1_IS_EXTENDED (0)
#define UCR_01_TCU2_IS_EXTENDED (0)
#define UCR_01_ACULV_FD_1_IS_EXTENDED (0)
#define UCR_01_ACULV_FD_2_IS_EXTENDED (0)
#define UCR_01_ACULV1_IS_EXTENDED (0)
#define UCR_01_ACULV2_IS_EXTENDED (0)
#define UCR_01_PDM1_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */


/* Signal choices. */


/* Frame Names. */
#define UCR_01_FRONT_ANALOG_NAME "FrontAnalog"
#define UCR_01_REAR_ANALOG_NAME "RearAnalog"
#define UCR_01_FRONT_AERO_NAME "FrontAero"
#define UCR_01_REAR_AERO_NAME "RearAero"
#define UCR_01_ENCODER_POSITIONS_NAME "EncoderPositions"
#define UCR_01_FRONT_STRAIN_GAUGES1_NAME "FrontStrainGauges1"
#define UCR_01_FRONT_STRAIN_GAUGES2_NAME "FrontStrainGauges2"
#define UCR_01_REAR_STRAIN_GAUGES1_NAME "RearStrainGauges1"
#define UCR_01_REAR_STRAIN_GAUGES2_NAME "RearStrainGauges2"
#define UCR_01_GPS_BEST_POS_NAME "GPSBestPos"
#define UCR_01_FRONT_FREQUENCY_NAME "FrontFrequency"
#define UCR_01_REAR_FREQUENCY_NAME "RearFrequency"
#define UCR_01_BAMOCAR1_NAME "Bamocar1"
#define UCR_01_CELL_VOLTAGE1_NAME "CellVoltage1"
#define UCR_01_CELL_VOLTAGE2_NAME "CellVoltage2"
#define UCR_01_CELL_VOLTAGE3_NAME "CellVoltage3"
#define UCR_01_CELL_VOLTAGE4_NAME "CellVoltage4"
#define UCR_01_CELL_VOLTAGE5_NAME "CellVoltage5"
#define UCR_01_CELL_VOLTAGE6_NAME "CellVoltage6"
#define UCR_01_CELL_VOLTAGE7_NAME "CellVoltage7"
#define UCR_01_CELL_VOLTAGE8_NAME "CellVoltage8"
#define UCR_01_THERMISTOR1_NAME "Thermistor1"
#define UCR_01_THERMISTOR2_NAME "Thermistor2"
#define UCR_01_THERMISTOR3_NAME "Thermistor3"
#define UCR_01_THERMISTOR4_NAME "Thermistor4"
#define UCR_01_THERMISTOR5_NAME "Thermistor5"
#define UCR_01_THERMISTOR6_NAME "Thermistor6"
#define UCR_01_THERMISTOR7_NAME "Thermistor7"
#define UCR_01_THERMISTOR8_NAME "Thermistor8"
#define UCR_01_THERMISTOR9_NAME "Thermistor9"
#define UCR_01_THERMISTOR10_NAME "Thermistor10"
#define UCR_01_THERMISTOR11_NAME "Thermistor11"
#define UCR_01_THERMISTOR12_NAME "Thermistor12"
#define UCR_01_PACK_VOLTAGE_NAME "PackVoltage"
#define UCR_01_TCU1_NAME "TCU1"
#define UCR_01_TCU2_NAME "TCU2"
#define UCR_01_ACULV_FD_1_NAME "ACULV_FD_1"
#define UCR_01_ACULV_FD_2_NAME "ACULV_FD_2"
#define UCR_01_ACULV1_NAME "ACULV1"
#define UCR_01_ACULV2_NAME "ACULV2"
#define UCR_01_PDM1_NAME "PDM1"

/* Signal Names. */
#define UCR_01_FRONT_ANALOG_ANALOG1_NAME "Analog1"
#define UCR_01_FRONT_ANALOG_ANALOG2_NAME "Analog2"
#define UCR_01_FRONT_ANALOG_ANALOG3_NAME "Analog3"
#define UCR_01_FRONT_ANALOG_ANALOG4_NAME "Analog4"
#define UCR_01_FRONT_ANALOG_ANALOG5_NAME "Analog5"
#define UCR_01_FRONT_ANALOG_ANALOG6_NAME "Analog6"
#define UCR_01_FRONT_ANALOG_ANALOG7_NAME "Analog7"
#define UCR_01_FRONT_ANALOG_ANALOG8_NAME "Analog8"
#define UCR_01_REAR_ANALOG_ANALOG1_NAME "Analog1"
#define UCR_01_REAR_ANALOG_ANALOG2_NAME "Analog2"
#define UCR_01_REAR_ANALOG_ANALOG3_NAME "Analog3"
#define UCR_01_REAR_ANALOG_ANALOG4_NAME "Analog4"
#define UCR_01_REAR_ANALOG_ANALOG5_NAME "Analog5"
#define UCR_01_REAR_ANALOG_ANALOG6_NAME "Analog6"
#define UCR_01_REAR_ANALOG_ANALOG7_NAME "Analog7"
#define UCR_01_REAR_ANALOG_ANALOG8_NAME "Analog8"
#define UCR_01_FRONT_AERO_PRESSURE1_NAME "Pressure1"
#define UCR_01_FRONT_AERO_PRESSURE2_NAME "Pressure2"
#define UCR_01_FRONT_AERO_PRESSURE3_NAME "Pressure3"
#define UCR_01_FRONT_AERO_TEMPERATURE1_NAME "Temperature1"
#define UCR_01_FRONT_AERO_TEMPERATURE2_NAME "Temperature2"
#define UCR_01_FRONT_AERO_TEMPERATURE3_NAME "Temperature3"
#define UCR_01_REAR_AERO_PRESSURE1_NAME "Pressure1"
#define UCR_01_REAR_AERO_PRESSURE2_NAME "Pressure2"
#define UCR_01_REAR_AERO_PRESSURE3_NAME "Pressure3"
#define UCR_01_REAR_AERO_TEMPERATURE1_NAME "Temperature1"
#define UCR_01_REAR_AERO_TEMPERATURE2_NAME "Temperature2"
#define UCR_01_REAR_AERO_TEMPERATURE3_NAME "Temperature3"
#define UCR_01_ENCODER_POSITIONS_ENCODER1_NAME "Encoder1"
#define UCR_01_ENCODER_POSITIONS_ENCODER2_NAME "Encoder2"
#define UCR_01_ENCODER_POSITIONS_ENCODER3_NAME "Encoder3"
#define UCR_01_ENCODER_POSITIONS_ENCODER4_NAME "Encoder4"
#define UCR_01_FRONT_STRAIN_GAUGES1_GAUGE1_NAME "Gauge1"
#define UCR_01_FRONT_STRAIN_GAUGES1_GAUGE2_NAME "Gauge2"
#define UCR_01_FRONT_STRAIN_GAUGES1_GAUGE3_NAME "Gauge3"
#define UCR_01_FRONT_STRAIN_GAUGES1_GAUGE4_NAME "Gauge4"
#define UCR_01_FRONT_STRAIN_GAUGES1_GAUGE5_NAME "Gauge5"
#define UCR_01_FRONT_STRAIN_GAUGES1_GAUGE6_NAME "Gauge6"
#define UCR_01_FRONT_STRAIN_GAUGES2_GAUGE1_NAME "Gauge1"
#define UCR_01_FRONT_STRAIN_GAUGES2_GAUGE2_NAME "Gauge2"
#define UCR_01_FRONT_STRAIN_GAUGES2_GAUGE3_NAME "Gauge3"
#define UCR_01_FRONT_STRAIN_GAUGES2_GAUGE4_NAME "Gauge4"
#define UCR_01_FRONT_STRAIN_GAUGES2_GAUGE5_NAME "Gauge5"
#define UCR_01_FRONT_STRAIN_GAUGES2_GAUGE6_NAME "Gauge6"
#define UCR_01_REAR_STRAIN_GAUGES1_GAUGE1_NAME "Gauge1"
#define UCR_01_REAR_STRAIN_GAUGES1_GAUGE2_NAME "Gauge2"
#define UCR_01_REAR_STRAIN_GAUGES1_GAUGE3_NAME "Gauge3"
#define UCR_01_REAR_STRAIN_GAUGES1_GAUGE4_NAME "Gauge4"
#define UCR_01_REAR_STRAIN_GAUGES1_GAUGE5_NAME "Gauge5"
#define UCR_01_REAR_STRAIN_GAUGES1_GAUGE6_NAME "Gauge6"
#define UCR_01_REAR_STRAIN_GAUGES2_GAUGE1_NAME "Gauge1"
#define UCR_01_REAR_STRAIN_GAUGES2_GAUGE2_NAME "Gauge2"
#define UCR_01_REAR_STRAIN_GAUGES2_GAUGE3_NAME "Gauge3"
#define UCR_01_REAR_STRAIN_GAUGES2_GAUGE4_NAME "Gauge4"
#define UCR_01_REAR_STRAIN_GAUGES2_GAUGE5_NAME "Gauge5"
#define UCR_01_REAR_STRAIN_GAUGES2_GAUGE6_NAME "Gauge6"
#define UCR_01_GPS_BEST_POS_LATITUDE_NAME "Latitude"
#define UCR_01_GPS_BEST_POS_LONGITUDE_NAME "Longitude"
#define UCR_01_GPS_BEST_POS_ALTITUDE_NAME "Altitude"
#define UCR_01_GPS_BEST_POS_STD_LATITUDE_NAME "stdLatitude"
#define UCR_01_GPS_BEST_POS_STD_LONGITUDE_NAME "stdLongitude"
#define UCR_01_GPS_BEST_POS_STD_ALTITUDE_NAME "stdAltitude"
#define UCR_01_FRONT_FREQUENCY_FREQ1_NAME "Freq1"
#define UCR_01_FRONT_FREQUENCY_FREQ2_NAME "Freq2"
#define UCR_01_FRONT_FREQUENCY_FREQ3_NAME "Freq3"
#define UCR_01_FRONT_FREQUENCY_FREQ4_NAME "Freq4"
#define UCR_01_REAR_FREQUENCY_FREQ1_NAME "Freq1"
#define UCR_01_REAR_FREQUENCY_FREQ2_NAME "Freq2"
#define UCR_01_REAR_FREQUENCY_FREQ3_NAME "Freq3"
#define UCR_01_REAR_FREQUENCY_FREQ4_NAME "Freq4"
#define UCR_01_BAMOCAR1_REGID_NAME "REGID"
#define UCR_01_BAMOCAR1_BYTE1_NAME "Byte1"
#define UCR_01_BAMOCAR1_BYTE2_NAME "Byte2"
#define UCR_01_BAMOCAR1_BYTE3_NAME "Byte3"
#define UCR_01_BAMOCAR1_BYTE4_NAME "Byte4"
#define UCR_01_BAMOCAR1_BYTE5_NAME "Byte5"
#define UCR_01_CELL_VOLTAGE1_CELL1_NAME "Cell1"
#define UCR_01_CELL_VOLTAGE1_CELL2_NAME "Cell2"
#define UCR_01_CELL_VOLTAGE1_CELL3_NAME "Cell3"
#define UCR_01_CELL_VOLTAGE1_CELL4_NAME "Cell4"
#define UCR_01_CELL_VOLTAGE1_CELL5_NAME "Cell5"
#define UCR_01_CELL_VOLTAGE1_CELL6_NAME "Cell6"
#define UCR_01_CELL_VOLTAGE1_CELL7_NAME "Cell7"
#define UCR_01_CELL_VOLTAGE1_CELL8_NAME "Cell8"
#define UCR_01_CELL_VOLTAGE1_CELL9_NAME "Cell9"
#define UCR_01_CELL_VOLTAGE1_CELL10_NAME "Cell10"
#define UCR_01_CELL_VOLTAGE1_CELL11_NAME "Cell11"
#define UCR_01_CELL_VOLTAGE1_CELL12_NAME "Cell12"
#define UCR_01_CELL_VOLTAGE1_CELL13_NAME "Cell13"
#define UCR_01_CELL_VOLTAGE1_CELL14_NAME "Cell14"
#define UCR_01_CELL_VOLTAGE1_CELL15_NAME "Cell15"
#define UCR_01_CELL_VOLTAGE1_CELL16_NAME "Cell16"
#define UCR_01_CELL_VOLTAGE2_CELL1_NAME "Cell1"
#define UCR_01_CELL_VOLTAGE2_CELL2_NAME "Cell2"
#define UCR_01_CELL_VOLTAGE2_CELL3_NAME "Cell3"
#define UCR_01_CELL_VOLTAGE2_CELL4_NAME "Cell4"
#define UCR_01_CELL_VOLTAGE2_CELL5_NAME "Cell5"
#define UCR_01_CELL_VOLTAGE2_CELL6_NAME "Cell6"
#define UCR_01_CELL_VOLTAGE2_CELL7_NAME "Cell7"
#define UCR_01_CELL_VOLTAGE2_CELL8_NAME "Cell8"
#define UCR_01_CELL_VOLTAGE2_CELL9_NAME "Cell9"
#define UCR_01_CELL_VOLTAGE2_CELL10_NAME "Cell10"
#define UCR_01_CELL_VOLTAGE2_CELL11_NAME "Cell11"
#define UCR_01_CELL_VOLTAGE2_CELL12_NAME "Cell12"
#define UCR_01_CELL_VOLTAGE2_CELL13_NAME "Cell13"
#define UCR_01_CELL_VOLTAGE2_CELL14_NAME "Cell14"
#define UCR_01_CELL_VOLTAGE2_CELL15_NAME "Cell15"
#define UCR_01_CELL_VOLTAGE2_CELL16_NAME "Cell16"
#define UCR_01_CELL_VOLTAGE3_CELL1_NAME "Cell1"
#define UCR_01_CELL_VOLTAGE3_CELL2_NAME "Cell2"
#define UCR_01_CELL_VOLTAGE3_CELL3_NAME "Cell3"
#define UCR_01_CELL_VOLTAGE3_CELL4_NAME "Cell4"
#define UCR_01_CELL_VOLTAGE3_CELL5_NAME "Cell5"
#define UCR_01_CELL_VOLTAGE3_CELL6_NAME "Cell6"
#define UCR_01_CELL_VOLTAGE3_CELL7_NAME "Cell7"
#define UCR_01_CELL_VOLTAGE3_CELL8_NAME "Cell8"
#define UCR_01_CELL_VOLTAGE3_CELL9_NAME "Cell9"
#define UCR_01_CELL_VOLTAGE3_CELL10_NAME "Cell10"
#define UCR_01_CELL_VOLTAGE3_CELL11_NAME "Cell11"
#define UCR_01_CELL_VOLTAGE3_CELL12_NAME "Cell12"
#define UCR_01_CELL_VOLTAGE3_CELL13_NAME "Cell13"
#define UCR_01_CELL_VOLTAGE3_CELL14_NAME "Cell14"
#define UCR_01_CELL_VOLTAGE3_CELL15_NAME "Cell15"
#define UCR_01_CELL_VOLTAGE3_CELL16_NAME "Cell16"
#define UCR_01_CELL_VOLTAGE4_CELL1_NAME "Cell1"
#define UCR_01_CELL_VOLTAGE4_CELL2_NAME "Cell2"
#define UCR_01_CELL_VOLTAGE4_CELL3_NAME "Cell3"
#define UCR_01_CELL_VOLTAGE4_CELL4_NAME "Cell4"
#define UCR_01_CELL_VOLTAGE4_CELL5_NAME "Cell5"
#define UCR_01_CELL_VOLTAGE4_CELL6_NAME "Cell6"
#define UCR_01_CELL_VOLTAGE4_CELL7_NAME "Cell7"
#define UCR_01_CELL_VOLTAGE4_CELL8_NAME "Cell8"
#define UCR_01_CELL_VOLTAGE4_CELL9_NAME "Cell9"
#define UCR_01_CELL_VOLTAGE4_CELL10_NAME "Cell10"
#define UCR_01_CELL_VOLTAGE4_CELL11_NAME "Cell11"
#define UCR_01_CELL_VOLTAGE4_CELL12_NAME "Cell12"
#define UCR_01_CELL_VOLTAGE4_CELL13_NAME "Cell13"
#define UCR_01_CELL_VOLTAGE4_CELL14_NAME "Cell14"
#define UCR_01_CELL_VOLTAGE4_CELL15_NAME "Cell15"
#define UCR_01_CELL_VOLTAGE4_CELL16_NAME "Cell16"
#define UCR_01_CELL_VOLTAGE5_CELL1_NAME "Cell1"
#define UCR_01_CELL_VOLTAGE5_CELL2_NAME "Cell2"
#define UCR_01_CELL_VOLTAGE5_CELL3_NAME "Cell3"
#define UCR_01_CELL_VOLTAGE5_CELL4_NAME "Cell4"
#define UCR_01_CELL_VOLTAGE5_CELL5_NAME "Cell5"
#define UCR_01_CELL_VOLTAGE5_CELL6_NAME "Cell6"
#define UCR_01_CELL_VOLTAGE5_CELL7_NAME "Cell7"
#define UCR_01_CELL_VOLTAGE5_CELL8_NAME "Cell8"
#define UCR_01_CELL_VOLTAGE5_CELL9_NAME "Cell9"
#define UCR_01_CELL_VOLTAGE5_CELL10_NAME "Cell10"
#define UCR_01_CELL_VOLTAGE5_CELL11_NAME "Cell11"
#define UCR_01_CELL_VOLTAGE5_CELL12_NAME "Cell12"
#define UCR_01_CELL_VOLTAGE5_CELL13_NAME "Cell13"
#define UCR_01_CELL_VOLTAGE5_CELL14_NAME "Cell14"
#define UCR_01_CELL_VOLTAGE5_CELL15_NAME "Cell15"
#define UCR_01_CELL_VOLTAGE5_CELL16_NAME "Cell16"
#define UCR_01_CELL_VOLTAGE6_CELL1_NAME "Cell1"
#define UCR_01_CELL_VOLTAGE6_CELL2_NAME "Cell2"
#define UCR_01_CELL_VOLTAGE6_CELL3_NAME "Cell3"
#define UCR_01_CELL_VOLTAGE6_CELL4_NAME "Cell4"
#define UCR_01_CELL_VOLTAGE6_CELL5_NAME "Cell5"
#define UCR_01_CELL_VOLTAGE6_CELL6_NAME "Cell6"
#define UCR_01_CELL_VOLTAGE6_CELL7_NAME "Cell7"
#define UCR_01_CELL_VOLTAGE6_CELL8_NAME "Cell8"
#define UCR_01_CELL_VOLTAGE6_CELL9_NAME "Cell9"
#define UCR_01_CELL_VOLTAGE6_CELL10_NAME "Cell10"
#define UCR_01_CELL_VOLTAGE6_CELL11_NAME "Cell11"
#define UCR_01_CELL_VOLTAGE6_CELL12_NAME "Cell12"
#define UCR_01_CELL_VOLTAGE6_CELL13_NAME "Cell13"
#define UCR_01_CELL_VOLTAGE6_CELL14_NAME "Cell14"
#define UCR_01_CELL_VOLTAGE6_CELL15_NAME "Cell15"
#define UCR_01_CELL_VOLTAGE6_CELL16_NAME "Cell16"
#define UCR_01_CELL_VOLTAGE7_CELL1_NAME "Cell1"
#define UCR_01_CELL_VOLTAGE7_CELL2_NAME "Cell2"
#define UCR_01_CELL_VOLTAGE7_CELL3_NAME "Cell3"
#define UCR_01_CELL_VOLTAGE7_CELL4_NAME "Cell4"
#define UCR_01_CELL_VOLTAGE7_CELL5_NAME "Cell5"
#define UCR_01_CELL_VOLTAGE7_CELL6_NAME "Cell6"
#define UCR_01_CELL_VOLTAGE7_CELL7_NAME "Cell7"
#define UCR_01_CELL_VOLTAGE7_CELL8_NAME "Cell8"
#define UCR_01_CELL_VOLTAGE7_CELL9_NAME "Cell9"
#define UCR_01_CELL_VOLTAGE7_CELL10_NAME "Cell10"
#define UCR_01_CELL_VOLTAGE7_CELL11_NAME "Cell11"
#define UCR_01_CELL_VOLTAGE7_CELL12_NAME "Cell12"
#define UCR_01_CELL_VOLTAGE7_CELL13_NAME "Cell13"
#define UCR_01_CELL_VOLTAGE7_CELL14_NAME "Cell14"
#define UCR_01_CELL_VOLTAGE7_CELL15_NAME "Cell15"
#define UCR_01_CELL_VOLTAGE7_CELL16_NAME "Cell16"
#define UCR_01_CELL_VOLTAGE8_CELL1_NAME "Cell1"
#define UCR_01_CELL_VOLTAGE8_CELL2_NAME "Cell2"
#define UCR_01_CELL_VOLTAGE8_CELL3_NAME "Cell3"
#define UCR_01_CELL_VOLTAGE8_CELL4_NAME "Cell4"
#define UCR_01_CELL_VOLTAGE8_CELL5_NAME "Cell5"
#define UCR_01_CELL_VOLTAGE8_CELL6_NAME "Cell6"
#define UCR_01_CELL_VOLTAGE8_CELL7_NAME "Cell7"
#define UCR_01_CELL_VOLTAGE8_CELL8_NAME "Cell8"
#define UCR_01_CELL_VOLTAGE8_CELL9_NAME "Cell9"
#define UCR_01_CELL_VOLTAGE8_CELL10_NAME "Cell10"
#define UCR_01_CELL_VOLTAGE8_CELL11_NAME "Cell11"
#define UCR_01_CELL_VOLTAGE8_CELL12_NAME "Cell12"
#define UCR_01_CELL_VOLTAGE8_CELL13_NAME "Cell13"
#define UCR_01_CELL_VOLTAGE8_CELL14_NAME "Cell14"
#define UCR_01_CELL_VOLTAGE8_CELL15_NAME "Cell15"
#define UCR_01_CELL_VOLTAGE8_CELL16_NAME "Cell16"
#define UCR_01_THERMISTOR1_THERM1_NAME "Therm1"
#define UCR_01_THERMISTOR1_THERM2_NAME "Therm2"
#define UCR_01_THERMISTOR1_THERM3_NAME "Therm3"
#define UCR_01_THERMISTOR1_THERM4_NAME "Therm4"
#define UCR_01_THERMISTOR1_THERM5_NAME "Therm5"
#define UCR_01_THERMISTOR1_THERM6_NAME "Therm6"
#define UCR_01_THERMISTOR1_THERM7_NAME "Therm7"
#define UCR_01_THERMISTOR1_THERM8_NAME "Therm8"
#define UCR_01_THERMISTOR1_THERM9_NAME "Therm9"
#define UCR_01_THERMISTOR1_THERM10_NAME "Therm10"
#define UCR_01_THERMISTOR1_THERM11_NAME "Therm11"
#define UCR_01_THERMISTOR1_THERM12_NAME "Therm12"
#define UCR_01_THERMISTOR1_THERM13_NAME "Therm13"
#define UCR_01_THERMISTOR1_THERM14_NAME "Therm14"
#define UCR_01_THERMISTOR1_THERM15_NAME "Therm15"
#define UCR_01_THERMISTOR1_THERM16_NAME "Therm16"
#define UCR_01_THERMISTOR2_THERM1_NAME "Therm1"
#define UCR_01_THERMISTOR2_THERM2_NAME "Therm2"
#define UCR_01_THERMISTOR2_THERM3_NAME "Therm3"
#define UCR_01_THERMISTOR2_THERM4_NAME "Therm4"
#define UCR_01_THERMISTOR2_THERM5_NAME "Therm5"
#define UCR_01_THERMISTOR2_THERM6_NAME "Therm6"
#define UCR_01_THERMISTOR2_THERM7_NAME "Therm7"
#define UCR_01_THERMISTOR2_THERM8_NAME "Therm8"
#define UCR_01_THERMISTOR2_THERM9_NAME "Therm9"
#define UCR_01_THERMISTOR2_THERM10_NAME "Therm10"
#define UCR_01_THERMISTOR2_THERM11_NAME "Therm11"
#define UCR_01_THERMISTOR2_THERM12_NAME "Therm12"
#define UCR_01_THERMISTOR2_THERM13_NAME "Therm13"
#define UCR_01_THERMISTOR2_THERM14_NAME "Therm14"
#define UCR_01_THERMISTOR2_THERM15_NAME "Therm15"
#define UCR_01_THERMISTOR2_THERM16_NAME "Therm16"
#define UCR_01_THERMISTOR3_THERM1_NAME "Therm1"
#define UCR_01_THERMISTOR3_THERM2_NAME "Therm2"
#define UCR_01_THERMISTOR3_THERM3_NAME "Therm3"
#define UCR_01_THERMISTOR3_THERM4_NAME "Therm4"
#define UCR_01_THERMISTOR3_THERM5_NAME "Therm5"
#define UCR_01_THERMISTOR3_THERM6_NAME "Therm6"
#define UCR_01_THERMISTOR3_THERM7_NAME "Therm7"
#define UCR_01_THERMISTOR3_THERM8_NAME "Therm8"
#define UCR_01_THERMISTOR3_THERM9_NAME "Therm9"
#define UCR_01_THERMISTOR3_THERM10_NAME "Therm10"
#define UCR_01_THERMISTOR3_THERM11_NAME "Therm11"
#define UCR_01_THERMISTOR3_THERM12_NAME "Therm12"
#define UCR_01_THERMISTOR3_THERM13_NAME "Therm13"
#define UCR_01_THERMISTOR3_THERM14_NAME "Therm14"
#define UCR_01_THERMISTOR3_THERM15_NAME "Therm15"
#define UCR_01_THERMISTOR3_THERM16_NAME "Therm16"
#define UCR_01_THERMISTOR4_THERM1_NAME "Therm1"
#define UCR_01_THERMISTOR4_THERM2_NAME "Therm2"
#define UCR_01_THERMISTOR4_THERM3_NAME "Therm3"
#define UCR_01_THERMISTOR4_THERM4_NAME "Therm4"
#define UCR_01_THERMISTOR4_THERM5_NAME "Therm5"
#define UCR_01_THERMISTOR4_THERM6_NAME "Therm6"
#define UCR_01_THERMISTOR4_THERM7_NAME "Therm7"
#define UCR_01_THERMISTOR4_THERM8_NAME "Therm8"
#define UCR_01_THERMISTOR4_THERM9_NAME "Therm9"
#define UCR_01_THERMISTOR4_THERM10_NAME "Therm10"
#define UCR_01_THERMISTOR4_THERM11_NAME "Therm11"
#define UCR_01_THERMISTOR4_THERM12_NAME "Therm12"
#define UCR_01_THERMISTOR4_THERM13_NAME "Therm13"
#define UCR_01_THERMISTOR4_THERM14_NAME "Therm14"
#define UCR_01_THERMISTOR4_THERM15_NAME "Therm15"
#define UCR_01_THERMISTOR4_THERM16_NAME "Therm16"
#define UCR_01_THERMISTOR5_THERM1_NAME "Therm1"
#define UCR_01_THERMISTOR5_THERM2_NAME "Therm2"
#define UCR_01_THERMISTOR5_THERM3_NAME "Therm3"
#define UCR_01_THERMISTOR5_THERM4_NAME "Therm4"
#define UCR_01_THERMISTOR5_THERM5_NAME "Therm5"
#define UCR_01_THERMISTOR5_THERM6_NAME "Therm6"
#define UCR_01_THERMISTOR5_THERM7_NAME "Therm7"
#define UCR_01_THERMISTOR5_THERM8_NAME "Therm8"
#define UCR_01_THERMISTOR5_THERM9_NAME "Therm9"
#define UCR_01_THERMISTOR5_THERM10_NAME "Therm10"
#define UCR_01_THERMISTOR5_THERM11_NAME "Therm11"
#define UCR_01_THERMISTOR5_THERM12_NAME "Therm12"
#define UCR_01_THERMISTOR5_THERM13_NAME "Therm13"
#define UCR_01_THERMISTOR5_THERM14_NAME "Therm14"
#define UCR_01_THERMISTOR5_THERM15_NAME "Therm15"
#define UCR_01_THERMISTOR5_THERM16_NAME "Therm16"
#define UCR_01_THERMISTOR6_THERM1_NAME "Therm1"
#define UCR_01_THERMISTOR6_THERM2_NAME "Therm2"
#define UCR_01_THERMISTOR6_THERM3_NAME "Therm3"
#define UCR_01_THERMISTOR6_THERM4_NAME "Therm4"
#define UCR_01_THERMISTOR6_THERM5_NAME "Therm5"
#define UCR_01_THERMISTOR6_THERM6_NAME "Therm6"
#define UCR_01_THERMISTOR6_THERM7_NAME "Therm7"
#define UCR_01_THERMISTOR6_THERM8_NAME "Therm8"
#define UCR_01_THERMISTOR6_THERM9_NAME "Therm9"
#define UCR_01_THERMISTOR6_THERM10_NAME "Therm10"
#define UCR_01_THERMISTOR6_THERM11_NAME "Therm11"
#define UCR_01_THERMISTOR6_THERM12_NAME "Therm12"
#define UCR_01_THERMISTOR6_THERM13_NAME "Therm13"
#define UCR_01_THERMISTOR6_THERM14_NAME "Therm14"
#define UCR_01_THERMISTOR6_THERM15_NAME "Therm15"
#define UCR_01_THERMISTOR6_THERM16_NAME "Therm16"
#define UCR_01_THERMISTOR7_THERM1_NAME "Therm1"
#define UCR_01_THERMISTOR7_THERM2_NAME "Therm2"
#define UCR_01_THERMISTOR7_THERM3_NAME "Therm3"
#define UCR_01_THERMISTOR7_THERM4_NAME "Therm4"
#define UCR_01_THERMISTOR7_THERM5_NAME "Therm5"
#define UCR_01_THERMISTOR7_THERM6_NAME "Therm6"
#define UCR_01_THERMISTOR7_THERM7_NAME "Therm7"
#define UCR_01_THERMISTOR7_THERM8_NAME "Therm8"
#define UCR_01_THERMISTOR7_THERM9_NAME "Therm9"
#define UCR_01_THERMISTOR7_THERM10_NAME "Therm10"
#define UCR_01_THERMISTOR7_THERM11_NAME "Therm11"
#define UCR_01_THERMISTOR7_THERM12_NAME "Therm12"
#define UCR_01_THERMISTOR7_THERM13_NAME "Therm13"
#define UCR_01_THERMISTOR7_THERM14_NAME "Therm14"
#define UCR_01_THERMISTOR7_THERM15_NAME "Therm15"
#define UCR_01_THERMISTOR7_THERM16_NAME "Therm16"
#define UCR_01_THERMISTOR8_THERM1_NAME "Therm1"
#define UCR_01_THERMISTOR8_THERM2_NAME "Therm2"
#define UCR_01_THERMISTOR8_THERM3_NAME "Therm3"
#define UCR_01_THERMISTOR8_THERM4_NAME "Therm4"
#define UCR_01_THERMISTOR8_THERM5_NAME "Therm5"
#define UCR_01_THERMISTOR8_THERM6_NAME "Therm6"
#define UCR_01_THERMISTOR8_THERM7_NAME "Therm7"
#define UCR_01_THERMISTOR8_THERM8_NAME "Therm8"
#define UCR_01_THERMISTOR8_THERM9_NAME "Therm9"
#define UCR_01_THERMISTOR8_THERM10_NAME "Therm10"
#define UCR_01_THERMISTOR8_THERM11_NAME "Therm11"
#define UCR_01_THERMISTOR8_THERM12_NAME "Therm12"
#define UCR_01_THERMISTOR8_THERM13_NAME "Therm13"
#define UCR_01_THERMISTOR8_THERM14_NAME "Therm14"
#define UCR_01_THERMISTOR8_THERM15_NAME "Therm15"
#define UCR_01_THERMISTOR8_THERM16_NAME "Therm16"
#define UCR_01_THERMISTOR9_THERM1_NAME "Therm1"
#define UCR_01_THERMISTOR9_THERM2_NAME "Therm2"
#define UCR_01_THERMISTOR9_THERM3_NAME "Therm3"
#define UCR_01_THERMISTOR9_THERM4_NAME "Therm4"
#define UCR_01_THERMISTOR9_THERM5_NAME "Therm5"
#define UCR_01_THERMISTOR9_THERM6_NAME "Therm6"
#define UCR_01_THERMISTOR9_THERM7_NAME "Therm7"
#define UCR_01_THERMISTOR9_THERM8_NAME "Therm8"
#define UCR_01_THERMISTOR9_THERM9_NAME "Therm9"
#define UCR_01_THERMISTOR9_THERM10_NAME "Therm10"
#define UCR_01_THERMISTOR9_THERM11_NAME "Therm11"
#define UCR_01_THERMISTOR9_THERM12_NAME "Therm12"
#define UCR_01_THERMISTOR9_THERM13_NAME "Therm13"
#define UCR_01_THERMISTOR9_THERM14_NAME "Therm14"
#define UCR_01_THERMISTOR9_THERM15_NAME "Therm15"
#define UCR_01_THERMISTOR9_THERM16_NAME "Therm16"
#define UCR_01_THERMISTOR10_THERM1_NAME "Therm1"
#define UCR_01_THERMISTOR10_THERM2_NAME "Therm2"
#define UCR_01_THERMISTOR10_THERM3_NAME "Therm3"
#define UCR_01_THERMISTOR10_THERM4_NAME "Therm4"
#define UCR_01_THERMISTOR10_THERM5_NAME "Therm5"
#define UCR_01_THERMISTOR10_THERM6_NAME "Therm6"
#define UCR_01_THERMISTOR10_THERM7_NAME "Therm7"
#define UCR_01_THERMISTOR10_THERM8_NAME "Therm8"
#define UCR_01_THERMISTOR10_THERM9_NAME "Therm9"
#define UCR_01_THERMISTOR10_THERM10_NAME "Therm10"
#define UCR_01_THERMISTOR10_THERM11_NAME "Therm11"
#define UCR_01_THERMISTOR10_THERM12_NAME "Therm12"
#define UCR_01_THERMISTOR10_THERM13_NAME "Therm13"
#define UCR_01_THERMISTOR10_THERM14_NAME "Therm14"
#define UCR_01_THERMISTOR10_THERM15_NAME "Therm15"
#define UCR_01_THERMISTOR10_THERM16_NAME "Therm16"
#define UCR_01_THERMISTOR11_THERM1_NAME "Therm1"
#define UCR_01_THERMISTOR11_THERM2_NAME "Therm2"
#define UCR_01_THERMISTOR11_THERM3_NAME "Therm3"
#define UCR_01_THERMISTOR11_THERM4_NAME "Therm4"
#define UCR_01_THERMISTOR11_THERM5_NAME "Therm5"
#define UCR_01_THERMISTOR11_THERM6_NAME "Therm6"
#define UCR_01_THERMISTOR11_THERM7_NAME "Therm7"
#define UCR_01_THERMISTOR11_THERM8_NAME "Therm8"
#define UCR_01_THERMISTOR11_THERM9_NAME "Therm9"
#define UCR_01_THERMISTOR11_THERM10_NAME "Therm10"
#define UCR_01_THERMISTOR11_THERM11_NAME "Therm11"
#define UCR_01_THERMISTOR11_THERM12_NAME "Therm12"
#define UCR_01_THERMISTOR11_THERM13_NAME "Therm13"
#define UCR_01_THERMISTOR11_THERM14_NAME "Therm14"
#define UCR_01_THERMISTOR11_THERM15_NAME "Therm15"
#define UCR_01_THERMISTOR11_THERM16_NAME "Therm16"
#define UCR_01_THERMISTOR12_THERM1_NAME "Therm1"
#define UCR_01_THERMISTOR12_THERM2_NAME "Therm2"
#define UCR_01_THERMISTOR12_THERM3_NAME "Therm3"
#define UCR_01_THERMISTOR12_THERM4_NAME "Therm4"
#define UCR_01_THERMISTOR12_THERM5_NAME "Therm5"
#define UCR_01_THERMISTOR12_THERM6_NAME "Therm6"
#define UCR_01_THERMISTOR12_THERM7_NAME "Therm7"
#define UCR_01_THERMISTOR12_THERM8_NAME "Therm8"
#define UCR_01_THERMISTOR12_THERM9_NAME "Therm9"
#define UCR_01_THERMISTOR12_THERM10_NAME "Therm10"
#define UCR_01_THERMISTOR12_THERM11_NAME "Therm11"
#define UCR_01_THERMISTOR12_THERM12_NAME "Therm12"
#define UCR_01_THERMISTOR12_THERM13_NAME "Therm13"
#define UCR_01_THERMISTOR12_THERM14_NAME "Therm14"
#define UCR_01_THERMISTOR12_THERM15_NAME "Therm15"
#define UCR_01_THERMISTOR12_THERM16_NAME "Therm16"
#define UCR_01_PACK_VOLTAGE_PACK_VOLTAGE_NAME "PackVoltage"
#define UCR_01_TCU1_APPS1_NAME "APPS1"
#define UCR_01_TCU1_APPS2_NAME "APPS2"
#define UCR_01_TCU1_BSE_NAME "BSE"
#define UCR_01_TCU1_STATUS_NAME "Status"
#define UCR_01_TCU2_BRAKE_LIGHT_NAME "BrakeLight"
#define UCR_01_TCU2_BAMOCAR_RFE_NAME "BamocarRFE"
#define UCR_01_TCU2_BAMOCAR_FRG_NAME "BamocarFRG"
#define UCR_01_ACULV_FD_1_AMS_STATUS_NAME "AMSStatus"
#define UCR_01_ACULV_FD_1_FLD_NAME "FLD"
#define UCR_01_ACULV_FD_1_STATE_OF_CHARGE_NAME "StateOfCharge"
#define UCR_01_ACULV_FD_1_ACCUMULATOR_VOLTAGE_NAME "AccumulatorVoltage"
#define UCR_01_ACULV_FD_1_TRACTIVE_VOLTAGE_NAME "TractiveVoltage"
#define UCR_01_ACULV_FD_1_CELL_CURRENT_NAME "CellCurrent"
#define UCR_01_ACULV_FD_1_ISOLATION_MONITORING_NAME "IsolationMonitoring"
#define UCR_01_ACULV_FD_1_ISOLATION_MONITORING1_NAME "IsolationMonitoring1"
#define UCR_01_ACULV_FD_2_FAN_SET_POINT_NAME "FanSetPoint"
#define UCR_01_ACULV_FD_2_RPM_NAME "RPM"
#define UCR_01_ACULV1_CHARGE_STATUS1_NAME "ChargeStatus1"
#define UCR_01_ACULV1_CHARGE_STATUS2_NAME "ChargeStatus2"
#define UCR_01_ACULV2_CHARGE_REQUEST_NAME "ChargeRequest"
#define UCR_01_PDM1_COMPOUND_ID_NAME "CompoundID"
#define UCR_01_PDM1_PDM_INT_TEMPERATURE_NAME "PDMIntTemperature"
#define UCR_01_PDM1_PDM_BATT_VOLTAGE_NAME "PDMBattVoltage"
#define UCR_01_PDM1_GLOBAL_ERROR_FLAG_NAME "GlobalErrorFlag"
#define UCR_01_PDM1_TOTAL_CURRENT_NAME "TotalCurrent"
#define UCR_01_PDM1_INTERNAL_RAIL_VOLTAGE_NAME "InternalRailVoltage"
#define UCR_01_PDM1_RESET_SOURCE_NAME "ResetSource"

/**
 * Signals in message FrontAnalog.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_front_analog_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t analog1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t analog2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t analog3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t analog4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t analog5;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t analog6;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t analog7;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t analog8;
};

/**
 * Signals in message RearAnalog.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_rear_analog_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t analog1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t analog2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t analog3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t analog4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t analog5;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t analog6;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t analog7;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t analog8;
};

/**
 * Signals in message FrontAero.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_front_aero_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int32_t pressure1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int32_t pressure2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int32_t pressure3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t temperature1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t temperature2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t temperature3;
};

/**
 * Signals in message RearAero.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_rear_aero_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int32_t pressure1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int32_t pressure2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int32_t pressure3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t temperature1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t temperature2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t temperature3;
};

/**
 * Signals in message EncoderPositions.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_encoder_positions_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t encoder1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t encoder2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t encoder3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t encoder4;
};

/**
 * Signals in message FrontStrainGauges1.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_front_strain_gauges1_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t gauge1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t gauge2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t gauge3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t gauge4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t gauge5;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t gauge6;
};

/**
 * Signals in message FrontStrainGauges2.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_front_strain_gauges2_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t gauge1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t gauge2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t gauge3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t gauge4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t gauge5;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t gauge6;
};

/**
 * Signals in message RearStrainGauges1.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_rear_strain_gauges1_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t gauge1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t gauge2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t gauge3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t gauge4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t gauge5;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t gauge6;
};

/**
 * Signals in message RearStrainGauges2.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_rear_strain_gauges2_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t gauge1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t gauge2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t gauge3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t gauge4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t gauge5;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t gauge6;
};

/**
 * Signals in message GPSBestPos.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_gps_best_pos_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    double latitude;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    double longitude;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    double altitude;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    double std_latitude;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    double std_longitude;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    double std_altitude;
};

/**
 * Signals in message FrontFrequency.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_front_frequency_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float freq1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float freq2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float freq3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float freq4;
};

/**
 * Signals in message RearFrequency.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_rear_frequency_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float freq1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float freq2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float freq3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float freq4;
};

/**
 * Signals in message Bamocar1.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_bamocar1_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t regid;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t byte1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t byte2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t byte3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t byte4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t byte5;
};

/**
 * Signals in message CellVoltage1.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_cell_voltage1_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell5;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell6;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell7;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell8;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell9;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell10;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell11;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell12;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell13;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell14;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell15;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell16;
};

/**
 * Signals in message CellVoltage2.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_cell_voltage2_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell5;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell6;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell7;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell8;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell9;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell10;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell11;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell12;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell13;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell14;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell15;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell16;
};

/**
 * Signals in message CellVoltage3.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_cell_voltage3_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell5;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell6;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell7;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell8;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell9;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell10;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell11;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell12;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell13;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell14;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell15;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell16;
};

/**
 * Signals in message CellVoltage4.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_cell_voltage4_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell5;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell6;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell7;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell8;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell9;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell10;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell11;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell12;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell13;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell14;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell15;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell16;
};

/**
 * Signals in message CellVoltage5.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_cell_voltage5_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell5;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell6;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell7;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell8;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell9;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell10;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell11;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell12;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell13;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell14;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell15;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell16;
};

/**
 * Signals in message CellVoltage6.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_cell_voltage6_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell5;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell6;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell7;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell8;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell9;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell10;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell11;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell12;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell13;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell14;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell15;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell16;
};

/**
 * Signals in message CellVoltage7.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_cell_voltage7_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell5;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell6;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell7;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell8;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell9;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell10;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell11;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell12;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell13;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell14;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell15;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell16;
};

/**
 * Signals in message CellVoltage8.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_cell_voltage8_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell5;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell6;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell7;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell8;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell9;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell10;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell11;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell12;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell13;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell14;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell15;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell16;
};

/**
 * Signals in message Thermistor1.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_thermistor1_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm5;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm6;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm7;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm8;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm9;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm10;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm11;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm12;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm13;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm14;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm15;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm16;
};

/**
 * Signals in message Thermistor2.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_thermistor2_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm5;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm6;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm7;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm8;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm9;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm10;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm11;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm12;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm13;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm14;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm15;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm16;
};

/**
 * Signals in message Thermistor3.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_thermistor3_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm5;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm6;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm7;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm8;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm9;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm10;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm11;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm12;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm13;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm14;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm15;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm16;
};

/**
 * Signals in message Thermistor4.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_thermistor4_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm5;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm6;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm7;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm8;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm9;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm10;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm11;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm12;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm13;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm14;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm15;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm16;
};

/**
 * Signals in message Thermistor5.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_thermistor5_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm5;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm6;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm7;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm8;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm9;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm10;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm11;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm12;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm13;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm14;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm15;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm16;
};

/**
 * Signals in message Thermistor6.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_thermistor6_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm5;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm6;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm7;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm8;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm9;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm10;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm11;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm12;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm13;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm14;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm15;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm16;
};

/**
 * Signals in message Thermistor7.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_thermistor7_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm5;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm6;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm7;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm8;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm9;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm10;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm11;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm12;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm13;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm14;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm15;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm16;
};

/**
 * Signals in message Thermistor8.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_thermistor8_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm5;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm6;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm7;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm8;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm9;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm10;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm11;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm12;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm13;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm14;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm15;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm16;
};

/**
 * Signals in message Thermistor9.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_thermistor9_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm5;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm6;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm7;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm8;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm9;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm10;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm11;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm12;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm13;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm14;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm15;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm16;
};

/**
 * Signals in message Thermistor10.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_thermistor10_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm5;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm6;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm7;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm8;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm9;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm10;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm11;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm12;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm13;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm14;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm15;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm16;
};

/**
 * Signals in message Thermistor11.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_thermistor11_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm5;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm6;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm7;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm8;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm9;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm10;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm11;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm12;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm13;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm14;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm15;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm16;
};

/**
 * Signals in message Thermistor12.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_thermistor12_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm5;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm6;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm7;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm8;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm9;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm10;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm11;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm12;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm13;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm14;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm15;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float therm16;
};

/**
 * Signals in message PackVoltage.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_pack_voltage_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float pack_voltage;
};

/**
 * Signals in message TCU1.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_tcu1_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float apps1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float apps2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float bse;

    /**
     * RTD Button, Light, Status
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t status;
};

/**
 * Signals in message TCU2.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_tcu2_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t brake_light;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t bamocar_rfe;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t bamocar_frg;
};

/**
 * Signals in message ACULV_FD_1.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_aculv_fd_1_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ams_status;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fld;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float state_of_charge;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float accumulator_voltage;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float tractive_voltage;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float cell_current;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t isolation_monitoring;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float isolation_monitoring1;
};

/**
 * Signals in message ACULV_FD_2.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_aculv_fd_2_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float fan_set_point;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float rpm;
};

/**
 * Signals in message ACULV1.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_aculv1_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float charge_status1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float charge_status2;
};

/**
 * Signals in message ACULV2.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_aculv2_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t charge_request;
};

/**
 * Signals in message PDM1.
 *
 * All signal values are as on the CAN bus.
 */
struct ucr_01_pdm1_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t compound_id;

    /**
     * Range: 0..125 (0..125 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pdm_int_temperature;

    /**
     * Range: 0.0..254.93421052631578 (0..31 -)
     * Scale: 0.1216
     * Offset: 0
     */
    double pdm_batt_voltage;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t global_error_flag;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t total_current;

    /**
     * Range: 0.0..254.95934959349594 (0..15.68 -)
     * Scale: 0.0615
     * Offset: 0
     */
    double internal_rail_voltage;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reset_source;
};

/**
 * Pack message FrontAnalog.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_front_analog_pack(
    uint8_t *dst_p,
    const struct ucr_01_front_analog_t *src_p,
    size_t size);

/**
 * Unpack message FrontAnalog.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_front_analog_unpack(
    struct ucr_01_front_analog_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from FrontAnalog.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_front_analog_init(struct ucr_01_front_analog_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_front_analog_analog1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_front_analog_analog1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_front_analog_analog1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_front_analog_analog2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_front_analog_analog2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_front_analog_analog2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_front_analog_analog3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_front_analog_analog3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_front_analog_analog3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_front_analog_analog4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_front_analog_analog4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_front_analog_analog4_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_front_analog_analog5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_front_analog_analog5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_front_analog_analog5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_front_analog_analog6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_front_analog_analog6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_front_analog_analog6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_front_analog_analog7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_front_analog_analog7_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_front_analog_analog7_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_front_analog_analog8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_front_analog_analog8_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_front_analog_analog8_is_in_range(uint16_t value);

/**
 * Pack message RearAnalog.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_rear_analog_pack(
    uint8_t *dst_p,
    const struct ucr_01_rear_analog_t *src_p,
    size_t size);

/**
 * Unpack message RearAnalog.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_rear_analog_unpack(
    struct ucr_01_rear_analog_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RearAnalog.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_rear_analog_init(struct ucr_01_rear_analog_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_rear_analog_analog1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_rear_analog_analog1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_rear_analog_analog1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_rear_analog_analog2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_rear_analog_analog2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_rear_analog_analog2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_rear_analog_analog3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_rear_analog_analog3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_rear_analog_analog3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_rear_analog_analog4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_rear_analog_analog4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_rear_analog_analog4_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_rear_analog_analog5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_rear_analog_analog5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_rear_analog_analog5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_rear_analog_analog6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_rear_analog_analog6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_rear_analog_analog6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_rear_analog_analog7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_rear_analog_analog7_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_rear_analog_analog7_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ucr_01_rear_analog_analog8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_rear_analog_analog8_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_rear_analog_analog8_is_in_range(uint16_t value);

/**
 * Pack message FrontAero.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_front_aero_pack(
    uint8_t *dst_p,
    const struct ucr_01_front_aero_t *src_p,
    size_t size);

/**
 * Unpack message FrontAero.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_front_aero_unpack(
    struct ucr_01_front_aero_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from FrontAero.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_front_aero_init(struct ucr_01_front_aero_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t ucr_01_front_aero_pressure1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_front_aero_pressure1_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_front_aero_pressure1_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t ucr_01_front_aero_pressure2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_front_aero_pressure2_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_front_aero_pressure2_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t ucr_01_front_aero_pressure3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_front_aero_pressure3_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_front_aero_pressure3_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ucr_01_front_aero_temperature1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_front_aero_temperature1_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_front_aero_temperature1_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ucr_01_front_aero_temperature2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_front_aero_temperature2_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_front_aero_temperature2_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ucr_01_front_aero_temperature3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_front_aero_temperature3_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_front_aero_temperature3_is_in_range(int16_t value);

/**
 * Pack message RearAero.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_rear_aero_pack(
    uint8_t *dst_p,
    const struct ucr_01_rear_aero_t *src_p,
    size_t size);

/**
 * Unpack message RearAero.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_rear_aero_unpack(
    struct ucr_01_rear_aero_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RearAero.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_rear_aero_init(struct ucr_01_rear_aero_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t ucr_01_rear_aero_pressure1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_rear_aero_pressure1_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_rear_aero_pressure1_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t ucr_01_rear_aero_pressure2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_rear_aero_pressure2_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_rear_aero_pressure2_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t ucr_01_rear_aero_pressure3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_rear_aero_pressure3_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_rear_aero_pressure3_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ucr_01_rear_aero_temperature1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_rear_aero_temperature1_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_rear_aero_temperature1_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ucr_01_rear_aero_temperature2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_rear_aero_temperature2_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_rear_aero_temperature2_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ucr_01_rear_aero_temperature3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_rear_aero_temperature3_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_rear_aero_temperature3_is_in_range(int16_t value);

/**
 * Pack message EncoderPositions.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_encoder_positions_pack(
    uint8_t *dst_p,
    const struct ucr_01_encoder_positions_t *src_p,
    size_t size);

/**
 * Unpack message EncoderPositions.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_encoder_positions_unpack(
    struct ucr_01_encoder_positions_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from EncoderPositions.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_encoder_positions_init(struct ucr_01_encoder_positions_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ucr_01_encoder_positions_encoder1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_encoder_positions_encoder1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_encoder_positions_encoder1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ucr_01_encoder_positions_encoder2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_encoder_positions_encoder2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_encoder_positions_encoder2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ucr_01_encoder_positions_encoder3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_encoder_positions_encoder3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_encoder_positions_encoder3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ucr_01_encoder_positions_encoder4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_encoder_positions_encoder4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_encoder_positions_encoder4_is_in_range(uint8_t value);

/**
 * Pack message FrontStrainGauges1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_front_strain_gauges1_pack(
    uint8_t *dst_p,
    const struct ucr_01_front_strain_gauges1_t *src_p,
    size_t size);

/**
 * Unpack message FrontStrainGauges1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_front_strain_gauges1_unpack(
    struct ucr_01_front_strain_gauges1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from FrontStrainGauges1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_front_strain_gauges1_init(struct ucr_01_front_strain_gauges1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ucr_01_front_strain_gauges1_gauge1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_front_strain_gauges1_gauge1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_front_strain_gauges1_gauge1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ucr_01_front_strain_gauges1_gauge2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_front_strain_gauges1_gauge2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_front_strain_gauges1_gauge2_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ucr_01_front_strain_gauges1_gauge3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_front_strain_gauges1_gauge3_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_front_strain_gauges1_gauge3_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ucr_01_front_strain_gauges1_gauge4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_front_strain_gauges1_gauge4_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_front_strain_gauges1_gauge4_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ucr_01_front_strain_gauges1_gauge5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_front_strain_gauges1_gauge5_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_front_strain_gauges1_gauge5_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ucr_01_front_strain_gauges1_gauge6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_front_strain_gauges1_gauge6_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_front_strain_gauges1_gauge6_is_in_range(uint32_t value);

/**
 * Pack message FrontStrainGauges2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_front_strain_gauges2_pack(
    uint8_t *dst_p,
    const struct ucr_01_front_strain_gauges2_t *src_p,
    size_t size);

/**
 * Unpack message FrontStrainGauges2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_front_strain_gauges2_unpack(
    struct ucr_01_front_strain_gauges2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from FrontStrainGauges2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_front_strain_gauges2_init(struct ucr_01_front_strain_gauges2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ucr_01_front_strain_gauges2_gauge1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_front_strain_gauges2_gauge1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_front_strain_gauges2_gauge1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ucr_01_front_strain_gauges2_gauge2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_front_strain_gauges2_gauge2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_front_strain_gauges2_gauge2_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ucr_01_front_strain_gauges2_gauge3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_front_strain_gauges2_gauge3_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_front_strain_gauges2_gauge3_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ucr_01_front_strain_gauges2_gauge4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_front_strain_gauges2_gauge4_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_front_strain_gauges2_gauge4_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ucr_01_front_strain_gauges2_gauge5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_front_strain_gauges2_gauge5_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_front_strain_gauges2_gauge5_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ucr_01_front_strain_gauges2_gauge6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_front_strain_gauges2_gauge6_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_front_strain_gauges2_gauge6_is_in_range(uint32_t value);

/**
 * Pack message RearStrainGauges1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_rear_strain_gauges1_pack(
    uint8_t *dst_p,
    const struct ucr_01_rear_strain_gauges1_t *src_p,
    size_t size);

/**
 * Unpack message RearStrainGauges1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_rear_strain_gauges1_unpack(
    struct ucr_01_rear_strain_gauges1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RearStrainGauges1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_rear_strain_gauges1_init(struct ucr_01_rear_strain_gauges1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ucr_01_rear_strain_gauges1_gauge1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_rear_strain_gauges1_gauge1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_rear_strain_gauges1_gauge1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ucr_01_rear_strain_gauges1_gauge2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_rear_strain_gauges1_gauge2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_rear_strain_gauges1_gauge2_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ucr_01_rear_strain_gauges1_gauge3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_rear_strain_gauges1_gauge3_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_rear_strain_gauges1_gauge3_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ucr_01_rear_strain_gauges1_gauge4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_rear_strain_gauges1_gauge4_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_rear_strain_gauges1_gauge4_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ucr_01_rear_strain_gauges1_gauge5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_rear_strain_gauges1_gauge5_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_rear_strain_gauges1_gauge5_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ucr_01_rear_strain_gauges1_gauge6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_rear_strain_gauges1_gauge6_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_rear_strain_gauges1_gauge6_is_in_range(uint32_t value);

/**
 * Pack message RearStrainGauges2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_rear_strain_gauges2_pack(
    uint8_t *dst_p,
    const struct ucr_01_rear_strain_gauges2_t *src_p,
    size_t size);

/**
 * Unpack message RearStrainGauges2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_rear_strain_gauges2_unpack(
    struct ucr_01_rear_strain_gauges2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RearStrainGauges2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_rear_strain_gauges2_init(struct ucr_01_rear_strain_gauges2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ucr_01_rear_strain_gauges2_gauge1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_rear_strain_gauges2_gauge1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_rear_strain_gauges2_gauge1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ucr_01_rear_strain_gauges2_gauge2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_rear_strain_gauges2_gauge2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_rear_strain_gauges2_gauge2_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ucr_01_rear_strain_gauges2_gauge3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_rear_strain_gauges2_gauge3_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_rear_strain_gauges2_gauge3_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ucr_01_rear_strain_gauges2_gauge4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_rear_strain_gauges2_gauge4_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_rear_strain_gauges2_gauge4_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ucr_01_rear_strain_gauges2_gauge5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_rear_strain_gauges2_gauge5_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_rear_strain_gauges2_gauge5_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ucr_01_rear_strain_gauges2_gauge6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_rear_strain_gauges2_gauge6_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_rear_strain_gauges2_gauge6_is_in_range(uint32_t value);

/**
 * Pack message GPSBestPos.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_gps_best_pos_pack(
    uint8_t *dst_p,
    const struct ucr_01_gps_best_pos_t *src_p,
    size_t size);

/**
 * Unpack message GPSBestPos.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_gps_best_pos_unpack(
    struct ucr_01_gps_best_pos_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GPSBestPos.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_gps_best_pos_init(struct ucr_01_gps_best_pos_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
double ucr_01_gps_best_pos_latitude_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_gps_best_pos_latitude_decode(double value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_gps_best_pos_latitude_is_in_range(double value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
double ucr_01_gps_best_pos_longitude_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_gps_best_pos_longitude_decode(double value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_gps_best_pos_longitude_is_in_range(double value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
double ucr_01_gps_best_pos_altitude_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_gps_best_pos_altitude_decode(double value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_gps_best_pos_altitude_is_in_range(double value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
double ucr_01_gps_best_pos_std_latitude_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_gps_best_pos_std_latitude_decode(double value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_gps_best_pos_std_latitude_is_in_range(double value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
double ucr_01_gps_best_pos_std_longitude_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_gps_best_pos_std_longitude_decode(double value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_gps_best_pos_std_longitude_is_in_range(double value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
double ucr_01_gps_best_pos_std_altitude_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_gps_best_pos_std_altitude_decode(double value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_gps_best_pos_std_altitude_is_in_range(double value);

/**
 * Pack message FrontFrequency.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_front_frequency_pack(
    uint8_t *dst_p,
    const struct ucr_01_front_frequency_t *src_p,
    size_t size);

/**
 * Unpack message FrontFrequency.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_front_frequency_unpack(
    struct ucr_01_front_frequency_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from FrontFrequency.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_front_frequency_init(struct ucr_01_front_frequency_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_front_frequency_freq1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_front_frequency_freq1_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_front_frequency_freq1_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_front_frequency_freq2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_front_frequency_freq2_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_front_frequency_freq2_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_front_frequency_freq3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_front_frequency_freq3_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_front_frequency_freq3_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_front_frequency_freq4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_front_frequency_freq4_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_front_frequency_freq4_is_in_range(float value);

/**
 * Pack message RearFrequency.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_rear_frequency_pack(
    uint8_t *dst_p,
    const struct ucr_01_rear_frequency_t *src_p,
    size_t size);

/**
 * Unpack message RearFrequency.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_rear_frequency_unpack(
    struct ucr_01_rear_frequency_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RearFrequency.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_rear_frequency_init(struct ucr_01_rear_frequency_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_rear_frequency_freq1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_rear_frequency_freq1_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_rear_frequency_freq1_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_rear_frequency_freq2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_rear_frequency_freq2_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_rear_frequency_freq2_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_rear_frequency_freq3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_rear_frequency_freq3_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_rear_frequency_freq3_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_rear_frequency_freq4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_rear_frequency_freq4_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_rear_frequency_freq4_is_in_range(float value);

/**
 * Pack message Bamocar1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_bamocar1_pack(
    uint8_t *dst_p,
    const struct ucr_01_bamocar1_t *src_p,
    size_t size);

/**
 * Unpack message Bamocar1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_bamocar1_unpack(
    struct ucr_01_bamocar1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Bamocar1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_bamocar1_init(struct ucr_01_bamocar1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t ucr_01_bamocar1_regid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_bamocar1_regid_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_bamocar1_regid_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ucr_01_bamocar1_byte1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_bamocar1_byte1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_bamocar1_byte1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ucr_01_bamocar1_byte2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_bamocar1_byte2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_bamocar1_byte2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ucr_01_bamocar1_byte3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_bamocar1_byte3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_bamocar1_byte3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ucr_01_bamocar1_byte4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_bamocar1_byte4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_bamocar1_byte4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ucr_01_bamocar1_byte5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_bamocar1_byte5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_bamocar1_byte5_is_in_range(uint8_t value);

/**
 * Pack message CellVoltage1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_cell_voltage1_pack(
    uint8_t *dst_p,
    const struct ucr_01_cell_voltage1_t *src_p,
    size_t size);

/**
 * Unpack message CellVoltage1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_cell_voltage1_unpack(
    struct ucr_01_cell_voltage1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CellVoltage1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_cell_voltage1_init(struct ucr_01_cell_voltage1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage1_cell1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage1_cell1_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage1_cell1_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage1_cell2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage1_cell2_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage1_cell2_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage1_cell3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage1_cell3_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage1_cell3_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage1_cell4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage1_cell4_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage1_cell4_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage1_cell5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage1_cell5_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage1_cell5_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage1_cell6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage1_cell6_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage1_cell6_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage1_cell7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage1_cell7_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage1_cell7_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage1_cell8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage1_cell8_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage1_cell8_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage1_cell9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage1_cell9_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage1_cell9_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage1_cell10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage1_cell10_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage1_cell10_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage1_cell11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage1_cell11_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage1_cell11_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage1_cell12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage1_cell12_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage1_cell12_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage1_cell13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage1_cell13_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage1_cell13_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage1_cell14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage1_cell14_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage1_cell14_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage1_cell15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage1_cell15_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage1_cell15_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage1_cell16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage1_cell16_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage1_cell16_is_in_range(float value);

/**
 * Pack message CellVoltage2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_cell_voltage2_pack(
    uint8_t *dst_p,
    const struct ucr_01_cell_voltage2_t *src_p,
    size_t size);

/**
 * Unpack message CellVoltage2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_cell_voltage2_unpack(
    struct ucr_01_cell_voltage2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CellVoltage2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_cell_voltage2_init(struct ucr_01_cell_voltage2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage2_cell1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage2_cell1_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage2_cell1_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage2_cell2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage2_cell2_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage2_cell2_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage2_cell3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage2_cell3_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage2_cell3_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage2_cell4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage2_cell4_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage2_cell4_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage2_cell5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage2_cell5_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage2_cell5_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage2_cell6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage2_cell6_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage2_cell6_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage2_cell7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage2_cell7_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage2_cell7_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage2_cell8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage2_cell8_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage2_cell8_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage2_cell9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage2_cell9_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage2_cell9_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage2_cell10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage2_cell10_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage2_cell10_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage2_cell11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage2_cell11_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage2_cell11_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage2_cell12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage2_cell12_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage2_cell12_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage2_cell13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage2_cell13_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage2_cell13_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage2_cell14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage2_cell14_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage2_cell14_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage2_cell15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage2_cell15_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage2_cell15_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage2_cell16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage2_cell16_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage2_cell16_is_in_range(float value);

/**
 * Pack message CellVoltage3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_cell_voltage3_pack(
    uint8_t *dst_p,
    const struct ucr_01_cell_voltage3_t *src_p,
    size_t size);

/**
 * Unpack message CellVoltage3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_cell_voltage3_unpack(
    struct ucr_01_cell_voltage3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CellVoltage3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_cell_voltage3_init(struct ucr_01_cell_voltage3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage3_cell1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage3_cell1_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage3_cell1_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage3_cell2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage3_cell2_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage3_cell2_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage3_cell3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage3_cell3_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage3_cell3_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage3_cell4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage3_cell4_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage3_cell4_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage3_cell5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage3_cell5_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage3_cell5_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage3_cell6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage3_cell6_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage3_cell6_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage3_cell7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage3_cell7_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage3_cell7_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage3_cell8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage3_cell8_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage3_cell8_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage3_cell9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage3_cell9_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage3_cell9_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage3_cell10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage3_cell10_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage3_cell10_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage3_cell11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage3_cell11_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage3_cell11_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage3_cell12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage3_cell12_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage3_cell12_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage3_cell13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage3_cell13_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage3_cell13_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage3_cell14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage3_cell14_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage3_cell14_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage3_cell15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage3_cell15_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage3_cell15_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage3_cell16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage3_cell16_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage3_cell16_is_in_range(float value);

/**
 * Pack message CellVoltage4.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_cell_voltage4_pack(
    uint8_t *dst_p,
    const struct ucr_01_cell_voltage4_t *src_p,
    size_t size);

/**
 * Unpack message CellVoltage4.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_cell_voltage4_unpack(
    struct ucr_01_cell_voltage4_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CellVoltage4.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_cell_voltage4_init(struct ucr_01_cell_voltage4_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage4_cell1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage4_cell1_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage4_cell1_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage4_cell2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage4_cell2_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage4_cell2_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage4_cell3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage4_cell3_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage4_cell3_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage4_cell4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage4_cell4_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage4_cell4_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage4_cell5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage4_cell5_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage4_cell5_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage4_cell6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage4_cell6_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage4_cell6_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage4_cell7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage4_cell7_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage4_cell7_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage4_cell8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage4_cell8_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage4_cell8_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage4_cell9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage4_cell9_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage4_cell9_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage4_cell10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage4_cell10_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage4_cell10_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage4_cell11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage4_cell11_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage4_cell11_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage4_cell12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage4_cell12_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage4_cell12_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage4_cell13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage4_cell13_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage4_cell13_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage4_cell14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage4_cell14_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage4_cell14_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage4_cell15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage4_cell15_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage4_cell15_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage4_cell16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage4_cell16_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage4_cell16_is_in_range(float value);

/**
 * Pack message CellVoltage5.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_cell_voltage5_pack(
    uint8_t *dst_p,
    const struct ucr_01_cell_voltage5_t *src_p,
    size_t size);

/**
 * Unpack message CellVoltage5.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_cell_voltage5_unpack(
    struct ucr_01_cell_voltage5_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CellVoltage5.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_cell_voltage5_init(struct ucr_01_cell_voltage5_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage5_cell1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage5_cell1_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage5_cell1_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage5_cell2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage5_cell2_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage5_cell2_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage5_cell3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage5_cell3_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage5_cell3_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage5_cell4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage5_cell4_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage5_cell4_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage5_cell5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage5_cell5_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage5_cell5_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage5_cell6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage5_cell6_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage5_cell6_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage5_cell7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage5_cell7_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage5_cell7_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage5_cell8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage5_cell8_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage5_cell8_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage5_cell9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage5_cell9_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage5_cell9_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage5_cell10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage5_cell10_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage5_cell10_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage5_cell11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage5_cell11_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage5_cell11_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage5_cell12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage5_cell12_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage5_cell12_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage5_cell13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage5_cell13_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage5_cell13_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage5_cell14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage5_cell14_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage5_cell14_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage5_cell15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage5_cell15_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage5_cell15_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage5_cell16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage5_cell16_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage5_cell16_is_in_range(float value);

/**
 * Pack message CellVoltage6.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_cell_voltage6_pack(
    uint8_t *dst_p,
    const struct ucr_01_cell_voltage6_t *src_p,
    size_t size);

/**
 * Unpack message CellVoltage6.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_cell_voltage6_unpack(
    struct ucr_01_cell_voltage6_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CellVoltage6.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_cell_voltage6_init(struct ucr_01_cell_voltage6_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage6_cell1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage6_cell1_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage6_cell1_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage6_cell2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage6_cell2_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage6_cell2_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage6_cell3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage6_cell3_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage6_cell3_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage6_cell4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage6_cell4_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage6_cell4_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage6_cell5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage6_cell5_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage6_cell5_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage6_cell6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage6_cell6_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage6_cell6_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage6_cell7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage6_cell7_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage6_cell7_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage6_cell8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage6_cell8_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage6_cell8_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage6_cell9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage6_cell9_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage6_cell9_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage6_cell10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage6_cell10_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage6_cell10_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage6_cell11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage6_cell11_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage6_cell11_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage6_cell12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage6_cell12_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage6_cell12_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage6_cell13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage6_cell13_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage6_cell13_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage6_cell14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage6_cell14_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage6_cell14_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage6_cell15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage6_cell15_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage6_cell15_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage6_cell16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage6_cell16_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage6_cell16_is_in_range(float value);

/**
 * Pack message CellVoltage7.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_cell_voltage7_pack(
    uint8_t *dst_p,
    const struct ucr_01_cell_voltage7_t *src_p,
    size_t size);

/**
 * Unpack message CellVoltage7.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_cell_voltage7_unpack(
    struct ucr_01_cell_voltage7_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CellVoltage7.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_cell_voltage7_init(struct ucr_01_cell_voltage7_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage7_cell1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage7_cell1_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage7_cell1_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage7_cell2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage7_cell2_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage7_cell2_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage7_cell3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage7_cell3_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage7_cell3_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage7_cell4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage7_cell4_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage7_cell4_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage7_cell5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage7_cell5_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage7_cell5_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage7_cell6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage7_cell6_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage7_cell6_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage7_cell7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage7_cell7_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage7_cell7_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage7_cell8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage7_cell8_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage7_cell8_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage7_cell9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage7_cell9_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage7_cell9_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage7_cell10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage7_cell10_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage7_cell10_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage7_cell11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage7_cell11_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage7_cell11_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage7_cell12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage7_cell12_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage7_cell12_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage7_cell13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage7_cell13_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage7_cell13_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage7_cell14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage7_cell14_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage7_cell14_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage7_cell15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage7_cell15_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage7_cell15_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage7_cell16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage7_cell16_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage7_cell16_is_in_range(float value);

/**
 * Pack message CellVoltage8.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_cell_voltage8_pack(
    uint8_t *dst_p,
    const struct ucr_01_cell_voltage8_t *src_p,
    size_t size);

/**
 * Unpack message CellVoltage8.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_cell_voltage8_unpack(
    struct ucr_01_cell_voltage8_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CellVoltage8.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_cell_voltage8_init(struct ucr_01_cell_voltage8_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage8_cell1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage8_cell1_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage8_cell1_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage8_cell2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage8_cell2_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage8_cell2_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage8_cell3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage8_cell3_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage8_cell3_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage8_cell4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage8_cell4_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage8_cell4_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage8_cell5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage8_cell5_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage8_cell5_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage8_cell6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage8_cell6_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage8_cell6_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage8_cell7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage8_cell7_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage8_cell7_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage8_cell8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage8_cell8_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage8_cell8_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage8_cell9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage8_cell9_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage8_cell9_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage8_cell10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage8_cell10_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage8_cell10_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage8_cell11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage8_cell11_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage8_cell11_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage8_cell12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage8_cell12_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage8_cell12_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage8_cell13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage8_cell13_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage8_cell13_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage8_cell14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage8_cell14_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage8_cell14_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage8_cell15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage8_cell15_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage8_cell15_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_cell_voltage8_cell16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_cell_voltage8_cell16_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_cell_voltage8_cell16_is_in_range(float value);

/**
 * Pack message Thermistor1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_thermistor1_pack(
    uint8_t *dst_p,
    const struct ucr_01_thermistor1_t *src_p,
    size_t size);

/**
 * Unpack message Thermistor1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_thermistor1_unpack(
    struct ucr_01_thermistor1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Thermistor1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_thermistor1_init(struct ucr_01_thermistor1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor1_therm1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor1_therm1_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor1_therm1_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor1_therm2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor1_therm2_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor1_therm2_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor1_therm3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor1_therm3_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor1_therm3_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor1_therm4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor1_therm4_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor1_therm4_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor1_therm5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor1_therm5_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor1_therm5_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor1_therm6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor1_therm6_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor1_therm6_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor1_therm7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor1_therm7_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor1_therm7_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor1_therm8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor1_therm8_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor1_therm8_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor1_therm9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor1_therm9_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor1_therm9_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor1_therm10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor1_therm10_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor1_therm10_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor1_therm11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor1_therm11_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor1_therm11_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor1_therm12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor1_therm12_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor1_therm12_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor1_therm13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor1_therm13_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor1_therm13_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor1_therm14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor1_therm14_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor1_therm14_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor1_therm15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor1_therm15_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor1_therm15_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor1_therm16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor1_therm16_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor1_therm16_is_in_range(float value);

/**
 * Pack message Thermistor2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_thermistor2_pack(
    uint8_t *dst_p,
    const struct ucr_01_thermistor2_t *src_p,
    size_t size);

/**
 * Unpack message Thermistor2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_thermistor2_unpack(
    struct ucr_01_thermistor2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Thermistor2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_thermistor2_init(struct ucr_01_thermistor2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor2_therm1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor2_therm1_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor2_therm1_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor2_therm2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor2_therm2_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor2_therm2_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor2_therm3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor2_therm3_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor2_therm3_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor2_therm4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor2_therm4_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor2_therm4_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor2_therm5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor2_therm5_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor2_therm5_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor2_therm6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor2_therm6_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor2_therm6_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor2_therm7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor2_therm7_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor2_therm7_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor2_therm8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor2_therm8_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor2_therm8_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor2_therm9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor2_therm9_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor2_therm9_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor2_therm10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor2_therm10_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor2_therm10_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor2_therm11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor2_therm11_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor2_therm11_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor2_therm12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor2_therm12_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor2_therm12_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor2_therm13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor2_therm13_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor2_therm13_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor2_therm14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor2_therm14_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor2_therm14_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor2_therm15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor2_therm15_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor2_therm15_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor2_therm16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor2_therm16_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor2_therm16_is_in_range(float value);

/**
 * Pack message Thermistor3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_thermistor3_pack(
    uint8_t *dst_p,
    const struct ucr_01_thermistor3_t *src_p,
    size_t size);

/**
 * Unpack message Thermistor3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_thermistor3_unpack(
    struct ucr_01_thermistor3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Thermistor3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_thermistor3_init(struct ucr_01_thermistor3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor3_therm1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor3_therm1_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor3_therm1_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor3_therm2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor3_therm2_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor3_therm2_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor3_therm3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor3_therm3_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor3_therm3_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor3_therm4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor3_therm4_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor3_therm4_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor3_therm5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor3_therm5_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor3_therm5_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor3_therm6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor3_therm6_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor3_therm6_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor3_therm7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor3_therm7_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor3_therm7_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor3_therm8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor3_therm8_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor3_therm8_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor3_therm9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor3_therm9_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor3_therm9_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor3_therm10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor3_therm10_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor3_therm10_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor3_therm11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor3_therm11_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor3_therm11_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor3_therm12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor3_therm12_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor3_therm12_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor3_therm13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor3_therm13_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor3_therm13_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor3_therm14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor3_therm14_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor3_therm14_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor3_therm15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor3_therm15_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor3_therm15_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor3_therm16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor3_therm16_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor3_therm16_is_in_range(float value);

/**
 * Pack message Thermistor4.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_thermistor4_pack(
    uint8_t *dst_p,
    const struct ucr_01_thermistor4_t *src_p,
    size_t size);

/**
 * Unpack message Thermistor4.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_thermistor4_unpack(
    struct ucr_01_thermistor4_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Thermistor4.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_thermistor4_init(struct ucr_01_thermistor4_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor4_therm1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor4_therm1_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor4_therm1_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor4_therm2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor4_therm2_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor4_therm2_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor4_therm3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor4_therm3_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor4_therm3_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor4_therm4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor4_therm4_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor4_therm4_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor4_therm5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor4_therm5_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor4_therm5_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor4_therm6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor4_therm6_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor4_therm6_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor4_therm7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor4_therm7_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor4_therm7_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor4_therm8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor4_therm8_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor4_therm8_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor4_therm9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor4_therm9_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor4_therm9_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor4_therm10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor4_therm10_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor4_therm10_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor4_therm11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor4_therm11_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor4_therm11_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor4_therm12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor4_therm12_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor4_therm12_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor4_therm13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor4_therm13_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor4_therm13_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor4_therm14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor4_therm14_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor4_therm14_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor4_therm15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor4_therm15_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor4_therm15_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor4_therm16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor4_therm16_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor4_therm16_is_in_range(float value);

/**
 * Pack message Thermistor5.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_thermistor5_pack(
    uint8_t *dst_p,
    const struct ucr_01_thermistor5_t *src_p,
    size_t size);

/**
 * Unpack message Thermistor5.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_thermistor5_unpack(
    struct ucr_01_thermistor5_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Thermistor5.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_thermistor5_init(struct ucr_01_thermistor5_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor5_therm1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor5_therm1_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor5_therm1_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor5_therm2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor5_therm2_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor5_therm2_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor5_therm3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor5_therm3_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor5_therm3_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor5_therm4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor5_therm4_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor5_therm4_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor5_therm5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor5_therm5_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor5_therm5_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor5_therm6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor5_therm6_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor5_therm6_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor5_therm7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor5_therm7_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor5_therm7_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor5_therm8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor5_therm8_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor5_therm8_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor5_therm9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor5_therm9_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor5_therm9_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor5_therm10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor5_therm10_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor5_therm10_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor5_therm11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor5_therm11_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor5_therm11_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor5_therm12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor5_therm12_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor5_therm12_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor5_therm13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor5_therm13_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor5_therm13_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor5_therm14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor5_therm14_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor5_therm14_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor5_therm15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor5_therm15_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor5_therm15_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor5_therm16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor5_therm16_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor5_therm16_is_in_range(float value);

/**
 * Pack message Thermistor6.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_thermistor6_pack(
    uint8_t *dst_p,
    const struct ucr_01_thermistor6_t *src_p,
    size_t size);

/**
 * Unpack message Thermistor6.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_thermistor6_unpack(
    struct ucr_01_thermistor6_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Thermistor6.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_thermistor6_init(struct ucr_01_thermistor6_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor6_therm1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor6_therm1_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor6_therm1_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor6_therm2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor6_therm2_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor6_therm2_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor6_therm3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor6_therm3_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor6_therm3_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor6_therm4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor6_therm4_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor6_therm4_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor6_therm5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor6_therm5_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor6_therm5_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor6_therm6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor6_therm6_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor6_therm6_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor6_therm7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor6_therm7_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor6_therm7_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor6_therm8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor6_therm8_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor6_therm8_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor6_therm9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor6_therm9_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor6_therm9_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor6_therm10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor6_therm10_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor6_therm10_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor6_therm11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor6_therm11_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor6_therm11_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor6_therm12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor6_therm12_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor6_therm12_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor6_therm13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor6_therm13_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor6_therm13_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor6_therm14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor6_therm14_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor6_therm14_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor6_therm15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor6_therm15_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor6_therm15_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor6_therm16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor6_therm16_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor6_therm16_is_in_range(float value);

/**
 * Pack message Thermistor7.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_thermistor7_pack(
    uint8_t *dst_p,
    const struct ucr_01_thermistor7_t *src_p,
    size_t size);

/**
 * Unpack message Thermistor7.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_thermistor7_unpack(
    struct ucr_01_thermistor7_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Thermistor7.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_thermistor7_init(struct ucr_01_thermistor7_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor7_therm1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor7_therm1_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor7_therm1_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor7_therm2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor7_therm2_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor7_therm2_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor7_therm3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor7_therm3_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor7_therm3_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor7_therm4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor7_therm4_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor7_therm4_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor7_therm5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor7_therm5_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor7_therm5_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor7_therm6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor7_therm6_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor7_therm6_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor7_therm7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor7_therm7_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor7_therm7_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor7_therm8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor7_therm8_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor7_therm8_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor7_therm9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor7_therm9_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor7_therm9_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor7_therm10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor7_therm10_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor7_therm10_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor7_therm11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor7_therm11_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor7_therm11_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor7_therm12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor7_therm12_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor7_therm12_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor7_therm13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor7_therm13_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor7_therm13_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor7_therm14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor7_therm14_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor7_therm14_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor7_therm15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor7_therm15_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor7_therm15_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor7_therm16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor7_therm16_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor7_therm16_is_in_range(float value);

/**
 * Pack message Thermistor8.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_thermistor8_pack(
    uint8_t *dst_p,
    const struct ucr_01_thermistor8_t *src_p,
    size_t size);

/**
 * Unpack message Thermistor8.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_thermistor8_unpack(
    struct ucr_01_thermistor8_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Thermistor8.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_thermistor8_init(struct ucr_01_thermistor8_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor8_therm1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor8_therm1_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor8_therm1_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor8_therm2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor8_therm2_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor8_therm2_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor8_therm3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor8_therm3_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor8_therm3_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor8_therm4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor8_therm4_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor8_therm4_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor8_therm5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor8_therm5_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor8_therm5_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor8_therm6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor8_therm6_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor8_therm6_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor8_therm7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor8_therm7_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor8_therm7_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor8_therm8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor8_therm8_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor8_therm8_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor8_therm9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor8_therm9_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor8_therm9_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor8_therm10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor8_therm10_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor8_therm10_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor8_therm11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor8_therm11_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor8_therm11_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor8_therm12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor8_therm12_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor8_therm12_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor8_therm13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor8_therm13_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor8_therm13_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor8_therm14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor8_therm14_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor8_therm14_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor8_therm15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor8_therm15_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor8_therm15_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor8_therm16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor8_therm16_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor8_therm16_is_in_range(float value);

/**
 * Pack message Thermistor9.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_thermistor9_pack(
    uint8_t *dst_p,
    const struct ucr_01_thermistor9_t *src_p,
    size_t size);

/**
 * Unpack message Thermistor9.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_thermistor9_unpack(
    struct ucr_01_thermistor9_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Thermistor9.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_thermistor9_init(struct ucr_01_thermistor9_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor9_therm1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor9_therm1_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor9_therm1_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor9_therm2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor9_therm2_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor9_therm2_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor9_therm3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor9_therm3_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor9_therm3_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor9_therm4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor9_therm4_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor9_therm4_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor9_therm5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor9_therm5_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor9_therm5_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor9_therm6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor9_therm6_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor9_therm6_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor9_therm7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor9_therm7_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor9_therm7_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor9_therm8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor9_therm8_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor9_therm8_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor9_therm9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor9_therm9_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor9_therm9_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor9_therm10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor9_therm10_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor9_therm10_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor9_therm11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor9_therm11_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor9_therm11_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor9_therm12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor9_therm12_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor9_therm12_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor9_therm13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor9_therm13_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor9_therm13_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor9_therm14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor9_therm14_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor9_therm14_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor9_therm15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor9_therm15_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor9_therm15_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor9_therm16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor9_therm16_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor9_therm16_is_in_range(float value);

/**
 * Pack message Thermistor10.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_thermistor10_pack(
    uint8_t *dst_p,
    const struct ucr_01_thermistor10_t *src_p,
    size_t size);

/**
 * Unpack message Thermistor10.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_thermistor10_unpack(
    struct ucr_01_thermistor10_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Thermistor10.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_thermistor10_init(struct ucr_01_thermistor10_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor10_therm1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor10_therm1_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor10_therm1_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor10_therm2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor10_therm2_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor10_therm2_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor10_therm3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor10_therm3_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor10_therm3_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor10_therm4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor10_therm4_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor10_therm4_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor10_therm5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor10_therm5_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor10_therm5_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor10_therm6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor10_therm6_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor10_therm6_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor10_therm7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor10_therm7_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor10_therm7_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor10_therm8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor10_therm8_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor10_therm8_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor10_therm9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor10_therm9_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor10_therm9_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor10_therm10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor10_therm10_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor10_therm10_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor10_therm11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor10_therm11_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor10_therm11_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor10_therm12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor10_therm12_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor10_therm12_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor10_therm13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor10_therm13_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor10_therm13_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor10_therm14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor10_therm14_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor10_therm14_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor10_therm15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor10_therm15_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor10_therm15_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor10_therm16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor10_therm16_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor10_therm16_is_in_range(float value);

/**
 * Pack message Thermistor11.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_thermistor11_pack(
    uint8_t *dst_p,
    const struct ucr_01_thermistor11_t *src_p,
    size_t size);

/**
 * Unpack message Thermistor11.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_thermistor11_unpack(
    struct ucr_01_thermistor11_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Thermistor11.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_thermistor11_init(struct ucr_01_thermistor11_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor11_therm1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor11_therm1_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor11_therm1_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor11_therm2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor11_therm2_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor11_therm2_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor11_therm3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor11_therm3_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor11_therm3_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor11_therm4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor11_therm4_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor11_therm4_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor11_therm5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor11_therm5_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor11_therm5_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor11_therm6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor11_therm6_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor11_therm6_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor11_therm7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor11_therm7_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor11_therm7_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor11_therm8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor11_therm8_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor11_therm8_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor11_therm9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor11_therm9_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor11_therm9_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor11_therm10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor11_therm10_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor11_therm10_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor11_therm11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor11_therm11_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor11_therm11_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor11_therm12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor11_therm12_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor11_therm12_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor11_therm13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor11_therm13_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor11_therm13_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor11_therm14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor11_therm14_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor11_therm14_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor11_therm15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor11_therm15_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor11_therm15_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor11_therm16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor11_therm16_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor11_therm16_is_in_range(float value);

/**
 * Pack message Thermistor12.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_thermistor12_pack(
    uint8_t *dst_p,
    const struct ucr_01_thermistor12_t *src_p,
    size_t size);

/**
 * Unpack message Thermistor12.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_thermistor12_unpack(
    struct ucr_01_thermistor12_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Thermistor12.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_thermistor12_init(struct ucr_01_thermistor12_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor12_therm1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor12_therm1_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor12_therm1_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor12_therm2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor12_therm2_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor12_therm2_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor12_therm3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor12_therm3_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor12_therm3_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor12_therm4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor12_therm4_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor12_therm4_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor12_therm5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor12_therm5_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor12_therm5_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor12_therm6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor12_therm6_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor12_therm6_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor12_therm7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor12_therm7_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor12_therm7_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor12_therm8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor12_therm8_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor12_therm8_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor12_therm9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor12_therm9_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor12_therm9_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor12_therm10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor12_therm10_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor12_therm10_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor12_therm11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor12_therm11_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor12_therm11_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor12_therm12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor12_therm12_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor12_therm12_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor12_therm13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor12_therm13_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor12_therm13_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor12_therm14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor12_therm14_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor12_therm14_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor12_therm15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor12_therm15_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor12_therm15_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_thermistor12_therm16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_thermistor12_therm16_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_thermistor12_therm16_is_in_range(float value);

/**
 * Pack message PackVoltage.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_pack_voltage_pack(
    uint8_t *dst_p,
    const struct ucr_01_pack_voltage_t *src_p,
    size_t size);

/**
 * Unpack message PackVoltage.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_pack_voltage_unpack(
    struct ucr_01_pack_voltage_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PackVoltage.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_pack_voltage_init(struct ucr_01_pack_voltage_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_pack_voltage_pack_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_pack_voltage_pack_voltage_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_pack_voltage_pack_voltage_is_in_range(float value);

/**
 * Pack message TCU1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_tcu1_pack(
    uint8_t *dst_p,
    const struct ucr_01_tcu1_t *src_p,
    size_t size);

/**
 * Unpack message TCU1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_tcu1_unpack(
    struct ucr_01_tcu1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from TCU1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_tcu1_init(struct ucr_01_tcu1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_tcu1_apps1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_tcu1_apps1_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_tcu1_apps1_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_tcu1_apps2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_tcu1_apps2_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_tcu1_apps2_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_tcu1_bse_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_tcu1_bse_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_tcu1_bse_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ucr_01_tcu1_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_tcu1_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_tcu1_status_is_in_range(uint8_t value);

/**
 * Pack message TCU2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_tcu2_pack(
    uint8_t *dst_p,
    const struct ucr_01_tcu2_t *src_p,
    size_t size);

/**
 * Unpack message TCU2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_tcu2_unpack(
    struct ucr_01_tcu2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from TCU2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_tcu2_init(struct ucr_01_tcu2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ucr_01_tcu2_brake_light_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_tcu2_brake_light_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_tcu2_brake_light_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ucr_01_tcu2_bamocar_rfe_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_tcu2_bamocar_rfe_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_tcu2_bamocar_rfe_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ucr_01_tcu2_bamocar_frg_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_tcu2_bamocar_frg_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_tcu2_bamocar_frg_is_in_range(uint8_t value);

/**
 * Pack message ACULV_FD_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_aculv_fd_1_pack(
    uint8_t *dst_p,
    const struct ucr_01_aculv_fd_1_t *src_p,
    size_t size);

/**
 * Unpack message ACULV_FD_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_aculv_fd_1_unpack(
    struct ucr_01_aculv_fd_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ACULV_FD_1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_aculv_fd_1_init(struct ucr_01_aculv_fd_1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ucr_01_aculv_fd_1_ams_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_aculv_fd_1_ams_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_aculv_fd_1_ams_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ucr_01_aculv_fd_1_fld_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_aculv_fd_1_fld_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_aculv_fd_1_fld_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_aculv_fd_1_state_of_charge_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_aculv_fd_1_state_of_charge_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_aculv_fd_1_state_of_charge_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_aculv_fd_1_accumulator_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_aculv_fd_1_accumulator_voltage_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_aculv_fd_1_accumulator_voltage_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_aculv_fd_1_tractive_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_aculv_fd_1_tractive_voltage_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_aculv_fd_1_tractive_voltage_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_aculv_fd_1_cell_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_aculv_fd_1_cell_current_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_aculv_fd_1_cell_current_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ucr_01_aculv_fd_1_isolation_monitoring_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_aculv_fd_1_isolation_monitoring_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_aculv_fd_1_isolation_monitoring_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_aculv_fd_1_isolation_monitoring1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_aculv_fd_1_isolation_monitoring1_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_aculv_fd_1_isolation_monitoring1_is_in_range(float value);

/**
 * Pack message ACULV_FD_2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_aculv_fd_2_pack(
    uint8_t *dst_p,
    const struct ucr_01_aculv_fd_2_t *src_p,
    size_t size);

/**
 * Unpack message ACULV_FD_2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_aculv_fd_2_unpack(
    struct ucr_01_aculv_fd_2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ACULV_FD_2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_aculv_fd_2_init(struct ucr_01_aculv_fd_2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_aculv_fd_2_fan_set_point_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_aculv_fd_2_fan_set_point_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_aculv_fd_2_fan_set_point_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_aculv_fd_2_rpm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_aculv_fd_2_rpm_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_aculv_fd_2_rpm_is_in_range(float value);

/**
 * Pack message ACULV1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_aculv1_pack(
    uint8_t *dst_p,
    const struct ucr_01_aculv1_t *src_p,
    size_t size);

/**
 * Unpack message ACULV1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_aculv1_unpack(
    struct ucr_01_aculv1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ACULV1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_aculv1_init(struct ucr_01_aculv1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_aculv1_charge_status1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_aculv1_charge_status1_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_aculv1_charge_status1_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ucr_01_aculv1_charge_status2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_aculv1_charge_status2_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_aculv1_charge_status2_is_in_range(float value);

/**
 * Pack message ACULV2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_aculv2_pack(
    uint8_t *dst_p,
    const struct ucr_01_aculv2_t *src_p,
    size_t size);

/**
 * Unpack message ACULV2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_aculv2_unpack(
    struct ucr_01_aculv2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ACULV2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_aculv2_init(struct ucr_01_aculv2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ucr_01_aculv2_charge_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_aculv2_charge_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_aculv2_charge_request_is_in_range(uint8_t value);

/**
 * Pack message PDM1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ucr_01_pdm1_pack(
    uint8_t *dst_p,
    const struct ucr_01_pdm1_t *src_p,
    size_t size);

/**
 * Unpack message PDM1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ucr_01_pdm1_unpack(
    struct ucr_01_pdm1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PDM1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ucr_01_pdm1_init(struct ucr_01_pdm1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ucr_01_pdm1_compound_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_pdm1_compound_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_pdm1_compound_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ucr_01_pdm1_pdm_int_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_pdm1_pdm_int_temperature_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_pdm1_pdm_int_temperature_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
double ucr_01_pdm1_pdm_batt_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_pdm1_pdm_batt_voltage_decode(double value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_pdm1_pdm_batt_voltage_is_in_range(double value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ucr_01_pdm1_global_error_flag_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_pdm1_global_error_flag_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_pdm1_global_error_flag_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ucr_01_pdm1_total_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_pdm1_total_current_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_pdm1_total_current_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
double ucr_01_pdm1_internal_rail_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_pdm1_internal_rail_voltage_decode(double value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_pdm1_internal_rail_voltage_is_in_range(double value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ucr_01_pdm1_reset_source_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ucr_01_pdm1_reset_source_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ucr_01_pdm1_reset_source_is_in_range(uint8_t value);


#ifdef __cplusplus
}
#endif

#endif
